
stm32f4-disco_usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b354  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  0800b4e4  0800b4e4  0001b4e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b5ec  0800b5ec  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  0800b5ec  0800b5ec  0001b5ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b5f4  0800b5f4  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5f4  0800b5f4  0001b5f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b5f8  0800b5f8  0001b5f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  0800b5fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020164  2**0
                  CONTENTS
 10 .bss          0000aaa4  20000164  20000164  00020164  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000ac08  2000ac08  00020164  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 13 .debug_info   000208f2  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000049b3  00000000  00000000  00040a86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019d0  00000000  00000000  00045440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017e8  00000000  00000000  00046e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006837  00000000  00000000  000485f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e0f6  00000000  00000000  0004ee2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8995  00000000  00000000  0006cf25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001458ba  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006f24  00000000  00000000  0014590c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000164 	.word	0x20000164
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b4cc 	.word	0x0800b4cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000168 	.word	0x20000168
 80001cc:	0800b4cc 	.word	0x0800b4cc

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 f9e4 	bl	80008a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f816 	bl	800050c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 f87e 	bl	80005e0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004e4:	f006 fab8 	bl	8006a58 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004e8:	4a05      	ldr	r2, [pc, #20]	; (8000500 <main+0x2c>)
 80004ea:	2100      	movs	r1, #0
 80004ec:	4805      	ldr	r0, [pc, #20]	; (8000504 <main+0x30>)
 80004ee:	f006 fafd 	bl	8006aec <osThreadNew>
 80004f2:	4603      	mov	r3, r0
 80004f4:	4a04      	ldr	r2, [pc, #16]	; (8000508 <main+0x34>)
 80004f6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80004f8:	f006 fad2 	bl	8006aa0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004fc:	e7fe      	b.n	80004fc <main+0x28>
 80004fe:	bf00      	nop
 8000500:	0800b550 	.word	0x0800b550
 8000504:	08000631 	.word	0x08000631
 8000508:	20000180 	.word	0x20000180

0800050c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b094      	sub	sp, #80	; 0x50
 8000510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000512:	f107 0320 	add.w	r3, r7, #32
 8000516:	2230      	movs	r2, #48	; 0x30
 8000518:	2100      	movs	r1, #0
 800051a:	4618      	mov	r0, r3
 800051c:	f00a ff0c 	bl	800b338 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000520:	f107 030c 	add.w	r3, r7, #12
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	605a      	str	r2, [r3, #4]
 800052a:	609a      	str	r2, [r3, #8]
 800052c:	60da      	str	r2, [r3, #12]
 800052e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000530:	2300      	movs	r3, #0
 8000532:	60bb      	str	r3, [r7, #8]
 8000534:	4b28      	ldr	r3, [pc, #160]	; (80005d8 <SystemClock_Config+0xcc>)
 8000536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000538:	4a27      	ldr	r2, [pc, #156]	; (80005d8 <SystemClock_Config+0xcc>)
 800053a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053e:	6413      	str	r3, [r2, #64]	; 0x40
 8000540:	4b25      	ldr	r3, [pc, #148]	; (80005d8 <SystemClock_Config+0xcc>)
 8000542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000548:	60bb      	str	r3, [r7, #8]
 800054a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800054c:	2300      	movs	r3, #0
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	4b22      	ldr	r3, [pc, #136]	; (80005dc <SystemClock_Config+0xd0>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a21      	ldr	r2, [pc, #132]	; (80005dc <SystemClock_Config+0xd0>)
 8000556:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800055a:	6013      	str	r3, [r2, #0]
 800055c:	4b1f      	ldr	r3, [pc, #124]	; (80005dc <SystemClock_Config+0xd0>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000568:	2301      	movs	r3, #1
 800056a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800056c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000570:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000572:	2302      	movs	r3, #2
 8000574:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000576:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800057a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800057c:	2304      	movs	r3, #4
 800057e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000580:	23a8      	movs	r3, #168	; 0xa8
 8000582:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000584:	2302      	movs	r3, #2
 8000586:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000588:	2307      	movs	r3, #7
 800058a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058c:	f107 0320 	add.w	r3, r7, #32
 8000590:	4618      	mov	r0, r3
 8000592:	f001 fee9 	bl	8002368 <HAL_RCC_OscConfig>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800059c:	f000 f876 	bl	800068c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a0:	230f      	movs	r3, #15
 80005a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a4:	2302      	movs	r3, #2
 80005a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	2105      	movs	r1, #5
 80005be:	4618      	mov	r0, r3
 80005c0:	f002 f94a 	bl	8002858 <HAL_RCC_ClockConfig>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005ca:	f000 f85f 	bl	800068c <Error_Handler>
  }
}
 80005ce:	bf00      	nop
 80005d0:	3750      	adds	r7, #80	; 0x50
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40023800 	.word	0x40023800
 80005dc:	40007000 	.word	0x40007000

080005e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	4b10      	ldr	r3, [pc, #64]	; (800062c <MX_GPIO_Init+0x4c>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a0f      	ldr	r2, [pc, #60]	; (800062c <MX_GPIO_Init+0x4c>)
 80005f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4b0d      	ldr	r3, [pc, #52]	; (800062c <MX_GPIO_Init+0x4c>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	603b      	str	r3, [r7, #0]
 8000606:	4b09      	ldr	r3, [pc, #36]	; (800062c <MX_GPIO_Init+0x4c>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a08      	ldr	r2, [pc, #32]	; (800062c <MX_GPIO_Init+0x4c>)
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b06      	ldr	r3, [pc, #24]	; (800062c <MX_GPIO_Init+0x4c>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	603b      	str	r3, [r7, #0]
 800061c:	683b      	ldr	r3, [r7, #0]

}
 800061e:	bf00      	nop
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	40023800 	.word	0x40023800

08000630 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b0a4      	sub	sp, #144	; 0x90
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000638:	f00a f8a8 	bl	800a78c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  init_usb_rtos_obj();
 800063c:	f00a f9a6 	bl	800a98c <init_usb_rtos_obj>
  /* Infinite loop */
  for(;;)
  {
	//char data;
	//(void)CDC_Receiveq_HS(&data, portMAX_DELAY);
	qtd = receive_usb_data(data, 128, portMAX_DELAY);
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000648:	2180      	movs	r1, #128	; 0x80
 800064a:	4618      	mov	r0, r3
 800064c:	f00a f9d0 	bl	800a9f0 <receive_usb_data>
 8000650:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	//(void)CDC_Transmit_FS((uint8_t*)&data, 768);
	(void)queue_print_usb(data, qtd, portMAX_DELAY);
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800065c:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8000660:	4618      	mov	r0, r3
 8000662:	f00a f9d9 	bl	800aa18 <queue_print_usb>
  {
 8000666:	e7eb      	b.n	8000640 <StartDefaultTask+0x10>

08000668 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a04      	ldr	r2, [pc, #16]	; (8000688 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d101      	bne.n	800067e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800067a:	f000 f935 	bl	80008e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40010000 	.word	0x40010000

0800068c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000690:	b672      	cpsid	i
}
 8000692:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000694:	e7fe      	b.n	8000694 <Error_Handler+0x8>
	...

08000698 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	4b12      	ldr	r3, [pc, #72]	; (80006ec <HAL_MspInit+0x54>)
 80006a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006a6:	4a11      	ldr	r2, [pc, #68]	; (80006ec <HAL_MspInit+0x54>)
 80006a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ac:	6453      	str	r3, [r2, #68]	; 0x44
 80006ae:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <HAL_MspInit+0x54>)
 80006b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	603b      	str	r3, [r7, #0]
 80006be:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <HAL_MspInit+0x54>)
 80006c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c2:	4a0a      	ldr	r2, [pc, #40]	; (80006ec <HAL_MspInit+0x54>)
 80006c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c8:	6413      	str	r3, [r2, #64]	; 0x40
 80006ca:	4b08      	ldr	r3, [pc, #32]	; (80006ec <HAL_MspInit+0x54>)
 80006cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80006d6:	2200      	movs	r2, #0
 80006d8:	210f      	movs	r1, #15
 80006da:	f06f 0001 	mvn.w	r0, #1
 80006de:	f000 f9ff 	bl	8000ae0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006e2:	bf00      	nop
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800

080006f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08c      	sub	sp, #48	; 0x30
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80006f8:	2300      	movs	r3, #0
 80006fa:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80006fc:	2300      	movs	r3, #0
 80006fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000700:	2300      	movs	r3, #0
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	4b2f      	ldr	r3, [pc, #188]	; (80007c4 <HAL_InitTick+0xd4>)
 8000706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000708:	4a2e      	ldr	r2, [pc, #184]	; (80007c4 <HAL_InitTick+0xd4>)
 800070a:	f043 0301 	orr.w	r3, r3, #1
 800070e:	6453      	str	r3, [r2, #68]	; 0x44
 8000710:	4b2c      	ldr	r3, [pc, #176]	; (80007c4 <HAL_InitTick+0xd4>)
 8000712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000714:	f003 0301 	and.w	r3, r3, #1
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800071c:	f107 020c 	add.w	r2, r7, #12
 8000720:	f107 0310 	add.w	r3, r7, #16
 8000724:	4611      	mov	r1, r2
 8000726:	4618      	mov	r0, r3
 8000728:	f002 faa2 	bl	8002c70 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800072c:	f002 fa8c 	bl	8002c48 <HAL_RCC_GetPCLK2Freq>
 8000730:	4603      	mov	r3, r0
 8000732:	005b      	lsls	r3, r3, #1
 8000734:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000738:	4a23      	ldr	r2, [pc, #140]	; (80007c8 <HAL_InitTick+0xd8>)
 800073a:	fba2 2303 	umull	r2, r3, r2, r3
 800073e:	0c9b      	lsrs	r3, r3, #18
 8000740:	3b01      	subs	r3, #1
 8000742:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000744:	4b21      	ldr	r3, [pc, #132]	; (80007cc <HAL_InitTick+0xdc>)
 8000746:	4a22      	ldr	r2, [pc, #136]	; (80007d0 <HAL_InitTick+0xe0>)
 8000748:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800074a:	4b20      	ldr	r3, [pc, #128]	; (80007cc <HAL_InitTick+0xdc>)
 800074c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000750:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000752:	4a1e      	ldr	r2, [pc, #120]	; (80007cc <HAL_InitTick+0xdc>)
 8000754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000756:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000758:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <HAL_InitTick+0xdc>)
 800075a:	2200      	movs	r2, #0
 800075c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800075e:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <HAL_InitTick+0xdc>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000764:	4b19      	ldr	r3, [pc, #100]	; (80007cc <HAL_InitTick+0xdc>)
 8000766:	2200      	movs	r2, #0
 8000768:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800076a:	4818      	ldr	r0, [pc, #96]	; (80007cc <HAL_InitTick+0xdc>)
 800076c:	f002 fab2 	bl	8002cd4 <HAL_TIM_Base_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000776:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800077a:	2b00      	cmp	r3, #0
 800077c:	d11b      	bne.n	80007b6 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800077e:	4813      	ldr	r0, [pc, #76]	; (80007cc <HAL_InitTick+0xdc>)
 8000780:	f002 fb02 	bl	8002d88 <HAL_TIM_Base_Start_IT>
 8000784:	4603      	mov	r3, r0
 8000786:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800078a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800078e:	2b00      	cmp	r3, #0
 8000790:	d111      	bne.n	80007b6 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000792:	2019      	movs	r0, #25
 8000794:	f000 f9c0 	bl	8000b18 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2b0f      	cmp	r3, #15
 800079c:	d808      	bhi.n	80007b0 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800079e:	2200      	movs	r2, #0
 80007a0:	6879      	ldr	r1, [r7, #4]
 80007a2:	2019      	movs	r0, #25
 80007a4:	f000 f99c 	bl	8000ae0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007a8:	4a0a      	ldr	r2, [pc, #40]	; (80007d4 <HAL_InitTick+0xe4>)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	6013      	str	r3, [r2, #0]
 80007ae:	e002      	b.n	80007b6 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80007b0:	2301      	movs	r3, #1
 80007b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80007b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3730      	adds	r7, #48	; 0x30
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40023800 	.word	0x40023800
 80007c8:	431bde83 	.word	0x431bde83
 80007cc:	20000184 	.word	0x20000184
 80007d0:	40010000 	.word	0x40010000
 80007d4:	20000004 	.word	0x20000004

080007d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007dc:	e7fe      	b.n	80007dc <NMI_Handler+0x4>

080007de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007e2:	e7fe      	b.n	80007e2 <HardFault_Handler+0x4>

080007e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007e8:	e7fe      	b.n	80007e8 <MemManage_Handler+0x4>

080007ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ea:	b480      	push	{r7}
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ee:	e7fe      	b.n	80007ee <BusFault_Handler+0x4>

080007f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007f4:	e7fe      	b.n	80007f4 <UsageFault_Handler+0x4>

080007f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000808:	4802      	ldr	r0, [pc, #8]	; (8000814 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800080a:	f002 fb2d 	bl	8002e68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20000184 	.word	0x20000184

08000818 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800081c:	4802      	ldr	r0, [pc, #8]	; (8000828 <OTG_FS_IRQHandler+0x10>)
 800081e:	f000 fc75 	bl	800110c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	2000a4d4 	.word	0x2000a4d4

0800082c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <SystemInit+0x20>)
 8000832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000836:	4a05      	ldr	r2, [pc, #20]	; (800084c <SystemInit+0x20>)
 8000838:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800083c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	e000ed00 	.word	0xe000ed00

08000850 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000850:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000888 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000854:	480d      	ldr	r0, [pc, #52]	; (800088c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000856:	490e      	ldr	r1, [pc, #56]	; (8000890 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000858:	4a0e      	ldr	r2, [pc, #56]	; (8000894 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800085a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800085c:	e002      	b.n	8000864 <LoopCopyDataInit>

0800085e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800085e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000860:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000862:	3304      	adds	r3, #4

08000864 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000864:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000866:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000868:	d3f9      	bcc.n	800085e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800086a:	4a0b      	ldr	r2, [pc, #44]	; (8000898 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800086c:	4c0b      	ldr	r4, [pc, #44]	; (800089c <LoopFillZerobss+0x26>)
  movs r3, #0
 800086e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000870:	e001      	b.n	8000876 <LoopFillZerobss>

08000872 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000872:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000874:	3204      	adds	r2, #4

08000876 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000876:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000878:	d3fb      	bcc.n	8000872 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800087a:	f7ff ffd7 	bl	800082c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800087e:	f00a fd27 	bl	800b2d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000882:	f7ff fe27 	bl	80004d4 <main>
  bx  lr    
 8000886:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000888:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800088c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000890:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8000894:	0800b5fc 	.word	0x0800b5fc
  ldr r2, =_sbss
 8000898:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 800089c:	2000ac08 	.word	0x2000ac08

080008a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008a0:	e7fe      	b.n	80008a0 <ADC_IRQHandler>
	...

080008a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008a8:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <HAL_Init+0x40>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a0d      	ldr	r2, [pc, #52]	; (80008e4 <HAL_Init+0x40>)
 80008ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008b4:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <HAL_Init+0x40>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a0a      	ldr	r2, [pc, #40]	; (80008e4 <HAL_Init+0x40>)
 80008ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008c0:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <HAL_Init+0x40>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a07      	ldr	r2, [pc, #28]	; (80008e4 <HAL_Init+0x40>)
 80008c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008cc:	2003      	movs	r0, #3
 80008ce:	f000 f8fc 	bl	8000aca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008d2:	200f      	movs	r0, #15
 80008d4:	f7ff ff0c 	bl	80006f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008d8:	f7ff fede 	bl	8000698 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008dc:	2300      	movs	r3, #0
}
 80008de:	4618      	mov	r0, r3
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40023c00 	.word	0x40023c00

080008e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <HAL_IncTick+0x20>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	461a      	mov	r2, r3
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <HAL_IncTick+0x24>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4413      	add	r3, r2
 80008f8:	4a04      	ldr	r2, [pc, #16]	; (800090c <HAL_IncTick+0x24>)
 80008fa:	6013      	str	r3, [r2, #0]
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	20000008 	.word	0x20000008
 800090c:	200001cc 	.word	0x200001cc

08000910 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  return uwTick;
 8000914:	4b03      	ldr	r3, [pc, #12]	; (8000924 <HAL_GetTick+0x14>)
 8000916:	681b      	ldr	r3, [r3, #0]
}
 8000918:	4618      	mov	r0, r3
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	200001cc 	.word	0x200001cc

08000928 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000930:	f7ff ffee 	bl	8000910 <HAL_GetTick>
 8000934:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000940:	d005      	beq.n	800094e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000942:	4b0a      	ldr	r3, [pc, #40]	; (800096c <HAL_Delay+0x44>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	461a      	mov	r2, r3
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	4413      	add	r3, r2
 800094c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800094e:	bf00      	nop
 8000950:	f7ff ffde 	bl	8000910 <HAL_GetTick>
 8000954:	4602      	mov	r2, r0
 8000956:	68bb      	ldr	r3, [r7, #8]
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	68fa      	ldr	r2, [r7, #12]
 800095c:	429a      	cmp	r2, r3
 800095e:	d8f7      	bhi.n	8000950 <HAL_Delay+0x28>
  {
  }
}
 8000960:	bf00      	nop
 8000962:	bf00      	nop
 8000964:	3710      	adds	r7, #16
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000008 	.word	0x20000008

08000970 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000970:	b480      	push	{r7}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	f003 0307 	and.w	r3, r3, #7
 800097e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000980:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <__NVIC_SetPriorityGrouping+0x44>)
 8000982:	68db      	ldr	r3, [r3, #12]
 8000984:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000986:	68ba      	ldr	r2, [r7, #8]
 8000988:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800098c:	4013      	ands	r3, r2
 800098e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000998:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800099c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009a2:	4a04      	ldr	r2, [pc, #16]	; (80009b4 <__NVIC_SetPriorityGrouping+0x44>)
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	60d3      	str	r3, [r2, #12]
}
 80009a8:	bf00      	nop
 80009aa:	3714      	adds	r7, #20
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009bc:	4b04      	ldr	r3, [pc, #16]	; (80009d0 <__NVIC_GetPriorityGrouping+0x18>)
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	0a1b      	lsrs	r3, r3, #8
 80009c2:	f003 0307 	and.w	r3, r3, #7
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	e000ed00 	.word	0xe000ed00

080009d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	db0b      	blt.n	80009fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	f003 021f 	and.w	r2, r3, #31
 80009ec:	4907      	ldr	r1, [pc, #28]	; (8000a0c <__NVIC_EnableIRQ+0x38>)
 80009ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f2:	095b      	lsrs	r3, r3, #5
 80009f4:	2001      	movs	r0, #1
 80009f6:	fa00 f202 	lsl.w	r2, r0, r2
 80009fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009fe:	bf00      	nop
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	e000e100 	.word	0xe000e100

08000a10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	6039      	str	r1, [r7, #0]
 8000a1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	db0a      	blt.n	8000a3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	490c      	ldr	r1, [pc, #48]	; (8000a5c <__NVIC_SetPriority+0x4c>)
 8000a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2e:	0112      	lsls	r2, r2, #4
 8000a30:	b2d2      	uxtb	r2, r2
 8000a32:	440b      	add	r3, r1
 8000a34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a38:	e00a      	b.n	8000a50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	b2da      	uxtb	r2, r3
 8000a3e:	4908      	ldr	r1, [pc, #32]	; (8000a60 <__NVIC_SetPriority+0x50>)
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	f003 030f 	and.w	r3, r3, #15
 8000a46:	3b04      	subs	r3, #4
 8000a48:	0112      	lsls	r2, r2, #4
 8000a4a:	b2d2      	uxtb	r2, r2
 8000a4c:	440b      	add	r3, r1
 8000a4e:	761a      	strb	r2, [r3, #24]
}
 8000a50:	bf00      	nop
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	e000e100 	.word	0xe000e100
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b089      	sub	sp, #36	; 0x24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	60b9      	str	r1, [r7, #8]
 8000a6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	f003 0307 	and.w	r3, r3, #7
 8000a76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a78:	69fb      	ldr	r3, [r7, #28]
 8000a7a:	f1c3 0307 	rsb	r3, r3, #7
 8000a7e:	2b04      	cmp	r3, #4
 8000a80:	bf28      	it	cs
 8000a82:	2304      	movcs	r3, #4
 8000a84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	3304      	adds	r3, #4
 8000a8a:	2b06      	cmp	r3, #6
 8000a8c:	d902      	bls.n	8000a94 <NVIC_EncodePriority+0x30>
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	3b03      	subs	r3, #3
 8000a92:	e000      	b.n	8000a96 <NVIC_EncodePriority+0x32>
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa2:	43da      	mvns	r2, r3
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	401a      	ands	r2, r3
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab6:	43d9      	mvns	r1, r3
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000abc:	4313      	orrs	r3, r2
         );
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3724      	adds	r7, #36	; 0x24
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr

08000aca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	b082      	sub	sp, #8
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f7ff ff4c 	bl	8000970 <__NVIC_SetPriorityGrouping>
}
 8000ad8:	bf00      	nop
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	60b9      	str	r1, [r7, #8]
 8000aea:	607a      	str	r2, [r7, #4]
 8000aec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000aee:	2300      	movs	r3, #0
 8000af0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000af2:	f7ff ff61 	bl	80009b8 <__NVIC_GetPriorityGrouping>
 8000af6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000af8:	687a      	ldr	r2, [r7, #4]
 8000afa:	68b9      	ldr	r1, [r7, #8]
 8000afc:	6978      	ldr	r0, [r7, #20]
 8000afe:	f7ff ffb1 	bl	8000a64 <NVIC_EncodePriority>
 8000b02:	4602      	mov	r2, r0
 8000b04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b08:	4611      	mov	r1, r2
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff ff80 	bl	8000a10 <__NVIC_SetPriority>
}
 8000b10:	bf00      	nop
 8000b12:	3718      	adds	r7, #24
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff ff54 	bl	80009d4 <__NVIC_EnableIRQ>
}
 8000b2c:	bf00      	nop
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b089      	sub	sp, #36	; 0x24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b46:	2300      	movs	r3, #0
 8000b48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61fb      	str	r3, [r7, #28]
 8000b4e:	e16b      	b.n	8000e28 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b50:	2201      	movs	r2, #1
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	fa02 f303 	lsl.w	r3, r2, r3
 8000b58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	697a      	ldr	r2, [r7, #20]
 8000b60:	4013      	ands	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b64:	693a      	ldr	r2, [r7, #16]
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	f040 815a 	bne.w	8000e22 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	f003 0303 	and.w	r3, r3, #3
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d005      	beq.n	8000b86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b82:	2b02      	cmp	r3, #2
 8000b84:	d130      	bne.n	8000be8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	689b      	ldr	r3, [r3, #8]
 8000b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	2203      	movs	r2, #3
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	43db      	mvns	r3, r3
 8000b98:	69ba      	ldr	r2, [r7, #24]
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	68da      	ldr	r2, [r3, #12]
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	69ba      	ldr	r2, [r7, #24]
 8000bac:	4313      	orrs	r3, r2
 8000bae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	69ba      	ldr	r2, [r7, #24]
 8000bb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc4:	43db      	mvns	r3, r3
 8000bc6:	69ba      	ldr	r2, [r7, #24]
 8000bc8:	4013      	ands	r3, r2
 8000bca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	091b      	lsrs	r3, r3, #4
 8000bd2:	f003 0201 	and.w	r2, r3, #1
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bdc:	69ba      	ldr	r2, [r7, #24]
 8000bde:	4313      	orrs	r3, r2
 8000be0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	69ba      	ldr	r2, [r7, #24]
 8000be6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	f003 0303 	and.w	r3, r3, #3
 8000bf0:	2b03      	cmp	r3, #3
 8000bf2:	d017      	beq.n	8000c24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	2203      	movs	r2, #3
 8000c00:	fa02 f303 	lsl.w	r3, r2, r3
 8000c04:	43db      	mvns	r3, r3
 8000c06:	69ba      	ldr	r2, [r7, #24]
 8000c08:	4013      	ands	r3, r2
 8000c0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	689a      	ldr	r2, [r3, #8]
 8000c10:	69fb      	ldr	r3, [r7, #28]
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	69ba      	ldr	r2, [r7, #24]
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	69ba      	ldr	r2, [r7, #24]
 8000c22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	f003 0303 	and.w	r3, r3, #3
 8000c2c:	2b02      	cmp	r3, #2
 8000c2e:	d123      	bne.n	8000c78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c30:	69fb      	ldr	r3, [r7, #28]
 8000c32:	08da      	lsrs	r2, r3, #3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	3208      	adds	r2, #8
 8000c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	f003 0307 	and.w	r3, r3, #7
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	220f      	movs	r2, #15
 8000c48:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4c:	43db      	mvns	r3, r3
 8000c4e:	69ba      	ldr	r2, [r7, #24]
 8000c50:	4013      	ands	r3, r2
 8000c52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	691a      	ldr	r2, [r3, #16]
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	69ba      	ldr	r2, [r7, #24]
 8000c66:	4313      	orrs	r3, r2
 8000c68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	08da      	lsrs	r2, r3, #3
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	3208      	adds	r2, #8
 8000c72:	69b9      	ldr	r1, [r7, #24]
 8000c74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	2203      	movs	r2, #3
 8000c84:	fa02 f303 	lsl.w	r3, r2, r3
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	69ba      	ldr	r2, [r7, #24]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f003 0203 	and.w	r2, r3, #3
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca0:	69ba      	ldr	r2, [r7, #24]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	69ba      	ldr	r2, [r7, #24]
 8000caa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	f000 80b4 	beq.w	8000e22 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	4b60      	ldr	r3, [pc, #384]	; (8000e40 <HAL_GPIO_Init+0x30c>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc2:	4a5f      	ldr	r2, [pc, #380]	; (8000e40 <HAL_GPIO_Init+0x30c>)
 8000cc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cca:	4b5d      	ldr	r3, [pc, #372]	; (8000e40 <HAL_GPIO_Init+0x30c>)
 8000ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cd6:	4a5b      	ldr	r2, [pc, #364]	; (8000e44 <HAL_GPIO_Init+0x310>)
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	089b      	lsrs	r3, r3, #2
 8000cdc:	3302      	adds	r3, #2
 8000cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	f003 0303 	and.w	r3, r3, #3
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	220f      	movs	r2, #15
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	43db      	mvns	r3, r3
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4a52      	ldr	r2, [pc, #328]	; (8000e48 <HAL_GPIO_Init+0x314>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d02b      	beq.n	8000d5a <HAL_GPIO_Init+0x226>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a51      	ldr	r2, [pc, #324]	; (8000e4c <HAL_GPIO_Init+0x318>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d025      	beq.n	8000d56 <HAL_GPIO_Init+0x222>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4a50      	ldr	r2, [pc, #320]	; (8000e50 <HAL_GPIO_Init+0x31c>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d01f      	beq.n	8000d52 <HAL_GPIO_Init+0x21e>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a4f      	ldr	r2, [pc, #316]	; (8000e54 <HAL_GPIO_Init+0x320>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d019      	beq.n	8000d4e <HAL_GPIO_Init+0x21a>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a4e      	ldr	r2, [pc, #312]	; (8000e58 <HAL_GPIO_Init+0x324>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d013      	beq.n	8000d4a <HAL_GPIO_Init+0x216>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a4d      	ldr	r2, [pc, #308]	; (8000e5c <HAL_GPIO_Init+0x328>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d00d      	beq.n	8000d46 <HAL_GPIO_Init+0x212>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4a4c      	ldr	r2, [pc, #304]	; (8000e60 <HAL_GPIO_Init+0x32c>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d007      	beq.n	8000d42 <HAL_GPIO_Init+0x20e>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4a4b      	ldr	r2, [pc, #300]	; (8000e64 <HAL_GPIO_Init+0x330>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d101      	bne.n	8000d3e <HAL_GPIO_Init+0x20a>
 8000d3a:	2307      	movs	r3, #7
 8000d3c:	e00e      	b.n	8000d5c <HAL_GPIO_Init+0x228>
 8000d3e:	2308      	movs	r3, #8
 8000d40:	e00c      	b.n	8000d5c <HAL_GPIO_Init+0x228>
 8000d42:	2306      	movs	r3, #6
 8000d44:	e00a      	b.n	8000d5c <HAL_GPIO_Init+0x228>
 8000d46:	2305      	movs	r3, #5
 8000d48:	e008      	b.n	8000d5c <HAL_GPIO_Init+0x228>
 8000d4a:	2304      	movs	r3, #4
 8000d4c:	e006      	b.n	8000d5c <HAL_GPIO_Init+0x228>
 8000d4e:	2303      	movs	r3, #3
 8000d50:	e004      	b.n	8000d5c <HAL_GPIO_Init+0x228>
 8000d52:	2302      	movs	r3, #2
 8000d54:	e002      	b.n	8000d5c <HAL_GPIO_Init+0x228>
 8000d56:	2301      	movs	r3, #1
 8000d58:	e000      	b.n	8000d5c <HAL_GPIO_Init+0x228>
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	69fa      	ldr	r2, [r7, #28]
 8000d5e:	f002 0203 	and.w	r2, r2, #3
 8000d62:	0092      	lsls	r2, r2, #2
 8000d64:	4093      	lsls	r3, r2
 8000d66:	69ba      	ldr	r2, [r7, #24]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d6c:	4935      	ldr	r1, [pc, #212]	; (8000e44 <HAL_GPIO_Init+0x310>)
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	089b      	lsrs	r3, r3, #2
 8000d72:	3302      	adds	r3, #2
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d7a:	4b3b      	ldr	r3, [pc, #236]	; (8000e68 <HAL_GPIO_Init+0x334>)
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	43db      	mvns	r3, r3
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	4013      	ands	r3, r2
 8000d88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d003      	beq.n	8000d9e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d9e:	4a32      	ldr	r2, [pc, #200]	; (8000e68 <HAL_GPIO_Init+0x334>)
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000da4:	4b30      	ldr	r3, [pc, #192]	; (8000e68 <HAL_GPIO_Init+0x334>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	43db      	mvns	r3, r3
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	4013      	ands	r3, r2
 8000db2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d003      	beq.n	8000dc8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000dc8:	4a27      	ldr	r2, [pc, #156]	; (8000e68 <HAL_GPIO_Init+0x334>)
 8000dca:	69bb      	ldr	r3, [r7, #24]
 8000dcc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000dce:	4b26      	ldr	r3, [pc, #152]	; (8000e68 <HAL_GPIO_Init+0x334>)
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d003      	beq.n	8000df2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000df2:	4a1d      	ldr	r2, [pc, #116]	; (8000e68 <HAL_GPIO_Init+0x334>)
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000df8:	4b1b      	ldr	r3, [pc, #108]	; (8000e68 <HAL_GPIO_Init+0x334>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	43db      	mvns	r3, r3
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4013      	ands	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d003      	beq.n	8000e1c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e1c:	4a12      	ldr	r2, [pc, #72]	; (8000e68 <HAL_GPIO_Init+0x334>)
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	3301      	adds	r3, #1
 8000e26:	61fb      	str	r3, [r7, #28]
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	2b0f      	cmp	r3, #15
 8000e2c:	f67f ae90 	bls.w	8000b50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e30:	bf00      	nop
 8000e32:	bf00      	nop
 8000e34:	3724      	adds	r7, #36	; 0x24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	40023800 	.word	0x40023800
 8000e44:	40013800 	.word	0x40013800
 8000e48:	40020000 	.word	0x40020000
 8000e4c:	40020400 	.word	0x40020400
 8000e50:	40020800 	.word	0x40020800
 8000e54:	40020c00 	.word	0x40020c00
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	40021400 	.word	0x40021400
 8000e60:	40021800 	.word	0x40021800
 8000e64:	40021c00 	.word	0x40021c00
 8000e68:	40013c00 	.word	0x40013c00

08000e6c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e6e:	b08f      	sub	sp, #60	; 0x3c
 8000e70:	af0a      	add	r7, sp, #40	; 0x28
 8000e72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d101      	bne.n	8000e7e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e10f      	b.n	800109e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d106      	bne.n	8000e9e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2200      	movs	r2, #0
 8000e94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f009 fef7 	bl	800ac8c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d102      	bne.n	8000eb8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f002 facc 	bl	800345a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	603b      	str	r3, [r7, #0]
 8000ec8:	687e      	ldr	r6, [r7, #4]
 8000eca:	466d      	mov	r5, sp
 8000ecc:	f106 0410 	add.w	r4, r6, #16
 8000ed0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ed2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ed4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ed6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ed8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000edc:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ee0:	1d33      	adds	r3, r6, #4
 8000ee2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ee4:	6838      	ldr	r0, [r7, #0]
 8000ee6:	f002 f9a3 	bl	8003230 <USB_CoreInit>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d005      	beq.n	8000efc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2202      	movs	r2, #2
 8000ef4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	e0d0      	b.n	800109e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2100      	movs	r1, #0
 8000f02:	4618      	mov	r0, r3
 8000f04:	f002 faba 	bl	800347c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f08:	2300      	movs	r3, #0
 8000f0a:	73fb      	strb	r3, [r7, #15]
 8000f0c:	e04a      	b.n	8000fa4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f0e:	7bfa      	ldrb	r2, [r7, #15]
 8000f10:	6879      	ldr	r1, [r7, #4]
 8000f12:	4613      	mov	r3, r2
 8000f14:	00db      	lsls	r3, r3, #3
 8000f16:	4413      	add	r3, r2
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	440b      	add	r3, r1
 8000f1c:	333d      	adds	r3, #61	; 0x3d
 8000f1e:	2201      	movs	r2, #1
 8000f20:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f22:	7bfa      	ldrb	r2, [r7, #15]
 8000f24:	6879      	ldr	r1, [r7, #4]
 8000f26:	4613      	mov	r3, r2
 8000f28:	00db      	lsls	r3, r3, #3
 8000f2a:	4413      	add	r3, r2
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	440b      	add	r3, r1
 8000f30:	333c      	adds	r3, #60	; 0x3c
 8000f32:	7bfa      	ldrb	r2, [r7, #15]
 8000f34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000f36:	7bfa      	ldrb	r2, [r7, #15]
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
 8000f3a:	b298      	uxth	r0, r3
 8000f3c:	6879      	ldr	r1, [r7, #4]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	00db      	lsls	r3, r3, #3
 8000f42:	4413      	add	r3, r2
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	440b      	add	r3, r1
 8000f48:	3344      	adds	r3, #68	; 0x44
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f4e:	7bfa      	ldrb	r2, [r7, #15]
 8000f50:	6879      	ldr	r1, [r7, #4]
 8000f52:	4613      	mov	r3, r2
 8000f54:	00db      	lsls	r3, r3, #3
 8000f56:	4413      	add	r3, r2
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	440b      	add	r3, r1
 8000f5c:	3340      	adds	r3, #64	; 0x40
 8000f5e:	2200      	movs	r2, #0
 8000f60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f62:	7bfa      	ldrb	r2, [r7, #15]
 8000f64:	6879      	ldr	r1, [r7, #4]
 8000f66:	4613      	mov	r3, r2
 8000f68:	00db      	lsls	r3, r3, #3
 8000f6a:	4413      	add	r3, r2
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	440b      	add	r3, r1
 8000f70:	3348      	adds	r3, #72	; 0x48
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f76:	7bfa      	ldrb	r2, [r7, #15]
 8000f78:	6879      	ldr	r1, [r7, #4]
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	00db      	lsls	r3, r3, #3
 8000f7e:	4413      	add	r3, r2
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	440b      	add	r3, r1
 8000f84:	334c      	adds	r3, #76	; 0x4c
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f8a:	7bfa      	ldrb	r2, [r7, #15]
 8000f8c:	6879      	ldr	r1, [r7, #4]
 8000f8e:	4613      	mov	r3, r2
 8000f90:	00db      	lsls	r3, r3, #3
 8000f92:	4413      	add	r3, r2
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	440b      	add	r3, r1
 8000f98:	3354      	adds	r3, #84	; 0x54
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f9e:	7bfb      	ldrb	r3, [r7, #15]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	73fb      	strb	r3, [r7, #15]
 8000fa4:	7bfa      	ldrb	r2, [r7, #15]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	429a      	cmp	r2, r3
 8000fac:	d3af      	bcc.n	8000f0e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fae:	2300      	movs	r3, #0
 8000fb0:	73fb      	strb	r3, [r7, #15]
 8000fb2:	e044      	b.n	800103e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000fb4:	7bfa      	ldrb	r2, [r7, #15]
 8000fb6:	6879      	ldr	r1, [r7, #4]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	00db      	lsls	r3, r3, #3
 8000fbc:	4413      	add	r3, r2
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	440b      	add	r3, r1
 8000fc2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000fca:	7bfa      	ldrb	r2, [r7, #15]
 8000fcc:	6879      	ldr	r1, [r7, #4]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	4413      	add	r3, r2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	440b      	add	r3, r1
 8000fd8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8000fdc:	7bfa      	ldrb	r2, [r7, #15]
 8000fde:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000fe0:	7bfa      	ldrb	r2, [r7, #15]
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	00db      	lsls	r3, r3, #3
 8000fe8:	4413      	add	r3, r2
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	440b      	add	r3, r1
 8000fee:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000ff6:	7bfa      	ldrb	r2, [r7, #15]
 8000ff8:	6879      	ldr	r1, [r7, #4]
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	00db      	lsls	r3, r3, #3
 8000ffe:	4413      	add	r3, r2
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	440b      	add	r3, r1
 8001004:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800100c:	7bfa      	ldrb	r2, [r7, #15]
 800100e:	6879      	ldr	r1, [r7, #4]
 8001010:	4613      	mov	r3, r2
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	4413      	add	r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	440b      	add	r3, r1
 800101a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001022:	7bfa      	ldrb	r2, [r7, #15]
 8001024:	6879      	ldr	r1, [r7, #4]
 8001026:	4613      	mov	r3, r2
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	4413      	add	r3, r2
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	440b      	add	r3, r1
 8001030:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001038:	7bfb      	ldrb	r3, [r7, #15]
 800103a:	3301      	adds	r3, #1
 800103c:	73fb      	strb	r3, [r7, #15]
 800103e:	7bfa      	ldrb	r2, [r7, #15]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	429a      	cmp	r2, r3
 8001046:	d3b5      	bcc.n	8000fb4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	603b      	str	r3, [r7, #0]
 800104e:	687e      	ldr	r6, [r7, #4]
 8001050:	466d      	mov	r5, sp
 8001052:	f106 0410 	add.w	r4, r6, #16
 8001056:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001058:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800105a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800105c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800105e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001062:	e885 0003 	stmia.w	r5, {r0, r1}
 8001066:	1d33      	adds	r3, r6, #4
 8001068:	cb0e      	ldmia	r3, {r1, r2, r3}
 800106a:	6838      	ldr	r0, [r7, #0]
 800106c:	f002 fa52 	bl	8003514 <USB_DevInit>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d005      	beq.n	8001082 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2202      	movs	r2, #2
 800107a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e00d      	b.n	800109e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2200      	movs	r2, #0
 8001086:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2201      	movs	r2, #1
 800108e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4618      	mov	r0, r3
 8001098:	f003 fba1 	bl	80047de <USB_DevDisconnect>

  return HAL_OK;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3714      	adds	r7, #20
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080010a6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b084      	sub	sp, #16
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d101      	bne.n	80010c2 <HAL_PCD_Start+0x1c>
 80010be:	2302      	movs	r3, #2
 80010c0:	e020      	b.n	8001104 <HAL_PCD_Start+0x5e>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2201      	movs	r2, #1
 80010c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d109      	bne.n	80010e6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d005      	beq.n	80010e6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f002 f9a4 	bl	8003438 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f003 fb51 	bl	800479c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001102:	2300      	movs	r3, #0
}
 8001104:	4618      	mov	r0, r3
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800110c:	b590      	push	{r4, r7, lr}
 800110e:	b08d      	sub	sp, #52	; 0x34
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800111a:	6a3b      	ldr	r3, [r7, #32]
 800111c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4618      	mov	r0, r3
 8001124:	f003 fc0f 	bl	8004946 <USB_GetMode>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	f040 848a 	bne.w	8001a44 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4618      	mov	r0, r3
 8001136:	f003 fb73 	bl	8004820 <USB_ReadInterrupts>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	f000 8480 	beq.w	8001a42 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	0a1b      	lsrs	r3, r3, #8
 800114c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4618      	mov	r0, r3
 800115c:	f003 fb60 	bl	8004820 <USB_ReadInterrupts>
 8001160:	4603      	mov	r3, r0
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	2b02      	cmp	r3, #2
 8001168:	d107      	bne.n	800117a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	695a      	ldr	r2, [r3, #20]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f002 0202 	and.w	r2, r2, #2
 8001178:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4618      	mov	r0, r3
 8001180:	f003 fb4e 	bl	8004820 <USB_ReadInterrupts>
 8001184:	4603      	mov	r3, r0
 8001186:	f003 0310 	and.w	r3, r3, #16
 800118a:	2b10      	cmp	r3, #16
 800118c:	d161      	bne.n	8001252 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	699a      	ldr	r2, [r3, #24]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f022 0210 	bic.w	r2, r2, #16
 800119c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800119e:	6a3b      	ldr	r3, [r7, #32]
 80011a0:	6a1b      	ldr	r3, [r3, #32]
 80011a2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	f003 020f 	and.w	r2, r3, #15
 80011aa:	4613      	mov	r3, r2
 80011ac:	00db      	lsls	r3, r3, #3
 80011ae:	4413      	add	r3, r2
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	4413      	add	r3, r2
 80011ba:	3304      	adds	r3, #4
 80011bc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	0c5b      	lsrs	r3, r3, #17
 80011c2:	f003 030f 	and.w	r3, r3, #15
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d124      	bne.n	8001214 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80011d0:	4013      	ands	r3, r2
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d035      	beq.n	8001242 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	091b      	lsrs	r3, r3, #4
 80011de:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80011e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	461a      	mov	r2, r3
 80011e8:	6a38      	ldr	r0, [r7, #32]
 80011ea:	f003 f985 	bl	80044f8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	691a      	ldr	r2, [r3, #16]
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	091b      	lsrs	r3, r3, #4
 80011f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011fa:	441a      	add	r2, r3
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	6a1a      	ldr	r2, [r3, #32]
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	091b      	lsrs	r3, r3, #4
 8001208:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800120c:	441a      	add	r2, r3
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	621a      	str	r2, [r3, #32]
 8001212:	e016      	b.n	8001242 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	0c5b      	lsrs	r3, r3, #17
 8001218:	f003 030f 	and.w	r3, r3, #15
 800121c:	2b06      	cmp	r3, #6
 800121e:	d110      	bne.n	8001242 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001226:	2208      	movs	r2, #8
 8001228:	4619      	mov	r1, r3
 800122a:	6a38      	ldr	r0, [r7, #32]
 800122c:	f003 f964 	bl	80044f8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	6a1a      	ldr	r2, [r3, #32]
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	091b      	lsrs	r3, r3, #4
 8001238:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800123c:	441a      	add	r2, r3
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	699a      	ldr	r2, [r3, #24]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f042 0210 	orr.w	r2, r2, #16
 8001250:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f003 fae2 	bl	8004820 <USB_ReadInterrupts>
 800125c:	4603      	mov	r3, r0
 800125e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001262:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001266:	f040 80a7 	bne.w	80013b8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800126a:	2300      	movs	r3, #0
 800126c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4618      	mov	r0, r3
 8001274:	f003 fae7 	bl	8004846 <USB_ReadDevAllOutEpInterrupt>
 8001278:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800127a:	e099      	b.n	80013b0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800127c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	2b00      	cmp	r3, #0
 8001284:	f000 808e 	beq.w	80013a4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800128e:	b2d2      	uxtb	r2, r2
 8001290:	4611      	mov	r1, r2
 8001292:	4618      	mov	r0, r3
 8001294:	f003 fb0b 	bl	80048ae <USB_ReadDevOutEPInterrupt>
 8001298:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	f003 0301 	and.w	r3, r3, #1
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d00c      	beq.n	80012be <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80012a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a6:	015a      	lsls	r2, r3, #5
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	4413      	add	r3, r2
 80012ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012b0:	461a      	mov	r2, r3
 80012b2:	2301      	movs	r3, #1
 80012b4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80012b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f000 fec3 	bl	8002044 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	f003 0308 	and.w	r3, r3, #8
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d00c      	beq.n	80012e2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80012c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ca:	015a      	lsls	r2, r3, #5
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	4413      	add	r3, r2
 80012d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012d4:	461a      	mov	r2, r3
 80012d6:	2308      	movs	r3, #8
 80012d8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80012da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f000 ff99 	bl	8002214 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	f003 0310 	and.w	r3, r3, #16
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d008      	beq.n	80012fe <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80012ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ee:	015a      	lsls	r2, r3, #5
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	4413      	add	r3, r2
 80012f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012f8:	461a      	mov	r2, r3
 80012fa:	2310      	movs	r3, #16
 80012fc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	f003 0302 	and.w	r3, r3, #2
 8001304:	2b00      	cmp	r3, #0
 8001306:	d030      	beq.n	800136a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001308:	6a3b      	ldr	r3, [r7, #32]
 800130a:	695b      	ldr	r3, [r3, #20]
 800130c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001310:	2b80      	cmp	r3, #128	; 0x80
 8001312:	d109      	bne.n	8001328 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	69fa      	ldr	r2, [r7, #28]
 800131e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001322:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001326:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800132a:	4613      	mov	r3, r2
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	4413      	add	r3, r2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	4413      	add	r3, r2
 800133a:	3304      	adds	r3, #4
 800133c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	78db      	ldrb	r3, [r3, #3]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d108      	bne.n	8001358 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	2200      	movs	r2, #0
 800134a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800134c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134e:	b2db      	uxtb	r3, r3
 8001350:	4619      	mov	r1, r3
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f009 fdae 	bl	800aeb4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135a:	015a      	lsls	r2, r3, #5
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	4413      	add	r3, r2
 8001360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001364:	461a      	mov	r2, r3
 8001366:	2302      	movs	r3, #2
 8001368:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	f003 0320 	and.w	r3, r3, #32
 8001370:	2b00      	cmp	r3, #0
 8001372:	d008      	beq.n	8001386 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001376:	015a      	lsls	r2, r3, #5
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	4413      	add	r3, r2
 800137c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001380:	461a      	mov	r2, r3
 8001382:	2320      	movs	r3, #32
 8001384:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d009      	beq.n	80013a4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001392:	015a      	lsls	r2, r3, #5
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	4413      	add	r3, r2
 8001398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800139c:	461a      	mov	r2, r3
 800139e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013a2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80013a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a6:	3301      	adds	r3, #1
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80013aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ac:	085b      	lsrs	r3, r3, #1
 80013ae:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80013b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	f47f af62 	bne.w	800127c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4618      	mov	r0, r3
 80013be:	f003 fa2f 	bl	8004820 <USB_ReadInterrupts>
 80013c2:	4603      	mov	r3, r0
 80013c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80013cc:	f040 80db 	bne.w	8001586 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f003 fa50 	bl	800487a <USB_ReadDevAllInEpInterrupt>
 80013da:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80013dc:	2300      	movs	r3, #0
 80013de:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80013e0:	e0cd      	b.n	800157e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80013e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	f000 80c2 	beq.w	8001572 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013f4:	b2d2      	uxtb	r2, r2
 80013f6:	4611      	mov	r1, r2
 80013f8:	4618      	mov	r0, r3
 80013fa:	f003 fa76 	bl	80048ea <USB_ReadDevInEPInterrupt>
 80013fe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	2b00      	cmp	r3, #0
 8001408:	d057      	beq.n	80014ba <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800140a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140c:	f003 030f 	and.w	r3, r3, #15
 8001410:	2201      	movs	r2, #1
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800141e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	43db      	mvns	r3, r3
 8001424:	69f9      	ldr	r1, [r7, #28]
 8001426:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800142a:	4013      	ands	r3, r2
 800142c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800142e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001430:	015a      	lsls	r2, r3, #5
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	4413      	add	r3, r2
 8001436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800143a:	461a      	mov	r2, r3
 800143c:	2301      	movs	r3, #1
 800143e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	691b      	ldr	r3, [r3, #16]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d132      	bne.n	80014ae <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001448:	6879      	ldr	r1, [r7, #4]
 800144a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800144c:	4613      	mov	r3, r2
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	4413      	add	r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	440b      	add	r3, r1
 8001456:	334c      	adds	r3, #76	; 0x4c
 8001458:	6819      	ldr	r1, [r3, #0]
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800145e:	4613      	mov	r3, r2
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	4413      	add	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4403      	add	r3, r0
 8001468:	3348      	adds	r3, #72	; 0x48
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4419      	add	r1, r3
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001472:	4613      	mov	r3, r2
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	4413      	add	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	4403      	add	r3, r0
 800147c:	334c      	adds	r3, #76	; 0x4c
 800147e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001482:	2b00      	cmp	r3, #0
 8001484:	d113      	bne.n	80014ae <HAL_PCD_IRQHandler+0x3a2>
 8001486:	6879      	ldr	r1, [r7, #4]
 8001488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800148a:	4613      	mov	r3, r2
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	4413      	add	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	440b      	add	r3, r1
 8001494:	3354      	adds	r3, #84	; 0x54
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d108      	bne.n	80014ae <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6818      	ldr	r0, [r3, #0]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80014a6:	461a      	mov	r2, r3
 80014a8:	2101      	movs	r1, #1
 80014aa:	f003 fa7d 	bl	80049a8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80014ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	4619      	mov	r1, r3
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f009 fc78 	bl	800adaa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	f003 0308 	and.w	r3, r3, #8
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d008      	beq.n	80014d6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80014c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c6:	015a      	lsls	r2, r3, #5
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	4413      	add	r3, r2
 80014cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014d0:	461a      	mov	r2, r3
 80014d2:	2308      	movs	r3, #8
 80014d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	f003 0310 	and.w	r3, r3, #16
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d008      	beq.n	80014f2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80014e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e2:	015a      	lsls	r2, r3, #5
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	4413      	add	r3, r2
 80014e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014ec:	461a      	mov	r2, r3
 80014ee:	2310      	movs	r3, #16
 80014f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d008      	beq.n	800150e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80014fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fe:	015a      	lsls	r2, r3, #5
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	4413      	add	r3, r2
 8001504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001508:	461a      	mov	r2, r3
 800150a:	2340      	movs	r3, #64	; 0x40
 800150c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d023      	beq.n	8001560 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001518:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800151a:	6a38      	ldr	r0, [r7, #32]
 800151c:	f002 f95e 	bl	80037dc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001522:	4613      	mov	r3, r2
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	4413      	add	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	3338      	adds	r3, #56	; 0x38
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	4413      	add	r3, r2
 8001530:	3304      	adds	r3, #4
 8001532:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	78db      	ldrb	r3, [r3, #3]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d108      	bne.n	800154e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	2200      	movs	r2, #0
 8001540:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001544:	b2db      	uxtb	r3, r3
 8001546:	4619      	mov	r1, r3
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f009 fcc5 	bl	800aed8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800154e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001550:	015a      	lsls	r2, r3, #5
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	4413      	add	r3, r2
 8001556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800155a:	461a      	mov	r2, r3
 800155c:	2302      	movs	r3, #2
 800155e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001566:	2b00      	cmp	r3, #0
 8001568:	d003      	beq.n	8001572 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800156a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f000 fcdb 	bl	8001f28 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001574:	3301      	adds	r3, #1
 8001576:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800157a:	085b      	lsrs	r3, r3, #1
 800157c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800157e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001580:	2b00      	cmp	r3, #0
 8001582:	f47f af2e 	bne.w	80013e2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f003 f948 	bl	8004820 <USB_ReadInterrupts>
 8001590:	4603      	mov	r3, r0
 8001592:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001596:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800159a:	d122      	bne.n	80015e2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	69fa      	ldr	r2, [r7, #28]
 80015a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015aa:	f023 0301 	bic.w	r3, r3, #1
 80015ae:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d108      	bne.n	80015cc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80015c2:	2100      	movs	r1, #0
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f000 fec3 	bl	8002350 <HAL_PCDEx_LPM_Callback>
 80015ca:	e002      	b.n	80015d2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f009 fc63 	bl	800ae98 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	695a      	ldr	r2, [r3, #20]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80015e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f003 f91a 	bl	8004820 <USB_ReadInterrupts>
 80015ec:	4603      	mov	r3, r0
 80015ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015f6:	d112      	bne.n	800161e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	2b01      	cmp	r3, #1
 8001606:	d102      	bne.n	800160e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f009 fc1f 	bl	800ae4c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	695a      	ldr	r2, [r3, #20]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800161c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f003 f8fc 	bl	8004820 <USB_ReadInterrupts>
 8001628:	4603      	mov	r3, r0
 800162a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800162e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001632:	f040 80b7 	bne.w	80017a4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	69fa      	ldr	r2, [r7, #28]
 8001640:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001644:	f023 0301 	bic.w	r3, r3, #1
 8001648:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2110      	movs	r1, #16
 8001650:	4618      	mov	r0, r3
 8001652:	f002 f8c3 	bl	80037dc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001656:	2300      	movs	r3, #0
 8001658:	62fb      	str	r3, [r7, #44]	; 0x2c
 800165a:	e046      	b.n	80016ea <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800165c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800165e:	015a      	lsls	r2, r3, #5
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	4413      	add	r3, r2
 8001664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001668:	461a      	mov	r2, r3
 800166a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800166e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001672:	015a      	lsls	r2, r3, #5
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	4413      	add	r3, r2
 8001678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001680:	0151      	lsls	r1, r2, #5
 8001682:	69fa      	ldr	r2, [r7, #28]
 8001684:	440a      	add	r2, r1
 8001686:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800168a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800168e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001692:	015a      	lsls	r2, r3, #5
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	4413      	add	r3, r2
 8001698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800169c:	461a      	mov	r2, r3
 800169e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80016a2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80016a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016a6:	015a      	lsls	r2, r3, #5
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	4413      	add	r3, r2
 80016ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016b4:	0151      	lsls	r1, r2, #5
 80016b6:	69fa      	ldr	r2, [r7, #28]
 80016b8:	440a      	add	r2, r1
 80016ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80016be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80016c2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80016c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016c6:	015a      	lsls	r2, r3, #5
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	4413      	add	r3, r2
 80016cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016d4:	0151      	lsls	r1, r2, #5
 80016d6:	69fa      	ldr	r2, [r7, #28]
 80016d8:	440a      	add	r2, r1
 80016da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80016de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80016e2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016e6:	3301      	adds	r3, #1
 80016e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d3b3      	bcc.n	800165c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016fa:	69db      	ldr	r3, [r3, #28]
 80016fc:	69fa      	ldr	r2, [r7, #28]
 80016fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001702:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001706:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170c:	2b00      	cmp	r3, #0
 800170e:	d016      	beq.n	800173e <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001716:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800171a:	69fa      	ldr	r2, [r7, #28]
 800171c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001720:	f043 030b 	orr.w	r3, r3, #11
 8001724:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800172e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001730:	69fa      	ldr	r2, [r7, #28]
 8001732:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001736:	f043 030b 	orr.w	r3, r3, #11
 800173a:	6453      	str	r3, [r2, #68]	; 0x44
 800173c:	e015      	b.n	800176a <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001744:	695b      	ldr	r3, [r3, #20]
 8001746:	69fa      	ldr	r2, [r7, #28]
 8001748:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800174c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001750:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001754:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800175c:	691b      	ldr	r3, [r3, #16]
 800175e:	69fa      	ldr	r2, [r7, #28]
 8001760:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001764:	f043 030b 	orr.w	r3, r3, #11
 8001768:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	69fa      	ldr	r2, [r7, #28]
 8001774:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001778:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800177c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6818      	ldr	r0, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800178e:	461a      	mov	r2, r3
 8001790:	f003 f90a 	bl	80049a8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	695a      	ldr	r2, [r3, #20]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80017a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f003 f839 	bl	8004820 <USB_ReadInterrupts>
 80017ae:	4603      	mov	r3, r0
 80017b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017b8:	d124      	bne.n	8001804 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f003 f8cf 	bl	8004962 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f002 f884 	bl	80038d6 <USB_GetDevSpeed>
 80017ce:	4603      	mov	r3, r0
 80017d0:	461a      	mov	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681c      	ldr	r4, [r3, #0]
 80017da:	f001 fa29 	bl	8002c30 <HAL_RCC_GetHCLKFreq>
 80017de:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	461a      	mov	r2, r3
 80017e8:	4620      	mov	r0, r4
 80017ea:	f001 fd83 	bl	80032f4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f009 fb03 	bl	800adfa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	695a      	ldr	r2, [r3, #20]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001802:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4618      	mov	r0, r3
 800180a:	f003 f809 	bl	8004820 <USB_ReadInterrupts>
 800180e:	4603      	mov	r3, r0
 8001810:	f003 0308 	and.w	r3, r3, #8
 8001814:	2b08      	cmp	r3, #8
 8001816:	d10a      	bne.n	800182e <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f009 fae0 	bl	800adde <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	695a      	ldr	r2, [r3, #20]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f002 0208 	and.w	r2, r2, #8
 800182c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f002 fff4 	bl	8004820 <USB_ReadInterrupts>
 8001838:	4603      	mov	r3, r0
 800183a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800183e:	2b80      	cmp	r3, #128	; 0x80
 8001840:	d122      	bne.n	8001888 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001842:	6a3b      	ldr	r3, [r7, #32]
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800184a:	6a3b      	ldr	r3, [r7, #32]
 800184c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800184e:	2301      	movs	r3, #1
 8001850:	627b      	str	r3, [r7, #36]	; 0x24
 8001852:	e014      	b.n	800187e <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001854:	6879      	ldr	r1, [r7, #4]
 8001856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001858:	4613      	mov	r3, r2
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	4413      	add	r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	440b      	add	r3, r1
 8001862:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d105      	bne.n	8001878 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800186c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186e:	b2db      	uxtb	r3, r3
 8001870:	4619      	mov	r1, r3
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f000 fb27 	bl	8001ec6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187a:	3301      	adds	r3, #1
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001884:	429a      	cmp	r2, r3
 8001886:	d3e5      	bcc.n	8001854 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f002 ffc7 	bl	8004820 <USB_ReadInterrupts>
 8001892:	4603      	mov	r3, r0
 8001894:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001898:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800189c:	d13b      	bne.n	8001916 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800189e:	2301      	movs	r3, #1
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
 80018a2:	e02b      	b.n	80018fc <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80018a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a6:	015a      	lsls	r2, r3, #5
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	4413      	add	r3, r2
 80018ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80018b4:	6879      	ldr	r1, [r7, #4]
 80018b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018b8:	4613      	mov	r3, r2
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	4413      	add	r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	440b      	add	r3, r1
 80018c2:	3340      	adds	r3, #64	; 0x40
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d115      	bne.n	80018f6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80018ca:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	da12      	bge.n	80018f6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80018d0:	6879      	ldr	r1, [r7, #4]
 80018d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018d4:	4613      	mov	r3, r2
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	4413      	add	r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	440b      	add	r3, r1
 80018de:	333f      	adds	r3, #63	; 0x3f
 80018e0:	2201      	movs	r2, #1
 80018e2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	4619      	mov	r1, r3
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f000 fae8 	bl	8001ec6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	3301      	adds	r3, #1
 80018fa:	627b      	str	r3, [r7, #36]	; 0x24
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001902:	429a      	cmp	r2, r3
 8001904:	d3ce      	bcc.n	80018a4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	695a      	ldr	r2, [r3, #20]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001914:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f002 ff80 	bl	8004820 <USB_ReadInterrupts>
 8001920:	4603      	mov	r3, r0
 8001922:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001926:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800192a:	d155      	bne.n	80019d8 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800192c:	2301      	movs	r3, #1
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
 8001930:	e045      	b.n	80019be <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	015a      	lsls	r2, r3, #5
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	4413      	add	r3, r2
 800193a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001946:	4613      	mov	r3, r2
 8001948:	00db      	lsls	r3, r3, #3
 800194a:	4413      	add	r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	440b      	add	r3, r1
 8001950:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d12e      	bne.n	80019b8 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800195a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800195c:	2b00      	cmp	r3, #0
 800195e:	da2b      	bge.n	80019b8 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800196c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001970:	429a      	cmp	r2, r3
 8001972:	d121      	bne.n	80019b8 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001974:	6879      	ldr	r1, [r7, #4]
 8001976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001978:	4613      	mov	r3, r2
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	4413      	add	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	440b      	add	r3, r1
 8001982:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001986:	2201      	movs	r2, #1
 8001988:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800198a:	6a3b      	ldr	r3, [r7, #32]
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001992:	6a3b      	ldr	r3, [r7, #32]
 8001994:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001996:	6a3b      	ldr	r3, [r7, #32]
 8001998:	695b      	ldr	r3, [r3, #20]
 800199a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d10a      	bne.n	80019b8 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	69fa      	ldr	r2, [r7, #28]
 80019ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019b4:	6053      	str	r3, [r2, #4]
            break;
 80019b6:	e007      	b.n	80019c8 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ba:	3301      	adds	r3, #1
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d3b4      	bcc.n	8001932 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	695a      	ldr	r2, [r3, #20]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80019d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	f002 ff1f 	bl	8004820 <USB_ReadInterrupts>
 80019e2:	4603      	mov	r3, r0
 80019e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80019e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019ec:	d10a      	bne.n	8001a04 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f009 fa84 	bl	800aefc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	695a      	ldr	r2, [r3, #20]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001a02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f002 ff09 	bl	8004820 <USB_ReadInterrupts>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	f003 0304 	and.w	r3, r3, #4
 8001a14:	2b04      	cmp	r3, #4
 8001a16:	d115      	bne.n	8001a44 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	f003 0304 	and.w	r3, r3, #4
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d002      	beq.n	8001a30 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f009 fa74 	bl	800af18 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6859      	ldr	r1, [r3, #4]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	605a      	str	r2, [r3, #4]
 8001a40:	e000      	b.n	8001a44 <HAL_PCD_IRQHandler+0x938>
      return;
 8001a42:	bf00      	nop
    }
  }
}
 8001a44:	3734      	adds	r7, #52	; 0x34
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd90      	pop	{r4, r7, pc}

08001a4a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
 8001a52:	460b      	mov	r3, r1
 8001a54:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d101      	bne.n	8001a64 <HAL_PCD_SetAddress+0x1a>
 8001a60:	2302      	movs	r3, #2
 8001a62:	e013      	b.n	8001a8c <HAL_PCD_SetAddress+0x42>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	78fa      	ldrb	r2, [r7, #3]
 8001a70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	78fa      	ldrb	r2, [r7, #3]
 8001a7a:	4611      	mov	r1, r2
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f002 fe67 	bl	8004750 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001a8a:	2300      	movs	r3, #0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	4608      	mov	r0, r1
 8001a9e:	4611      	mov	r1, r2
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	70fb      	strb	r3, [r7, #3]
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	803b      	strh	r3, [r7, #0]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ab2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	da0f      	bge.n	8001ada <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001aba:	78fb      	ldrb	r3, [r7, #3]
 8001abc:	f003 020f 	and.w	r2, r3, #15
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	4413      	add	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	3338      	adds	r3, #56	; 0x38
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	4413      	add	r3, r2
 8001ace:	3304      	adds	r3, #4
 8001ad0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	705a      	strb	r2, [r3, #1]
 8001ad8:	e00f      	b.n	8001afa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ada:	78fb      	ldrb	r3, [r7, #3]
 8001adc:	f003 020f 	and.w	r2, r3, #15
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	4413      	add	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	4413      	add	r3, r2
 8001af0:	3304      	adds	r3, #4
 8001af2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2200      	movs	r2, #0
 8001af8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001afa:	78fb      	ldrb	r3, [r7, #3]
 8001afc:	f003 030f 	and.w	r3, r3, #15
 8001b00:	b2da      	uxtb	r2, r3
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001b06:	883a      	ldrh	r2, [r7, #0]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	78ba      	ldrb	r2, [r7, #2]
 8001b10:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	785b      	ldrb	r3, [r3, #1]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d004      	beq.n	8001b24 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b24:	78bb      	ldrb	r3, [r7, #2]
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d102      	bne.n	8001b30 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d101      	bne.n	8001b3e <HAL_PCD_EP_Open+0xaa>
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	e00e      	b.n	8001b5c <HAL_PCD_EP_Open+0xc8>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2201      	movs	r2, #1
 8001b42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	68f9      	ldr	r1, [r7, #12]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f001 fee7 	bl	8003920 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001b5a:	7afb      	ldrb	r3, [r7, #11]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	da0f      	bge.n	8001b98 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b78:	78fb      	ldrb	r3, [r7, #3]
 8001b7a:	f003 020f 	and.w	r2, r3, #15
 8001b7e:	4613      	mov	r3, r2
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	4413      	add	r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	3338      	adds	r3, #56	; 0x38
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	3304      	adds	r3, #4
 8001b8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2201      	movs	r2, #1
 8001b94:	705a      	strb	r2, [r3, #1]
 8001b96:	e00f      	b.n	8001bb8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b98:	78fb      	ldrb	r3, [r7, #3]
 8001b9a:	f003 020f 	and.w	r2, r3, #15
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	4413      	add	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	4413      	add	r3, r2
 8001bae:	3304      	adds	r3, #4
 8001bb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001bb8:	78fb      	ldrb	r3, [r7, #3]
 8001bba:	f003 030f 	and.w	r3, r3, #15
 8001bbe:	b2da      	uxtb	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d101      	bne.n	8001bd2 <HAL_PCD_EP_Close+0x6e>
 8001bce:	2302      	movs	r3, #2
 8001bd0:	e00e      	b.n	8001bf0 <HAL_PCD_EP_Close+0x8c>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68f9      	ldr	r1, [r7, #12]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f001 ff25 	bl	8003a30 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3710      	adds	r7, #16
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	607a      	str	r2, [r7, #4]
 8001c02:	603b      	str	r3, [r7, #0]
 8001c04:	460b      	mov	r3, r1
 8001c06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c08:	7afb      	ldrb	r3, [r7, #11]
 8001c0a:	f003 020f 	and.w	r2, r3, #15
 8001c0e:	4613      	mov	r3, r2
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	4413      	add	r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	3304      	adds	r3, #4
 8001c20:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	2200      	movs	r2, #0
 8001c32:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	2200      	movs	r2, #0
 8001c38:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c3a:	7afb      	ldrb	r3, [r7, #11]
 8001c3c:	f003 030f 	and.w	r3, r3, #15
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d102      	bne.n	8001c54 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c54:	7afb      	ldrb	r3, [r7, #11]
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d109      	bne.n	8001c72 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	6818      	ldr	r0, [r3, #0]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	461a      	mov	r2, r3
 8001c6a:	6979      	ldr	r1, [r7, #20]
 8001c6c:	f002 fa04 	bl	8004078 <USB_EP0StartXfer>
 8001c70:	e008      	b.n	8001c84 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6818      	ldr	r0, [r3, #0]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	6979      	ldr	r1, [r7, #20]
 8001c80:	f001 ffb2 	bl	8003be8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3718      	adds	r7, #24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
 8001c96:	460b      	mov	r3, r1
 8001c98:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001c9a:	78fb      	ldrb	r3, [r7, #3]
 8001c9c:	f003 020f 	and.w	r2, r3, #15
 8001ca0:	6879      	ldr	r1, [r7, #4]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	4413      	add	r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	440b      	add	r3, r1
 8001cac:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001cb0:	681b      	ldr	r3, [r3, #0]
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b086      	sub	sp, #24
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	60f8      	str	r0, [r7, #12]
 8001cc6:	607a      	str	r2, [r7, #4]
 8001cc8:	603b      	str	r3, [r7, #0]
 8001cca:	460b      	mov	r3, r1
 8001ccc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cce:	7afb      	ldrb	r3, [r7, #11]
 8001cd0:	f003 020f 	and.w	r2, r3, #15
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	4413      	add	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	3338      	adds	r3, #56	; 0x38
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	3304      	adds	r3, #4
 8001ce4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cfe:	7afb      	ldrb	r3, [r7, #11]
 8001d00:	f003 030f 	and.w	r3, r3, #15
 8001d04:	b2da      	uxtb	r2, r3
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d102      	bne.n	8001d18 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d18:	7afb      	ldrb	r3, [r7, #11]
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d109      	bne.n	8001d36 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6818      	ldr	r0, [r3, #0]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	6979      	ldr	r1, [r7, #20]
 8001d30:	f002 f9a2 	bl	8004078 <USB_EP0StartXfer>
 8001d34:	e008      	b.n	8001d48 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6818      	ldr	r0, [r3, #0]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	461a      	mov	r2, r3
 8001d42:	6979      	ldr	r1, [r7, #20]
 8001d44:	f001 ff50 	bl	8003be8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3718      	adds	r7, #24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b084      	sub	sp, #16
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001d5e:	78fb      	ldrb	r3, [r7, #3]
 8001d60:	f003 020f 	and.w	r2, r3, #15
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d901      	bls.n	8001d70 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e050      	b.n	8001e12 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	da0f      	bge.n	8001d98 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d78:	78fb      	ldrb	r3, [r7, #3]
 8001d7a:	f003 020f 	and.w	r2, r3, #15
 8001d7e:	4613      	mov	r3, r2
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	4413      	add	r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	3338      	adds	r3, #56	; 0x38
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2201      	movs	r2, #1
 8001d94:	705a      	strb	r2, [r3, #1]
 8001d96:	e00d      	b.n	8001db4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001d98:	78fa      	ldrb	r2, [r7, #3]
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	4413      	add	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	4413      	add	r3, r2
 8001daa:	3304      	adds	r3, #4
 8001dac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2200      	movs	r2, #0
 8001db2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2201      	movs	r2, #1
 8001db8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dba:	78fb      	ldrb	r3, [r7, #3]
 8001dbc:	f003 030f 	and.w	r3, r3, #15
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d101      	bne.n	8001dd4 <HAL_PCD_EP_SetStall+0x82>
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	e01e      	b.n	8001e12 <HAL_PCD_EP_SetStall+0xc0>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	68f9      	ldr	r1, [r7, #12]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f002 fbe0 	bl	80045a8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001de8:	78fb      	ldrb	r3, [r7, #3]
 8001dea:	f003 030f 	and.w	r3, r3, #15
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d10a      	bne.n	8001e08 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6818      	ldr	r0, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	b2d9      	uxtb	r1, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001e02:	461a      	mov	r2, r3
 8001e04:	f002 fdd0 	bl	80049a8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b084      	sub	sp, #16
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
 8001e22:	460b      	mov	r3, r1
 8001e24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001e26:	78fb      	ldrb	r3, [r7, #3]
 8001e28:	f003 020f 	and.w	r2, r3, #15
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d901      	bls.n	8001e38 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e042      	b.n	8001ebe <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	da0f      	bge.n	8001e60 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e40:	78fb      	ldrb	r3, [r7, #3]
 8001e42:	f003 020f 	and.w	r2, r3, #15
 8001e46:	4613      	mov	r3, r2
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	4413      	add	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	3338      	adds	r3, #56	; 0x38
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	4413      	add	r3, r2
 8001e54:	3304      	adds	r3, #4
 8001e56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	705a      	strb	r2, [r3, #1]
 8001e5e:	e00f      	b.n	8001e80 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e60:	78fb      	ldrb	r3, [r7, #3]
 8001e62:	f003 020f 	and.w	r2, r3, #15
 8001e66:	4613      	mov	r3, r2
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	4413      	add	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	4413      	add	r3, r2
 8001e76:	3304      	adds	r3, #4
 8001e78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2200      	movs	r2, #0
 8001e84:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e86:	78fb      	ldrb	r3, [r7, #3]
 8001e88:	f003 030f 	and.w	r3, r3, #15
 8001e8c:	b2da      	uxtb	r2, r3
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d101      	bne.n	8001ea0 <HAL_PCD_EP_ClrStall+0x86>
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	e00e      	b.n	8001ebe <HAL_PCD_EP_ClrStall+0xa4>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68f9      	ldr	r1, [r7, #12]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f002 fbe8 	bl	8004684 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b084      	sub	sp, #16
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
 8001ece:	460b      	mov	r3, r1
 8001ed0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001ed2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	da0c      	bge.n	8001ef4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001eda:	78fb      	ldrb	r3, [r7, #3]
 8001edc:	f003 020f 	and.w	r2, r3, #15
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	4413      	add	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	3338      	adds	r3, #56	; 0x38
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	4413      	add	r3, r2
 8001eee:	3304      	adds	r3, #4
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	e00c      	b.n	8001f0e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ef4:	78fb      	ldrb	r3, [r7, #3]
 8001ef6:	f003 020f 	and.w	r2, r3, #15
 8001efa:	4613      	mov	r3, r2
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	4413      	add	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	4413      	add	r3, r2
 8001f0a:	3304      	adds	r3, #4
 8001f0c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68f9      	ldr	r1, [r7, #12]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f002 fa07 	bl	8004328 <USB_EPStopXfer>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001f1e:	7afb      	ldrb	r3, [r7, #11]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3710      	adds	r7, #16
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b08a      	sub	sp, #40	; 0x28
 8001f2c:	af02      	add	r7, sp, #8
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	4413      	add	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	3338      	adds	r3, #56	; 0x38
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	3304      	adds	r3, #4
 8001f4e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6a1a      	ldr	r2, [r3, #32]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d901      	bls.n	8001f60 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e06c      	b.n	800203a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	699a      	ldr	r2, [r3, #24]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	69fa      	ldr	r2, [r7, #28]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d902      	bls.n	8001f7c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	3303      	adds	r3, #3
 8001f80:	089b      	lsrs	r3, r3, #2
 8001f82:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f84:	e02b      	b.n	8001fde <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	699a      	ldr	r2, [r3, #24]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	69fa      	ldr	r2, [r7, #28]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d902      	bls.n	8001fa2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	3303      	adds	r3, #3
 8001fa6:	089b      	lsrs	r3, r3, #2
 8001fa8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6919      	ldr	r1, [r3, #16]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	9300      	str	r3, [sp, #0]
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	6978      	ldr	r0, [r7, #20]
 8001fc2:	f002 fa5b 	bl	800447c <USB_WritePacket>

    ep->xfer_buff  += len;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	691a      	ldr	r2, [r3, #16]
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	441a      	add	r2, r3
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6a1a      	ldr	r2, [r3, #32]
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	441a      	add	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	015a      	lsls	r2, r3, #5
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d809      	bhi.n	8002008 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6a1a      	ldr	r2, [r3, #32]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d203      	bcs.n	8002008 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d1be      	bne.n	8001f86 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	699a      	ldr	r2, [r3, #24]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	429a      	cmp	r2, r3
 8002012:	d811      	bhi.n	8002038 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	2201      	movs	r2, #1
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002028:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	43db      	mvns	r3, r3
 800202e:	6939      	ldr	r1, [r7, #16]
 8002030:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002034:	4013      	ands	r3, r2
 8002036:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3720      	adds	r7, #32
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
	...

08002044 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b088      	sub	sp, #32
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	333c      	adds	r3, #60	; 0x3c
 800205c:	3304      	adds	r3, #4
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	015a      	lsls	r2, r3, #5
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	4413      	add	r3, r2
 800206a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d17b      	bne.n	8002172 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	f003 0308 	and.w	r3, r3, #8
 8002080:	2b00      	cmp	r3, #0
 8002082:	d015      	beq.n	80020b0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	4a61      	ldr	r2, [pc, #388]	; (800220c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002088:	4293      	cmp	r3, r2
 800208a:	f240 80b9 	bls.w	8002200 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002094:	2b00      	cmp	r3, #0
 8002096:	f000 80b3 	beq.w	8002200 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	015a      	lsls	r2, r3, #5
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	4413      	add	r3, r2
 80020a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020a6:	461a      	mov	r2, r3
 80020a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020ac:	6093      	str	r3, [r2, #8]
 80020ae:	e0a7      	b.n	8002200 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	f003 0320 	and.w	r3, r3, #32
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d009      	beq.n	80020ce <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	015a      	lsls	r2, r3, #5
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	4413      	add	r3, r2
 80020c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020c6:	461a      	mov	r2, r3
 80020c8:	2320      	movs	r3, #32
 80020ca:	6093      	str	r3, [r2, #8]
 80020cc:	e098      	b.n	8002200 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f040 8093 	bne.w	8002200 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	4a4b      	ldr	r2, [pc, #300]	; (800220c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d90f      	bls.n	8002102 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00a      	beq.n	8002102 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	015a      	lsls	r2, r3, #5
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	4413      	add	r3, r2
 80020f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020f8:	461a      	mov	r2, r3
 80020fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020fe:	6093      	str	r3, [r2, #8]
 8002100:	e07e      	b.n	8002200 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	4613      	mov	r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	4413      	add	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	4413      	add	r3, r2
 8002114:	3304      	adds	r3, #4
 8002116:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	69da      	ldr	r2, [r3, #28]
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	0159      	lsls	r1, r3, #5
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	440b      	add	r3, r1
 8002124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800212e:	1ad2      	subs	r2, r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d114      	bne.n	8002164 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d109      	bne.n	8002156 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6818      	ldr	r0, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800214c:	461a      	mov	r2, r3
 800214e:	2101      	movs	r1, #1
 8002150:	f002 fc2a 	bl	80049a8 <USB_EP0_OutStart>
 8002154:	e006      	b.n	8002164 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	691a      	ldr	r2, [r3, #16]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6a1b      	ldr	r3, [r3, #32]
 800215e:	441a      	add	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	b2db      	uxtb	r3, r3
 8002168:	4619      	mov	r1, r3
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f008 fe02 	bl	800ad74 <HAL_PCD_DataOutStageCallback>
 8002170:	e046      	b.n	8002200 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	4a26      	ldr	r2, [pc, #152]	; (8002210 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d124      	bne.n	80021c4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d00a      	beq.n	800219a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	015a      	lsls	r2, r3, #5
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	4413      	add	r3, r2
 800218c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002190:	461a      	mov	r2, r3
 8002192:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002196:	6093      	str	r3, [r2, #8]
 8002198:	e032      	b.n	8002200 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	f003 0320 	and.w	r3, r3, #32
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d008      	beq.n	80021b6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	015a      	lsls	r2, r3, #5
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	4413      	add	r3, r2
 80021ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021b0:	461a      	mov	r2, r3
 80021b2:	2320      	movs	r3, #32
 80021b4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	4619      	mov	r1, r3
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f008 fdd9 	bl	800ad74 <HAL_PCD_DataOutStageCallback>
 80021c2:	e01d      	b.n	8002200 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d114      	bne.n	80021f4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	4613      	mov	r3, r2
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	4413      	add	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	440b      	add	r3, r1
 80021d8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d108      	bne.n	80021f4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6818      	ldr	r0, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80021ec:	461a      	mov	r2, r3
 80021ee:	2100      	movs	r1, #0
 80021f0:	f002 fbda 	bl	80049a8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	4619      	mov	r1, r3
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f008 fdba 	bl	800ad74 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3720      	adds	r7, #32
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	4f54300a 	.word	0x4f54300a
 8002210:	4f54310a 	.word	0x4f54310a

08002214 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	333c      	adds	r3, #60	; 0x3c
 800222c:	3304      	adds	r3, #4
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	015a      	lsls	r2, r3, #5
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	4413      	add	r3, r2
 800223a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	4a15      	ldr	r2, [pc, #84]	; (800229c <PCD_EP_OutSetupPacket_int+0x88>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d90e      	bls.n	8002268 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002250:	2b00      	cmp	r3, #0
 8002252:	d009      	beq.n	8002268 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	015a      	lsls	r2, r3, #5
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	4413      	add	r3, r2
 800225c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002260:	461a      	mov	r2, r3
 8002262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002266:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f008 fd71 	bl	800ad50 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	4a0a      	ldr	r2, [pc, #40]	; (800229c <PCD_EP_OutSetupPacket_int+0x88>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d90c      	bls.n	8002290 <PCD_EP_OutSetupPacket_int+0x7c>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d108      	bne.n	8002290 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6818      	ldr	r0, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002288:	461a      	mov	r2, r3
 800228a:	2101      	movs	r1, #1
 800228c:	f002 fb8c 	bl	80049a8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3718      	adds	r7, #24
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	4f54300a 	.word	0x4f54300a

080022a0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	460b      	mov	r3, r1
 80022aa:	70fb      	strb	r3, [r7, #3]
 80022ac:	4613      	mov	r3, r2
 80022ae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80022b8:	78fb      	ldrb	r3, [r7, #3]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d107      	bne.n	80022ce <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80022be:	883b      	ldrh	r3, [r7, #0]
 80022c0:	0419      	lsls	r1, r3, #16
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	430a      	orrs	r2, r1
 80022ca:	629a      	str	r2, [r3, #40]	; 0x28
 80022cc:	e028      	b.n	8002320 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d4:	0c1b      	lsrs	r3, r3, #16
 80022d6:	68ba      	ldr	r2, [r7, #8]
 80022d8:	4413      	add	r3, r2
 80022da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80022dc:	2300      	movs	r3, #0
 80022de:	73fb      	strb	r3, [r7, #15]
 80022e0:	e00d      	b.n	80022fe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	7bfb      	ldrb	r3, [r7, #15]
 80022e8:	3340      	adds	r3, #64	; 0x40
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	0c1b      	lsrs	r3, r3, #16
 80022f2:	68ba      	ldr	r2, [r7, #8]
 80022f4:	4413      	add	r3, r2
 80022f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80022f8:	7bfb      	ldrb	r3, [r7, #15]
 80022fa:	3301      	adds	r3, #1
 80022fc:	73fb      	strb	r3, [r7, #15]
 80022fe:	7bfa      	ldrb	r2, [r7, #15]
 8002300:	78fb      	ldrb	r3, [r7, #3]
 8002302:	3b01      	subs	r3, #1
 8002304:	429a      	cmp	r2, r3
 8002306:	d3ec      	bcc.n	80022e2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002308:	883b      	ldrh	r3, [r7, #0]
 800230a:	0418      	lsls	r0, r3, #16
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6819      	ldr	r1, [r3, #0]
 8002310:	78fb      	ldrb	r3, [r7, #3]
 8002312:	3b01      	subs	r3, #1
 8002314:	68ba      	ldr	r2, [r7, #8]
 8002316:	4302      	orrs	r2, r0
 8002318:	3340      	adds	r3, #64	; 0x40
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	440b      	add	r3, r1
 800231e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800232e:	b480      	push	{r7}
 8002330:	b083      	sub	sp, #12
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
 8002336:	460b      	mov	r3, r1
 8002338:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	887a      	ldrh	r2, [r7, #2]
 8002340:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	460b      	mov	r3, r1
 800235a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e267      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	2b00      	cmp	r3, #0
 8002384:	d075      	beq.n	8002472 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002386:	4b88      	ldr	r3, [pc, #544]	; (80025a8 <HAL_RCC_OscConfig+0x240>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f003 030c 	and.w	r3, r3, #12
 800238e:	2b04      	cmp	r3, #4
 8002390:	d00c      	beq.n	80023ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002392:	4b85      	ldr	r3, [pc, #532]	; (80025a8 <HAL_RCC_OscConfig+0x240>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800239a:	2b08      	cmp	r3, #8
 800239c:	d112      	bne.n	80023c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800239e:	4b82      	ldr	r3, [pc, #520]	; (80025a8 <HAL_RCC_OscConfig+0x240>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023aa:	d10b      	bne.n	80023c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ac:	4b7e      	ldr	r3, [pc, #504]	; (80025a8 <HAL_RCC_OscConfig+0x240>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d05b      	beq.n	8002470 <HAL_RCC_OscConfig+0x108>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d157      	bne.n	8002470 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e242      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023cc:	d106      	bne.n	80023dc <HAL_RCC_OscConfig+0x74>
 80023ce:	4b76      	ldr	r3, [pc, #472]	; (80025a8 <HAL_RCC_OscConfig+0x240>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a75      	ldr	r2, [pc, #468]	; (80025a8 <HAL_RCC_OscConfig+0x240>)
 80023d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d8:	6013      	str	r3, [r2, #0]
 80023da:	e01d      	b.n	8002418 <HAL_RCC_OscConfig+0xb0>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023e4:	d10c      	bne.n	8002400 <HAL_RCC_OscConfig+0x98>
 80023e6:	4b70      	ldr	r3, [pc, #448]	; (80025a8 <HAL_RCC_OscConfig+0x240>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a6f      	ldr	r2, [pc, #444]	; (80025a8 <HAL_RCC_OscConfig+0x240>)
 80023ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023f0:	6013      	str	r3, [r2, #0]
 80023f2:	4b6d      	ldr	r3, [pc, #436]	; (80025a8 <HAL_RCC_OscConfig+0x240>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a6c      	ldr	r2, [pc, #432]	; (80025a8 <HAL_RCC_OscConfig+0x240>)
 80023f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	e00b      	b.n	8002418 <HAL_RCC_OscConfig+0xb0>
 8002400:	4b69      	ldr	r3, [pc, #420]	; (80025a8 <HAL_RCC_OscConfig+0x240>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a68      	ldr	r2, [pc, #416]	; (80025a8 <HAL_RCC_OscConfig+0x240>)
 8002406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800240a:	6013      	str	r3, [r2, #0]
 800240c:	4b66      	ldr	r3, [pc, #408]	; (80025a8 <HAL_RCC_OscConfig+0x240>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a65      	ldr	r2, [pc, #404]	; (80025a8 <HAL_RCC_OscConfig+0x240>)
 8002412:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002416:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d013      	beq.n	8002448 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002420:	f7fe fa76 	bl	8000910 <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002428:	f7fe fa72 	bl	8000910 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b64      	cmp	r3, #100	; 0x64
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e207      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800243a:	4b5b      	ldr	r3, [pc, #364]	; (80025a8 <HAL_RCC_OscConfig+0x240>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d0f0      	beq.n	8002428 <HAL_RCC_OscConfig+0xc0>
 8002446:	e014      	b.n	8002472 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002448:	f7fe fa62 	bl	8000910 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002450:	f7fe fa5e 	bl	8000910 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b64      	cmp	r3, #100	; 0x64
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e1f3      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002462:	4b51      	ldr	r3, [pc, #324]	; (80025a8 <HAL_RCC_OscConfig+0x240>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f0      	bne.n	8002450 <HAL_RCC_OscConfig+0xe8>
 800246e:	e000      	b.n	8002472 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002470:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d063      	beq.n	8002546 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800247e:	4b4a      	ldr	r3, [pc, #296]	; (80025a8 <HAL_RCC_OscConfig+0x240>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 030c 	and.w	r3, r3, #12
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00b      	beq.n	80024a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800248a:	4b47      	ldr	r3, [pc, #284]	; (80025a8 <HAL_RCC_OscConfig+0x240>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002492:	2b08      	cmp	r3, #8
 8002494:	d11c      	bne.n	80024d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002496:	4b44      	ldr	r3, [pc, #272]	; (80025a8 <HAL_RCC_OscConfig+0x240>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d116      	bne.n	80024d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024a2:	4b41      	ldr	r3, [pc, #260]	; (80025a8 <HAL_RCC_OscConfig+0x240>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d005      	beq.n	80024ba <HAL_RCC_OscConfig+0x152>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d001      	beq.n	80024ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e1c7      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ba:	4b3b      	ldr	r3, [pc, #236]	; (80025a8 <HAL_RCC_OscConfig+0x240>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	4937      	ldr	r1, [pc, #220]	; (80025a8 <HAL_RCC_OscConfig+0x240>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ce:	e03a      	b.n	8002546 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d020      	beq.n	800251a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024d8:	4b34      	ldr	r3, [pc, #208]	; (80025ac <HAL_RCC_OscConfig+0x244>)
 80024da:	2201      	movs	r2, #1
 80024dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024de:	f7fe fa17 	bl	8000910 <HAL_GetTick>
 80024e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e4:	e008      	b.n	80024f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024e6:	f7fe fa13 	bl	8000910 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e1a8      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f8:	4b2b      	ldr	r3, [pc, #172]	; (80025a8 <HAL_RCC_OscConfig+0x240>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d0f0      	beq.n	80024e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002504:	4b28      	ldr	r3, [pc, #160]	; (80025a8 <HAL_RCC_OscConfig+0x240>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	4925      	ldr	r1, [pc, #148]	; (80025a8 <HAL_RCC_OscConfig+0x240>)
 8002514:	4313      	orrs	r3, r2
 8002516:	600b      	str	r3, [r1, #0]
 8002518:	e015      	b.n	8002546 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800251a:	4b24      	ldr	r3, [pc, #144]	; (80025ac <HAL_RCC_OscConfig+0x244>)
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002520:	f7fe f9f6 	bl	8000910 <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002528:	f7fe f9f2 	bl	8000910 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e187      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800253a:	4b1b      	ldr	r3, [pc, #108]	; (80025a8 <HAL_RCC_OscConfig+0x240>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1f0      	bne.n	8002528 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0308 	and.w	r3, r3, #8
 800254e:	2b00      	cmp	r3, #0
 8002550:	d036      	beq.n	80025c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d016      	beq.n	8002588 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800255a:	4b15      	ldr	r3, [pc, #84]	; (80025b0 <HAL_RCC_OscConfig+0x248>)
 800255c:	2201      	movs	r2, #1
 800255e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002560:	f7fe f9d6 	bl	8000910 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002568:	f7fe f9d2 	bl	8000910 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e167      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800257a:	4b0b      	ldr	r3, [pc, #44]	; (80025a8 <HAL_RCC_OscConfig+0x240>)
 800257c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0f0      	beq.n	8002568 <HAL_RCC_OscConfig+0x200>
 8002586:	e01b      	b.n	80025c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002588:	4b09      	ldr	r3, [pc, #36]	; (80025b0 <HAL_RCC_OscConfig+0x248>)
 800258a:	2200      	movs	r2, #0
 800258c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800258e:	f7fe f9bf 	bl	8000910 <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002594:	e00e      	b.n	80025b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002596:	f7fe f9bb 	bl	8000910 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d907      	bls.n	80025b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e150      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
 80025a8:	40023800 	.word	0x40023800
 80025ac:	42470000 	.word	0x42470000
 80025b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025b4:	4b88      	ldr	r3, [pc, #544]	; (80027d8 <HAL_RCC_OscConfig+0x470>)
 80025b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1ea      	bne.n	8002596 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 8097 	beq.w	80026fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ce:	2300      	movs	r3, #0
 80025d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025d2:	4b81      	ldr	r3, [pc, #516]	; (80027d8 <HAL_RCC_OscConfig+0x470>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10f      	bne.n	80025fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	60bb      	str	r3, [r7, #8]
 80025e2:	4b7d      	ldr	r3, [pc, #500]	; (80027d8 <HAL_RCC_OscConfig+0x470>)
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	4a7c      	ldr	r2, [pc, #496]	; (80027d8 <HAL_RCC_OscConfig+0x470>)
 80025e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ec:	6413      	str	r3, [r2, #64]	; 0x40
 80025ee:	4b7a      	ldr	r3, [pc, #488]	; (80027d8 <HAL_RCC_OscConfig+0x470>)
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f6:	60bb      	str	r3, [r7, #8]
 80025f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025fa:	2301      	movs	r3, #1
 80025fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025fe:	4b77      	ldr	r3, [pc, #476]	; (80027dc <HAL_RCC_OscConfig+0x474>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002606:	2b00      	cmp	r3, #0
 8002608:	d118      	bne.n	800263c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800260a:	4b74      	ldr	r3, [pc, #464]	; (80027dc <HAL_RCC_OscConfig+0x474>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a73      	ldr	r2, [pc, #460]	; (80027dc <HAL_RCC_OscConfig+0x474>)
 8002610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002614:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002616:	f7fe f97b 	bl	8000910 <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800261e:	f7fe f977 	bl	8000910 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e10c      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002630:	4b6a      	ldr	r3, [pc, #424]	; (80027dc <HAL_RCC_OscConfig+0x474>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002638:	2b00      	cmp	r3, #0
 800263a:	d0f0      	beq.n	800261e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d106      	bne.n	8002652 <HAL_RCC_OscConfig+0x2ea>
 8002644:	4b64      	ldr	r3, [pc, #400]	; (80027d8 <HAL_RCC_OscConfig+0x470>)
 8002646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002648:	4a63      	ldr	r2, [pc, #396]	; (80027d8 <HAL_RCC_OscConfig+0x470>)
 800264a:	f043 0301 	orr.w	r3, r3, #1
 800264e:	6713      	str	r3, [r2, #112]	; 0x70
 8002650:	e01c      	b.n	800268c <HAL_RCC_OscConfig+0x324>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	2b05      	cmp	r3, #5
 8002658:	d10c      	bne.n	8002674 <HAL_RCC_OscConfig+0x30c>
 800265a:	4b5f      	ldr	r3, [pc, #380]	; (80027d8 <HAL_RCC_OscConfig+0x470>)
 800265c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265e:	4a5e      	ldr	r2, [pc, #376]	; (80027d8 <HAL_RCC_OscConfig+0x470>)
 8002660:	f043 0304 	orr.w	r3, r3, #4
 8002664:	6713      	str	r3, [r2, #112]	; 0x70
 8002666:	4b5c      	ldr	r3, [pc, #368]	; (80027d8 <HAL_RCC_OscConfig+0x470>)
 8002668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800266a:	4a5b      	ldr	r2, [pc, #364]	; (80027d8 <HAL_RCC_OscConfig+0x470>)
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	6713      	str	r3, [r2, #112]	; 0x70
 8002672:	e00b      	b.n	800268c <HAL_RCC_OscConfig+0x324>
 8002674:	4b58      	ldr	r3, [pc, #352]	; (80027d8 <HAL_RCC_OscConfig+0x470>)
 8002676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002678:	4a57      	ldr	r2, [pc, #348]	; (80027d8 <HAL_RCC_OscConfig+0x470>)
 800267a:	f023 0301 	bic.w	r3, r3, #1
 800267e:	6713      	str	r3, [r2, #112]	; 0x70
 8002680:	4b55      	ldr	r3, [pc, #340]	; (80027d8 <HAL_RCC_OscConfig+0x470>)
 8002682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002684:	4a54      	ldr	r2, [pc, #336]	; (80027d8 <HAL_RCC_OscConfig+0x470>)
 8002686:	f023 0304 	bic.w	r3, r3, #4
 800268a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d015      	beq.n	80026c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002694:	f7fe f93c 	bl	8000910 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800269a:	e00a      	b.n	80026b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800269c:	f7fe f938 	bl	8000910 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e0cb      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026b2:	4b49      	ldr	r3, [pc, #292]	; (80027d8 <HAL_RCC_OscConfig+0x470>)
 80026b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d0ee      	beq.n	800269c <HAL_RCC_OscConfig+0x334>
 80026be:	e014      	b.n	80026ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026c0:	f7fe f926 	bl	8000910 <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026c6:	e00a      	b.n	80026de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026c8:	f7fe f922 	bl	8000910 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e0b5      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026de:	4b3e      	ldr	r3, [pc, #248]	; (80027d8 <HAL_RCC_OscConfig+0x470>)
 80026e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1ee      	bne.n	80026c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026ea:	7dfb      	ldrb	r3, [r7, #23]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d105      	bne.n	80026fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026f0:	4b39      	ldr	r3, [pc, #228]	; (80027d8 <HAL_RCC_OscConfig+0x470>)
 80026f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f4:	4a38      	ldr	r2, [pc, #224]	; (80027d8 <HAL_RCC_OscConfig+0x470>)
 80026f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	2b00      	cmp	r3, #0
 8002702:	f000 80a1 	beq.w	8002848 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002706:	4b34      	ldr	r3, [pc, #208]	; (80027d8 <HAL_RCC_OscConfig+0x470>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 030c 	and.w	r3, r3, #12
 800270e:	2b08      	cmp	r3, #8
 8002710:	d05c      	beq.n	80027cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	2b02      	cmp	r3, #2
 8002718:	d141      	bne.n	800279e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800271a:	4b31      	ldr	r3, [pc, #196]	; (80027e0 <HAL_RCC_OscConfig+0x478>)
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002720:	f7fe f8f6 	bl	8000910 <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002728:	f7fe f8f2 	bl	8000910 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e087      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800273a:	4b27      	ldr	r3, [pc, #156]	; (80027d8 <HAL_RCC_OscConfig+0x470>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1f0      	bne.n	8002728 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	69da      	ldr	r2, [r3, #28]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	431a      	orrs	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002754:	019b      	lsls	r3, r3, #6
 8002756:	431a      	orrs	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275c:	085b      	lsrs	r3, r3, #1
 800275e:	3b01      	subs	r3, #1
 8002760:	041b      	lsls	r3, r3, #16
 8002762:	431a      	orrs	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002768:	061b      	lsls	r3, r3, #24
 800276a:	491b      	ldr	r1, [pc, #108]	; (80027d8 <HAL_RCC_OscConfig+0x470>)
 800276c:	4313      	orrs	r3, r2
 800276e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002770:	4b1b      	ldr	r3, [pc, #108]	; (80027e0 <HAL_RCC_OscConfig+0x478>)
 8002772:	2201      	movs	r2, #1
 8002774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002776:	f7fe f8cb 	bl	8000910 <HAL_GetTick>
 800277a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800277c:	e008      	b.n	8002790 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800277e:	f7fe f8c7 	bl	8000910 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e05c      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002790:	4b11      	ldr	r3, [pc, #68]	; (80027d8 <HAL_RCC_OscConfig+0x470>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d0f0      	beq.n	800277e <HAL_RCC_OscConfig+0x416>
 800279c:	e054      	b.n	8002848 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800279e:	4b10      	ldr	r3, [pc, #64]	; (80027e0 <HAL_RCC_OscConfig+0x478>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a4:	f7fe f8b4 	bl	8000910 <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027ac:	f7fe f8b0 	bl	8000910 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e045      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027be:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <HAL_RCC_OscConfig+0x470>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1f0      	bne.n	80027ac <HAL_RCC_OscConfig+0x444>
 80027ca:	e03d      	b.n	8002848 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d107      	bne.n	80027e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e038      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
 80027d8:	40023800 	.word	0x40023800
 80027dc:	40007000 	.word	0x40007000
 80027e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027e4:	4b1b      	ldr	r3, [pc, #108]	; (8002854 <HAL_RCC_OscConfig+0x4ec>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d028      	beq.n	8002844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d121      	bne.n	8002844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800280a:	429a      	cmp	r2, r3
 800280c:	d11a      	bne.n	8002844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002814:	4013      	ands	r3, r2
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800281a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800281c:	4293      	cmp	r3, r2
 800281e:	d111      	bne.n	8002844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282a:	085b      	lsrs	r3, r3, #1
 800282c:	3b01      	subs	r3, #1
 800282e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002830:	429a      	cmp	r2, r3
 8002832:	d107      	bne.n	8002844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002840:	429a      	cmp	r2, r3
 8002842:	d001      	beq.n	8002848 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e000      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3718      	adds	r7, #24
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	40023800 	.word	0x40023800

08002858 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d101      	bne.n	800286c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e0cc      	b.n	8002a06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800286c:	4b68      	ldr	r3, [pc, #416]	; (8002a10 <HAL_RCC_ClockConfig+0x1b8>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	429a      	cmp	r2, r3
 8002878:	d90c      	bls.n	8002894 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800287a:	4b65      	ldr	r3, [pc, #404]	; (8002a10 <HAL_RCC_ClockConfig+0x1b8>)
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002882:	4b63      	ldr	r3, [pc, #396]	; (8002a10 <HAL_RCC_ClockConfig+0x1b8>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0307 	and.w	r3, r3, #7
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	429a      	cmp	r2, r3
 800288e:	d001      	beq.n	8002894 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e0b8      	b.n	8002a06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d020      	beq.n	80028e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0304 	and.w	r3, r3, #4
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d005      	beq.n	80028b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028ac:	4b59      	ldr	r3, [pc, #356]	; (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	4a58      	ldr	r2, [pc, #352]	; (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80028b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0308 	and.w	r3, r3, #8
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d005      	beq.n	80028d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028c4:	4b53      	ldr	r3, [pc, #332]	; (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	4a52      	ldr	r2, [pc, #328]	; (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80028ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028d0:	4b50      	ldr	r3, [pc, #320]	; (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	494d      	ldr	r1, [pc, #308]	; (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d044      	beq.n	8002978 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d107      	bne.n	8002906 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028f6:	4b47      	ldr	r3, [pc, #284]	; (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d119      	bne.n	8002936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e07f      	b.n	8002a06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	2b02      	cmp	r3, #2
 800290c:	d003      	beq.n	8002916 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002912:	2b03      	cmp	r3, #3
 8002914:	d107      	bne.n	8002926 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002916:	4b3f      	ldr	r3, [pc, #252]	; (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d109      	bne.n	8002936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e06f      	b.n	8002a06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002926:	4b3b      	ldr	r3, [pc, #236]	; (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e067      	b.n	8002a06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002936:	4b37      	ldr	r3, [pc, #220]	; (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f023 0203 	bic.w	r2, r3, #3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	4934      	ldr	r1, [pc, #208]	; (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 8002944:	4313      	orrs	r3, r2
 8002946:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002948:	f7fd ffe2 	bl	8000910 <HAL_GetTick>
 800294c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800294e:	e00a      	b.n	8002966 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002950:	f7fd ffde 	bl	8000910 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	f241 3288 	movw	r2, #5000	; 0x1388
 800295e:	4293      	cmp	r3, r2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e04f      	b.n	8002a06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002966:	4b2b      	ldr	r3, [pc, #172]	; (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f003 020c 	and.w	r2, r3, #12
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	429a      	cmp	r2, r3
 8002976:	d1eb      	bne.n	8002950 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002978:	4b25      	ldr	r3, [pc, #148]	; (8002a10 <HAL_RCC_ClockConfig+0x1b8>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	429a      	cmp	r2, r3
 8002984:	d20c      	bcs.n	80029a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002986:	4b22      	ldr	r3, [pc, #136]	; (8002a10 <HAL_RCC_ClockConfig+0x1b8>)
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800298e:	4b20      	ldr	r3, [pc, #128]	; (8002a10 <HAL_RCC_ClockConfig+0x1b8>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	429a      	cmp	r2, r3
 800299a:	d001      	beq.n	80029a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e032      	b.n	8002a06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0304 	and.w	r3, r3, #4
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d008      	beq.n	80029be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029ac:	4b19      	ldr	r3, [pc, #100]	; (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	4916      	ldr	r1, [pc, #88]	; (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0308 	and.w	r3, r3, #8
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d009      	beq.n	80029de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029ca:	4b12      	ldr	r3, [pc, #72]	; (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	490e      	ldr	r1, [pc, #56]	; (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029de:	f000 f821 	bl	8002a24 <HAL_RCC_GetSysClockFreq>
 80029e2:	4602      	mov	r2, r0
 80029e4:	4b0b      	ldr	r3, [pc, #44]	; (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	091b      	lsrs	r3, r3, #4
 80029ea:	f003 030f 	and.w	r3, r3, #15
 80029ee:	490a      	ldr	r1, [pc, #40]	; (8002a18 <HAL_RCC_ClockConfig+0x1c0>)
 80029f0:	5ccb      	ldrb	r3, [r1, r3]
 80029f2:	fa22 f303 	lsr.w	r3, r2, r3
 80029f6:	4a09      	ldr	r2, [pc, #36]	; (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 80029f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029fa:	4b09      	ldr	r3, [pc, #36]	; (8002a20 <HAL_RCC_ClockConfig+0x1c8>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7fd fe76 	bl	80006f0 <HAL_InitTick>

  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	40023c00 	.word	0x40023c00
 8002a14:	40023800 	.word	0x40023800
 8002a18:	0800b574 	.word	0x0800b574
 8002a1c:	20000000 	.word	0x20000000
 8002a20:	20000004 	.word	0x20000004

08002a24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a28:	b094      	sub	sp, #80	; 0x50
 8002a2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	647b      	str	r3, [r7, #68]	; 0x44
 8002a30:	2300      	movs	r3, #0
 8002a32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a34:	2300      	movs	r3, #0
 8002a36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a3c:	4b79      	ldr	r3, [pc, #484]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f003 030c 	and.w	r3, r3, #12
 8002a44:	2b08      	cmp	r3, #8
 8002a46:	d00d      	beq.n	8002a64 <HAL_RCC_GetSysClockFreq+0x40>
 8002a48:	2b08      	cmp	r3, #8
 8002a4a:	f200 80e1 	bhi.w	8002c10 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d002      	beq.n	8002a58 <HAL_RCC_GetSysClockFreq+0x34>
 8002a52:	2b04      	cmp	r3, #4
 8002a54:	d003      	beq.n	8002a5e <HAL_RCC_GetSysClockFreq+0x3a>
 8002a56:	e0db      	b.n	8002c10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a58:	4b73      	ldr	r3, [pc, #460]	; (8002c28 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a5a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002a5c:	e0db      	b.n	8002c16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a5e:	4b73      	ldr	r3, [pc, #460]	; (8002c2c <HAL_RCC_GetSysClockFreq+0x208>)
 8002a60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a62:	e0d8      	b.n	8002c16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a64:	4b6f      	ldr	r3, [pc, #444]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a6c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a6e:	4b6d      	ldr	r3, [pc, #436]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d063      	beq.n	8002b42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a7a:	4b6a      	ldr	r3, [pc, #424]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	099b      	lsrs	r3, r3, #6
 8002a80:	2200      	movs	r2, #0
 8002a82:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a84:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a8c:	633b      	str	r3, [r7, #48]	; 0x30
 8002a8e:	2300      	movs	r3, #0
 8002a90:	637b      	str	r3, [r7, #52]	; 0x34
 8002a92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002a96:	4622      	mov	r2, r4
 8002a98:	462b      	mov	r3, r5
 8002a9a:	f04f 0000 	mov.w	r0, #0
 8002a9e:	f04f 0100 	mov.w	r1, #0
 8002aa2:	0159      	lsls	r1, r3, #5
 8002aa4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002aa8:	0150      	lsls	r0, r2, #5
 8002aaa:	4602      	mov	r2, r0
 8002aac:	460b      	mov	r3, r1
 8002aae:	4621      	mov	r1, r4
 8002ab0:	1a51      	subs	r1, r2, r1
 8002ab2:	6139      	str	r1, [r7, #16]
 8002ab4:	4629      	mov	r1, r5
 8002ab6:	eb63 0301 	sbc.w	r3, r3, r1
 8002aba:	617b      	str	r3, [r7, #20]
 8002abc:	f04f 0200 	mov.w	r2, #0
 8002ac0:	f04f 0300 	mov.w	r3, #0
 8002ac4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ac8:	4659      	mov	r1, fp
 8002aca:	018b      	lsls	r3, r1, #6
 8002acc:	4651      	mov	r1, sl
 8002ace:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ad2:	4651      	mov	r1, sl
 8002ad4:	018a      	lsls	r2, r1, #6
 8002ad6:	4651      	mov	r1, sl
 8002ad8:	ebb2 0801 	subs.w	r8, r2, r1
 8002adc:	4659      	mov	r1, fp
 8002ade:	eb63 0901 	sbc.w	r9, r3, r1
 8002ae2:	f04f 0200 	mov.w	r2, #0
 8002ae6:	f04f 0300 	mov.w	r3, #0
 8002aea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002aee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002af2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002af6:	4690      	mov	r8, r2
 8002af8:	4699      	mov	r9, r3
 8002afa:	4623      	mov	r3, r4
 8002afc:	eb18 0303 	adds.w	r3, r8, r3
 8002b00:	60bb      	str	r3, [r7, #8]
 8002b02:	462b      	mov	r3, r5
 8002b04:	eb49 0303 	adc.w	r3, r9, r3
 8002b08:	60fb      	str	r3, [r7, #12]
 8002b0a:	f04f 0200 	mov.w	r2, #0
 8002b0e:	f04f 0300 	mov.w	r3, #0
 8002b12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b16:	4629      	mov	r1, r5
 8002b18:	024b      	lsls	r3, r1, #9
 8002b1a:	4621      	mov	r1, r4
 8002b1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b20:	4621      	mov	r1, r4
 8002b22:	024a      	lsls	r2, r1, #9
 8002b24:	4610      	mov	r0, r2
 8002b26:	4619      	mov	r1, r3
 8002b28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b34:	f7fd fb4c 	bl	80001d0 <__aeabi_uldivmod>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b40:	e058      	b.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b42:	4b38      	ldr	r3, [pc, #224]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	099b      	lsrs	r3, r3, #6
 8002b48:	2200      	movs	r2, #0
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	4611      	mov	r1, r2
 8002b4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b52:	623b      	str	r3, [r7, #32]
 8002b54:	2300      	movs	r3, #0
 8002b56:	627b      	str	r3, [r7, #36]	; 0x24
 8002b58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b5c:	4642      	mov	r2, r8
 8002b5e:	464b      	mov	r3, r9
 8002b60:	f04f 0000 	mov.w	r0, #0
 8002b64:	f04f 0100 	mov.w	r1, #0
 8002b68:	0159      	lsls	r1, r3, #5
 8002b6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b6e:	0150      	lsls	r0, r2, #5
 8002b70:	4602      	mov	r2, r0
 8002b72:	460b      	mov	r3, r1
 8002b74:	4641      	mov	r1, r8
 8002b76:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b7a:	4649      	mov	r1, r9
 8002b7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b80:	f04f 0200 	mov.w	r2, #0
 8002b84:	f04f 0300 	mov.w	r3, #0
 8002b88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b94:	ebb2 040a 	subs.w	r4, r2, sl
 8002b98:	eb63 050b 	sbc.w	r5, r3, fp
 8002b9c:	f04f 0200 	mov.w	r2, #0
 8002ba0:	f04f 0300 	mov.w	r3, #0
 8002ba4:	00eb      	lsls	r3, r5, #3
 8002ba6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002baa:	00e2      	lsls	r2, r4, #3
 8002bac:	4614      	mov	r4, r2
 8002bae:	461d      	mov	r5, r3
 8002bb0:	4643      	mov	r3, r8
 8002bb2:	18e3      	adds	r3, r4, r3
 8002bb4:	603b      	str	r3, [r7, #0]
 8002bb6:	464b      	mov	r3, r9
 8002bb8:	eb45 0303 	adc.w	r3, r5, r3
 8002bbc:	607b      	str	r3, [r7, #4]
 8002bbe:	f04f 0200 	mov.w	r2, #0
 8002bc2:	f04f 0300 	mov.w	r3, #0
 8002bc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bca:	4629      	mov	r1, r5
 8002bcc:	028b      	lsls	r3, r1, #10
 8002bce:	4621      	mov	r1, r4
 8002bd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bd4:	4621      	mov	r1, r4
 8002bd6:	028a      	lsls	r2, r1, #10
 8002bd8:	4610      	mov	r0, r2
 8002bda:	4619      	mov	r1, r3
 8002bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bde:	2200      	movs	r2, #0
 8002be0:	61bb      	str	r3, [r7, #24]
 8002be2:	61fa      	str	r2, [r7, #28]
 8002be4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002be8:	f7fd faf2 	bl	80001d0 <__aeabi_uldivmod>
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002bf4:	4b0b      	ldr	r3, [pc, #44]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	0c1b      	lsrs	r3, r3, #16
 8002bfa:	f003 0303 	and.w	r3, r3, #3
 8002bfe:	3301      	adds	r3, #1
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002c04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c0e:	e002      	b.n	8002c16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c10:	4b05      	ldr	r3, [pc, #20]	; (8002c28 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c12:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3750      	adds	r7, #80	; 0x50
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c22:	bf00      	nop
 8002c24:	40023800 	.word	0x40023800
 8002c28:	00f42400 	.word	0x00f42400
 8002c2c:	007a1200 	.word	0x007a1200

08002c30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c34:	4b03      	ldr	r3, [pc, #12]	; (8002c44 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c36:	681b      	ldr	r3, [r3, #0]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	20000000 	.word	0x20000000

08002c48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c4c:	f7ff fff0 	bl	8002c30 <HAL_RCC_GetHCLKFreq>
 8002c50:	4602      	mov	r2, r0
 8002c52:	4b05      	ldr	r3, [pc, #20]	; (8002c68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	0b5b      	lsrs	r3, r3, #13
 8002c58:	f003 0307 	and.w	r3, r3, #7
 8002c5c:	4903      	ldr	r1, [pc, #12]	; (8002c6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c5e:	5ccb      	ldrb	r3, [r1, r3]
 8002c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	0800b584 	.word	0x0800b584

08002c70 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	220f      	movs	r2, #15
 8002c7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002c80:	4b12      	ldr	r3, [pc, #72]	; (8002ccc <HAL_RCC_GetClockConfig+0x5c>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f003 0203 	and.w	r2, r3, #3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002c8c:	4b0f      	ldr	r3, [pc, #60]	; (8002ccc <HAL_RCC_GetClockConfig+0x5c>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002c98:	4b0c      	ldr	r3, [pc, #48]	; (8002ccc <HAL_RCC_GetClockConfig+0x5c>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002ca4:	4b09      	ldr	r3, [pc, #36]	; (8002ccc <HAL_RCC_GetClockConfig+0x5c>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	08db      	lsrs	r3, r3, #3
 8002caa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002cb2:	4b07      	ldr	r3, [pc, #28]	; (8002cd0 <HAL_RCC_GetClockConfig+0x60>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0207 	and.w	r2, r3, #7
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	601a      	str	r2, [r3, #0]
}
 8002cbe:	bf00      	nop
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	40023c00 	.word	0x40023c00

08002cd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e041      	b.n	8002d6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d106      	bne.n	8002d00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f839 	bl	8002d72 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2202      	movs	r2, #2
 8002d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3304      	adds	r3, #4
 8002d10:	4619      	mov	r1, r3
 8002d12:	4610      	mov	r0, r2
 8002d14:	f000 f9d8 	bl	80030c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b083      	sub	sp, #12
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
	...

08002d88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d001      	beq.n	8002da0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e04e      	b.n	8002e3e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2202      	movs	r2, #2
 8002da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68da      	ldr	r2, [r3, #12]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f042 0201 	orr.w	r2, r2, #1
 8002db6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a23      	ldr	r2, [pc, #140]	; (8002e4c <HAL_TIM_Base_Start_IT+0xc4>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d022      	beq.n	8002e08 <HAL_TIM_Base_Start_IT+0x80>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dca:	d01d      	beq.n	8002e08 <HAL_TIM_Base_Start_IT+0x80>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a1f      	ldr	r2, [pc, #124]	; (8002e50 <HAL_TIM_Base_Start_IT+0xc8>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d018      	beq.n	8002e08 <HAL_TIM_Base_Start_IT+0x80>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a1e      	ldr	r2, [pc, #120]	; (8002e54 <HAL_TIM_Base_Start_IT+0xcc>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d013      	beq.n	8002e08 <HAL_TIM_Base_Start_IT+0x80>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a1c      	ldr	r2, [pc, #112]	; (8002e58 <HAL_TIM_Base_Start_IT+0xd0>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d00e      	beq.n	8002e08 <HAL_TIM_Base_Start_IT+0x80>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a1b      	ldr	r2, [pc, #108]	; (8002e5c <HAL_TIM_Base_Start_IT+0xd4>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d009      	beq.n	8002e08 <HAL_TIM_Base_Start_IT+0x80>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a19      	ldr	r2, [pc, #100]	; (8002e60 <HAL_TIM_Base_Start_IT+0xd8>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d004      	beq.n	8002e08 <HAL_TIM_Base_Start_IT+0x80>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a18      	ldr	r2, [pc, #96]	; (8002e64 <HAL_TIM_Base_Start_IT+0xdc>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d111      	bne.n	8002e2c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 0307 	and.w	r3, r3, #7
 8002e12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2b06      	cmp	r3, #6
 8002e18:	d010      	beq.n	8002e3c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f042 0201 	orr.w	r2, r2, #1
 8002e28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e2a:	e007      	b.n	8002e3c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f042 0201 	orr.w	r2, r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3714      	adds	r7, #20
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	40010000 	.word	0x40010000
 8002e50:	40000400 	.word	0x40000400
 8002e54:	40000800 	.word	0x40000800
 8002e58:	40000c00 	.word	0x40000c00
 8002e5c:	40010400 	.word	0x40010400
 8002e60:	40014000 	.word	0x40014000
 8002e64:	40001800 	.word	0x40001800

08002e68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d122      	bne.n	8002ec4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d11b      	bne.n	8002ec4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f06f 0202 	mvn.w	r2, #2
 8002e94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	f003 0303 	and.w	r3, r3, #3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 f8ee 	bl	800308c <HAL_TIM_IC_CaptureCallback>
 8002eb0:	e005      	b.n	8002ebe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 f8e0 	bl	8003078 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 f8f1 	bl	80030a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	f003 0304 	and.w	r3, r3, #4
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	d122      	bne.n	8002f18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	f003 0304 	and.w	r3, r3, #4
 8002edc:	2b04      	cmp	r3, #4
 8002ede:	d11b      	bne.n	8002f18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f06f 0204 	mvn.w	r2, #4
 8002ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2202      	movs	r2, #2
 8002eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 f8c4 	bl	800308c <HAL_TIM_IC_CaptureCallback>
 8002f04:	e005      	b.n	8002f12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 f8b6 	bl	8003078 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 f8c7 	bl	80030a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	f003 0308 	and.w	r3, r3, #8
 8002f22:	2b08      	cmp	r3, #8
 8002f24:	d122      	bne.n	8002f6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	f003 0308 	and.w	r3, r3, #8
 8002f30:	2b08      	cmp	r3, #8
 8002f32:	d11b      	bne.n	8002f6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f06f 0208 	mvn.w	r2, #8
 8002f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2204      	movs	r2, #4
 8002f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	f003 0303 	and.w	r3, r3, #3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f89a 	bl	800308c <HAL_TIM_IC_CaptureCallback>
 8002f58:	e005      	b.n	8002f66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f88c 	bl	8003078 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 f89d 	bl	80030a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	f003 0310 	and.w	r3, r3, #16
 8002f76:	2b10      	cmp	r3, #16
 8002f78:	d122      	bne.n	8002fc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	f003 0310 	and.w	r3, r3, #16
 8002f84:	2b10      	cmp	r3, #16
 8002f86:	d11b      	bne.n	8002fc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f06f 0210 	mvn.w	r2, #16
 8002f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2208      	movs	r2, #8
 8002f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d003      	beq.n	8002fae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f870 	bl	800308c <HAL_TIM_IC_CaptureCallback>
 8002fac:	e005      	b.n	8002fba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 f862 	bl	8003078 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 f873 	bl	80030a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d10e      	bne.n	8002fec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d107      	bne.n	8002fec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f06f 0201 	mvn.w	r2, #1
 8002fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f7fd fb3e 	bl	8000668 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff6:	2b80      	cmp	r3, #128	; 0x80
 8002ff8:	d10e      	bne.n	8003018 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003004:	2b80      	cmp	r3, #128	; 0x80
 8003006:	d107      	bne.n	8003018 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f902 	bl	800321c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003022:	2b40      	cmp	r3, #64	; 0x40
 8003024:	d10e      	bne.n	8003044 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003030:	2b40      	cmp	r3, #64	; 0x40
 8003032:	d107      	bne.n	8003044 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800303c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 f838 	bl	80030b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	f003 0320 	and.w	r3, r3, #32
 800304e:	2b20      	cmp	r3, #32
 8003050:	d10e      	bne.n	8003070 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	f003 0320 	and.w	r3, r3, #32
 800305c:	2b20      	cmp	r3, #32
 800305e:	d107      	bne.n	8003070 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f06f 0220 	mvn.w	r2, #32
 8003068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 f8cc 	bl	8003208 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003070:	bf00      	nop
 8003072:	3708      	adds	r7, #8
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a40      	ldr	r2, [pc, #256]	; (80031dc <TIM_Base_SetConfig+0x114>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d013      	beq.n	8003108 <TIM_Base_SetConfig+0x40>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030e6:	d00f      	beq.n	8003108 <TIM_Base_SetConfig+0x40>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a3d      	ldr	r2, [pc, #244]	; (80031e0 <TIM_Base_SetConfig+0x118>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d00b      	beq.n	8003108 <TIM_Base_SetConfig+0x40>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a3c      	ldr	r2, [pc, #240]	; (80031e4 <TIM_Base_SetConfig+0x11c>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d007      	beq.n	8003108 <TIM_Base_SetConfig+0x40>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a3b      	ldr	r2, [pc, #236]	; (80031e8 <TIM_Base_SetConfig+0x120>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d003      	beq.n	8003108 <TIM_Base_SetConfig+0x40>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a3a      	ldr	r2, [pc, #232]	; (80031ec <TIM_Base_SetConfig+0x124>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d108      	bne.n	800311a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800310e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	4313      	orrs	r3, r2
 8003118:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a2f      	ldr	r2, [pc, #188]	; (80031dc <TIM_Base_SetConfig+0x114>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d02b      	beq.n	800317a <TIM_Base_SetConfig+0xb2>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003128:	d027      	beq.n	800317a <TIM_Base_SetConfig+0xb2>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a2c      	ldr	r2, [pc, #176]	; (80031e0 <TIM_Base_SetConfig+0x118>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d023      	beq.n	800317a <TIM_Base_SetConfig+0xb2>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a2b      	ldr	r2, [pc, #172]	; (80031e4 <TIM_Base_SetConfig+0x11c>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d01f      	beq.n	800317a <TIM_Base_SetConfig+0xb2>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a2a      	ldr	r2, [pc, #168]	; (80031e8 <TIM_Base_SetConfig+0x120>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d01b      	beq.n	800317a <TIM_Base_SetConfig+0xb2>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a29      	ldr	r2, [pc, #164]	; (80031ec <TIM_Base_SetConfig+0x124>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d017      	beq.n	800317a <TIM_Base_SetConfig+0xb2>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a28      	ldr	r2, [pc, #160]	; (80031f0 <TIM_Base_SetConfig+0x128>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d013      	beq.n	800317a <TIM_Base_SetConfig+0xb2>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a27      	ldr	r2, [pc, #156]	; (80031f4 <TIM_Base_SetConfig+0x12c>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d00f      	beq.n	800317a <TIM_Base_SetConfig+0xb2>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a26      	ldr	r2, [pc, #152]	; (80031f8 <TIM_Base_SetConfig+0x130>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d00b      	beq.n	800317a <TIM_Base_SetConfig+0xb2>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a25      	ldr	r2, [pc, #148]	; (80031fc <TIM_Base_SetConfig+0x134>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d007      	beq.n	800317a <TIM_Base_SetConfig+0xb2>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a24      	ldr	r2, [pc, #144]	; (8003200 <TIM_Base_SetConfig+0x138>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d003      	beq.n	800317a <TIM_Base_SetConfig+0xb2>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a23      	ldr	r2, [pc, #140]	; (8003204 <TIM_Base_SetConfig+0x13c>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d108      	bne.n	800318c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003180:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	4313      	orrs	r3, r2
 800318a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	4313      	orrs	r3, r2
 8003198:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	689a      	ldr	r2, [r3, #8]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a0a      	ldr	r2, [pc, #40]	; (80031dc <TIM_Base_SetConfig+0x114>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d003      	beq.n	80031c0 <TIM_Base_SetConfig+0xf8>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a0c      	ldr	r2, [pc, #48]	; (80031ec <TIM_Base_SetConfig+0x124>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d103      	bne.n	80031c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	691a      	ldr	r2, [r3, #16]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	615a      	str	r2, [r3, #20]
}
 80031ce:	bf00      	nop
 80031d0:	3714      	adds	r7, #20
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	40010000 	.word	0x40010000
 80031e0:	40000400 	.word	0x40000400
 80031e4:	40000800 	.word	0x40000800
 80031e8:	40000c00 	.word	0x40000c00
 80031ec:	40010400 	.word	0x40010400
 80031f0:	40014000 	.word	0x40014000
 80031f4:	40014400 	.word	0x40014400
 80031f8:	40014800 	.word	0x40014800
 80031fc:	40001800 	.word	0x40001800
 8003200:	40001c00 	.word	0x40001c00
 8003204:	40002000 	.word	0x40002000

08003208 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003230:	b084      	sub	sp, #16
 8003232:	b580      	push	{r7, lr}
 8003234:	b084      	sub	sp, #16
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
 800323a:	f107 001c 	add.w	r0, r7, #28
 800323e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003244:	2b01      	cmp	r3, #1
 8003246:	d122      	bne.n	800328e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800325c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003272:	2b01      	cmp	r3, #1
 8003274:	d105      	bne.n	8003282 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f001 fbee 	bl	8004a64 <USB_CoreReset>
 8003288:	4603      	mov	r3, r0
 800328a:	73fb      	strb	r3, [r7, #15]
 800328c:	e01a      	b.n	80032c4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f001 fbe2 	bl	8004a64 <USB_CoreReset>
 80032a0:	4603      	mov	r3, r0
 80032a2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80032a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d106      	bne.n	80032b8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	639a      	str	r2, [r3, #56]	; 0x38
 80032b6:	e005      	b.n	80032c4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80032c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d10b      	bne.n	80032e2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f043 0206 	orr.w	r2, r3, #6
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f043 0220 	orr.w	r2, r3, #32
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80032e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80032ee:	b004      	add	sp, #16
 80032f0:	4770      	bx	lr
	...

080032f4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b087      	sub	sp, #28
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	4613      	mov	r3, r2
 8003300:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003302:	79fb      	ldrb	r3, [r7, #7]
 8003304:	2b02      	cmp	r3, #2
 8003306:	d165      	bne.n	80033d4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	4a41      	ldr	r2, [pc, #260]	; (8003410 <USB_SetTurnaroundTime+0x11c>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d906      	bls.n	800331e <USB_SetTurnaroundTime+0x2a>
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	4a40      	ldr	r2, [pc, #256]	; (8003414 <USB_SetTurnaroundTime+0x120>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d202      	bcs.n	800331e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003318:	230f      	movs	r3, #15
 800331a:	617b      	str	r3, [r7, #20]
 800331c:	e062      	b.n	80033e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	4a3c      	ldr	r2, [pc, #240]	; (8003414 <USB_SetTurnaroundTime+0x120>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d306      	bcc.n	8003334 <USB_SetTurnaroundTime+0x40>
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	4a3b      	ldr	r2, [pc, #236]	; (8003418 <USB_SetTurnaroundTime+0x124>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d202      	bcs.n	8003334 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800332e:	230e      	movs	r3, #14
 8003330:	617b      	str	r3, [r7, #20]
 8003332:	e057      	b.n	80033e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	4a38      	ldr	r2, [pc, #224]	; (8003418 <USB_SetTurnaroundTime+0x124>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d306      	bcc.n	800334a <USB_SetTurnaroundTime+0x56>
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	4a37      	ldr	r2, [pc, #220]	; (800341c <USB_SetTurnaroundTime+0x128>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d202      	bcs.n	800334a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003344:	230d      	movs	r3, #13
 8003346:	617b      	str	r3, [r7, #20]
 8003348:	e04c      	b.n	80033e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	4a33      	ldr	r2, [pc, #204]	; (800341c <USB_SetTurnaroundTime+0x128>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d306      	bcc.n	8003360 <USB_SetTurnaroundTime+0x6c>
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	4a32      	ldr	r2, [pc, #200]	; (8003420 <USB_SetTurnaroundTime+0x12c>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d802      	bhi.n	8003360 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800335a:	230c      	movs	r3, #12
 800335c:	617b      	str	r3, [r7, #20]
 800335e:	e041      	b.n	80033e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	4a2f      	ldr	r2, [pc, #188]	; (8003420 <USB_SetTurnaroundTime+0x12c>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d906      	bls.n	8003376 <USB_SetTurnaroundTime+0x82>
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	4a2e      	ldr	r2, [pc, #184]	; (8003424 <USB_SetTurnaroundTime+0x130>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d802      	bhi.n	8003376 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003370:	230b      	movs	r3, #11
 8003372:	617b      	str	r3, [r7, #20]
 8003374:	e036      	b.n	80033e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	4a2a      	ldr	r2, [pc, #168]	; (8003424 <USB_SetTurnaroundTime+0x130>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d906      	bls.n	800338c <USB_SetTurnaroundTime+0x98>
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	4a29      	ldr	r2, [pc, #164]	; (8003428 <USB_SetTurnaroundTime+0x134>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d802      	bhi.n	800338c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003386:	230a      	movs	r3, #10
 8003388:	617b      	str	r3, [r7, #20]
 800338a:	e02b      	b.n	80033e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	4a26      	ldr	r2, [pc, #152]	; (8003428 <USB_SetTurnaroundTime+0x134>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d906      	bls.n	80033a2 <USB_SetTurnaroundTime+0xae>
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	4a25      	ldr	r2, [pc, #148]	; (800342c <USB_SetTurnaroundTime+0x138>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d202      	bcs.n	80033a2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800339c:	2309      	movs	r3, #9
 800339e:	617b      	str	r3, [r7, #20]
 80033a0:	e020      	b.n	80033e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	4a21      	ldr	r2, [pc, #132]	; (800342c <USB_SetTurnaroundTime+0x138>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d306      	bcc.n	80033b8 <USB_SetTurnaroundTime+0xc4>
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	4a20      	ldr	r2, [pc, #128]	; (8003430 <USB_SetTurnaroundTime+0x13c>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d802      	bhi.n	80033b8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80033b2:	2308      	movs	r3, #8
 80033b4:	617b      	str	r3, [r7, #20]
 80033b6:	e015      	b.n	80033e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	4a1d      	ldr	r2, [pc, #116]	; (8003430 <USB_SetTurnaroundTime+0x13c>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d906      	bls.n	80033ce <USB_SetTurnaroundTime+0xda>
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	4a1c      	ldr	r2, [pc, #112]	; (8003434 <USB_SetTurnaroundTime+0x140>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d202      	bcs.n	80033ce <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80033c8:	2307      	movs	r3, #7
 80033ca:	617b      	str	r3, [r7, #20]
 80033cc:	e00a      	b.n	80033e4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80033ce:	2306      	movs	r3, #6
 80033d0:	617b      	str	r3, [r7, #20]
 80033d2:	e007      	b.n	80033e4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80033d4:	79fb      	ldrb	r3, [r7, #7]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d102      	bne.n	80033e0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80033da:	2309      	movs	r3, #9
 80033dc:	617b      	str	r3, [r7, #20]
 80033de:	e001      	b.n	80033e4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80033e0:	2309      	movs	r3, #9
 80033e2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	68da      	ldr	r2, [r3, #12]
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	029b      	lsls	r3, r3, #10
 80033f8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80033fc:	431a      	orrs	r2, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	371c      	adds	r7, #28
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	00d8acbf 	.word	0x00d8acbf
 8003414:	00e4e1c0 	.word	0x00e4e1c0
 8003418:	00f42400 	.word	0x00f42400
 800341c:	01067380 	.word	0x01067380
 8003420:	011a499f 	.word	0x011a499f
 8003424:	01312cff 	.word	0x01312cff
 8003428:	014ca43f 	.word	0x014ca43f
 800342c:	016e3600 	.word	0x016e3600
 8003430:	01a6ab1f 	.word	0x01a6ab1f
 8003434:	01e84800 	.word	0x01e84800

08003438 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f043 0201 	orr.w	r2, r3, #1
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800345a:	b480      	push	{r7}
 800345c:	b083      	sub	sp, #12
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f023 0201 	bic.w	r2, r3, #1
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	460b      	mov	r3, r1
 8003486:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003488:	2300      	movs	r3, #0
 800348a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003498:	78fb      	ldrb	r3, [r7, #3]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d115      	bne.n	80034ca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80034aa:	2001      	movs	r0, #1
 80034ac:	f7fd fa3c 	bl	8000928 <HAL_Delay>
      ms++;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	3301      	adds	r3, #1
 80034b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f001 fa45 	bl	8004946 <USB_GetMode>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d01e      	beq.n	8003500 <USB_SetCurrentMode+0x84>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2b31      	cmp	r3, #49	; 0x31
 80034c6:	d9f0      	bls.n	80034aa <USB_SetCurrentMode+0x2e>
 80034c8:	e01a      	b.n	8003500 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80034ca:	78fb      	ldrb	r3, [r7, #3]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d115      	bne.n	80034fc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80034dc:	2001      	movs	r0, #1
 80034de:	f7fd fa23 	bl	8000928 <HAL_Delay>
      ms++;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	3301      	adds	r3, #1
 80034e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f001 fa2c 	bl	8004946 <USB_GetMode>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d005      	beq.n	8003500 <USB_SetCurrentMode+0x84>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2b31      	cmp	r3, #49	; 0x31
 80034f8:	d9f0      	bls.n	80034dc <USB_SetCurrentMode+0x60>
 80034fa:	e001      	b.n	8003500 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e005      	b.n	800350c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2b32      	cmp	r3, #50	; 0x32
 8003504:	d101      	bne.n	800350a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e000      	b.n	800350c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003514:	b084      	sub	sp, #16
 8003516:	b580      	push	{r7, lr}
 8003518:	b086      	sub	sp, #24
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
 800351e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003522:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003526:	2300      	movs	r3, #0
 8003528:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800352e:	2300      	movs	r3, #0
 8003530:	613b      	str	r3, [r7, #16]
 8003532:	e009      	b.n	8003548 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	3340      	adds	r3, #64	; 0x40
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4413      	add	r3, r2
 800353e:	2200      	movs	r2, #0
 8003540:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	3301      	adds	r3, #1
 8003546:	613b      	str	r3, [r7, #16]
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	2b0e      	cmp	r3, #14
 800354c:	d9f2      	bls.n	8003534 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800354e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003550:	2b00      	cmp	r3, #0
 8003552:	d11c      	bne.n	800358e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003562:	f043 0302 	orr.w	r3, r3, #2
 8003566:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003578:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003584:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	639a      	str	r2, [r3, #56]	; 0x38
 800358c:	e00b      	b.n	80035a6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003592:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80035ac:	461a      	mov	r2, r3
 80035ae:	2300      	movs	r3, #0
 80035b0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035b8:	4619      	mov	r1, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035c0:	461a      	mov	r2, r3
 80035c2:	680b      	ldr	r3, [r1, #0]
 80035c4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80035c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d10c      	bne.n	80035e6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80035cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d104      	bne.n	80035dc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80035d2:	2100      	movs	r1, #0
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 f965 	bl	80038a4 <USB_SetDevSpeed>
 80035da:	e008      	b.n	80035ee <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80035dc:	2101      	movs	r1, #1
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f960 	bl	80038a4 <USB_SetDevSpeed>
 80035e4:	e003      	b.n	80035ee <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80035e6:	2103      	movs	r1, #3
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 f95b 	bl	80038a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80035ee:	2110      	movs	r1, #16
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 f8f3 	bl	80037dc <USB_FlushTxFifo>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d001      	beq.n	8003600 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 f91f 	bl	8003844 <USB_FlushRxFifo>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d001      	beq.n	8003610 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003616:	461a      	mov	r2, r3
 8003618:	2300      	movs	r3, #0
 800361a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003622:	461a      	mov	r2, r3
 8003624:	2300      	movs	r3, #0
 8003626:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800362e:	461a      	mov	r2, r3
 8003630:	2300      	movs	r3, #0
 8003632:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003634:	2300      	movs	r3, #0
 8003636:	613b      	str	r3, [r7, #16]
 8003638:	e043      	b.n	80036c2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	015a      	lsls	r2, r3, #5
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	4413      	add	r3, r2
 8003642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800364c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003650:	d118      	bne.n	8003684 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d10a      	bne.n	800366e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	015a      	lsls	r2, r3, #5
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	4413      	add	r3, r2
 8003660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003664:	461a      	mov	r2, r3
 8003666:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800366a:	6013      	str	r3, [r2, #0]
 800366c:	e013      	b.n	8003696 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	015a      	lsls	r2, r3, #5
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	4413      	add	r3, r2
 8003676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800367a:	461a      	mov	r2, r3
 800367c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003680:	6013      	str	r3, [r2, #0]
 8003682:	e008      	b.n	8003696 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	015a      	lsls	r2, r3, #5
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	4413      	add	r3, r2
 800368c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003690:	461a      	mov	r2, r3
 8003692:	2300      	movs	r3, #0
 8003694:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	015a      	lsls	r2, r3, #5
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	4413      	add	r3, r2
 800369e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036a2:	461a      	mov	r2, r3
 80036a4:	2300      	movs	r3, #0
 80036a6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	015a      	lsls	r2, r3, #5
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	4413      	add	r3, r2
 80036b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036b4:	461a      	mov	r2, r3
 80036b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80036ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	3301      	adds	r3, #1
 80036c0:	613b      	str	r3, [r7, #16]
 80036c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d3b7      	bcc.n	800363a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80036ca:	2300      	movs	r3, #0
 80036cc:	613b      	str	r3, [r7, #16]
 80036ce:	e043      	b.n	8003758 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	015a      	lsls	r2, r3, #5
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	4413      	add	r3, r2
 80036d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80036e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036e6:	d118      	bne.n	800371a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10a      	bne.n	8003704 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	015a      	lsls	r2, r3, #5
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	4413      	add	r3, r2
 80036f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036fa:	461a      	mov	r2, r3
 80036fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003700:	6013      	str	r3, [r2, #0]
 8003702:	e013      	b.n	800372c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	015a      	lsls	r2, r3, #5
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4413      	add	r3, r2
 800370c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003710:	461a      	mov	r2, r3
 8003712:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003716:	6013      	str	r3, [r2, #0]
 8003718:	e008      	b.n	800372c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	015a      	lsls	r2, r3, #5
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	4413      	add	r3, r2
 8003722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003726:	461a      	mov	r2, r3
 8003728:	2300      	movs	r3, #0
 800372a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	015a      	lsls	r2, r3, #5
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	4413      	add	r3, r2
 8003734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003738:	461a      	mov	r2, r3
 800373a:	2300      	movs	r3, #0
 800373c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	015a      	lsls	r2, r3, #5
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	4413      	add	r3, r2
 8003746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800374a:	461a      	mov	r2, r3
 800374c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003750:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	3301      	adds	r3, #1
 8003756:	613b      	str	r3, [r7, #16]
 8003758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	429a      	cmp	r2, r3
 800375e:	d3b7      	bcc.n	80036d0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800376e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003772:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003780:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003784:	2b00      	cmp	r3, #0
 8003786:	d105      	bne.n	8003794 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	f043 0210 	orr.w	r2, r3, #16
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	699a      	ldr	r2, [r3, #24]
 8003798:	4b0f      	ldr	r3, [pc, #60]	; (80037d8 <USB_DevInit+0x2c4>)
 800379a:	4313      	orrs	r3, r2
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80037a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d005      	beq.n	80037b2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	f043 0208 	orr.w	r2, r3, #8
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80037b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d107      	bne.n	80037c8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80037c0:	f043 0304 	orr.w	r3, r3, #4
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80037c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3718      	adds	r7, #24
 80037ce:	46bd      	mov	sp, r7
 80037d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80037d4:	b004      	add	sp, #16
 80037d6:	4770      	bx	lr
 80037d8:	803c3800 	.word	0x803c3800

080037dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80037e6:	2300      	movs	r3, #0
 80037e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	3301      	adds	r3, #1
 80037ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4a13      	ldr	r2, [pc, #76]	; (8003840 <USB_FlushTxFifo+0x64>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d901      	bls.n	80037fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e01b      	b.n	8003834 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	2b00      	cmp	r3, #0
 8003802:	daf2      	bge.n	80037ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003804:	2300      	movs	r3, #0
 8003806:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	019b      	lsls	r3, r3, #6
 800380c:	f043 0220 	orr.w	r2, r3, #32
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	3301      	adds	r3, #1
 8003818:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	4a08      	ldr	r2, [pc, #32]	; (8003840 <USB_FlushTxFifo+0x64>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d901      	bls.n	8003826 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e006      	b.n	8003834 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	f003 0320 	and.w	r3, r3, #32
 800382e:	2b20      	cmp	r3, #32
 8003830:	d0f0      	beq.n	8003814 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3714      	adds	r7, #20
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr
 8003840:	00030d40 	.word	0x00030d40

08003844 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800384c:	2300      	movs	r3, #0
 800384e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	3301      	adds	r3, #1
 8003854:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	4a11      	ldr	r2, [pc, #68]	; (80038a0 <USB_FlushRxFifo+0x5c>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d901      	bls.n	8003862 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e018      	b.n	8003894 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	2b00      	cmp	r3, #0
 8003868:	daf2      	bge.n	8003850 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800386a:	2300      	movs	r3, #0
 800386c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2210      	movs	r2, #16
 8003872:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	3301      	adds	r3, #1
 8003878:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	4a08      	ldr	r2, [pc, #32]	; (80038a0 <USB_FlushRxFifo+0x5c>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d901      	bls.n	8003886 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e006      	b.n	8003894 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	f003 0310 	and.w	r3, r3, #16
 800388e:	2b10      	cmp	r3, #16
 8003890:	d0f0      	beq.n	8003874 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3714      	adds	r7, #20
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr
 80038a0:	00030d40 	.word	0x00030d40

080038a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	460b      	mov	r3, r1
 80038ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	78fb      	ldrb	r3, [r7, #3]
 80038be:	68f9      	ldr	r1, [r7, #12]
 80038c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038c4:	4313      	orrs	r3, r2
 80038c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3714      	adds	r7, #20
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr

080038d6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80038d6:	b480      	push	{r7}
 80038d8:	b087      	sub	sp, #28
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f003 0306 	and.w	r3, r3, #6
 80038ee:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d102      	bne.n	80038fc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80038f6:	2300      	movs	r3, #0
 80038f8:	75fb      	strb	r3, [r7, #23]
 80038fa:	e00a      	b.n	8003912 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d002      	beq.n	8003908 <USB_GetDevSpeed+0x32>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2b06      	cmp	r3, #6
 8003906:	d102      	bne.n	800390e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003908:	2302      	movs	r3, #2
 800390a:	75fb      	strb	r3, [r7, #23]
 800390c:	e001      	b.n	8003912 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800390e:	230f      	movs	r3, #15
 8003910:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003912:	7dfb      	ldrb	r3, [r7, #23]
}
 8003914:	4618      	mov	r0, r3
 8003916:	371c      	adds	r7, #28
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	785b      	ldrb	r3, [r3, #1]
 8003938:	2b01      	cmp	r3, #1
 800393a:	d13a      	bne.n	80039b2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003942:	69da      	ldr	r2, [r3, #28]
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	f003 030f 	and.w	r3, r3, #15
 800394c:	2101      	movs	r1, #1
 800394e:	fa01 f303 	lsl.w	r3, r1, r3
 8003952:	b29b      	uxth	r3, r3
 8003954:	68f9      	ldr	r1, [r7, #12]
 8003956:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800395a:	4313      	orrs	r3, r2
 800395c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	015a      	lsls	r2, r3, #5
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	4413      	add	r3, r2
 8003966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d155      	bne.n	8003a20 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	015a      	lsls	r2, r3, #5
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	4413      	add	r3, r2
 800397c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	791b      	ldrb	r3, [r3, #4]
 800398e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003990:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	059b      	lsls	r3, r3, #22
 8003996:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003998:	4313      	orrs	r3, r2
 800399a:	68ba      	ldr	r2, [r7, #8]
 800399c:	0151      	lsls	r1, r2, #5
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	440a      	add	r2, r1
 80039a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039ae:	6013      	str	r3, [r2, #0]
 80039b0:	e036      	b.n	8003a20 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039b8:	69da      	ldr	r2, [r3, #28]
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	f003 030f 	and.w	r3, r3, #15
 80039c2:	2101      	movs	r1, #1
 80039c4:	fa01 f303 	lsl.w	r3, r1, r3
 80039c8:	041b      	lsls	r3, r3, #16
 80039ca:	68f9      	ldr	r1, [r7, #12]
 80039cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039d0:	4313      	orrs	r3, r2
 80039d2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	015a      	lsls	r2, r3, #5
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	4413      	add	r3, r2
 80039dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d11a      	bne.n	8003a20 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	015a      	lsls	r2, r3, #5
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	4413      	add	r3, r2
 80039f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	791b      	ldrb	r3, [r3, #4]
 8003a04:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003a06:	430b      	orrs	r3, r1
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	68ba      	ldr	r2, [r7, #8]
 8003a0c:	0151      	lsls	r1, r2, #5
 8003a0e:	68fa      	ldr	r2, [r7, #12]
 8003a10:	440a      	add	r2, r1
 8003a12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a1e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3714      	adds	r7, #20
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
	...

08003a30 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	785b      	ldrb	r3, [r3, #1]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d161      	bne.n	8003b10 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	015a      	lsls	r2, r3, #5
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	4413      	add	r3, r2
 8003a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a62:	d11f      	bne.n	8003aa4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	015a      	lsls	r2, r3, #5
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	0151      	lsls	r1, r2, #5
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	440a      	add	r2, r1
 8003a7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003a82:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	015a      	lsls	r2, r3, #5
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68ba      	ldr	r2, [r7, #8]
 8003a94:	0151      	lsls	r1, r2, #5
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	440a      	add	r2, r1
 8003a9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003aa2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	f003 030f 	and.w	r3, r3, #15
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	43db      	mvns	r3, r3
 8003abe:	68f9      	ldr	r1, [r7, #12]
 8003ac0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ace:	69da      	ldr	r2, [r3, #28]
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	f003 030f 	and.w	r3, r3, #15
 8003ad8:	2101      	movs	r1, #1
 8003ada:	fa01 f303 	lsl.w	r3, r1, r3
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	68f9      	ldr	r1, [r7, #12]
 8003ae4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ae8:	4013      	ands	r3, r2
 8003aea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	015a      	lsls	r2, r3, #5
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	4413      	add	r3, r2
 8003af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	0159      	lsls	r1, r3, #5
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	440b      	add	r3, r1
 8003b02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b06:	4619      	mov	r1, r3
 8003b08:	4b35      	ldr	r3, [pc, #212]	; (8003be0 <USB_DeactivateEndpoint+0x1b0>)
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	600b      	str	r3, [r1, #0]
 8003b0e:	e060      	b.n	8003bd2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	015a      	lsls	r2, r3, #5
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	4413      	add	r3, r2
 8003b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b26:	d11f      	bne.n	8003b68 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	015a      	lsls	r2, r3, #5
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	4413      	add	r3, r2
 8003b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68ba      	ldr	r2, [r7, #8]
 8003b38:	0151      	lsls	r1, r2, #5
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	440a      	add	r2, r1
 8003b3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b42:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003b46:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	015a      	lsls	r2, r3, #5
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	4413      	add	r3, r2
 8003b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68ba      	ldr	r2, [r7, #8]
 8003b58:	0151      	lsls	r1, r2, #5
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	440a      	add	r2, r1
 8003b5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b66:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	f003 030f 	and.w	r3, r3, #15
 8003b78:	2101      	movs	r1, #1
 8003b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b7e:	041b      	lsls	r3, r3, #16
 8003b80:	43db      	mvns	r3, r3
 8003b82:	68f9      	ldr	r1, [r7, #12]
 8003b84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b88:	4013      	ands	r3, r2
 8003b8a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b92:	69da      	ldr	r2, [r3, #28]
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	f003 030f 	and.w	r3, r3, #15
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba2:	041b      	lsls	r3, r3, #16
 8003ba4:	43db      	mvns	r3, r3
 8003ba6:	68f9      	ldr	r1, [r7, #12]
 8003ba8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bac:	4013      	ands	r3, r2
 8003bae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	015a      	lsls	r2, r3, #5
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	0159      	lsls	r1, r3, #5
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	440b      	add	r3, r1
 8003bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bca:	4619      	mov	r1, r3
 8003bcc:	4b05      	ldr	r3, [pc, #20]	; (8003be4 <USB_DeactivateEndpoint+0x1b4>)
 8003bce:	4013      	ands	r3, r2
 8003bd0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3714      	adds	r7, #20
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr
 8003be0:	ec337800 	.word	0xec337800
 8003be4:	eff37800 	.word	0xeff37800

08003be8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b08a      	sub	sp, #40	; 0x28
 8003bec:	af02      	add	r7, sp, #8
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	785b      	ldrb	r3, [r3, #1]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	f040 815c 	bne.w	8003ec2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d132      	bne.n	8003c78 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	015a      	lsls	r2, r3, #5
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	4413      	add	r3, r2
 8003c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	0151      	lsls	r1, r2, #5
 8003c24:	69fa      	ldr	r2, [r7, #28]
 8003c26:	440a      	add	r2, r1
 8003c28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c2c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003c30:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003c34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	015a      	lsls	r2, r3, #5
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	69ba      	ldr	r2, [r7, #24]
 8003c46:	0151      	lsls	r1, r2, #5
 8003c48:	69fa      	ldr	r2, [r7, #28]
 8003c4a:	440a      	add	r2, r1
 8003c4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c54:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	015a      	lsls	r2, r3, #5
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	69ba      	ldr	r2, [r7, #24]
 8003c66:	0151      	lsls	r1, r2, #5
 8003c68:	69fa      	ldr	r2, [r7, #28]
 8003c6a:	440a      	add	r2, r1
 8003c6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c70:	0cdb      	lsrs	r3, r3, #19
 8003c72:	04db      	lsls	r3, r3, #19
 8003c74:	6113      	str	r3, [r2, #16]
 8003c76:	e074      	b.n	8003d62 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	015a      	lsls	r2, r3, #5
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	4413      	add	r3, r2
 8003c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	69ba      	ldr	r2, [r7, #24]
 8003c88:	0151      	lsls	r1, r2, #5
 8003c8a:	69fa      	ldr	r2, [r7, #28]
 8003c8c:	440a      	add	r2, r1
 8003c8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c92:	0cdb      	lsrs	r3, r3, #19
 8003c94:	04db      	lsls	r3, r3, #19
 8003c96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	015a      	lsls	r2, r3, #5
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	69ba      	ldr	r2, [r7, #24]
 8003ca8:	0151      	lsls	r1, r2, #5
 8003caa:	69fa      	ldr	r2, [r7, #28]
 8003cac:	440a      	add	r2, r1
 8003cae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cb2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003cb6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003cba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	015a      	lsls	r2, r3, #5
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cc8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	6999      	ldr	r1, [r3, #24]
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	440b      	add	r3, r1
 8003cd4:	1e59      	subs	r1, r3, #1
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cde:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003ce0:	4b9d      	ldr	r3, [pc, #628]	; (8003f58 <USB_EPStartXfer+0x370>)
 8003ce2:	400b      	ands	r3, r1
 8003ce4:	69b9      	ldr	r1, [r7, #24]
 8003ce6:	0148      	lsls	r0, r1, #5
 8003ce8:	69f9      	ldr	r1, [r7, #28]
 8003cea:	4401      	add	r1, r0
 8003cec:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	015a      	lsls	r2, r3, #5
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d00:	691a      	ldr	r2, [r3, #16]
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d0a:	69b9      	ldr	r1, [r7, #24]
 8003d0c:	0148      	lsls	r0, r1, #5
 8003d0e:	69f9      	ldr	r1, [r7, #28]
 8003d10:	4401      	add	r1, r0
 8003d12:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003d16:	4313      	orrs	r3, r2
 8003d18:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	791b      	ldrb	r3, [r3, #4]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d11f      	bne.n	8003d62 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	015a      	lsls	r2, r3, #5
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	4413      	add	r3, r2
 8003d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	0151      	lsls	r1, r2, #5
 8003d34:	69fa      	ldr	r2, [r7, #28]
 8003d36:	440a      	add	r2, r1
 8003d38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d3c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003d40:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	015a      	lsls	r2, r3, #5
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	4413      	add	r3, r2
 8003d4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	0151      	lsls	r1, r2, #5
 8003d54:	69fa      	ldr	r2, [r7, #28]
 8003d56:	440a      	add	r2, r1
 8003d58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003d60:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003d62:	79fb      	ldrb	r3, [r7, #7]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d14b      	bne.n	8003e00 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d009      	beq.n	8003d84 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	015a      	lsls	r2, r3, #5
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	4413      	add	r3, r2
 8003d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	791b      	ldrb	r3, [r3, #4]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d128      	bne.n	8003dde <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d110      	bne.n	8003dbe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	015a      	lsls	r2, r3, #5
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	4413      	add	r3, r2
 8003da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	69ba      	ldr	r2, [r7, #24]
 8003dac:	0151      	lsls	r1, r2, #5
 8003dae:	69fa      	ldr	r2, [r7, #28]
 8003db0:	440a      	add	r2, r1
 8003db2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003db6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003dba:	6013      	str	r3, [r2, #0]
 8003dbc:	e00f      	b.n	8003dde <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	015a      	lsls	r2, r3, #5
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	0151      	lsls	r1, r2, #5
 8003dd0:	69fa      	ldr	r2, [r7, #28]
 8003dd2:	440a      	add	r2, r1
 8003dd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ddc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	015a      	lsls	r2, r3, #5
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	4413      	add	r3, r2
 8003de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	0151      	lsls	r1, r2, #5
 8003df0:	69fa      	ldr	r2, [r7, #28]
 8003df2:	440a      	add	r2, r1
 8003df4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003df8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003dfc:	6013      	str	r3, [r2, #0]
 8003dfe:	e133      	b.n	8004068 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	015a      	lsls	r2, r3, #5
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	4413      	add	r3, r2
 8003e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	0151      	lsls	r1, r2, #5
 8003e12:	69fa      	ldr	r2, [r7, #28]
 8003e14:	440a      	add	r2, r1
 8003e16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003e1e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	791b      	ldrb	r3, [r3, #4]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d015      	beq.n	8003e54 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 811b 	beq.w	8004068 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	f003 030f 	and.w	r3, r3, #15
 8003e42:	2101      	movs	r1, #1
 8003e44:	fa01 f303 	lsl.w	r3, r1, r3
 8003e48:	69f9      	ldr	r1, [r7, #28]
 8003e4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	634b      	str	r3, [r1, #52]	; 0x34
 8003e52:	e109      	b.n	8004068 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d110      	bne.n	8003e86 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	015a      	lsls	r2, r3, #5
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	69ba      	ldr	r2, [r7, #24]
 8003e74:	0151      	lsls	r1, r2, #5
 8003e76:	69fa      	ldr	r2, [r7, #28]
 8003e78:	440a      	add	r2, r1
 8003e7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e82:	6013      	str	r3, [r2, #0]
 8003e84:	e00f      	b.n	8003ea6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	015a      	lsls	r2, r3, #5
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	0151      	lsls	r1, r2, #5
 8003e98:	69fa      	ldr	r2, [r7, #28]
 8003e9a:	440a      	add	r2, r1
 8003e9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ea4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	6919      	ldr	r1, [r3, #16]
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	781a      	ldrb	r2, [r3, #0]
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	b298      	uxth	r0, r3
 8003eb4:	79fb      	ldrb	r3, [r7, #7]
 8003eb6:	9300      	str	r3, [sp, #0]
 8003eb8:	4603      	mov	r3, r0
 8003eba:	68f8      	ldr	r0, [r7, #12]
 8003ebc:	f000 fade 	bl	800447c <USB_WritePacket>
 8003ec0:	e0d2      	b.n	8004068 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	015a      	lsls	r2, r3, #5
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	4413      	add	r3, r2
 8003eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	0151      	lsls	r1, r2, #5
 8003ed4:	69fa      	ldr	r2, [r7, #28]
 8003ed6:	440a      	add	r2, r1
 8003ed8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003edc:	0cdb      	lsrs	r3, r3, #19
 8003ede:	04db      	lsls	r3, r3, #19
 8003ee0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	015a      	lsls	r2, r3, #5
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	4413      	add	r3, r2
 8003eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	0151      	lsls	r1, r2, #5
 8003ef4:	69fa      	ldr	r2, [r7, #28]
 8003ef6:	440a      	add	r2, r1
 8003ef8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003efc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003f00:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003f04:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d126      	bne.n	8003f5c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	015a      	lsls	r2, r3, #5
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	4413      	add	r3, r2
 8003f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f1a:	691a      	ldr	r2, [r3, #16]
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f24:	69b9      	ldr	r1, [r7, #24]
 8003f26:	0148      	lsls	r0, r1, #5
 8003f28:	69f9      	ldr	r1, [r7, #28]
 8003f2a:	4401      	add	r1, r0
 8003f2c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003f30:	4313      	orrs	r3, r2
 8003f32:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	015a      	lsls	r2, r3, #5
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	69ba      	ldr	r2, [r7, #24]
 8003f44:	0151      	lsls	r1, r2, #5
 8003f46:	69fa      	ldr	r2, [r7, #28]
 8003f48:	440a      	add	r2, r1
 8003f4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f52:	6113      	str	r3, [r2, #16]
 8003f54:	e03a      	b.n	8003fcc <USB_EPStartXfer+0x3e4>
 8003f56:	bf00      	nop
 8003f58:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	699a      	ldr	r2, [r3, #24]
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	4413      	add	r3, r2
 8003f66:	1e5a      	subs	r2, r3, #1
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f70:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	8afa      	ldrh	r2, [r7, #22]
 8003f78:	fb03 f202 	mul.w	r2, r3, r2
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	015a      	lsls	r2, r3, #5
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	4413      	add	r3, r2
 8003f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f8c:	691a      	ldr	r2, [r3, #16]
 8003f8e:	8afb      	ldrh	r3, [r7, #22]
 8003f90:	04d9      	lsls	r1, r3, #19
 8003f92:	4b38      	ldr	r3, [pc, #224]	; (8004074 <USB_EPStartXfer+0x48c>)
 8003f94:	400b      	ands	r3, r1
 8003f96:	69b9      	ldr	r1, [r7, #24]
 8003f98:	0148      	lsls	r0, r1, #5
 8003f9a:	69f9      	ldr	r1, [r7, #28]
 8003f9c:	4401      	add	r1, r0
 8003f9e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	015a      	lsls	r2, r3, #5
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	4413      	add	r3, r2
 8003fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fb2:	691a      	ldr	r2, [r3, #16]
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	69db      	ldr	r3, [r3, #28]
 8003fb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fbc:	69b9      	ldr	r1, [r7, #24]
 8003fbe:	0148      	lsls	r0, r1, #5
 8003fc0:	69f9      	ldr	r1, [r7, #28]
 8003fc2:	4401      	add	r1, r0
 8003fc4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003fcc:	79fb      	ldrb	r3, [r7, #7]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d10d      	bne.n	8003fee <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d009      	beq.n	8003fee <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	6919      	ldr	r1, [r3, #16]
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	015a      	lsls	r2, r3, #5
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fea:	460a      	mov	r2, r1
 8003fec:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	791b      	ldrb	r3, [r3, #4]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d128      	bne.n	8004048 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004002:	2b00      	cmp	r3, #0
 8004004:	d110      	bne.n	8004028 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	015a      	lsls	r2, r3, #5
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	4413      	add	r3, r2
 800400e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	0151      	lsls	r1, r2, #5
 8004018:	69fa      	ldr	r2, [r7, #28]
 800401a:	440a      	add	r2, r1
 800401c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004020:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004024:	6013      	str	r3, [r2, #0]
 8004026:	e00f      	b.n	8004048 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	015a      	lsls	r2, r3, #5
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	4413      	add	r3, r2
 8004030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	69ba      	ldr	r2, [r7, #24]
 8004038:	0151      	lsls	r1, r2, #5
 800403a:	69fa      	ldr	r2, [r7, #28]
 800403c:	440a      	add	r2, r1
 800403e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004042:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004046:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	015a      	lsls	r2, r3, #5
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	4413      	add	r3, r2
 8004050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	0151      	lsls	r1, r2, #5
 800405a:	69fa      	ldr	r2, [r7, #28]
 800405c:	440a      	add	r2, r1
 800405e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004062:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004066:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3720      	adds	r7, #32
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	1ff80000 	.word	0x1ff80000

08004078 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004078:	b480      	push	{r7}
 800407a:	b087      	sub	sp, #28
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	4613      	mov	r3, r2
 8004084:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	785b      	ldrb	r3, [r3, #1]
 8004094:	2b01      	cmp	r3, #1
 8004096:	f040 80ce 	bne.w	8004236 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d132      	bne.n	8004108 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	015a      	lsls	r2, r3, #5
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	4413      	add	r3, r2
 80040aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	0151      	lsls	r1, r2, #5
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	440a      	add	r2, r1
 80040b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80040c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80040c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	015a      	lsls	r2, r3, #5
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	4413      	add	r3, r2
 80040ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	0151      	lsls	r1, r2, #5
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	440a      	add	r2, r1
 80040dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80040e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	015a      	lsls	r2, r3, #5
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	4413      	add	r3, r2
 80040ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	0151      	lsls	r1, r2, #5
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	440a      	add	r2, r1
 80040fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004100:	0cdb      	lsrs	r3, r3, #19
 8004102:	04db      	lsls	r3, r3, #19
 8004104:	6113      	str	r3, [r2, #16]
 8004106:	e04e      	b.n	80041a6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	015a      	lsls	r2, r3, #5
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	4413      	add	r3, r2
 8004110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	0151      	lsls	r1, r2, #5
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	440a      	add	r2, r1
 800411e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004122:	0cdb      	lsrs	r3, r3, #19
 8004124:	04db      	lsls	r3, r3, #19
 8004126:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	015a      	lsls	r2, r3, #5
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	4413      	add	r3, r2
 8004130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	0151      	lsls	r1, r2, #5
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	440a      	add	r2, r1
 800413e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004142:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004146:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800414a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	699a      	ldr	r2, [r3, #24]
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	429a      	cmp	r2, r3
 8004156:	d903      	bls.n	8004160 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	68da      	ldr	r2, [r3, #12]
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	015a      	lsls	r2, r3, #5
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	4413      	add	r3, r2
 8004168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	693a      	ldr	r2, [r7, #16]
 8004170:	0151      	lsls	r1, r2, #5
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	440a      	add	r2, r1
 8004176:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800417a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800417e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	015a      	lsls	r2, r3, #5
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	4413      	add	r3, r2
 8004188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800418c:	691a      	ldr	r2, [r3, #16]
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004196:	6939      	ldr	r1, [r7, #16]
 8004198:	0148      	lsls	r0, r1, #5
 800419a:	6979      	ldr	r1, [r7, #20]
 800419c:	4401      	add	r1, r0
 800419e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80041a2:	4313      	orrs	r3, r2
 80041a4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80041a6:	79fb      	ldrb	r3, [r7, #7]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d11e      	bne.n	80041ea <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	695b      	ldr	r3, [r3, #20]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d009      	beq.n	80041c8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	015a      	lsls	r2, r3, #5
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	4413      	add	r3, r2
 80041bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041c0:	461a      	mov	r2, r3
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	015a      	lsls	r2, r3, #5
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	4413      	add	r3, r2
 80041d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	0151      	lsls	r1, r2, #5
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	440a      	add	r2, r1
 80041de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80041e6:	6013      	str	r3, [r2, #0]
 80041e8:	e097      	b.n	800431a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	015a      	lsls	r2, r3, #5
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	4413      	add	r3, r2
 80041f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	0151      	lsls	r1, r2, #5
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	440a      	add	r2, r1
 8004200:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004204:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004208:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	2b00      	cmp	r3, #0
 8004210:	f000 8083 	beq.w	800431a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800421a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	f003 030f 	and.w	r3, r3, #15
 8004224:	2101      	movs	r1, #1
 8004226:	fa01 f303 	lsl.w	r3, r1, r3
 800422a:	6979      	ldr	r1, [r7, #20]
 800422c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004230:	4313      	orrs	r3, r2
 8004232:	634b      	str	r3, [r1, #52]	; 0x34
 8004234:	e071      	b.n	800431a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	015a      	lsls	r2, r3, #5
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	4413      	add	r3, r2
 800423e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	0151      	lsls	r1, r2, #5
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	440a      	add	r2, r1
 800424c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004250:	0cdb      	lsrs	r3, r3, #19
 8004252:	04db      	lsls	r3, r3, #19
 8004254:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	015a      	lsls	r2, r3, #5
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	4413      	add	r3, r2
 800425e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	0151      	lsls	r1, r2, #5
 8004268:	697a      	ldr	r2, [r7, #20]
 800426a:	440a      	add	r2, r1
 800426c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004270:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004274:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004278:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d003      	beq.n	800428a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	68da      	ldr	r2, [r3, #12]
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	68da      	ldr	r2, [r3, #12]
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	015a      	lsls	r2, r3, #5
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	4413      	add	r3, r2
 800429a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	0151      	lsls	r1, r2, #5
 80042a4:	697a      	ldr	r2, [r7, #20]
 80042a6:	440a      	add	r2, r1
 80042a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	015a      	lsls	r2, r3, #5
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	4413      	add	r3, r2
 80042ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042be:	691a      	ldr	r2, [r3, #16]
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	69db      	ldr	r3, [r3, #28]
 80042c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042c8:	6939      	ldr	r1, [r7, #16]
 80042ca:	0148      	lsls	r0, r1, #5
 80042cc:	6979      	ldr	r1, [r7, #20]
 80042ce:	4401      	add	r1, r0
 80042d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80042d4:	4313      	orrs	r3, r2
 80042d6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80042d8:	79fb      	ldrb	r3, [r7, #7]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d10d      	bne.n	80042fa <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d009      	beq.n	80042fa <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	6919      	ldr	r1, [r3, #16]
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	015a      	lsls	r2, r3, #5
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	4413      	add	r3, r2
 80042f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042f6:	460a      	mov	r2, r1
 80042f8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	015a      	lsls	r2, r3, #5
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	4413      	add	r3, r2
 8004302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	0151      	lsls	r1, r2, #5
 800430c:	697a      	ldr	r2, [r7, #20]
 800430e:	440a      	add	r2, r1
 8004310:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004314:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004318:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	371c      	adds	r7, #28
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004328:	b480      	push	{r7}
 800432a:	b087      	sub	sp, #28
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004332:	2300      	movs	r3, #0
 8004334:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004336:	2300      	movs	r3, #0
 8004338:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	785b      	ldrb	r3, [r3, #1]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d14a      	bne.n	80043dc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	015a      	lsls	r2, r3, #5
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	4413      	add	r3, r2
 8004350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800435a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800435e:	f040 8086 	bne.w	800446e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	015a      	lsls	r2, r3, #5
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	4413      	add	r3, r2
 800436c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	683a      	ldr	r2, [r7, #0]
 8004374:	7812      	ldrb	r2, [r2, #0]
 8004376:	0151      	lsls	r1, r2, #5
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	440a      	add	r2, r1
 800437c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004380:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004384:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	015a      	lsls	r2, r3, #5
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	4413      	add	r3, r2
 8004390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	683a      	ldr	r2, [r7, #0]
 8004398:	7812      	ldrb	r2, [r2, #0]
 800439a:	0151      	lsls	r1, r2, #5
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	440a      	add	r2, r1
 80043a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80043a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	3301      	adds	r3, #1
 80043ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f242 7210 	movw	r2, #10000	; 0x2710
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d902      	bls.n	80043c0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	75fb      	strb	r3, [r7, #23]
          break;
 80043be:	e056      	b.n	800446e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	015a      	lsls	r2, r3, #5
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	4413      	add	r3, r2
 80043ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043d8:	d0e7      	beq.n	80043aa <USB_EPStopXfer+0x82>
 80043da:	e048      	b.n	800446e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	015a      	lsls	r2, r3, #5
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	4413      	add	r3, r2
 80043e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043f4:	d13b      	bne.n	800446e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	015a      	lsls	r2, r3, #5
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	4413      	add	r3, r2
 8004400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	7812      	ldrb	r2, [r2, #0]
 800440a:	0151      	lsls	r1, r2, #5
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	440a      	add	r2, r1
 8004410:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004414:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004418:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	015a      	lsls	r2, r3, #5
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	4413      	add	r3, r2
 8004424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	683a      	ldr	r2, [r7, #0]
 800442c:	7812      	ldrb	r2, [r2, #0]
 800442e:	0151      	lsls	r1, r2, #5
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	440a      	add	r2, r1
 8004434:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004438:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800443c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	3301      	adds	r3, #1
 8004442:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f242 7210 	movw	r2, #10000	; 0x2710
 800444a:	4293      	cmp	r3, r2
 800444c:	d902      	bls.n	8004454 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	75fb      	strb	r3, [r7, #23]
          break;
 8004452:	e00c      	b.n	800446e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	015a      	lsls	r2, r3, #5
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	4413      	add	r3, r2
 800445e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004468:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800446c:	d0e7      	beq.n	800443e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800446e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004470:	4618      	mov	r0, r3
 8004472:	371c      	adds	r7, #28
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800447c:	b480      	push	{r7}
 800447e:	b089      	sub	sp, #36	; 0x24
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	4611      	mov	r1, r2
 8004488:	461a      	mov	r2, r3
 800448a:	460b      	mov	r3, r1
 800448c:	71fb      	strb	r3, [r7, #7]
 800448e:	4613      	mov	r3, r2
 8004490:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800449a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d123      	bne.n	80044ea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80044a2:	88bb      	ldrh	r3, [r7, #4]
 80044a4:	3303      	adds	r3, #3
 80044a6:	089b      	lsrs	r3, r3, #2
 80044a8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80044aa:	2300      	movs	r3, #0
 80044ac:	61bb      	str	r3, [r7, #24]
 80044ae:	e018      	b.n	80044e2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80044b0:	79fb      	ldrb	r3, [r7, #7]
 80044b2:	031a      	lsls	r2, r3, #12
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	4413      	add	r3, r2
 80044b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044bc:	461a      	mov	r2, r3
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	3301      	adds	r3, #1
 80044c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	3301      	adds	r3, #1
 80044ce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	3301      	adds	r3, #1
 80044d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	3301      	adds	r3, #1
 80044da:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	3301      	adds	r3, #1
 80044e0:	61bb      	str	r3, [r7, #24]
 80044e2:	69ba      	ldr	r2, [r7, #24]
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d3e2      	bcc.n	80044b0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3724      	adds	r7, #36	; 0x24
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b08b      	sub	sp, #44	; 0x2c
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	4613      	mov	r3, r2
 8004504:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800450e:	88fb      	ldrh	r3, [r7, #6]
 8004510:	089b      	lsrs	r3, r3, #2
 8004512:	b29b      	uxth	r3, r3
 8004514:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004516:	88fb      	ldrh	r3, [r7, #6]
 8004518:	f003 0303 	and.w	r3, r3, #3
 800451c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800451e:	2300      	movs	r3, #0
 8004520:	623b      	str	r3, [r7, #32]
 8004522:	e014      	b.n	800454e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452e:	601a      	str	r2, [r3, #0]
    pDest++;
 8004530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004532:	3301      	adds	r3, #1
 8004534:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004538:	3301      	adds	r3, #1
 800453a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800453c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453e:	3301      	adds	r3, #1
 8004540:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004544:	3301      	adds	r3, #1
 8004546:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004548:	6a3b      	ldr	r3, [r7, #32]
 800454a:	3301      	adds	r3, #1
 800454c:	623b      	str	r3, [r7, #32]
 800454e:	6a3a      	ldr	r2, [r7, #32]
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	429a      	cmp	r2, r3
 8004554:	d3e6      	bcc.n	8004524 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004556:	8bfb      	ldrh	r3, [r7, #30]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d01e      	beq.n	800459a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800455c:	2300      	movs	r3, #0
 800455e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004566:	461a      	mov	r2, r3
 8004568:	f107 0310 	add.w	r3, r7, #16
 800456c:	6812      	ldr	r2, [r2, #0]
 800456e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	6a3b      	ldr	r3, [r7, #32]
 8004574:	b2db      	uxtb	r3, r3
 8004576:	00db      	lsls	r3, r3, #3
 8004578:	fa22 f303 	lsr.w	r3, r2, r3
 800457c:	b2da      	uxtb	r2, r3
 800457e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004580:	701a      	strb	r2, [r3, #0]
      i++;
 8004582:	6a3b      	ldr	r3, [r7, #32]
 8004584:	3301      	adds	r3, #1
 8004586:	623b      	str	r3, [r7, #32]
      pDest++;
 8004588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458a:	3301      	adds	r3, #1
 800458c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800458e:	8bfb      	ldrh	r3, [r7, #30]
 8004590:	3b01      	subs	r3, #1
 8004592:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004594:	8bfb      	ldrh	r3, [r7, #30]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1ea      	bne.n	8004570 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800459a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800459c:	4618      	mov	r0, r3
 800459e:	372c      	adds	r7, #44	; 0x2c
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	785b      	ldrb	r3, [r3, #1]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d12c      	bne.n	800461e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	015a      	lsls	r2, r3, #5
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	4413      	add	r3, r2
 80045cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	db12      	blt.n	80045fc <USB_EPSetStall+0x54>
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00f      	beq.n	80045fc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	015a      	lsls	r2, r3, #5
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	4413      	add	r3, r2
 80045e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68ba      	ldr	r2, [r7, #8]
 80045ec:	0151      	lsls	r1, r2, #5
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	440a      	add	r2, r1
 80045f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045fa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	015a      	lsls	r2, r3, #5
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	4413      	add	r3, r2
 8004604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	0151      	lsls	r1, r2, #5
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	440a      	add	r2, r1
 8004612:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004616:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800461a:	6013      	str	r3, [r2, #0]
 800461c:	e02b      	b.n	8004676 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	015a      	lsls	r2, r3, #5
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	4413      	add	r3, r2
 8004626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	db12      	blt.n	8004656 <USB_EPSetStall+0xae>
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00f      	beq.n	8004656 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	015a      	lsls	r2, r3, #5
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	4413      	add	r3, r2
 800463e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68ba      	ldr	r2, [r7, #8]
 8004646:	0151      	lsls	r1, r2, #5
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	440a      	add	r2, r1
 800464c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004650:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004654:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	015a      	lsls	r2, r3, #5
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	4413      	add	r3, r2
 800465e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68ba      	ldr	r2, [r7, #8]
 8004666:	0151      	lsls	r1, r2, #5
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	440a      	add	r2, r1
 800466c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004670:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004674:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	3714      	adds	r7, #20
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	785b      	ldrb	r3, [r3, #1]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d128      	bne.n	80046f2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	015a      	lsls	r2, r3, #5
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	4413      	add	r3, r2
 80046a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	0151      	lsls	r1, r2, #5
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	440a      	add	r2, r1
 80046b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80046be:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	791b      	ldrb	r3, [r3, #4]
 80046c4:	2b03      	cmp	r3, #3
 80046c6:	d003      	beq.n	80046d0 <USB_EPClearStall+0x4c>
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	791b      	ldrb	r3, [r3, #4]
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d138      	bne.n	8004742 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	015a      	lsls	r2, r3, #5
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	4413      	add	r3, r2
 80046d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68ba      	ldr	r2, [r7, #8]
 80046e0:	0151      	lsls	r1, r2, #5
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	440a      	add	r2, r1
 80046e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ee:	6013      	str	r3, [r2, #0]
 80046f0:	e027      	b.n	8004742 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	015a      	lsls	r2, r3, #5
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	4413      	add	r3, r2
 80046fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68ba      	ldr	r2, [r7, #8]
 8004702:	0151      	lsls	r1, r2, #5
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	440a      	add	r2, r1
 8004708:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800470c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004710:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	791b      	ldrb	r3, [r3, #4]
 8004716:	2b03      	cmp	r3, #3
 8004718:	d003      	beq.n	8004722 <USB_EPClearStall+0x9e>
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	791b      	ldrb	r3, [r3, #4]
 800471e:	2b02      	cmp	r3, #2
 8004720:	d10f      	bne.n	8004742 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	015a      	lsls	r2, r3, #5
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	4413      	add	r3, r2
 800472a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68ba      	ldr	r2, [r7, #8]
 8004732:	0151      	lsls	r1, r2, #5
 8004734:	68fa      	ldr	r2, [r7, #12]
 8004736:	440a      	add	r2, r1
 8004738:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800473c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004740:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3714      	adds	r7, #20
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	460b      	mov	r3, r1
 800475a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800476e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004772:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	78fb      	ldrb	r3, [r7, #3]
 800477e:	011b      	lsls	r3, r3, #4
 8004780:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004784:	68f9      	ldr	r1, [r7, #12]
 8004786:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800478a:	4313      	orrs	r3, r2
 800478c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3714      	adds	r7, #20
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80047b6:	f023 0303 	bic.w	r3, r3, #3
 80047ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047ca:	f023 0302 	bic.w	r3, r3, #2
 80047ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3714      	adds	r7, #20
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr

080047de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80047de:	b480      	push	{r7}
 80047e0:	b085      	sub	sp, #20
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80047f8:	f023 0303 	bic.w	r3, r3, #3
 80047fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800480c:	f043 0302 	orr.w	r3, r3, #2
 8004810:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3714      	adds	r7, #20
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	695b      	ldr	r3, [r3, #20]
 800482c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	4013      	ands	r3, r2
 8004836:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004838:	68fb      	ldr	r3, [r7, #12]
}
 800483a:	4618      	mov	r0, r3
 800483c:	3714      	adds	r7, #20
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr

08004846 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004846:	b480      	push	{r7}
 8004848:	b085      	sub	sp, #20
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004862:	69db      	ldr	r3, [r3, #28]
 8004864:	68ba      	ldr	r2, [r7, #8]
 8004866:	4013      	ands	r3, r2
 8004868:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	0c1b      	lsrs	r3, r3, #16
}
 800486e:	4618      	mov	r0, r3
 8004870:	3714      	adds	r7, #20
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr

0800487a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800487a:	b480      	push	{r7}
 800487c:	b085      	sub	sp, #20
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004896:	69db      	ldr	r3, [r3, #28]
 8004898:	68ba      	ldr	r2, [r7, #8]
 800489a:	4013      	ands	r3, r2
 800489c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	b29b      	uxth	r3, r3
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3714      	adds	r7, #20
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr

080048ae <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80048ae:	b480      	push	{r7}
 80048b0:	b085      	sub	sp, #20
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
 80048b6:	460b      	mov	r3, r1
 80048b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80048be:	78fb      	ldrb	r3, [r7, #3]
 80048c0:	015a      	lsls	r2, r3, #5
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	4413      	add	r3, r2
 80048c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	4013      	ands	r3, r2
 80048da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80048dc:	68bb      	ldr	r3, [r7, #8]
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3714      	adds	r7, #20
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr

080048ea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80048ea:	b480      	push	{r7}
 80048ec:	b087      	sub	sp, #28
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
 80048f2:	460b      	mov	r3, r1
 80048f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800490a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800490c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800490e:	78fb      	ldrb	r3, [r7, #3]
 8004910:	f003 030f 	and.w	r3, r3, #15
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	fa22 f303 	lsr.w	r3, r2, r3
 800491a:	01db      	lsls	r3, r3, #7
 800491c:	b2db      	uxtb	r3, r3
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	4313      	orrs	r3, r2
 8004922:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004924:	78fb      	ldrb	r3, [r7, #3]
 8004926:	015a      	lsls	r2, r3, #5
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	4413      	add	r3, r2
 800492c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	4013      	ands	r3, r2
 8004936:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004938:	68bb      	ldr	r3, [r7, #8]
}
 800493a:	4618      	mov	r0, r3
 800493c:	371c      	adds	r7, #28
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr

08004946 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004946:	b480      	push	{r7}
 8004948:	b083      	sub	sp, #12
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	f003 0301 	and.w	r3, r3, #1
}
 8004956:	4618      	mov	r0, r3
 8004958:	370c      	adds	r7, #12
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr

08004962 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004962:	b480      	push	{r7}
 8004964:	b085      	sub	sp, #20
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800497c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004980:	f023 0307 	bic.w	r3, r3, #7
 8004984:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004994:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004998:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3714      	adds	r7, #20
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b087      	sub	sp, #28
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	460b      	mov	r3, r1
 80049b2:	607a      	str	r2, [r7, #4]
 80049b4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	333c      	adds	r3, #60	; 0x3c
 80049be:	3304      	adds	r3, #4
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	4a26      	ldr	r2, [pc, #152]	; (8004a60 <USB_EP0_OutStart+0xb8>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d90a      	bls.n	80049e2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049dc:	d101      	bne.n	80049e2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80049de:	2300      	movs	r3, #0
 80049e0:	e037      	b.n	8004a52 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049e8:	461a      	mov	r2, r3
 80049ea:	2300      	movs	r3, #0
 80049ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a10:	f043 0318 	orr.w	r3, r3, #24
 8004a14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a24:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004a28:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004a2a:	7afb      	ldrb	r3, [r7, #11]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d10f      	bne.n	8004a50 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a36:	461a      	mov	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a4a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004a4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	371c      	adds	r7, #28
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	4f54300a 	.word	0x4f54300a

08004a64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	3301      	adds	r3, #1
 8004a74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	4a13      	ldr	r2, [pc, #76]	; (8004ac8 <USB_CoreReset+0x64>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d901      	bls.n	8004a82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e01b      	b.n	8004aba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	daf2      	bge.n	8004a70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	f043 0201 	orr.w	r2, r3, #1
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	4a09      	ldr	r2, [pc, #36]	; (8004ac8 <USB_CoreReset+0x64>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d901      	bls.n	8004aac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e006      	b.n	8004aba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	f003 0301 	and.w	r3, r3, #1
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d0f0      	beq.n	8004a9a <USB_CoreReset+0x36>

  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3714      	adds	r7, #20
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	00030d40 	.word	0x00030d40

08004acc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004ad8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004adc:	f006 fbb4 	bl	800b248 <USBD_static_malloc>
 8004ae0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d109      	bne.n	8004afc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	32b0      	adds	r2, #176	; 0xb0
 8004af2:	2100      	movs	r1, #0
 8004af4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004af8:	2302      	movs	r3, #2
 8004afa:	e0d4      	b.n	8004ca6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004afc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004b00:	2100      	movs	r1, #0
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f006 fc18 	bl	800b338 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	32b0      	adds	r2, #176	; 0xb0
 8004b12:	68f9      	ldr	r1, [r7, #12]
 8004b14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	32b0      	adds	r2, #176	; 0xb0
 8004b22:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	7c1b      	ldrb	r3, [r3, #16]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d138      	bne.n	8004ba6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004b34:	4b5e      	ldr	r3, [pc, #376]	; (8004cb0 <USBD_CDC_Init+0x1e4>)
 8004b36:	7819      	ldrb	r1, [r3, #0]
 8004b38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b3c:	2202      	movs	r2, #2
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f006 fa5f 	bl	800b002 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004b44:	4b5a      	ldr	r3, [pc, #360]	; (8004cb0 <USBD_CDC_Init+0x1e4>)
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	f003 020f 	and.w	r2, r3, #15
 8004b4c:	6879      	ldr	r1, [r7, #4]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	4413      	add	r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	440b      	add	r3, r1
 8004b58:	3324      	adds	r3, #36	; 0x24
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004b5e:	4b55      	ldr	r3, [pc, #340]	; (8004cb4 <USBD_CDC_Init+0x1e8>)
 8004b60:	7819      	ldrb	r1, [r3, #0]
 8004b62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b66:	2202      	movs	r2, #2
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f006 fa4a 	bl	800b002 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004b6e:	4b51      	ldr	r3, [pc, #324]	; (8004cb4 <USBD_CDC_Init+0x1e8>)
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	f003 020f 	and.w	r2, r3, #15
 8004b76:	6879      	ldr	r1, [r7, #4]
 8004b78:	4613      	mov	r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	4413      	add	r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	440b      	add	r3, r1
 8004b82:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004b86:	2201      	movs	r2, #1
 8004b88:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004b8a:	4b4b      	ldr	r3, [pc, #300]	; (8004cb8 <USBD_CDC_Init+0x1ec>)
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	f003 020f 	and.w	r2, r3, #15
 8004b92:	6879      	ldr	r1, [r7, #4]
 8004b94:	4613      	mov	r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	4413      	add	r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	440b      	add	r3, r1
 8004b9e:	3326      	adds	r3, #38	; 0x26
 8004ba0:	2210      	movs	r2, #16
 8004ba2:	801a      	strh	r2, [r3, #0]
 8004ba4:	e035      	b.n	8004c12 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004ba6:	4b42      	ldr	r3, [pc, #264]	; (8004cb0 <USBD_CDC_Init+0x1e4>)
 8004ba8:	7819      	ldrb	r1, [r3, #0]
 8004baa:	2340      	movs	r3, #64	; 0x40
 8004bac:	2202      	movs	r2, #2
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f006 fa27 	bl	800b002 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004bb4:	4b3e      	ldr	r3, [pc, #248]	; (8004cb0 <USBD_CDC_Init+0x1e4>)
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	f003 020f 	and.w	r2, r3, #15
 8004bbc:	6879      	ldr	r1, [r7, #4]
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	4413      	add	r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	440b      	add	r3, r1
 8004bc8:	3324      	adds	r3, #36	; 0x24
 8004bca:	2201      	movs	r2, #1
 8004bcc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004bce:	4b39      	ldr	r3, [pc, #228]	; (8004cb4 <USBD_CDC_Init+0x1e8>)
 8004bd0:	7819      	ldrb	r1, [r3, #0]
 8004bd2:	2340      	movs	r3, #64	; 0x40
 8004bd4:	2202      	movs	r2, #2
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f006 fa13 	bl	800b002 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004bdc:	4b35      	ldr	r3, [pc, #212]	; (8004cb4 <USBD_CDC_Init+0x1e8>)
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	f003 020f 	and.w	r2, r3, #15
 8004be4:	6879      	ldr	r1, [r7, #4]
 8004be6:	4613      	mov	r3, r2
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	4413      	add	r3, r2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	440b      	add	r3, r1
 8004bf0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004bf8:	4b2f      	ldr	r3, [pc, #188]	; (8004cb8 <USBD_CDC_Init+0x1ec>)
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	f003 020f 	and.w	r2, r3, #15
 8004c00:	6879      	ldr	r1, [r7, #4]
 8004c02:	4613      	mov	r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	4413      	add	r3, r2
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	440b      	add	r3, r1
 8004c0c:	3326      	adds	r3, #38	; 0x26
 8004c0e:	2210      	movs	r2, #16
 8004c10:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004c12:	4b29      	ldr	r3, [pc, #164]	; (8004cb8 <USBD_CDC_Init+0x1ec>)
 8004c14:	7819      	ldrb	r1, [r3, #0]
 8004c16:	2308      	movs	r3, #8
 8004c18:	2203      	movs	r2, #3
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f006 f9f1 	bl	800b002 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004c20:	4b25      	ldr	r3, [pc, #148]	; (8004cb8 <USBD_CDC_Init+0x1ec>)
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	f003 020f 	and.w	r2, r3, #15
 8004c28:	6879      	ldr	r1, [r7, #4]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	4413      	add	r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	440b      	add	r3, r1
 8004c34:	3324      	adds	r3, #36	; 0x24
 8004c36:	2201      	movs	r2, #1
 8004c38:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	33b0      	adds	r3, #176	; 0xb0
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	4413      	add	r3, r2
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d101      	bne.n	8004c74 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004c70:	2302      	movs	r3, #2
 8004c72:	e018      	b.n	8004ca6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	7c1b      	ldrb	r3, [r3, #16]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d10a      	bne.n	8004c92 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004c7c:	4b0d      	ldr	r3, [pc, #52]	; (8004cb4 <USBD_CDC_Init+0x1e8>)
 8004c7e:	7819      	ldrb	r1, [r3, #0]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004c86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f006 faa8 	bl	800b1e0 <USBD_LL_PrepareReceive>
 8004c90:	e008      	b.n	8004ca4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004c92:	4b08      	ldr	r3, [pc, #32]	; (8004cb4 <USBD_CDC_Init+0x1e8>)
 8004c94:	7819      	ldrb	r1, [r3, #0]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004c9c:	2340      	movs	r3, #64	; 0x40
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f006 fa9e 	bl	800b1e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3710      	adds	r7, #16
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	20000093 	.word	0x20000093
 8004cb4:	20000094 	.word	0x20000094
 8004cb8:	20000095 	.word	0x20000095

08004cbc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004cc8:	4b3a      	ldr	r3, [pc, #232]	; (8004db4 <USBD_CDC_DeInit+0xf8>)
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	4619      	mov	r1, r3
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f006 f9bd 	bl	800b04e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004cd4:	4b37      	ldr	r3, [pc, #220]	; (8004db4 <USBD_CDC_DeInit+0xf8>)
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	f003 020f 	and.w	r2, r3, #15
 8004cdc:	6879      	ldr	r1, [r7, #4]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	4413      	add	r3, r2
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	440b      	add	r3, r1
 8004ce8:	3324      	adds	r3, #36	; 0x24
 8004cea:	2200      	movs	r2, #0
 8004cec:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004cee:	4b32      	ldr	r3, [pc, #200]	; (8004db8 <USBD_CDC_DeInit+0xfc>)
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f006 f9aa 	bl	800b04e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004cfa:	4b2f      	ldr	r3, [pc, #188]	; (8004db8 <USBD_CDC_DeInit+0xfc>)
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	f003 020f 	and.w	r2, r3, #15
 8004d02:	6879      	ldr	r1, [r7, #4]
 8004d04:	4613      	mov	r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	4413      	add	r3, r2
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	440b      	add	r3, r1
 8004d0e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004d12:	2200      	movs	r2, #0
 8004d14:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004d16:	4b29      	ldr	r3, [pc, #164]	; (8004dbc <USBD_CDC_DeInit+0x100>)
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f006 f996 	bl	800b04e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004d22:	4b26      	ldr	r3, [pc, #152]	; (8004dbc <USBD_CDC_DeInit+0x100>)
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	f003 020f 	and.w	r2, r3, #15
 8004d2a:	6879      	ldr	r1, [r7, #4]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	4413      	add	r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	440b      	add	r3, r1
 8004d36:	3324      	adds	r3, #36	; 0x24
 8004d38:	2200      	movs	r2, #0
 8004d3a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004d3c:	4b1f      	ldr	r3, [pc, #124]	; (8004dbc <USBD_CDC_DeInit+0x100>)
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	f003 020f 	and.w	r2, r3, #15
 8004d44:	6879      	ldr	r1, [r7, #4]
 8004d46:	4613      	mov	r3, r2
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	4413      	add	r3, r2
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	440b      	add	r3, r1
 8004d50:	3326      	adds	r3, #38	; 0x26
 8004d52:	2200      	movs	r2, #0
 8004d54:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	32b0      	adds	r2, #176	; 0xb0
 8004d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d01f      	beq.n	8004da8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	33b0      	adds	r3, #176	; 0xb0
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	4413      	add	r3, r2
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	32b0      	adds	r2, #176	; 0xb0
 8004d86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f006 fa6a 	bl	800b264 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	32b0      	adds	r2, #176	; 0xb0
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3708      	adds	r7, #8
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	20000093 	.word	0x20000093
 8004db8:	20000094 	.word	0x20000094
 8004dbc:	20000095 	.word	0x20000095

08004dc0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b086      	sub	sp, #24
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	32b0      	adds	r2, #176	; 0xb0
 8004dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dd8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004dde:	2300      	movs	r3, #0
 8004de0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004de2:	2300      	movs	r3, #0
 8004de4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d101      	bne.n	8004df0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e0bf      	b.n	8004f70 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d050      	beq.n	8004e9e <USBD_CDC_Setup+0xde>
 8004dfc:	2b20      	cmp	r3, #32
 8004dfe:	f040 80af 	bne.w	8004f60 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	88db      	ldrh	r3, [r3, #6]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d03a      	beq.n	8004e80 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	b25b      	sxtb	r3, r3
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	da1b      	bge.n	8004e4c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	33b0      	adds	r3, #176	; 0xb0
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	683a      	ldr	r2, [r7, #0]
 8004e28:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8004e2a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004e2c:	683a      	ldr	r2, [r7, #0]
 8004e2e:	88d2      	ldrh	r2, [r2, #6]
 8004e30:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	88db      	ldrh	r3, [r3, #6]
 8004e36:	2b07      	cmp	r3, #7
 8004e38:	bf28      	it	cs
 8004e3a:	2307      	movcs	r3, #7
 8004e3c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	89fa      	ldrh	r2, [r7, #14]
 8004e42:	4619      	mov	r1, r3
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f001 fd43 	bl	80068d0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8004e4a:	e090      	b.n	8004f6e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	785a      	ldrb	r2, [r3, #1]
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	88db      	ldrh	r3, [r3, #6]
 8004e5a:	2b3f      	cmp	r3, #63	; 0x3f
 8004e5c:	d803      	bhi.n	8004e66 <USBD_CDC_Setup+0xa6>
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	88db      	ldrh	r3, [r3, #6]
 8004e62:	b2da      	uxtb	r2, r3
 8004e64:	e000      	b.n	8004e68 <USBD_CDC_Setup+0xa8>
 8004e66:	2240      	movs	r2, #64	; 0x40
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8004e6e:	6939      	ldr	r1, [r7, #16]
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8004e76:	461a      	mov	r2, r3
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f001 fd55 	bl	8006928 <USBD_CtlPrepareRx>
      break;
 8004e7e:	e076      	b.n	8004f6e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	33b0      	adds	r3, #176	; 0xb0
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	4413      	add	r3, r2
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	683a      	ldr	r2, [r7, #0]
 8004e94:	7850      	ldrb	r0, [r2, #1]
 8004e96:	2200      	movs	r2, #0
 8004e98:	6839      	ldr	r1, [r7, #0]
 8004e9a:	4798      	blx	r3
      break;
 8004e9c:	e067      	b.n	8004f6e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	785b      	ldrb	r3, [r3, #1]
 8004ea2:	2b0b      	cmp	r3, #11
 8004ea4:	d851      	bhi.n	8004f4a <USBD_CDC_Setup+0x18a>
 8004ea6:	a201      	add	r2, pc, #4	; (adr r2, 8004eac <USBD_CDC_Setup+0xec>)
 8004ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eac:	08004edd 	.word	0x08004edd
 8004eb0:	08004f59 	.word	0x08004f59
 8004eb4:	08004f4b 	.word	0x08004f4b
 8004eb8:	08004f4b 	.word	0x08004f4b
 8004ebc:	08004f4b 	.word	0x08004f4b
 8004ec0:	08004f4b 	.word	0x08004f4b
 8004ec4:	08004f4b 	.word	0x08004f4b
 8004ec8:	08004f4b 	.word	0x08004f4b
 8004ecc:	08004f4b 	.word	0x08004f4b
 8004ed0:	08004f4b 	.word	0x08004f4b
 8004ed4:	08004f07 	.word	0x08004f07
 8004ed8:	08004f31 	.word	0x08004f31
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b03      	cmp	r3, #3
 8004ee6:	d107      	bne.n	8004ef8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004ee8:	f107 030a 	add.w	r3, r7, #10
 8004eec:	2202      	movs	r2, #2
 8004eee:	4619      	mov	r1, r3
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f001 fced 	bl	80068d0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004ef6:	e032      	b.n	8004f5e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004ef8:	6839      	ldr	r1, [r7, #0]
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f001 fc77 	bl	80067ee <USBD_CtlError>
            ret = USBD_FAIL;
 8004f00:	2303      	movs	r3, #3
 8004f02:	75fb      	strb	r3, [r7, #23]
          break;
 8004f04:	e02b      	b.n	8004f5e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	2b03      	cmp	r3, #3
 8004f10:	d107      	bne.n	8004f22 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004f12:	f107 030d 	add.w	r3, r7, #13
 8004f16:	2201      	movs	r2, #1
 8004f18:	4619      	mov	r1, r3
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f001 fcd8 	bl	80068d0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004f20:	e01d      	b.n	8004f5e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004f22:	6839      	ldr	r1, [r7, #0]
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f001 fc62 	bl	80067ee <USBD_CtlError>
            ret = USBD_FAIL;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	75fb      	strb	r3, [r7, #23]
          break;
 8004f2e:	e016      	b.n	8004f5e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	2b03      	cmp	r3, #3
 8004f3a:	d00f      	beq.n	8004f5c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8004f3c:	6839      	ldr	r1, [r7, #0]
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f001 fc55 	bl	80067ee <USBD_CtlError>
            ret = USBD_FAIL;
 8004f44:	2303      	movs	r3, #3
 8004f46:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004f48:	e008      	b.n	8004f5c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004f4a:	6839      	ldr	r1, [r7, #0]
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f001 fc4e 	bl	80067ee <USBD_CtlError>
          ret = USBD_FAIL;
 8004f52:	2303      	movs	r3, #3
 8004f54:	75fb      	strb	r3, [r7, #23]
          break;
 8004f56:	e002      	b.n	8004f5e <USBD_CDC_Setup+0x19e>
          break;
 8004f58:	bf00      	nop
 8004f5a:	e008      	b.n	8004f6e <USBD_CDC_Setup+0x1ae>
          break;
 8004f5c:	bf00      	nop
      }
      break;
 8004f5e:	e006      	b.n	8004f6e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8004f60:	6839      	ldr	r1, [r7, #0]
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f001 fc43 	bl	80067ee <USBD_CtlError>
      ret = USBD_FAIL;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	75fb      	strb	r3, [r7, #23]
      break;
 8004f6c:	bf00      	nop
  }

  return (uint8_t)ret;
 8004f6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3718      	adds	r7, #24
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	460b      	mov	r3, r1
 8004f82:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8004f8a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	32b0      	adds	r2, #176	; 0xb0
 8004f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d101      	bne.n	8004fa2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e065      	b.n	800506e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	32b0      	adds	r2, #176	; 0xb0
 8004fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fb0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004fb2:	78fb      	ldrb	r3, [r7, #3]
 8004fb4:	f003 020f 	and.w	r2, r3, #15
 8004fb8:	6879      	ldr	r1, [r7, #4]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	4413      	add	r3, r2
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	440b      	add	r3, r1
 8004fc4:	3318      	adds	r3, #24
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d02f      	beq.n	800502c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8004fcc:	78fb      	ldrb	r3, [r7, #3]
 8004fce:	f003 020f 	and.w	r2, r3, #15
 8004fd2:	6879      	ldr	r1, [r7, #4]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	4413      	add	r3, r2
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	440b      	add	r3, r1
 8004fde:	3318      	adds	r3, #24
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	78fb      	ldrb	r3, [r7, #3]
 8004fe4:	f003 010f 	and.w	r1, r3, #15
 8004fe8:	68f8      	ldr	r0, [r7, #12]
 8004fea:	460b      	mov	r3, r1
 8004fec:	00db      	lsls	r3, r3, #3
 8004fee:	440b      	add	r3, r1
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	4403      	add	r3, r0
 8004ff4:	3348      	adds	r3, #72	; 0x48
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	fbb2 f1f3 	udiv	r1, r2, r3
 8004ffc:	fb01 f303 	mul.w	r3, r1, r3
 8005000:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005002:	2b00      	cmp	r3, #0
 8005004:	d112      	bne.n	800502c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005006:	78fb      	ldrb	r3, [r7, #3]
 8005008:	f003 020f 	and.w	r2, r3, #15
 800500c:	6879      	ldr	r1, [r7, #4]
 800500e:	4613      	mov	r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	4413      	add	r3, r2
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	440b      	add	r3, r1
 8005018:	3318      	adds	r3, #24
 800501a:	2200      	movs	r2, #0
 800501c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800501e:	78f9      	ldrb	r1, [r7, #3]
 8005020:	2300      	movs	r3, #0
 8005022:	2200      	movs	r2, #0
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f006 f8ba 	bl	800b19e <USBD_LL_Transmit>
 800502a:	e01f      	b.n	800506c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	2200      	movs	r2, #0
 8005030:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	33b0      	adds	r3, #176	; 0xb0
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	4413      	add	r3, r2
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d010      	beq.n	800506c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	33b0      	adds	r3, #176	; 0xb0
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	4413      	add	r3, r2
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	68ba      	ldr	r2, [r7, #8]
 800505e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005068:	78fa      	ldrb	r2, [r7, #3]
 800506a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3710      	adds	r7, #16
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}

08005076 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005076:	b580      	push	{r7, lr}
 8005078:	b084      	sub	sp, #16
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
 800507e:	460b      	mov	r3, r1
 8005080:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	32b0      	adds	r2, #176	; 0xb0
 800508c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005090:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	32b0      	adds	r2, #176	; 0xb0
 800509c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d101      	bne.n	80050a8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e01a      	b.n	80050de <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80050a8:	78fb      	ldrb	r3, [r7, #3]
 80050aa:	4619      	mov	r1, r3
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f006 f8b8 	bl	800b222 <USBD_LL_GetRxDataSize>
 80050b2:	4602      	mov	r2, r0
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	33b0      	adds	r3, #176	; 0xb0
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	4413      	add	r3, r2
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80050d8:	4611      	mov	r1, r2
 80050da:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b084      	sub	sp, #16
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	32b0      	adds	r2, #176	; 0xb0
 80050f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050fc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d101      	bne.n	8005108 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005104:	2303      	movs	r3, #3
 8005106:	e025      	b.n	8005154 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	33b0      	adds	r3, #176	; 0xb0
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	4413      	add	r3, r2
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d01a      	beq.n	8005152 <USBD_CDC_EP0_RxReady+0x6c>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005122:	2bff      	cmp	r3, #255	; 0xff
 8005124:	d015      	beq.n	8005152 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	33b0      	adds	r3, #176	; 0xb0
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	4413      	add	r3, r2
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800513e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005146:	b292      	uxth	r2, r2
 8005148:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	22ff      	movs	r2, #255	; 0xff
 800514e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	3710      	adds	r7, #16
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b086      	sub	sp, #24
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005164:	2182      	movs	r1, #130	; 0x82
 8005166:	4818      	ldr	r0, [pc, #96]	; (80051c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005168:	f000 fd09 	bl	8005b7e <USBD_GetEpDesc>
 800516c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800516e:	2101      	movs	r1, #1
 8005170:	4815      	ldr	r0, [pc, #84]	; (80051c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005172:	f000 fd04 	bl	8005b7e <USBD_GetEpDesc>
 8005176:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005178:	2181      	movs	r1, #129	; 0x81
 800517a:	4813      	ldr	r0, [pc, #76]	; (80051c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800517c:	f000 fcff 	bl	8005b7e <USBD_GetEpDesc>
 8005180:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d002      	beq.n	800518e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	2210      	movs	r2, #16
 800518c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d006      	beq.n	80051a2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	2200      	movs	r2, #0
 8005198:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800519c:	711a      	strb	r2, [r3, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d006      	beq.n	80051b6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051b0:	711a      	strb	r2, [r3, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2243      	movs	r2, #67	; 0x43
 80051ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80051bc:	4b02      	ldr	r3, [pc, #8]	; (80051c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3718      	adds	r7, #24
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	20000050 	.word	0x20000050

080051cc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b086      	sub	sp, #24
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80051d4:	2182      	movs	r1, #130	; 0x82
 80051d6:	4818      	ldr	r0, [pc, #96]	; (8005238 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80051d8:	f000 fcd1 	bl	8005b7e <USBD_GetEpDesc>
 80051dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80051de:	2101      	movs	r1, #1
 80051e0:	4815      	ldr	r0, [pc, #84]	; (8005238 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80051e2:	f000 fccc 	bl	8005b7e <USBD_GetEpDesc>
 80051e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80051e8:	2181      	movs	r1, #129	; 0x81
 80051ea:	4813      	ldr	r0, [pc, #76]	; (8005238 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80051ec:	f000 fcc7 	bl	8005b7e <USBD_GetEpDesc>
 80051f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d002      	beq.n	80051fe <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	2210      	movs	r2, #16
 80051fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d006      	beq.n	8005212 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	2200      	movs	r2, #0
 8005208:	711a      	strb	r2, [r3, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	f042 0202 	orr.w	r2, r2, #2
 8005210:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d006      	beq.n	8005226 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2200      	movs	r2, #0
 800521c:	711a      	strb	r2, [r3, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f042 0202 	orr.w	r2, r2, #2
 8005224:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2243      	movs	r2, #67	; 0x43
 800522a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800522c:	4b02      	ldr	r3, [pc, #8]	; (8005238 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800522e:	4618      	mov	r0, r3
 8005230:	3718      	adds	r7, #24
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	20000050 	.word	0x20000050

0800523c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b086      	sub	sp, #24
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005244:	2182      	movs	r1, #130	; 0x82
 8005246:	4818      	ldr	r0, [pc, #96]	; (80052a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005248:	f000 fc99 	bl	8005b7e <USBD_GetEpDesc>
 800524c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800524e:	2101      	movs	r1, #1
 8005250:	4815      	ldr	r0, [pc, #84]	; (80052a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005252:	f000 fc94 	bl	8005b7e <USBD_GetEpDesc>
 8005256:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005258:	2181      	movs	r1, #129	; 0x81
 800525a:	4813      	ldr	r0, [pc, #76]	; (80052a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800525c:	f000 fc8f 	bl	8005b7e <USBD_GetEpDesc>
 8005260:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d002      	beq.n	800526e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	2210      	movs	r2, #16
 800526c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d006      	beq.n	8005282 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	2200      	movs	r2, #0
 8005278:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800527c:	711a      	strb	r2, [r3, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d006      	beq.n	8005296 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2200      	movs	r2, #0
 800528c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005290:	711a      	strb	r2, [r3, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2243      	movs	r2, #67	; 0x43
 800529a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800529c:	4b02      	ldr	r3, [pc, #8]	; (80052a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3718      	adds	r7, #24
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	20000050 	.word	0x20000050

080052ac <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	220a      	movs	r2, #10
 80052b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80052ba:	4b03      	ldr	r3, [pc, #12]	; (80052c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80052bc:	4618      	mov	r0, r3
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr
 80052c8:	2000000c 	.word	0x2000000c

080052cc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d101      	bne.n	80052e0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80052dc:	2303      	movs	r3, #3
 80052de:	e009      	b.n	80052f4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	33b0      	adds	r3, #176	; 0xb0
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	4413      	add	r3, r2
 80052ee:	683a      	ldr	r2, [r7, #0]
 80052f0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005300:	b480      	push	{r7}
 8005302:	b087      	sub	sp, #28
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	32b0      	adds	r2, #176	; 0xb0
 8005316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800531a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005322:	2303      	movs	r3, #3
 8005324:	e008      	b.n	8005338 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	68ba      	ldr	r2, [r7, #8]
 800532a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	371c      	adds	r7, #28
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	32b0      	adds	r2, #176	; 0xb0
 8005358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800535c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d101      	bne.n	8005368 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005364:	2303      	movs	r3, #3
 8005366:	e004      	b.n	8005372 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	683a      	ldr	r2, [r7, #0]
 800536c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3714      	adds	r7, #20
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
	...

08005380 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	32b0      	adds	r2, #176	; 0xb0
 8005392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005396:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	32b0      	adds	r2, #176	; 0xb0
 80053a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d101      	bne.n	80053ae <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e018      	b.n	80053e0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	7c1b      	ldrb	r3, [r3, #16]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d10a      	bne.n	80053cc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80053b6:	4b0c      	ldr	r3, [pc, #48]	; (80053e8 <USBD_CDC_ReceivePacket+0x68>)
 80053b8:	7819      	ldrb	r1, [r3, #0]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80053c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f005 ff0b 	bl	800b1e0 <USBD_LL_PrepareReceive>
 80053ca:	e008      	b.n	80053de <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80053cc:	4b06      	ldr	r3, [pc, #24]	; (80053e8 <USBD_CDC_ReceivePacket+0x68>)
 80053ce:	7819      	ldrb	r1, [r3, #0]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80053d6:	2340      	movs	r3, #64	; 0x40
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f005 ff01 	bl	800b1e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3710      	adds	r7, #16
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	20000094 	.word	0x20000094

080053ec <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b086      	sub	sp, #24
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	4613      	mov	r3, r2
 80053f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d101      	bne.n	8005404 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005400:	2303      	movs	r3, #3
 8005402:	e01f      	b.n	8005444 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d003      	beq.n	800542a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	68ba      	ldr	r2, [r7, #8]
 8005426:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2201      	movs	r2, #1
 800542e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	79fa      	ldrb	r2, [r7, #7]
 8005436:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	f005 fd7b 	bl	800af34 <USBD_LL_Init>
 800543e:	4603      	mov	r3, r0
 8005440:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005442:	7dfb      	ldrb	r3, [r7, #23]
}
 8005444:	4618      	mov	r0, r3
 8005446:	3718      	adds	r7, #24
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005456:	2300      	movs	r3, #0
 8005458:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d101      	bne.n	8005464 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005460:	2303      	movs	r3, #3
 8005462:	e025      	b.n	80054b0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	683a      	ldr	r2, [r7, #0]
 8005468:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	32ae      	adds	r2, #174	; 0xae
 8005476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800547a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00f      	beq.n	80054a0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	32ae      	adds	r2, #174	; 0xae
 800548a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800548e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005490:	f107 020e 	add.w	r2, r7, #14
 8005494:	4610      	mov	r0, r2
 8005496:	4798      	blx	r3
 8005498:	4602      	mov	r2, r0
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80054a6:	1c5a      	adds	r2, r3, #1
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3710      	adds	r7, #16
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f005 fd83 	bl	800afcc <USBD_LL_Start>
 80054c6:	4603      	mov	r3, r0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3708      	adds	r7, #8
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80054d8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80054da:	4618      	mov	r0, r3
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr

080054e6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b084      	sub	sp, #16
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
 80054ee:	460b      	mov	r3, r1
 80054f0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80054f2:	2300      	movs	r3, #0
 80054f4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d009      	beq.n	8005514 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	78fa      	ldrb	r2, [r7, #3]
 800550a:	4611      	mov	r1, r2
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	4798      	blx	r3
 8005510:	4603      	mov	r3, r0
 8005512:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005514:	7bfb      	ldrb	r3, [r7, #15]
}
 8005516:	4618      	mov	r0, r3
 8005518:	3710      	adds	r7, #16
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b084      	sub	sp, #16
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
 8005526:	460b      	mov	r3, r1
 8005528:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800552a:	2300      	movs	r3, #0
 800552c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	78fa      	ldrb	r2, [r7, #3]
 8005538:	4611      	mov	r1, r2
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	4798      	blx	r3
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d001      	beq.n	8005548 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005544:	2303      	movs	r3, #3
 8005546:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005548:	7bfb      	ldrb	r3, [r7, #15]
}
 800554a:	4618      	mov	r0, r3
 800554c:	3710      	adds	r7, #16
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}

08005552 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005552:	b580      	push	{r7, lr}
 8005554:	b084      	sub	sp, #16
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
 800555a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005562:	6839      	ldr	r1, [r7, #0]
 8005564:	4618      	mov	r0, r3
 8005566:	f001 f908 	bl	800677a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2201      	movs	r2, #1
 800556e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005578:	461a      	mov	r2, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005586:	f003 031f 	and.w	r3, r3, #31
 800558a:	2b02      	cmp	r3, #2
 800558c:	d01a      	beq.n	80055c4 <USBD_LL_SetupStage+0x72>
 800558e:	2b02      	cmp	r3, #2
 8005590:	d822      	bhi.n	80055d8 <USBD_LL_SetupStage+0x86>
 8005592:	2b00      	cmp	r3, #0
 8005594:	d002      	beq.n	800559c <USBD_LL_SetupStage+0x4a>
 8005596:	2b01      	cmp	r3, #1
 8005598:	d00a      	beq.n	80055b0 <USBD_LL_SetupStage+0x5e>
 800559a:	e01d      	b.n	80055d8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80055a2:	4619      	mov	r1, r3
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 fb5f 	bl	8005c68 <USBD_StdDevReq>
 80055aa:	4603      	mov	r3, r0
 80055ac:	73fb      	strb	r3, [r7, #15]
      break;
 80055ae:	e020      	b.n	80055f2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80055b6:	4619      	mov	r1, r3
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 fbc7 	bl	8005d4c <USBD_StdItfReq>
 80055be:	4603      	mov	r3, r0
 80055c0:	73fb      	strb	r3, [r7, #15]
      break;
 80055c2:	e016      	b.n	80055f2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80055ca:	4619      	mov	r1, r3
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f000 fc29 	bl	8005e24 <USBD_StdEPReq>
 80055d2:	4603      	mov	r3, r0
 80055d4:	73fb      	strb	r3, [r7, #15]
      break;
 80055d6:	e00c      	b.n	80055f2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80055de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	4619      	mov	r1, r3
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f005 fd50 	bl	800b08c <USBD_LL_StallEP>
 80055ec:	4603      	mov	r3, r0
 80055ee:	73fb      	strb	r3, [r7, #15]
      break;
 80055f0:	bf00      	nop
  }

  return ret;
 80055f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3710      	adds	r7, #16
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b086      	sub	sp, #24
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	460b      	mov	r3, r1
 8005606:	607a      	str	r2, [r7, #4]
 8005608:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800560a:	2300      	movs	r3, #0
 800560c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800560e:	7afb      	ldrb	r3, [r7, #11]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d16e      	bne.n	80056f2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800561a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005622:	2b03      	cmp	r3, #3
 8005624:	f040 8098 	bne.w	8005758 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	689a      	ldr	r2, [r3, #8]
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	429a      	cmp	r2, r3
 8005632:	d913      	bls.n	800565c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	689a      	ldr	r2, [r3, #8]
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	1ad2      	subs	r2, r2, r3
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	68da      	ldr	r2, [r3, #12]
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	4293      	cmp	r3, r2
 800564c:	bf28      	it	cs
 800564e:	4613      	movcs	r3, r2
 8005650:	461a      	mov	r2, r3
 8005652:	6879      	ldr	r1, [r7, #4]
 8005654:	68f8      	ldr	r0, [r7, #12]
 8005656:	f001 f984 	bl	8006962 <USBD_CtlContinueRx>
 800565a:	e07d      	b.n	8005758 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005662:	f003 031f 	and.w	r3, r3, #31
 8005666:	2b02      	cmp	r3, #2
 8005668:	d014      	beq.n	8005694 <USBD_LL_DataOutStage+0x98>
 800566a:	2b02      	cmp	r3, #2
 800566c:	d81d      	bhi.n	80056aa <USBD_LL_DataOutStage+0xae>
 800566e:	2b00      	cmp	r3, #0
 8005670:	d002      	beq.n	8005678 <USBD_LL_DataOutStage+0x7c>
 8005672:	2b01      	cmp	r3, #1
 8005674:	d003      	beq.n	800567e <USBD_LL_DataOutStage+0x82>
 8005676:	e018      	b.n	80056aa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005678:	2300      	movs	r3, #0
 800567a:	75bb      	strb	r3, [r7, #22]
            break;
 800567c:	e018      	b.n	80056b0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005684:	b2db      	uxtb	r3, r3
 8005686:	4619      	mov	r1, r3
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	f000 fa5e 	bl	8005b4a <USBD_CoreFindIF>
 800568e:	4603      	mov	r3, r0
 8005690:	75bb      	strb	r3, [r7, #22]
            break;
 8005692:	e00d      	b.n	80056b0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800569a:	b2db      	uxtb	r3, r3
 800569c:	4619      	mov	r1, r3
 800569e:	68f8      	ldr	r0, [r7, #12]
 80056a0:	f000 fa60 	bl	8005b64 <USBD_CoreFindEP>
 80056a4:	4603      	mov	r3, r0
 80056a6:	75bb      	strb	r3, [r7, #22]
            break;
 80056a8:	e002      	b.n	80056b0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80056aa:	2300      	movs	r3, #0
 80056ac:	75bb      	strb	r3, [r7, #22]
            break;
 80056ae:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80056b0:	7dbb      	ldrb	r3, [r7, #22]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d119      	bne.n	80056ea <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	2b03      	cmp	r3, #3
 80056c0:	d113      	bne.n	80056ea <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80056c2:	7dba      	ldrb	r2, [r7, #22]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	32ae      	adds	r2, #174	; 0xae
 80056c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00b      	beq.n	80056ea <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80056d2:	7dba      	ldrb	r2, [r7, #22]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80056da:	7dba      	ldrb	r2, [r7, #22]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	32ae      	adds	r2, #174	; 0xae
 80056e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	68f8      	ldr	r0, [r7, #12]
 80056e8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80056ea:	68f8      	ldr	r0, [r7, #12]
 80056ec:	f001 f94a 	bl	8006984 <USBD_CtlSendStatus>
 80056f0:	e032      	b.n	8005758 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80056f2:	7afb      	ldrb	r3, [r7, #11]
 80056f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	4619      	mov	r1, r3
 80056fc:	68f8      	ldr	r0, [r7, #12]
 80056fe:	f000 fa31 	bl	8005b64 <USBD_CoreFindEP>
 8005702:	4603      	mov	r3, r0
 8005704:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005706:	7dbb      	ldrb	r3, [r7, #22]
 8005708:	2bff      	cmp	r3, #255	; 0xff
 800570a:	d025      	beq.n	8005758 <USBD_LL_DataOutStage+0x15c>
 800570c:	7dbb      	ldrb	r3, [r7, #22]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d122      	bne.n	8005758 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005718:	b2db      	uxtb	r3, r3
 800571a:	2b03      	cmp	r3, #3
 800571c:	d117      	bne.n	800574e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800571e:	7dba      	ldrb	r2, [r7, #22]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	32ae      	adds	r2, #174	; 0xae
 8005724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00f      	beq.n	800574e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800572e:	7dba      	ldrb	r2, [r7, #22]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005736:	7dba      	ldrb	r2, [r7, #22]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	32ae      	adds	r2, #174	; 0xae
 800573c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	7afa      	ldrb	r2, [r7, #11]
 8005744:	4611      	mov	r1, r2
 8005746:	68f8      	ldr	r0, [r7, #12]
 8005748:	4798      	blx	r3
 800574a:	4603      	mov	r3, r0
 800574c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800574e:	7dfb      	ldrb	r3, [r7, #23]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d001      	beq.n	8005758 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005754:	7dfb      	ldrb	r3, [r7, #23]
 8005756:	e000      	b.n	800575a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3718      	adds	r7, #24
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005762:	b580      	push	{r7, lr}
 8005764:	b086      	sub	sp, #24
 8005766:	af00      	add	r7, sp, #0
 8005768:	60f8      	str	r0, [r7, #12]
 800576a:	460b      	mov	r3, r1
 800576c:	607a      	str	r2, [r7, #4]
 800576e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005770:	7afb      	ldrb	r3, [r7, #11]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d16f      	bne.n	8005856 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	3314      	adds	r3, #20
 800577a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005782:	2b02      	cmp	r3, #2
 8005784:	d15a      	bne.n	800583c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	689a      	ldr	r2, [r3, #8]
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	429a      	cmp	r2, r3
 8005790:	d914      	bls.n	80057bc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	689a      	ldr	r2, [r3, #8]
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	1ad2      	subs	r2, r2, r3
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	461a      	mov	r2, r3
 80057a6:	6879      	ldr	r1, [r7, #4]
 80057a8:	68f8      	ldr	r0, [r7, #12]
 80057aa:	f001 f8ac 	bl	8006906 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80057ae:	2300      	movs	r3, #0
 80057b0:	2200      	movs	r2, #0
 80057b2:	2100      	movs	r1, #0
 80057b4:	68f8      	ldr	r0, [r7, #12]
 80057b6:	f005 fd13 	bl	800b1e0 <USBD_LL_PrepareReceive>
 80057ba:	e03f      	b.n	800583c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	68da      	ldr	r2, [r3, #12]
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d11c      	bne.n	8005802 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	685a      	ldr	r2, [r3, #4]
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d316      	bcc.n	8005802 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	685a      	ldr	r2, [r3, #4]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80057de:	429a      	cmp	r2, r3
 80057e0:	d20f      	bcs.n	8005802 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80057e2:	2200      	movs	r2, #0
 80057e4:	2100      	movs	r1, #0
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	f001 f88d 	bl	8006906 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80057f4:	2300      	movs	r3, #0
 80057f6:	2200      	movs	r2, #0
 80057f8:	2100      	movs	r1, #0
 80057fa:	68f8      	ldr	r0, [r7, #12]
 80057fc:	f005 fcf0 	bl	800b1e0 <USBD_LL_PrepareReceive>
 8005800:	e01c      	b.n	800583c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005808:	b2db      	uxtb	r3, r3
 800580a:	2b03      	cmp	r3, #3
 800580c:	d10f      	bne.n	800582e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d009      	beq.n	800582e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2200      	movs	r2, #0
 800581e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800582e:	2180      	movs	r1, #128	; 0x80
 8005830:	68f8      	ldr	r0, [r7, #12]
 8005832:	f005 fc2b 	bl	800b08c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005836:	68f8      	ldr	r0, [r7, #12]
 8005838:	f001 f8b7 	bl	80069aa <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d03a      	beq.n	80058bc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005846:	68f8      	ldr	r0, [r7, #12]
 8005848:	f7ff fe42 	bl	80054d0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2200      	movs	r2, #0
 8005850:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005854:	e032      	b.n	80058bc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005856:	7afb      	ldrb	r3, [r7, #11]
 8005858:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800585c:	b2db      	uxtb	r3, r3
 800585e:	4619      	mov	r1, r3
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f000 f97f 	bl	8005b64 <USBD_CoreFindEP>
 8005866:	4603      	mov	r3, r0
 8005868:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800586a:	7dfb      	ldrb	r3, [r7, #23]
 800586c:	2bff      	cmp	r3, #255	; 0xff
 800586e:	d025      	beq.n	80058bc <USBD_LL_DataInStage+0x15a>
 8005870:	7dfb      	ldrb	r3, [r7, #23]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d122      	bne.n	80058bc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800587c:	b2db      	uxtb	r3, r3
 800587e:	2b03      	cmp	r3, #3
 8005880:	d11c      	bne.n	80058bc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005882:	7dfa      	ldrb	r2, [r7, #23]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	32ae      	adds	r2, #174	; 0xae
 8005888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d014      	beq.n	80058bc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005892:	7dfa      	ldrb	r2, [r7, #23]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800589a:	7dfa      	ldrb	r2, [r7, #23]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	32ae      	adds	r2, #174	; 0xae
 80058a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058a4:	695b      	ldr	r3, [r3, #20]
 80058a6:	7afa      	ldrb	r2, [r7, #11]
 80058a8:	4611      	mov	r1, r2
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	4798      	blx	r3
 80058ae:	4603      	mov	r3, r0
 80058b0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80058b2:	7dbb      	ldrb	r3, [r7, #22]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d001      	beq.n	80058bc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80058b8:	7dbb      	ldrb	r3, [r7, #22]
 80058ba:	e000      	b.n	80058be <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3718      	adds	r7, #24
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80058c6:	b580      	push	{r7, lr}
 80058c8:	b084      	sub	sp, #16
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80058ce:	2300      	movs	r3, #0
 80058d0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2201      	movs	r2, #1
 80058d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d014      	beq.n	800592c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00e      	beq.n	800592c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	6852      	ldr	r2, [r2, #4]
 800591a:	b2d2      	uxtb	r2, r2
 800591c:	4611      	mov	r1, r2
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	4798      	blx	r3
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d001      	beq.n	800592c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005928:	2303      	movs	r3, #3
 800592a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800592c:	2340      	movs	r3, #64	; 0x40
 800592e:	2200      	movs	r2, #0
 8005930:	2100      	movs	r1, #0
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f005 fb65 	bl	800b002 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2240      	movs	r2, #64	; 0x40
 8005944:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005948:	2340      	movs	r3, #64	; 0x40
 800594a:	2200      	movs	r2, #0
 800594c:	2180      	movs	r1, #128	; 0x80
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f005 fb57 	bl	800b002 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2240      	movs	r2, #64	; 0x40
 800595e:	621a      	str	r2, [r3, #32]

  return ret;
 8005960:	7bfb      	ldrb	r3, [r7, #15]
}
 8005962:	4618      	mov	r0, r3
 8005964:	3710      	adds	r7, #16
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}

0800596a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800596a:	b480      	push	{r7}
 800596c:	b083      	sub	sp, #12
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
 8005972:	460b      	mov	r3, r1
 8005974:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	78fa      	ldrb	r2, [r7, #3]
 800597a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	370c      	adds	r7, #12
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr

0800598a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800598a:	b480      	push	{r7}
 800598c:	b083      	sub	sp, #12
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005998:	b2da      	uxtb	r2, r3
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2204      	movs	r2, #4
 80059a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	370c      	adds	r7, #12
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr

080059b6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80059b6:	b480      	push	{r7}
 80059b8:	b083      	sub	sp, #12
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	2b04      	cmp	r3, #4
 80059c8:	d106      	bne.n	80059d8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80059d0:	b2da      	uxtb	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	370c      	adds	r7, #12
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr

080059e6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80059e6:	b580      	push	{r7, lr}
 80059e8:	b082      	sub	sp, #8
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	2b03      	cmp	r3, #3
 80059f8:	d110      	bne.n	8005a1c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d00b      	beq.n	8005a1c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a0a:	69db      	ldr	r3, [r3, #28]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d005      	beq.n	8005a1c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a16:	69db      	ldr	r3, [r3, #28]
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3708      	adds	r7, #8
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}

08005a26 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005a26:	b580      	push	{r7, lr}
 8005a28:	b082      	sub	sp, #8
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
 8005a2e:	460b      	mov	r3, r1
 8005a30:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	32ae      	adds	r2, #174	; 0xae
 8005a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d101      	bne.n	8005a48 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005a44:	2303      	movs	r3, #3
 8005a46:	e01c      	b.n	8005a82 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	2b03      	cmp	r3, #3
 8005a52:	d115      	bne.n	8005a80 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	32ae      	adds	r2, #174	; 0xae
 8005a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a62:	6a1b      	ldr	r3, [r3, #32]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00b      	beq.n	8005a80 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	32ae      	adds	r2, #174	; 0xae
 8005a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a76:	6a1b      	ldr	r3, [r3, #32]
 8005a78:	78fa      	ldrb	r2, [r7, #3]
 8005a7a:	4611      	mov	r1, r2
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3708      	adds	r7, #8
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}

08005a8a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005a8a:	b580      	push	{r7, lr}
 8005a8c:	b082      	sub	sp, #8
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
 8005a92:	460b      	mov	r3, r1
 8005a94:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	32ae      	adds	r2, #174	; 0xae
 8005aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d101      	bne.n	8005aac <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	e01c      	b.n	8005ae6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	2b03      	cmp	r3, #3
 8005ab6:	d115      	bne.n	8005ae4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	32ae      	adds	r2, #174	; 0xae
 8005ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00b      	beq.n	8005ae4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	32ae      	adds	r2, #174	; 0xae
 8005ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005adc:	78fa      	ldrb	r2, [r7, #3]
 8005ade:	4611      	mov	r1, r2
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3708      	adds	r7, #8
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}

08005aee <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005aee:	b480      	push	{r7}
 8005af0:	b083      	sub	sp, #12
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00e      	beq.n	8005b40 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	6852      	ldr	r2, [r2, #4]
 8005b2e:	b2d2      	uxtb	r2, r2
 8005b30:	4611      	mov	r1, r2
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	4798      	blx	r3
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d001      	beq.n	8005b40 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3710      	adds	r7, #16
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}

08005b4a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005b4a:	b480      	push	{r7}
 8005b4c:	b083      	sub	sp, #12
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
 8005b52:	460b      	mov	r3, r1
 8005b54:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005b56:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005b70:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	370c      	adds	r7, #12
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr

08005b7e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005b7e:	b580      	push	{r7, lr}
 8005b80:	b086      	sub	sp, #24
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
 8005b86:	460b      	mov	r3, r1
 8005b88:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005b92:	2300      	movs	r3, #0
 8005b94:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	885b      	ldrh	r3, [r3, #2]
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d920      	bls.n	8005be8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005bae:	e013      	b.n	8005bd8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005bb0:	f107 030a 	add.w	r3, r7, #10
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	6978      	ldr	r0, [r7, #20]
 8005bb8:	f000 f81b 	bl	8005bf2 <USBD_GetNextDesc>
 8005bbc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	785b      	ldrb	r3, [r3, #1]
 8005bc2:	2b05      	cmp	r3, #5
 8005bc4:	d108      	bne.n	8005bd8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	789b      	ldrb	r3, [r3, #2]
 8005bce:	78fa      	ldrb	r2, [r7, #3]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d008      	beq.n	8005be6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	885b      	ldrh	r3, [r3, #2]
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	897b      	ldrh	r3, [r7, #10]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d8e5      	bhi.n	8005bb0 <USBD_GetEpDesc+0x32>
 8005be4:	e000      	b.n	8005be8 <USBD_GetEpDesc+0x6a>
          break;
 8005be6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005be8:	693b      	ldr	r3, [r7, #16]
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3718      	adds	r7, #24
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005bf2:	b480      	push	{r7}
 8005bf4:	b085      	sub	sp, #20
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
 8005bfa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	881a      	ldrh	r2, [r3, #0]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	4413      	add	r3, r2
 8005c0c:	b29a      	uxth	r2, r3
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	461a      	mov	r2, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3714      	adds	r7, #20
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b087      	sub	sp, #28
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	3301      	adds	r3, #1
 8005c42:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005c4a:	8a3b      	ldrh	r3, [r7, #16]
 8005c4c:	021b      	lsls	r3, r3, #8
 8005c4e:	b21a      	sxth	r2, r3
 8005c50:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	b21b      	sxth	r3, r3
 8005c58:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005c5a:	89fb      	ldrh	r3, [r7, #14]
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	371c      	adds	r7, #28
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c72:	2300      	movs	r3, #0
 8005c74:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c7e:	2b40      	cmp	r3, #64	; 0x40
 8005c80:	d005      	beq.n	8005c8e <USBD_StdDevReq+0x26>
 8005c82:	2b40      	cmp	r3, #64	; 0x40
 8005c84:	d857      	bhi.n	8005d36 <USBD_StdDevReq+0xce>
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00f      	beq.n	8005caa <USBD_StdDevReq+0x42>
 8005c8a:	2b20      	cmp	r3, #32
 8005c8c:	d153      	bne.n	8005d36 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	32ae      	adds	r2, #174	; 0xae
 8005c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	6839      	ldr	r1, [r7, #0]
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	4798      	blx	r3
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ca8:	e04a      	b.n	8005d40 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	785b      	ldrb	r3, [r3, #1]
 8005cae:	2b09      	cmp	r3, #9
 8005cb0:	d83b      	bhi.n	8005d2a <USBD_StdDevReq+0xc2>
 8005cb2:	a201      	add	r2, pc, #4	; (adr r2, 8005cb8 <USBD_StdDevReq+0x50>)
 8005cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb8:	08005d0d 	.word	0x08005d0d
 8005cbc:	08005d21 	.word	0x08005d21
 8005cc0:	08005d2b 	.word	0x08005d2b
 8005cc4:	08005d17 	.word	0x08005d17
 8005cc8:	08005d2b 	.word	0x08005d2b
 8005ccc:	08005ceb 	.word	0x08005ceb
 8005cd0:	08005ce1 	.word	0x08005ce1
 8005cd4:	08005d2b 	.word	0x08005d2b
 8005cd8:	08005d03 	.word	0x08005d03
 8005cdc:	08005cf5 	.word	0x08005cf5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005ce0:	6839      	ldr	r1, [r7, #0]
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 fa3c 	bl	8006160 <USBD_GetDescriptor>
          break;
 8005ce8:	e024      	b.n	8005d34 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005cea:	6839      	ldr	r1, [r7, #0]
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 fba1 	bl	8006434 <USBD_SetAddress>
          break;
 8005cf2:	e01f      	b.n	8005d34 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005cf4:	6839      	ldr	r1, [r7, #0]
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 fbe0 	bl	80064bc <USBD_SetConfig>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	73fb      	strb	r3, [r7, #15]
          break;
 8005d00:	e018      	b.n	8005d34 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005d02:	6839      	ldr	r1, [r7, #0]
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 fc83 	bl	8006610 <USBD_GetConfig>
          break;
 8005d0a:	e013      	b.n	8005d34 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005d0c:	6839      	ldr	r1, [r7, #0]
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 fcb4 	bl	800667c <USBD_GetStatus>
          break;
 8005d14:	e00e      	b.n	8005d34 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005d16:	6839      	ldr	r1, [r7, #0]
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 fce3 	bl	80066e4 <USBD_SetFeature>
          break;
 8005d1e:	e009      	b.n	8005d34 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005d20:	6839      	ldr	r1, [r7, #0]
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 fd07 	bl	8006736 <USBD_ClrFeature>
          break;
 8005d28:	e004      	b.n	8005d34 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005d2a:	6839      	ldr	r1, [r7, #0]
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f000 fd5e 	bl	80067ee <USBD_CtlError>
          break;
 8005d32:	bf00      	nop
      }
      break;
 8005d34:	e004      	b.n	8005d40 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005d36:	6839      	ldr	r1, [r7, #0]
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 fd58 	bl	80067ee <USBD_CtlError>
      break;
 8005d3e:	bf00      	nop
  }

  return ret;
 8005d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3710      	adds	r7, #16
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop

08005d4c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d56:	2300      	movs	r3, #0
 8005d58:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d62:	2b40      	cmp	r3, #64	; 0x40
 8005d64:	d005      	beq.n	8005d72 <USBD_StdItfReq+0x26>
 8005d66:	2b40      	cmp	r3, #64	; 0x40
 8005d68:	d852      	bhi.n	8005e10 <USBD_StdItfReq+0xc4>
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d001      	beq.n	8005d72 <USBD_StdItfReq+0x26>
 8005d6e:	2b20      	cmp	r3, #32
 8005d70:	d14e      	bne.n	8005e10 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	d840      	bhi.n	8005e02 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	889b      	ldrh	r3, [r3, #4]
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d836      	bhi.n	8005df8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	889b      	ldrh	r3, [r3, #4]
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	4619      	mov	r1, r3
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f7ff fed9 	bl	8005b4a <USBD_CoreFindIF>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005d9c:	7bbb      	ldrb	r3, [r7, #14]
 8005d9e:	2bff      	cmp	r3, #255	; 0xff
 8005da0:	d01d      	beq.n	8005dde <USBD_StdItfReq+0x92>
 8005da2:	7bbb      	ldrb	r3, [r7, #14]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d11a      	bne.n	8005dde <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005da8:	7bba      	ldrb	r2, [r7, #14]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	32ae      	adds	r2, #174	; 0xae
 8005dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d00f      	beq.n	8005dd8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005db8:	7bba      	ldrb	r2, [r7, #14]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005dc0:	7bba      	ldrb	r2, [r7, #14]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	32ae      	adds	r2, #174	; 0xae
 8005dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	6839      	ldr	r1, [r7, #0]
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	4798      	blx	r3
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005dd6:	e004      	b.n	8005de2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005ddc:	e001      	b.n	8005de2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005dde:	2303      	movs	r3, #3
 8005de0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	88db      	ldrh	r3, [r3, #6]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d110      	bne.n	8005e0c <USBD_StdItfReq+0xc0>
 8005dea:	7bfb      	ldrb	r3, [r7, #15]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d10d      	bne.n	8005e0c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 fdc7 	bl	8006984 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005df6:	e009      	b.n	8005e0c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005df8:	6839      	ldr	r1, [r7, #0]
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 fcf7 	bl	80067ee <USBD_CtlError>
          break;
 8005e00:	e004      	b.n	8005e0c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005e02:	6839      	ldr	r1, [r7, #0]
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f000 fcf2 	bl	80067ee <USBD_CtlError>
          break;
 8005e0a:	e000      	b.n	8005e0e <USBD_StdItfReq+0xc2>
          break;
 8005e0c:	bf00      	nop
      }
      break;
 8005e0e:	e004      	b.n	8005e1a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005e10:	6839      	ldr	r1, [r7, #0]
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 fceb 	bl	80067ee <USBD_CtlError>
      break;
 8005e18:	bf00      	nop
  }

  return ret;
 8005e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3710      	adds	r7, #16
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	889b      	ldrh	r3, [r3, #4]
 8005e36:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e40:	2b40      	cmp	r3, #64	; 0x40
 8005e42:	d007      	beq.n	8005e54 <USBD_StdEPReq+0x30>
 8005e44:	2b40      	cmp	r3, #64	; 0x40
 8005e46:	f200 817f 	bhi.w	8006148 <USBD_StdEPReq+0x324>
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d02a      	beq.n	8005ea4 <USBD_StdEPReq+0x80>
 8005e4e:	2b20      	cmp	r3, #32
 8005e50:	f040 817a 	bne.w	8006148 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005e54:	7bbb      	ldrb	r3, [r7, #14]
 8005e56:	4619      	mov	r1, r3
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f7ff fe83 	bl	8005b64 <USBD_CoreFindEP>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005e62:	7b7b      	ldrb	r3, [r7, #13]
 8005e64:	2bff      	cmp	r3, #255	; 0xff
 8005e66:	f000 8174 	beq.w	8006152 <USBD_StdEPReq+0x32e>
 8005e6a:	7b7b      	ldrb	r3, [r7, #13]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f040 8170 	bne.w	8006152 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005e72:	7b7a      	ldrb	r2, [r7, #13]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005e7a:	7b7a      	ldrb	r2, [r7, #13]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	32ae      	adds	r2, #174	; 0xae
 8005e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	f000 8163 	beq.w	8006152 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005e8c:	7b7a      	ldrb	r2, [r7, #13]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	32ae      	adds	r2, #174	; 0xae
 8005e92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	6839      	ldr	r1, [r7, #0]
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	4798      	blx	r3
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005ea2:	e156      	b.n	8006152 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	785b      	ldrb	r3, [r3, #1]
 8005ea8:	2b03      	cmp	r3, #3
 8005eaa:	d008      	beq.n	8005ebe <USBD_StdEPReq+0x9a>
 8005eac:	2b03      	cmp	r3, #3
 8005eae:	f300 8145 	bgt.w	800613c <USBD_StdEPReq+0x318>
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	f000 809b 	beq.w	8005fee <USBD_StdEPReq+0x1ca>
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d03c      	beq.n	8005f36 <USBD_StdEPReq+0x112>
 8005ebc:	e13e      	b.n	800613c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	d002      	beq.n	8005ed0 <USBD_StdEPReq+0xac>
 8005eca:	2b03      	cmp	r3, #3
 8005ecc:	d016      	beq.n	8005efc <USBD_StdEPReq+0xd8>
 8005ece:	e02c      	b.n	8005f2a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005ed0:	7bbb      	ldrb	r3, [r7, #14]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d00d      	beq.n	8005ef2 <USBD_StdEPReq+0xce>
 8005ed6:	7bbb      	ldrb	r3, [r7, #14]
 8005ed8:	2b80      	cmp	r3, #128	; 0x80
 8005eda:	d00a      	beq.n	8005ef2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005edc:	7bbb      	ldrb	r3, [r7, #14]
 8005ede:	4619      	mov	r1, r3
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f005 f8d3 	bl	800b08c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005ee6:	2180      	movs	r1, #128	; 0x80
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f005 f8cf 	bl	800b08c <USBD_LL_StallEP>
 8005eee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005ef0:	e020      	b.n	8005f34 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005ef2:	6839      	ldr	r1, [r7, #0]
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 fc7a 	bl	80067ee <USBD_CtlError>
              break;
 8005efa:	e01b      	b.n	8005f34 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	885b      	ldrh	r3, [r3, #2]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d10e      	bne.n	8005f22 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005f04:	7bbb      	ldrb	r3, [r7, #14]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00b      	beq.n	8005f22 <USBD_StdEPReq+0xfe>
 8005f0a:	7bbb      	ldrb	r3, [r7, #14]
 8005f0c:	2b80      	cmp	r3, #128	; 0x80
 8005f0e:	d008      	beq.n	8005f22 <USBD_StdEPReq+0xfe>
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	88db      	ldrh	r3, [r3, #6]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d104      	bne.n	8005f22 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005f18:	7bbb      	ldrb	r3, [r7, #14]
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f005 f8b5 	bl	800b08c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 fd2e 	bl	8006984 <USBD_CtlSendStatus>

              break;
 8005f28:	e004      	b.n	8005f34 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005f2a:	6839      	ldr	r1, [r7, #0]
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 fc5e 	bl	80067ee <USBD_CtlError>
              break;
 8005f32:	bf00      	nop
          }
          break;
 8005f34:	e107      	b.n	8006146 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	d002      	beq.n	8005f48 <USBD_StdEPReq+0x124>
 8005f42:	2b03      	cmp	r3, #3
 8005f44:	d016      	beq.n	8005f74 <USBD_StdEPReq+0x150>
 8005f46:	e04b      	b.n	8005fe0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f48:	7bbb      	ldrb	r3, [r7, #14]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00d      	beq.n	8005f6a <USBD_StdEPReq+0x146>
 8005f4e:	7bbb      	ldrb	r3, [r7, #14]
 8005f50:	2b80      	cmp	r3, #128	; 0x80
 8005f52:	d00a      	beq.n	8005f6a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005f54:	7bbb      	ldrb	r3, [r7, #14]
 8005f56:	4619      	mov	r1, r3
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f005 f897 	bl	800b08c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f5e:	2180      	movs	r1, #128	; 0x80
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f005 f893 	bl	800b08c <USBD_LL_StallEP>
 8005f66:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005f68:	e040      	b.n	8005fec <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005f6a:	6839      	ldr	r1, [r7, #0]
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 fc3e 	bl	80067ee <USBD_CtlError>
              break;
 8005f72:	e03b      	b.n	8005fec <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	885b      	ldrh	r3, [r3, #2]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d136      	bne.n	8005fea <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005f7c:	7bbb      	ldrb	r3, [r7, #14]
 8005f7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d004      	beq.n	8005f90 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005f86:	7bbb      	ldrb	r3, [r7, #14]
 8005f88:	4619      	mov	r1, r3
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f005 f89d 	bl	800b0ca <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 fcf7 	bl	8006984 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005f96:	7bbb      	ldrb	r3, [r7, #14]
 8005f98:	4619      	mov	r1, r3
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f7ff fde2 	bl	8005b64 <USBD_CoreFindEP>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005fa4:	7b7b      	ldrb	r3, [r7, #13]
 8005fa6:	2bff      	cmp	r3, #255	; 0xff
 8005fa8:	d01f      	beq.n	8005fea <USBD_StdEPReq+0x1c6>
 8005faa:	7b7b      	ldrb	r3, [r7, #13]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d11c      	bne.n	8005fea <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005fb0:	7b7a      	ldrb	r2, [r7, #13]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005fb8:	7b7a      	ldrb	r2, [r7, #13]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	32ae      	adds	r2, #174	; 0xae
 8005fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d010      	beq.n	8005fea <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005fc8:	7b7a      	ldrb	r2, [r7, #13]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	32ae      	adds	r2, #174	; 0xae
 8005fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	6839      	ldr	r1, [r7, #0]
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	4798      	blx	r3
 8005fda:	4603      	mov	r3, r0
 8005fdc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005fde:	e004      	b.n	8005fea <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005fe0:	6839      	ldr	r1, [r7, #0]
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 fc03 	bl	80067ee <USBD_CtlError>
              break;
 8005fe8:	e000      	b.n	8005fec <USBD_StdEPReq+0x1c8>
              break;
 8005fea:	bf00      	nop
          }
          break;
 8005fec:	e0ab      	b.n	8006146 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d002      	beq.n	8006000 <USBD_StdEPReq+0x1dc>
 8005ffa:	2b03      	cmp	r3, #3
 8005ffc:	d032      	beq.n	8006064 <USBD_StdEPReq+0x240>
 8005ffe:	e097      	b.n	8006130 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006000:	7bbb      	ldrb	r3, [r7, #14]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d007      	beq.n	8006016 <USBD_StdEPReq+0x1f2>
 8006006:	7bbb      	ldrb	r3, [r7, #14]
 8006008:	2b80      	cmp	r3, #128	; 0x80
 800600a:	d004      	beq.n	8006016 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800600c:	6839      	ldr	r1, [r7, #0]
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 fbed 	bl	80067ee <USBD_CtlError>
                break;
 8006014:	e091      	b.n	800613a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006016:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800601a:	2b00      	cmp	r3, #0
 800601c:	da0b      	bge.n	8006036 <USBD_StdEPReq+0x212>
 800601e:	7bbb      	ldrb	r3, [r7, #14]
 8006020:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006024:	4613      	mov	r3, r2
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	4413      	add	r3, r2
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	3310      	adds	r3, #16
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	4413      	add	r3, r2
 8006032:	3304      	adds	r3, #4
 8006034:	e00b      	b.n	800604e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006036:	7bbb      	ldrb	r3, [r7, #14]
 8006038:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800603c:	4613      	mov	r3, r2
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	4413      	add	r3, r2
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	4413      	add	r3, r2
 800604c:	3304      	adds	r3, #4
 800604e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	2200      	movs	r2, #0
 8006054:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	2202      	movs	r2, #2
 800605a:	4619      	mov	r1, r3
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 fc37 	bl	80068d0 <USBD_CtlSendData>
              break;
 8006062:	e06a      	b.n	800613a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006064:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006068:	2b00      	cmp	r3, #0
 800606a:	da11      	bge.n	8006090 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800606c:	7bbb      	ldrb	r3, [r7, #14]
 800606e:	f003 020f 	and.w	r2, r3, #15
 8006072:	6879      	ldr	r1, [r7, #4]
 8006074:	4613      	mov	r3, r2
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	4413      	add	r3, r2
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	440b      	add	r3, r1
 800607e:	3324      	adds	r3, #36	; 0x24
 8006080:	881b      	ldrh	r3, [r3, #0]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d117      	bne.n	80060b6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006086:	6839      	ldr	r1, [r7, #0]
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 fbb0 	bl	80067ee <USBD_CtlError>
                  break;
 800608e:	e054      	b.n	800613a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006090:	7bbb      	ldrb	r3, [r7, #14]
 8006092:	f003 020f 	and.w	r2, r3, #15
 8006096:	6879      	ldr	r1, [r7, #4]
 8006098:	4613      	mov	r3, r2
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	4413      	add	r3, r2
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	440b      	add	r3, r1
 80060a2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80060a6:	881b      	ldrh	r3, [r3, #0]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d104      	bne.n	80060b6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80060ac:	6839      	ldr	r1, [r7, #0]
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 fb9d 	bl	80067ee <USBD_CtlError>
                  break;
 80060b4:	e041      	b.n	800613a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80060b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	da0b      	bge.n	80060d6 <USBD_StdEPReq+0x2b2>
 80060be:	7bbb      	ldrb	r3, [r7, #14]
 80060c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80060c4:	4613      	mov	r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4413      	add	r3, r2
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	3310      	adds	r3, #16
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	4413      	add	r3, r2
 80060d2:	3304      	adds	r3, #4
 80060d4:	e00b      	b.n	80060ee <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80060d6:	7bbb      	ldrb	r3, [r7, #14]
 80060d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80060dc:	4613      	mov	r3, r2
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	4413      	add	r3, r2
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	4413      	add	r3, r2
 80060ec:	3304      	adds	r3, #4
 80060ee:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80060f0:	7bbb      	ldrb	r3, [r7, #14]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d002      	beq.n	80060fc <USBD_StdEPReq+0x2d8>
 80060f6:	7bbb      	ldrb	r3, [r7, #14]
 80060f8:	2b80      	cmp	r3, #128	; 0x80
 80060fa:	d103      	bne.n	8006104 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	2200      	movs	r2, #0
 8006100:	601a      	str	r2, [r3, #0]
 8006102:	e00e      	b.n	8006122 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006104:	7bbb      	ldrb	r3, [r7, #14]
 8006106:	4619      	mov	r1, r3
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f004 fffd 	bl	800b108 <USBD_LL_IsStallEP>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d003      	beq.n	800611c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	2201      	movs	r2, #1
 8006118:	601a      	str	r2, [r3, #0]
 800611a:	e002      	b.n	8006122 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	2200      	movs	r2, #0
 8006120:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	2202      	movs	r2, #2
 8006126:	4619      	mov	r1, r3
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 fbd1 	bl	80068d0 <USBD_CtlSendData>
              break;
 800612e:	e004      	b.n	800613a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006130:	6839      	ldr	r1, [r7, #0]
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 fb5b 	bl	80067ee <USBD_CtlError>
              break;
 8006138:	bf00      	nop
          }
          break;
 800613a:	e004      	b.n	8006146 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800613c:	6839      	ldr	r1, [r7, #0]
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 fb55 	bl	80067ee <USBD_CtlError>
          break;
 8006144:	bf00      	nop
      }
      break;
 8006146:	e005      	b.n	8006154 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006148:	6839      	ldr	r1, [r7, #0]
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 fb4f 	bl	80067ee <USBD_CtlError>
      break;
 8006150:	e000      	b.n	8006154 <USBD_StdEPReq+0x330>
      break;
 8006152:	bf00      	nop
  }

  return ret;
 8006154:	7bfb      	ldrb	r3, [r7, #15]
}
 8006156:	4618      	mov	r0, r3
 8006158:	3710      	adds	r7, #16
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
	...

08006160 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800616a:	2300      	movs	r3, #0
 800616c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800616e:	2300      	movs	r3, #0
 8006170:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006172:	2300      	movs	r3, #0
 8006174:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	885b      	ldrh	r3, [r3, #2]
 800617a:	0a1b      	lsrs	r3, r3, #8
 800617c:	b29b      	uxth	r3, r3
 800617e:	3b01      	subs	r3, #1
 8006180:	2b06      	cmp	r3, #6
 8006182:	f200 8128 	bhi.w	80063d6 <USBD_GetDescriptor+0x276>
 8006186:	a201      	add	r2, pc, #4	; (adr r2, 800618c <USBD_GetDescriptor+0x2c>)
 8006188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800618c:	080061a9 	.word	0x080061a9
 8006190:	080061c1 	.word	0x080061c1
 8006194:	08006201 	.word	0x08006201
 8006198:	080063d7 	.word	0x080063d7
 800619c:	080063d7 	.word	0x080063d7
 80061a0:	08006377 	.word	0x08006377
 80061a4:	080063a3 	.word	0x080063a3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	7c12      	ldrb	r2, [r2, #16]
 80061b4:	f107 0108 	add.w	r1, r7, #8
 80061b8:	4610      	mov	r0, r2
 80061ba:	4798      	blx	r3
 80061bc:	60f8      	str	r0, [r7, #12]
      break;
 80061be:	e112      	b.n	80063e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	7c1b      	ldrb	r3, [r3, #16]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d10d      	bne.n	80061e4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d0:	f107 0208 	add.w	r2, r7, #8
 80061d4:	4610      	mov	r0, r2
 80061d6:	4798      	blx	r3
 80061d8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	3301      	adds	r3, #1
 80061de:	2202      	movs	r2, #2
 80061e0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80061e2:	e100      	b.n	80063e6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ec:	f107 0208 	add.w	r2, r7, #8
 80061f0:	4610      	mov	r0, r2
 80061f2:	4798      	blx	r3
 80061f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	3301      	adds	r3, #1
 80061fa:	2202      	movs	r2, #2
 80061fc:	701a      	strb	r2, [r3, #0]
      break;
 80061fe:	e0f2      	b.n	80063e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	885b      	ldrh	r3, [r3, #2]
 8006204:	b2db      	uxtb	r3, r3
 8006206:	2b05      	cmp	r3, #5
 8006208:	f200 80ac 	bhi.w	8006364 <USBD_GetDescriptor+0x204>
 800620c:	a201      	add	r2, pc, #4	; (adr r2, 8006214 <USBD_GetDescriptor+0xb4>)
 800620e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006212:	bf00      	nop
 8006214:	0800622d 	.word	0x0800622d
 8006218:	08006261 	.word	0x08006261
 800621c:	08006295 	.word	0x08006295
 8006220:	080062c9 	.word	0x080062c9
 8006224:	080062fd 	.word	0x080062fd
 8006228:	08006331 	.word	0x08006331
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d00b      	beq.n	8006250 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	7c12      	ldrb	r2, [r2, #16]
 8006244:	f107 0108 	add.w	r1, r7, #8
 8006248:	4610      	mov	r0, r2
 800624a:	4798      	blx	r3
 800624c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800624e:	e091      	b.n	8006374 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006250:	6839      	ldr	r1, [r7, #0]
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 facb 	bl	80067ee <USBD_CtlError>
            err++;
 8006258:	7afb      	ldrb	r3, [r7, #11]
 800625a:	3301      	adds	r3, #1
 800625c:	72fb      	strb	r3, [r7, #11]
          break;
 800625e:	e089      	b.n	8006374 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00b      	beq.n	8006284 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	7c12      	ldrb	r2, [r2, #16]
 8006278:	f107 0108 	add.w	r1, r7, #8
 800627c:	4610      	mov	r0, r2
 800627e:	4798      	blx	r3
 8006280:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006282:	e077      	b.n	8006374 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006284:	6839      	ldr	r1, [r7, #0]
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 fab1 	bl	80067ee <USBD_CtlError>
            err++;
 800628c:	7afb      	ldrb	r3, [r7, #11]
 800628e:	3301      	adds	r3, #1
 8006290:	72fb      	strb	r3, [r7, #11]
          break;
 8006292:	e06f      	b.n	8006374 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d00b      	beq.n	80062b8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	7c12      	ldrb	r2, [r2, #16]
 80062ac:	f107 0108 	add.w	r1, r7, #8
 80062b0:	4610      	mov	r0, r2
 80062b2:	4798      	blx	r3
 80062b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062b6:	e05d      	b.n	8006374 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80062b8:	6839      	ldr	r1, [r7, #0]
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 fa97 	bl	80067ee <USBD_CtlError>
            err++;
 80062c0:	7afb      	ldrb	r3, [r7, #11]
 80062c2:	3301      	adds	r3, #1
 80062c4:	72fb      	strb	r3, [r7, #11]
          break;
 80062c6:	e055      	b.n	8006374 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062ce:	691b      	ldr	r3, [r3, #16]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d00b      	beq.n	80062ec <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	7c12      	ldrb	r2, [r2, #16]
 80062e0:	f107 0108 	add.w	r1, r7, #8
 80062e4:	4610      	mov	r0, r2
 80062e6:	4798      	blx	r3
 80062e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062ea:	e043      	b.n	8006374 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80062ec:	6839      	ldr	r1, [r7, #0]
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 fa7d 	bl	80067ee <USBD_CtlError>
            err++;
 80062f4:	7afb      	ldrb	r3, [r7, #11]
 80062f6:	3301      	adds	r3, #1
 80062f8:	72fb      	strb	r3, [r7, #11]
          break;
 80062fa:	e03b      	b.n	8006374 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006302:	695b      	ldr	r3, [r3, #20]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d00b      	beq.n	8006320 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800630e:	695b      	ldr	r3, [r3, #20]
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	7c12      	ldrb	r2, [r2, #16]
 8006314:	f107 0108 	add.w	r1, r7, #8
 8006318:	4610      	mov	r0, r2
 800631a:	4798      	blx	r3
 800631c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800631e:	e029      	b.n	8006374 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006320:	6839      	ldr	r1, [r7, #0]
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 fa63 	bl	80067ee <USBD_CtlError>
            err++;
 8006328:	7afb      	ldrb	r3, [r7, #11]
 800632a:	3301      	adds	r3, #1
 800632c:	72fb      	strb	r3, [r7, #11]
          break;
 800632e:	e021      	b.n	8006374 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006336:	699b      	ldr	r3, [r3, #24]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00b      	beq.n	8006354 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006342:	699b      	ldr	r3, [r3, #24]
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	7c12      	ldrb	r2, [r2, #16]
 8006348:	f107 0108 	add.w	r1, r7, #8
 800634c:	4610      	mov	r0, r2
 800634e:	4798      	blx	r3
 8006350:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006352:	e00f      	b.n	8006374 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006354:	6839      	ldr	r1, [r7, #0]
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 fa49 	bl	80067ee <USBD_CtlError>
            err++;
 800635c:	7afb      	ldrb	r3, [r7, #11]
 800635e:	3301      	adds	r3, #1
 8006360:	72fb      	strb	r3, [r7, #11]
          break;
 8006362:	e007      	b.n	8006374 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006364:	6839      	ldr	r1, [r7, #0]
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 fa41 	bl	80067ee <USBD_CtlError>
          err++;
 800636c:	7afb      	ldrb	r3, [r7, #11]
 800636e:	3301      	adds	r3, #1
 8006370:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006372:	bf00      	nop
      }
      break;
 8006374:	e037      	b.n	80063e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	7c1b      	ldrb	r3, [r3, #16]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d109      	bne.n	8006392 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006386:	f107 0208 	add.w	r2, r7, #8
 800638a:	4610      	mov	r0, r2
 800638c:	4798      	blx	r3
 800638e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006390:	e029      	b.n	80063e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006392:	6839      	ldr	r1, [r7, #0]
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f000 fa2a 	bl	80067ee <USBD_CtlError>
        err++;
 800639a:	7afb      	ldrb	r3, [r7, #11]
 800639c:	3301      	adds	r3, #1
 800639e:	72fb      	strb	r3, [r7, #11]
      break;
 80063a0:	e021      	b.n	80063e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	7c1b      	ldrb	r3, [r3, #16]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d10d      	bne.n	80063c6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b2:	f107 0208 	add.w	r2, r7, #8
 80063b6:	4610      	mov	r0, r2
 80063b8:	4798      	blx	r3
 80063ba:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	3301      	adds	r3, #1
 80063c0:	2207      	movs	r2, #7
 80063c2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80063c4:	e00f      	b.n	80063e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80063c6:	6839      	ldr	r1, [r7, #0]
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 fa10 	bl	80067ee <USBD_CtlError>
        err++;
 80063ce:	7afb      	ldrb	r3, [r7, #11]
 80063d0:	3301      	adds	r3, #1
 80063d2:	72fb      	strb	r3, [r7, #11]
      break;
 80063d4:	e007      	b.n	80063e6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80063d6:	6839      	ldr	r1, [r7, #0]
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 fa08 	bl	80067ee <USBD_CtlError>
      err++;
 80063de:	7afb      	ldrb	r3, [r7, #11]
 80063e0:	3301      	adds	r3, #1
 80063e2:	72fb      	strb	r3, [r7, #11]
      break;
 80063e4:	bf00      	nop
  }

  if (err != 0U)
 80063e6:	7afb      	ldrb	r3, [r7, #11]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d11e      	bne.n	800642a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	88db      	ldrh	r3, [r3, #6]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d016      	beq.n	8006422 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80063f4:	893b      	ldrh	r3, [r7, #8]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d00e      	beq.n	8006418 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	88da      	ldrh	r2, [r3, #6]
 80063fe:	893b      	ldrh	r3, [r7, #8]
 8006400:	4293      	cmp	r3, r2
 8006402:	bf28      	it	cs
 8006404:	4613      	movcs	r3, r2
 8006406:	b29b      	uxth	r3, r3
 8006408:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800640a:	893b      	ldrh	r3, [r7, #8]
 800640c:	461a      	mov	r2, r3
 800640e:	68f9      	ldr	r1, [r7, #12]
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 fa5d 	bl	80068d0 <USBD_CtlSendData>
 8006416:	e009      	b.n	800642c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006418:	6839      	ldr	r1, [r7, #0]
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f000 f9e7 	bl	80067ee <USBD_CtlError>
 8006420:	e004      	b.n	800642c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 faae 	bl	8006984 <USBD_CtlSendStatus>
 8006428:	e000      	b.n	800642c <USBD_GetDescriptor+0x2cc>
    return;
 800642a:	bf00      	nop
  }
}
 800642c:	3710      	adds	r7, #16
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop

08006434 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	889b      	ldrh	r3, [r3, #4]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d131      	bne.n	80064aa <USBD_SetAddress+0x76>
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	88db      	ldrh	r3, [r3, #6]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d12d      	bne.n	80064aa <USBD_SetAddress+0x76>
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	885b      	ldrh	r3, [r3, #2]
 8006452:	2b7f      	cmp	r3, #127	; 0x7f
 8006454:	d829      	bhi.n	80064aa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	885b      	ldrh	r3, [r3, #2]
 800645a:	b2db      	uxtb	r3, r3
 800645c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006460:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006468:	b2db      	uxtb	r3, r3
 800646a:	2b03      	cmp	r3, #3
 800646c:	d104      	bne.n	8006478 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800646e:	6839      	ldr	r1, [r7, #0]
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 f9bc 	bl	80067ee <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006476:	e01d      	b.n	80064b4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	7bfa      	ldrb	r2, [r7, #15]
 800647c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006480:	7bfb      	ldrb	r3, [r7, #15]
 8006482:	4619      	mov	r1, r3
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f004 fe6b 	bl	800b160 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 fa7a 	bl	8006984 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006490:	7bfb      	ldrb	r3, [r7, #15]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d004      	beq.n	80064a0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2202      	movs	r2, #2
 800649a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800649e:	e009      	b.n	80064b4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064a8:	e004      	b.n	80064b4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80064aa:	6839      	ldr	r1, [r7, #0]
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 f99e 	bl	80067ee <USBD_CtlError>
  }
}
 80064b2:	bf00      	nop
 80064b4:	bf00      	nop
 80064b6:	3710      	adds	r7, #16
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80064c6:	2300      	movs	r3, #0
 80064c8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	885b      	ldrh	r3, [r3, #2]
 80064ce:	b2da      	uxtb	r2, r3
 80064d0:	4b4e      	ldr	r3, [pc, #312]	; (800660c <USBD_SetConfig+0x150>)
 80064d2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80064d4:	4b4d      	ldr	r3, [pc, #308]	; (800660c <USBD_SetConfig+0x150>)
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d905      	bls.n	80064e8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80064dc:	6839      	ldr	r1, [r7, #0]
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 f985 	bl	80067ee <USBD_CtlError>
    return USBD_FAIL;
 80064e4:	2303      	movs	r3, #3
 80064e6:	e08c      	b.n	8006602 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d002      	beq.n	80064fa <USBD_SetConfig+0x3e>
 80064f4:	2b03      	cmp	r3, #3
 80064f6:	d029      	beq.n	800654c <USBD_SetConfig+0x90>
 80064f8:	e075      	b.n	80065e6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80064fa:	4b44      	ldr	r3, [pc, #272]	; (800660c <USBD_SetConfig+0x150>)
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d020      	beq.n	8006544 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006502:	4b42      	ldr	r3, [pc, #264]	; (800660c <USBD_SetConfig+0x150>)
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	461a      	mov	r2, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800650c:	4b3f      	ldr	r3, [pc, #252]	; (800660c <USBD_SetConfig+0x150>)
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	4619      	mov	r1, r3
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f7fe ffe7 	bl	80054e6 <USBD_SetClassConfig>
 8006518:	4603      	mov	r3, r0
 800651a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800651c:	7bfb      	ldrb	r3, [r7, #15]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d008      	beq.n	8006534 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006522:	6839      	ldr	r1, [r7, #0]
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 f962 	bl	80067ee <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2202      	movs	r2, #2
 800652e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006532:	e065      	b.n	8006600 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 fa25 	bl	8006984 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2203      	movs	r2, #3
 800653e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006542:	e05d      	b.n	8006600 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 fa1d 	bl	8006984 <USBD_CtlSendStatus>
      break;
 800654a:	e059      	b.n	8006600 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800654c:	4b2f      	ldr	r3, [pc, #188]	; (800660c <USBD_SetConfig+0x150>)
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d112      	bne.n	800657a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2202      	movs	r2, #2
 8006558:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800655c:	4b2b      	ldr	r3, [pc, #172]	; (800660c <USBD_SetConfig+0x150>)
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	461a      	mov	r2, r3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006566:	4b29      	ldr	r3, [pc, #164]	; (800660c <USBD_SetConfig+0x150>)
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	4619      	mov	r1, r3
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f7fe ffd6 	bl	800551e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 fa06 	bl	8006984 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006578:	e042      	b.n	8006600 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800657a:	4b24      	ldr	r3, [pc, #144]	; (800660c <USBD_SetConfig+0x150>)
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	461a      	mov	r2, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	429a      	cmp	r2, r3
 8006586:	d02a      	beq.n	80065de <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	b2db      	uxtb	r3, r3
 800658e:	4619      	mov	r1, r3
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f7fe ffc4 	bl	800551e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006596:	4b1d      	ldr	r3, [pc, #116]	; (800660c <USBD_SetConfig+0x150>)
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	461a      	mov	r2, r3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80065a0:	4b1a      	ldr	r3, [pc, #104]	; (800660c <USBD_SetConfig+0x150>)
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	4619      	mov	r1, r3
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f7fe ff9d 	bl	80054e6 <USBD_SetClassConfig>
 80065ac:	4603      	mov	r3, r0
 80065ae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80065b0:	7bfb      	ldrb	r3, [r7, #15]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00f      	beq.n	80065d6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80065b6:	6839      	ldr	r1, [r7, #0]
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 f918 	bl	80067ee <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	4619      	mov	r1, r3
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f7fe ffa9 	bl	800551e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2202      	movs	r2, #2
 80065d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80065d4:	e014      	b.n	8006600 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 f9d4 	bl	8006984 <USBD_CtlSendStatus>
      break;
 80065dc:	e010      	b.n	8006600 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 f9d0 	bl	8006984 <USBD_CtlSendStatus>
      break;
 80065e4:	e00c      	b.n	8006600 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80065e6:	6839      	ldr	r1, [r7, #0]
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 f900 	bl	80067ee <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80065ee:	4b07      	ldr	r3, [pc, #28]	; (800660c <USBD_SetConfig+0x150>)
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	4619      	mov	r1, r3
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f7fe ff92 	bl	800551e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80065fa:	2303      	movs	r3, #3
 80065fc:	73fb      	strb	r3, [r7, #15]
      break;
 80065fe:	bf00      	nop
  }

  return ret;
 8006600:	7bfb      	ldrb	r3, [r7, #15]
}
 8006602:	4618      	mov	r0, r3
 8006604:	3710      	adds	r7, #16
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
 800660a:	bf00      	nop
 800660c:	200001d0 	.word	0x200001d0

08006610 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b082      	sub	sp, #8
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	88db      	ldrh	r3, [r3, #6]
 800661e:	2b01      	cmp	r3, #1
 8006620:	d004      	beq.n	800662c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006622:	6839      	ldr	r1, [r7, #0]
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 f8e2 	bl	80067ee <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800662a:	e023      	b.n	8006674 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006632:	b2db      	uxtb	r3, r3
 8006634:	2b02      	cmp	r3, #2
 8006636:	dc02      	bgt.n	800663e <USBD_GetConfig+0x2e>
 8006638:	2b00      	cmp	r3, #0
 800663a:	dc03      	bgt.n	8006644 <USBD_GetConfig+0x34>
 800663c:	e015      	b.n	800666a <USBD_GetConfig+0x5a>
 800663e:	2b03      	cmp	r3, #3
 8006640:	d00b      	beq.n	800665a <USBD_GetConfig+0x4a>
 8006642:	e012      	b.n	800666a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	3308      	adds	r3, #8
 800664e:	2201      	movs	r2, #1
 8006650:	4619      	mov	r1, r3
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 f93c 	bl	80068d0 <USBD_CtlSendData>
        break;
 8006658:	e00c      	b.n	8006674 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	3304      	adds	r3, #4
 800665e:	2201      	movs	r2, #1
 8006660:	4619      	mov	r1, r3
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 f934 	bl	80068d0 <USBD_CtlSendData>
        break;
 8006668:	e004      	b.n	8006674 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800666a:	6839      	ldr	r1, [r7, #0]
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 f8be 	bl	80067ee <USBD_CtlError>
        break;
 8006672:	bf00      	nop
}
 8006674:	bf00      	nop
 8006676:	3708      	adds	r7, #8
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b082      	sub	sp, #8
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800668c:	b2db      	uxtb	r3, r3
 800668e:	3b01      	subs	r3, #1
 8006690:	2b02      	cmp	r3, #2
 8006692:	d81e      	bhi.n	80066d2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	88db      	ldrh	r3, [r3, #6]
 8006698:	2b02      	cmp	r3, #2
 800669a:	d004      	beq.n	80066a6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800669c:	6839      	ldr	r1, [r7, #0]
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 f8a5 	bl	80067ee <USBD_CtlError>
        break;
 80066a4:	e01a      	b.n	80066dc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2201      	movs	r2, #1
 80066aa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d005      	beq.n	80066c2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	f043 0202 	orr.w	r2, r3, #2
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	330c      	adds	r3, #12
 80066c6:	2202      	movs	r2, #2
 80066c8:	4619      	mov	r1, r3
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 f900 	bl	80068d0 <USBD_CtlSendData>
      break;
 80066d0:	e004      	b.n	80066dc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80066d2:	6839      	ldr	r1, [r7, #0]
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 f88a 	bl	80067ee <USBD_CtlError>
      break;
 80066da:	bf00      	nop
  }
}
 80066dc:	bf00      	nop
 80066de:	3708      	adds	r7, #8
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b082      	sub	sp, #8
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	885b      	ldrh	r3, [r3, #2]
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d107      	bne.n	8006706 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2201      	movs	r2, #1
 80066fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 f940 	bl	8006984 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006704:	e013      	b.n	800672e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	885b      	ldrh	r3, [r3, #2]
 800670a:	2b02      	cmp	r3, #2
 800670c:	d10b      	bne.n	8006726 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	889b      	ldrh	r3, [r3, #4]
 8006712:	0a1b      	lsrs	r3, r3, #8
 8006714:	b29b      	uxth	r3, r3
 8006716:	b2da      	uxtb	r2, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 f930 	bl	8006984 <USBD_CtlSendStatus>
}
 8006724:	e003      	b.n	800672e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006726:	6839      	ldr	r1, [r7, #0]
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 f860 	bl	80067ee <USBD_CtlError>
}
 800672e:	bf00      	nop
 8006730:	3708      	adds	r7, #8
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}

08006736 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006736:	b580      	push	{r7, lr}
 8006738:	b082      	sub	sp, #8
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
 800673e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006746:	b2db      	uxtb	r3, r3
 8006748:	3b01      	subs	r3, #1
 800674a:	2b02      	cmp	r3, #2
 800674c:	d80b      	bhi.n	8006766 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	885b      	ldrh	r3, [r3, #2]
 8006752:	2b01      	cmp	r3, #1
 8006754:	d10c      	bne.n	8006770 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 f910 	bl	8006984 <USBD_CtlSendStatus>
      }
      break;
 8006764:	e004      	b.n	8006770 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006766:	6839      	ldr	r1, [r7, #0]
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 f840 	bl	80067ee <USBD_CtlError>
      break;
 800676e:	e000      	b.n	8006772 <USBD_ClrFeature+0x3c>
      break;
 8006770:	bf00      	nop
  }
}
 8006772:	bf00      	nop
 8006774:	3708      	adds	r7, #8
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}

0800677a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800677a:	b580      	push	{r7, lr}
 800677c:	b084      	sub	sp, #16
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
 8006782:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	781a      	ldrb	r2, [r3, #0]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	3301      	adds	r3, #1
 8006794:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	781a      	ldrb	r2, [r3, #0]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	3301      	adds	r3, #1
 80067a2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80067a4:	68f8      	ldr	r0, [r7, #12]
 80067a6:	f7ff fa41 	bl	8005c2c <SWAPBYTE>
 80067aa:	4603      	mov	r3, r0
 80067ac:	461a      	mov	r2, r3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	3301      	adds	r3, #1
 80067b6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	3301      	adds	r3, #1
 80067bc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80067be:	68f8      	ldr	r0, [r7, #12]
 80067c0:	f7ff fa34 	bl	8005c2c <SWAPBYTE>
 80067c4:	4603      	mov	r3, r0
 80067c6:	461a      	mov	r2, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	3301      	adds	r3, #1
 80067d0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	3301      	adds	r3, #1
 80067d6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80067d8:	68f8      	ldr	r0, [r7, #12]
 80067da:	f7ff fa27 	bl	8005c2c <SWAPBYTE>
 80067de:	4603      	mov	r3, r0
 80067e0:	461a      	mov	r2, r3
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	80da      	strh	r2, [r3, #6]
}
 80067e6:	bf00      	nop
 80067e8:	3710      	adds	r7, #16
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}

080067ee <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067ee:	b580      	push	{r7, lr}
 80067f0:	b082      	sub	sp, #8
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
 80067f6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80067f8:	2180      	movs	r1, #128	; 0x80
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f004 fc46 	bl	800b08c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006800:	2100      	movs	r1, #0
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f004 fc42 	bl	800b08c <USBD_LL_StallEP>
}
 8006808:	bf00      	nop
 800680a:	3708      	adds	r7, #8
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b086      	sub	sp, #24
 8006814:	af00      	add	r7, sp, #0
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800681c:	2300      	movs	r3, #0
 800681e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d036      	beq.n	8006894 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800682a:	6938      	ldr	r0, [r7, #16]
 800682c:	f000 f836 	bl	800689c <USBD_GetLen>
 8006830:	4603      	mov	r3, r0
 8006832:	3301      	adds	r3, #1
 8006834:	b29b      	uxth	r3, r3
 8006836:	005b      	lsls	r3, r3, #1
 8006838:	b29a      	uxth	r2, r3
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800683e:	7dfb      	ldrb	r3, [r7, #23]
 8006840:	68ba      	ldr	r2, [r7, #8]
 8006842:	4413      	add	r3, r2
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	7812      	ldrb	r2, [r2, #0]
 8006848:	701a      	strb	r2, [r3, #0]
  idx++;
 800684a:	7dfb      	ldrb	r3, [r7, #23]
 800684c:	3301      	adds	r3, #1
 800684e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006850:	7dfb      	ldrb	r3, [r7, #23]
 8006852:	68ba      	ldr	r2, [r7, #8]
 8006854:	4413      	add	r3, r2
 8006856:	2203      	movs	r2, #3
 8006858:	701a      	strb	r2, [r3, #0]
  idx++;
 800685a:	7dfb      	ldrb	r3, [r7, #23]
 800685c:	3301      	adds	r3, #1
 800685e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006860:	e013      	b.n	800688a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006862:	7dfb      	ldrb	r3, [r7, #23]
 8006864:	68ba      	ldr	r2, [r7, #8]
 8006866:	4413      	add	r3, r2
 8006868:	693a      	ldr	r2, [r7, #16]
 800686a:	7812      	ldrb	r2, [r2, #0]
 800686c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	3301      	adds	r3, #1
 8006872:	613b      	str	r3, [r7, #16]
    idx++;
 8006874:	7dfb      	ldrb	r3, [r7, #23]
 8006876:	3301      	adds	r3, #1
 8006878:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800687a:	7dfb      	ldrb	r3, [r7, #23]
 800687c:	68ba      	ldr	r2, [r7, #8]
 800687e:	4413      	add	r3, r2
 8006880:	2200      	movs	r2, #0
 8006882:	701a      	strb	r2, [r3, #0]
    idx++;
 8006884:	7dfb      	ldrb	r3, [r7, #23]
 8006886:	3301      	adds	r3, #1
 8006888:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d1e7      	bne.n	8006862 <USBD_GetString+0x52>
 8006892:	e000      	b.n	8006896 <USBD_GetString+0x86>
    return;
 8006894:	bf00      	nop
  }
}
 8006896:	3718      	adds	r7, #24
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800689c:	b480      	push	{r7}
 800689e:	b085      	sub	sp, #20
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80068a4:	2300      	movs	r3, #0
 80068a6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80068ac:	e005      	b.n	80068ba <USBD_GetLen+0x1e>
  {
    len++;
 80068ae:	7bfb      	ldrb	r3, [r7, #15]
 80068b0:	3301      	adds	r3, #1
 80068b2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	3301      	adds	r3, #1
 80068b8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d1f5      	bne.n	80068ae <USBD_GetLen+0x12>
  }

  return len;
 80068c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3714      	adds	r7, #20
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2202      	movs	r2, #2
 80068e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	68ba      	ldr	r2, [r7, #8]
 80068f4:	2100      	movs	r1, #0
 80068f6:	68f8      	ldr	r0, [r7, #12]
 80068f8:	f004 fc51 	bl	800b19e <USBD_LL_Transmit>

  return USBD_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b084      	sub	sp, #16
 800690a:	af00      	add	r7, sp, #0
 800690c:	60f8      	str	r0, [r7, #12]
 800690e:	60b9      	str	r1, [r7, #8]
 8006910:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	68ba      	ldr	r2, [r7, #8]
 8006916:	2100      	movs	r1, #0
 8006918:	68f8      	ldr	r0, [r7, #12]
 800691a:	f004 fc40 	bl	800b19e <USBD_LL_Transmit>

  return USBD_OK;
 800691e:	2300      	movs	r3, #0
}
 8006920:	4618      	mov	r0, r3
 8006922:	3710      	adds	r7, #16
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b084      	sub	sp, #16
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2203      	movs	r2, #3
 8006938:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	68ba      	ldr	r2, [r7, #8]
 8006950:	2100      	movs	r1, #0
 8006952:	68f8      	ldr	r0, [r7, #12]
 8006954:	f004 fc44 	bl	800b1e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	3710      	adds	r7, #16
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}

08006962 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006962:	b580      	push	{r7, lr}
 8006964:	b084      	sub	sp, #16
 8006966:	af00      	add	r7, sp, #0
 8006968:	60f8      	str	r0, [r7, #12]
 800696a:	60b9      	str	r1, [r7, #8]
 800696c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	68ba      	ldr	r2, [r7, #8]
 8006972:	2100      	movs	r1, #0
 8006974:	68f8      	ldr	r0, [r7, #12]
 8006976:	f004 fc33 	bl	800b1e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800697a:	2300      	movs	r3, #0
}
 800697c:	4618      	mov	r0, r3
 800697e:	3710      	adds	r7, #16
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b082      	sub	sp, #8
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2204      	movs	r2, #4
 8006990:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006994:	2300      	movs	r3, #0
 8006996:	2200      	movs	r2, #0
 8006998:	2100      	movs	r1, #0
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f004 fbff 	bl	800b19e <USBD_LL_Transmit>

  return USBD_OK;
 80069a0:	2300      	movs	r3, #0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3708      	adds	r7, #8
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}

080069aa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80069aa:	b580      	push	{r7, lr}
 80069ac:	b082      	sub	sp, #8
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2205      	movs	r2, #5
 80069b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80069ba:	2300      	movs	r3, #0
 80069bc:	2200      	movs	r2, #0
 80069be:	2100      	movs	r1, #0
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f004 fc0d 	bl	800b1e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80069c6:	2300      	movs	r3, #0
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3708      	adds	r7, #8
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <__NVIC_SetPriority>:
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	4603      	mov	r3, r0
 80069d8:	6039      	str	r1, [r7, #0]
 80069da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	db0a      	blt.n	80069fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	b2da      	uxtb	r2, r3
 80069e8:	490c      	ldr	r1, [pc, #48]	; (8006a1c <__NVIC_SetPriority+0x4c>)
 80069ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069ee:	0112      	lsls	r2, r2, #4
 80069f0:	b2d2      	uxtb	r2, r2
 80069f2:	440b      	add	r3, r1
 80069f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80069f8:	e00a      	b.n	8006a10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	b2da      	uxtb	r2, r3
 80069fe:	4908      	ldr	r1, [pc, #32]	; (8006a20 <__NVIC_SetPriority+0x50>)
 8006a00:	79fb      	ldrb	r3, [r7, #7]
 8006a02:	f003 030f 	and.w	r3, r3, #15
 8006a06:	3b04      	subs	r3, #4
 8006a08:	0112      	lsls	r2, r2, #4
 8006a0a:	b2d2      	uxtb	r2, r2
 8006a0c:	440b      	add	r3, r1
 8006a0e:	761a      	strb	r2, [r3, #24]
}
 8006a10:	bf00      	nop
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr
 8006a1c:	e000e100 	.word	0xe000e100
 8006a20:	e000ed00 	.word	0xe000ed00

08006a24 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006a24:	b580      	push	{r7, lr}
 8006a26:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006a28:	4b05      	ldr	r3, [pc, #20]	; (8006a40 <SysTick_Handler+0x1c>)
 8006a2a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006a2c:	f002 fb22 	bl	8009074 <xTaskGetSchedulerState>
 8006a30:	4603      	mov	r3, r0
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d001      	beq.n	8006a3a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006a36:	f003 fc2f 	bl	800a298 <xPortSysTickHandler>
  }
}
 8006a3a:	bf00      	nop
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	e000e010 	.word	0xe000e010

08006a44 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006a44:	b580      	push	{r7, lr}
 8006a46:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006a48:	2100      	movs	r1, #0
 8006a4a:	f06f 0004 	mvn.w	r0, #4
 8006a4e:	f7ff ffbf 	bl	80069d0 <__NVIC_SetPriority>
#endif
}
 8006a52:	bf00      	nop
 8006a54:	bd80      	pop	{r7, pc}
	...

08006a58 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a5e:	f3ef 8305 	mrs	r3, IPSR
 8006a62:	603b      	str	r3, [r7, #0]
  return(result);
 8006a64:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d003      	beq.n	8006a72 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006a6a:	f06f 0305 	mvn.w	r3, #5
 8006a6e:	607b      	str	r3, [r7, #4]
 8006a70:	e00c      	b.n	8006a8c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006a72:	4b0a      	ldr	r3, [pc, #40]	; (8006a9c <osKernelInitialize+0x44>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d105      	bne.n	8006a86 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006a7a:	4b08      	ldr	r3, [pc, #32]	; (8006a9c <osKernelInitialize+0x44>)
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006a80:	2300      	movs	r3, #0
 8006a82:	607b      	str	r3, [r7, #4]
 8006a84:	e002      	b.n	8006a8c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006a86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a8a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006a8c:	687b      	ldr	r3, [r7, #4]
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	370c      	adds	r7, #12
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	200001d4 	.word	0x200001d4

08006aa0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b082      	sub	sp, #8
 8006aa4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006aa6:	f3ef 8305 	mrs	r3, IPSR
 8006aaa:	603b      	str	r3, [r7, #0]
  return(result);
 8006aac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d003      	beq.n	8006aba <osKernelStart+0x1a>
    stat = osErrorISR;
 8006ab2:	f06f 0305 	mvn.w	r3, #5
 8006ab6:	607b      	str	r3, [r7, #4]
 8006ab8:	e010      	b.n	8006adc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006aba:	4b0b      	ldr	r3, [pc, #44]	; (8006ae8 <osKernelStart+0x48>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d109      	bne.n	8006ad6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006ac2:	f7ff ffbf 	bl	8006a44 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006ac6:	4b08      	ldr	r3, [pc, #32]	; (8006ae8 <osKernelStart+0x48>)
 8006ac8:	2202      	movs	r2, #2
 8006aca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006acc:	f001 fe40 	bl	8008750 <vTaskStartScheduler>
      stat = osOK;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	607b      	str	r3, [r7, #4]
 8006ad4:	e002      	b.n	8006adc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006ad6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ada:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006adc:	687b      	ldr	r3, [r7, #4]
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3708      	adds	r7, #8
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	200001d4 	.word	0x200001d4

08006aec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b08e      	sub	sp, #56	; 0x38
 8006af0:	af04      	add	r7, sp, #16
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006af8:	2300      	movs	r3, #0
 8006afa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006afc:	f3ef 8305 	mrs	r3, IPSR
 8006b00:	617b      	str	r3, [r7, #20]
  return(result);
 8006b02:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d17e      	bne.n	8006c06 <osThreadNew+0x11a>
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d07b      	beq.n	8006c06 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006b0e:	2380      	movs	r3, #128	; 0x80
 8006b10:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006b12:	2318      	movs	r3, #24
 8006b14:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006b16:	2300      	movs	r3, #0
 8006b18:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006b1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b1e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d045      	beq.n	8006bb2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d002      	beq.n	8006b34 <osThreadNew+0x48>
        name = attr->name;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	699b      	ldr	r3, [r3, #24]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d002      	beq.n	8006b42 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	699b      	ldr	r3, [r3, #24]
 8006b40:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d008      	beq.n	8006b5a <osThreadNew+0x6e>
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	2b38      	cmp	r3, #56	; 0x38
 8006b4c:	d805      	bhi.n	8006b5a <osThreadNew+0x6e>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	f003 0301 	and.w	r3, r3, #1
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d001      	beq.n	8006b5e <osThreadNew+0x72>
        return (NULL);
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	e054      	b.n	8006c08 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	695b      	ldr	r3, [r3, #20]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d003      	beq.n	8006b6e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	695b      	ldr	r3, [r3, #20]
 8006b6a:	089b      	lsrs	r3, r3, #2
 8006b6c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00e      	beq.n	8006b94 <osThreadNew+0xa8>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	2bbb      	cmp	r3, #187	; 0xbb
 8006b7c:	d90a      	bls.n	8006b94 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d006      	beq.n	8006b94 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	695b      	ldr	r3, [r3, #20]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d002      	beq.n	8006b94 <osThreadNew+0xa8>
        mem = 1;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	61bb      	str	r3, [r7, #24]
 8006b92:	e010      	b.n	8006bb6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d10c      	bne.n	8006bb6 <osThreadNew+0xca>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d108      	bne.n	8006bb6 <osThreadNew+0xca>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	691b      	ldr	r3, [r3, #16]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d104      	bne.n	8006bb6 <osThreadNew+0xca>
          mem = 0;
 8006bac:	2300      	movs	r3, #0
 8006bae:	61bb      	str	r3, [r7, #24]
 8006bb0:	e001      	b.n	8006bb6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d110      	bne.n	8006bde <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006bc4:	9202      	str	r2, [sp, #8]
 8006bc6:	9301      	str	r3, [sp, #4]
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	9300      	str	r3, [sp, #0]
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	6a3a      	ldr	r2, [r7, #32]
 8006bd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006bd2:	68f8      	ldr	r0, [r7, #12]
 8006bd4:	f001 fc03 	bl	80083de <xTaskCreateStatic>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	613b      	str	r3, [r7, #16]
 8006bdc:	e013      	b.n	8006c06 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006bde:	69bb      	ldr	r3, [r7, #24]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d110      	bne.n	8006c06 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006be4:	6a3b      	ldr	r3, [r7, #32]
 8006be6:	b29a      	uxth	r2, r3
 8006be8:	f107 0310 	add.w	r3, r7, #16
 8006bec:	9301      	str	r3, [sp, #4]
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	9300      	str	r3, [sp, #0]
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006bf6:	68f8      	ldr	r0, [r7, #12]
 8006bf8:	f001 fc4e 	bl	8008498 <xTaskCreate>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d001      	beq.n	8006c06 <osThreadNew+0x11a>
            hTask = NULL;
 8006c02:	2300      	movs	r3, #0
 8006c04:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006c06:	693b      	ldr	r3, [r7, #16]
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3728      	adds	r7, #40	; 0x28
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006c10:	b480      	push	{r7}
 8006c12:	b085      	sub	sp, #20
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	4a07      	ldr	r2, [pc, #28]	; (8006c3c <vApplicationGetIdleTaskMemory+0x2c>)
 8006c20:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	4a06      	ldr	r2, [pc, #24]	; (8006c40 <vApplicationGetIdleTaskMemory+0x30>)
 8006c26:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2280      	movs	r2, #128	; 0x80
 8006c2c:	601a      	str	r2, [r3, #0]
}
 8006c2e:	bf00      	nop
 8006c30:	3714      	adds	r7, #20
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	200001d8 	.word	0x200001d8
 8006c40:	20000294 	.word	0x20000294

08006c44 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006c44:	b480      	push	{r7}
 8006c46:	b085      	sub	sp, #20
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	4a07      	ldr	r2, [pc, #28]	; (8006c70 <vApplicationGetTimerTaskMemory+0x2c>)
 8006c54:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	4a06      	ldr	r2, [pc, #24]	; (8006c74 <vApplicationGetTimerTaskMemory+0x30>)
 8006c5a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c62:	601a      	str	r2, [r3, #0]
}
 8006c64:	bf00      	nop
 8006c66:	3714      	adds	r7, #20
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr
 8006c70:	20000494 	.word	0x20000494
 8006c74:	20000550 	.word	0x20000550

08006c78 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f103 0208 	add.w	r2, r3, #8
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c90:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f103 0208 	add.w	r2, r3, #8
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f103 0208 	add.w	r2, r3, #8
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006cac:	bf00      	nop
 8006cae:	370c      	adds	r7, #12
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006cc6:	bf00      	nop
 8006cc8:	370c      	adds	r7, #12
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr

08006cd2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006cd2:	b480      	push	{r7}
 8006cd4:	b085      	sub	sp, #20
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
 8006cda:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	68fa      	ldr	r2, [r7, #12]
 8006ce6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	689a      	ldr	r2, [r3, #8]
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	683a      	ldr	r2, [r7, #0]
 8006cf6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	683a      	ldr	r2, [r7, #0]
 8006cfc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	1c5a      	adds	r2, r3, #1
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	601a      	str	r2, [r3, #0]
}
 8006d0e:	bf00      	nop
 8006d10:	3714      	adds	r7, #20
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr

08006d1a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d1a:	b480      	push	{r7}
 8006d1c:	b085      	sub	sp, #20
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
 8006d22:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d30:	d103      	bne.n	8006d3a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	691b      	ldr	r3, [r3, #16]
 8006d36:	60fb      	str	r3, [r7, #12]
 8006d38:	e00c      	b.n	8006d54 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	3308      	adds	r3, #8
 8006d3e:	60fb      	str	r3, [r7, #12]
 8006d40:	e002      	b.n	8006d48 <vListInsert+0x2e>
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	60fb      	str	r3, [r7, #12]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68ba      	ldr	r2, [r7, #8]
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d2f6      	bcs.n	8006d42 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	685a      	ldr	r2, [r3, #4]
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	683a      	ldr	r2, [r7, #0]
 8006d62:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	68fa      	ldr	r2, [r7, #12]
 8006d68:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	683a      	ldr	r2, [r7, #0]
 8006d6e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	1c5a      	adds	r2, r3, #1
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	601a      	str	r2, [r3, #0]
}
 8006d80:	bf00      	nop
 8006d82:	3714      	adds	r7, #20
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr

08006d8c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b085      	sub	sp, #20
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	691b      	ldr	r3, [r3, #16]
 8006d98:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	6892      	ldr	r2, [r2, #8]
 8006da2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	6852      	ldr	r2, [r2, #4]
 8006dac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d103      	bne.n	8006dc0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	689a      	ldr	r2, [r3, #8]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	1e5a      	subs	r2, r3, #1
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3714      	adds	r7, #20
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d10a      	bne.n	8006e0a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df8:	f383 8811 	msr	BASEPRI, r3
 8006dfc:	f3bf 8f6f 	isb	sy
 8006e00:	f3bf 8f4f 	dsb	sy
 8006e04:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006e06:	bf00      	nop
 8006e08:	e7fe      	b.n	8006e08 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006e0a:	f003 f9b3 	bl	800a174 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e16:	68f9      	ldr	r1, [r7, #12]
 8006e18:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006e1a:	fb01 f303 	mul.w	r3, r1, r3
 8006e1e:	441a      	add	r2, r3
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2200      	movs	r2, #0
 8006e28:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e3a:	3b01      	subs	r3, #1
 8006e3c:	68f9      	ldr	r1, [r7, #12]
 8006e3e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006e40:	fb01 f303 	mul.w	r3, r1, r3
 8006e44:	441a      	add	r2, r3
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	22ff      	movs	r2, #255	; 0xff
 8006e4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	22ff      	movs	r2, #255	; 0xff
 8006e56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d114      	bne.n	8006e8a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	691b      	ldr	r3, [r3, #16]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d01a      	beq.n	8006e9e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	3310      	adds	r3, #16
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f001 ff09 	bl	8008c84 <xTaskRemoveFromEventList>
 8006e72:	4603      	mov	r3, r0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d012      	beq.n	8006e9e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006e78:	4b0c      	ldr	r3, [pc, #48]	; (8006eac <xQueueGenericReset+0xcc>)
 8006e7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e7e:	601a      	str	r2, [r3, #0]
 8006e80:	f3bf 8f4f 	dsb	sy
 8006e84:	f3bf 8f6f 	isb	sy
 8006e88:	e009      	b.n	8006e9e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	3310      	adds	r3, #16
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f7ff fef2 	bl	8006c78 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	3324      	adds	r3, #36	; 0x24
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f7ff feed 	bl	8006c78 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006e9e:	f003 f999 	bl	800a1d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006ea2:	2301      	movs	r3, #1
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3710      	adds	r7, #16
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	e000ed04 	.word	0xe000ed04

08006eb0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b08e      	sub	sp, #56	; 0x38
 8006eb4:	af02      	add	r7, sp, #8
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	607a      	str	r2, [r7, #4]
 8006ebc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d10a      	bne.n	8006eda <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec8:	f383 8811 	msr	BASEPRI, r3
 8006ecc:	f3bf 8f6f 	isb	sy
 8006ed0:	f3bf 8f4f 	dsb	sy
 8006ed4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006ed6:	bf00      	nop
 8006ed8:	e7fe      	b.n	8006ed8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d10a      	bne.n	8006ef6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee4:	f383 8811 	msr	BASEPRI, r3
 8006ee8:	f3bf 8f6f 	isb	sy
 8006eec:	f3bf 8f4f 	dsb	sy
 8006ef0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006ef2:	bf00      	nop
 8006ef4:	e7fe      	b.n	8006ef4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d002      	beq.n	8006f02 <xQueueGenericCreateStatic+0x52>
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d001      	beq.n	8006f06 <xQueueGenericCreateStatic+0x56>
 8006f02:	2301      	movs	r3, #1
 8006f04:	e000      	b.n	8006f08 <xQueueGenericCreateStatic+0x58>
 8006f06:	2300      	movs	r3, #0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d10a      	bne.n	8006f22 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f10:	f383 8811 	msr	BASEPRI, r3
 8006f14:	f3bf 8f6f 	isb	sy
 8006f18:	f3bf 8f4f 	dsb	sy
 8006f1c:	623b      	str	r3, [r7, #32]
}
 8006f1e:	bf00      	nop
 8006f20:	e7fe      	b.n	8006f20 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d102      	bne.n	8006f2e <xQueueGenericCreateStatic+0x7e>
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d101      	bne.n	8006f32 <xQueueGenericCreateStatic+0x82>
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e000      	b.n	8006f34 <xQueueGenericCreateStatic+0x84>
 8006f32:	2300      	movs	r3, #0
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d10a      	bne.n	8006f4e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f3c:	f383 8811 	msr	BASEPRI, r3
 8006f40:	f3bf 8f6f 	isb	sy
 8006f44:	f3bf 8f4f 	dsb	sy
 8006f48:	61fb      	str	r3, [r7, #28]
}
 8006f4a:	bf00      	nop
 8006f4c:	e7fe      	b.n	8006f4c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006f4e:	2350      	movs	r3, #80	; 0x50
 8006f50:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	2b50      	cmp	r3, #80	; 0x50
 8006f56:	d00a      	beq.n	8006f6e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5c:	f383 8811 	msr	BASEPRI, r3
 8006f60:	f3bf 8f6f 	isb	sy
 8006f64:	f3bf 8f4f 	dsb	sy
 8006f68:	61bb      	str	r3, [r7, #24]
}
 8006f6a:	bf00      	nop
 8006f6c:	e7fe      	b.n	8006f6c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006f6e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d00d      	beq.n	8006f96 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006f82:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f88:	9300      	str	r3, [sp, #0]
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	68b9      	ldr	r1, [r7, #8]
 8006f90:	68f8      	ldr	r0, [r7, #12]
 8006f92:	f000 f83f 	bl	8007014 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3730      	adds	r7, #48	; 0x30
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b08a      	sub	sp, #40	; 0x28
 8006fa4:	af02      	add	r7, sp, #8
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	60b9      	str	r1, [r7, #8]
 8006faa:	4613      	mov	r3, r2
 8006fac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d10a      	bne.n	8006fca <xQueueGenericCreate+0x2a>
	__asm volatile
 8006fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb8:	f383 8811 	msr	BASEPRI, r3
 8006fbc:	f3bf 8f6f 	isb	sy
 8006fc0:	f3bf 8f4f 	dsb	sy
 8006fc4:	613b      	str	r3, [r7, #16]
}
 8006fc6:	bf00      	nop
 8006fc8:	e7fe      	b.n	8006fc8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	68ba      	ldr	r2, [r7, #8]
 8006fce:	fb02 f303 	mul.w	r3, r2, r3
 8006fd2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006fd4:	69fb      	ldr	r3, [r7, #28]
 8006fd6:	3350      	adds	r3, #80	; 0x50
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f003 f9ed 	bl	800a3b8 <pvPortMalloc>
 8006fde:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d011      	beq.n	800700a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006fe6:	69bb      	ldr	r3, [r7, #24]
 8006fe8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	3350      	adds	r3, #80	; 0x50
 8006fee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006ff0:	69bb      	ldr	r3, [r7, #24]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006ff8:	79fa      	ldrb	r2, [r7, #7]
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	9300      	str	r3, [sp, #0]
 8006ffe:	4613      	mov	r3, r2
 8007000:	697a      	ldr	r2, [r7, #20]
 8007002:	68b9      	ldr	r1, [r7, #8]
 8007004:	68f8      	ldr	r0, [r7, #12]
 8007006:	f000 f805 	bl	8007014 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800700a:	69bb      	ldr	r3, [r7, #24]
	}
 800700c:	4618      	mov	r0, r3
 800700e:	3720      	adds	r7, #32
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	60b9      	str	r1, [r7, #8]
 800701e:	607a      	str	r2, [r7, #4]
 8007020:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d103      	bne.n	8007030 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	69ba      	ldr	r2, [r7, #24]
 800702c:	601a      	str	r2, [r3, #0]
 800702e:	e002      	b.n	8007036 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007030:	69bb      	ldr	r3, [r7, #24]
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007036:	69bb      	ldr	r3, [r7, #24]
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800703c:	69bb      	ldr	r3, [r7, #24]
 800703e:	68ba      	ldr	r2, [r7, #8]
 8007040:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007042:	2101      	movs	r1, #1
 8007044:	69b8      	ldr	r0, [r7, #24]
 8007046:	f7ff fecb 	bl	8006de0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	78fa      	ldrb	r2, [r7, #3]
 800704e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007052:	bf00      	nop
 8007054:	3710      	adds	r7, #16
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}

0800705a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800705a:	b580      	push	{r7, lr}
 800705c:	b082      	sub	sp, #8
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00e      	beq.n	8007086 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800707a:	2300      	movs	r3, #0
 800707c:	2200      	movs	r2, #0
 800707e:	2100      	movs	r1, #0
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 f81d 	bl	80070c0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007086:	bf00      	nop
 8007088:	3708      	adds	r7, #8
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}

0800708e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800708e:	b580      	push	{r7, lr}
 8007090:	b086      	sub	sp, #24
 8007092:	af00      	add	r7, sp, #0
 8007094:	4603      	mov	r3, r0
 8007096:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007098:	2301      	movs	r3, #1
 800709a:	617b      	str	r3, [r7, #20]
 800709c:	2300      	movs	r3, #0
 800709e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80070a0:	79fb      	ldrb	r3, [r7, #7]
 80070a2:	461a      	mov	r2, r3
 80070a4:	6939      	ldr	r1, [r7, #16]
 80070a6:	6978      	ldr	r0, [r7, #20]
 80070a8:	f7ff ff7a 	bl	8006fa0 <xQueueGenericCreate>
 80070ac:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80070ae:	68f8      	ldr	r0, [r7, #12]
 80070b0:	f7ff ffd3 	bl	800705a <prvInitialiseMutex>

		return xNewQueue;
 80070b4:	68fb      	ldr	r3, [r7, #12]
	}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3718      	adds	r7, #24
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
	...

080070c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b08e      	sub	sp, #56	; 0x38
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	60f8      	str	r0, [r7, #12]
 80070c8:	60b9      	str	r1, [r7, #8]
 80070ca:	607a      	str	r2, [r7, #4]
 80070cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80070ce:	2300      	movs	r3, #0
 80070d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80070d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d10a      	bne.n	80070f2 <xQueueGenericSend+0x32>
	__asm volatile
 80070dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e0:	f383 8811 	msr	BASEPRI, r3
 80070e4:	f3bf 8f6f 	isb	sy
 80070e8:	f3bf 8f4f 	dsb	sy
 80070ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80070ee:	bf00      	nop
 80070f0:	e7fe      	b.n	80070f0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d103      	bne.n	8007100 <xQueueGenericSend+0x40>
 80070f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d101      	bne.n	8007104 <xQueueGenericSend+0x44>
 8007100:	2301      	movs	r3, #1
 8007102:	e000      	b.n	8007106 <xQueueGenericSend+0x46>
 8007104:	2300      	movs	r3, #0
 8007106:	2b00      	cmp	r3, #0
 8007108:	d10a      	bne.n	8007120 <xQueueGenericSend+0x60>
	__asm volatile
 800710a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800710e:	f383 8811 	msr	BASEPRI, r3
 8007112:	f3bf 8f6f 	isb	sy
 8007116:	f3bf 8f4f 	dsb	sy
 800711a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800711c:	bf00      	nop
 800711e:	e7fe      	b.n	800711e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	2b02      	cmp	r3, #2
 8007124:	d103      	bne.n	800712e <xQueueGenericSend+0x6e>
 8007126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800712a:	2b01      	cmp	r3, #1
 800712c:	d101      	bne.n	8007132 <xQueueGenericSend+0x72>
 800712e:	2301      	movs	r3, #1
 8007130:	e000      	b.n	8007134 <xQueueGenericSend+0x74>
 8007132:	2300      	movs	r3, #0
 8007134:	2b00      	cmp	r3, #0
 8007136:	d10a      	bne.n	800714e <xQueueGenericSend+0x8e>
	__asm volatile
 8007138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800713c:	f383 8811 	msr	BASEPRI, r3
 8007140:	f3bf 8f6f 	isb	sy
 8007144:	f3bf 8f4f 	dsb	sy
 8007148:	623b      	str	r3, [r7, #32]
}
 800714a:	bf00      	nop
 800714c:	e7fe      	b.n	800714c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800714e:	f001 ff91 	bl	8009074 <xTaskGetSchedulerState>
 8007152:	4603      	mov	r3, r0
 8007154:	2b00      	cmp	r3, #0
 8007156:	d102      	bne.n	800715e <xQueueGenericSend+0x9e>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d101      	bne.n	8007162 <xQueueGenericSend+0xa2>
 800715e:	2301      	movs	r3, #1
 8007160:	e000      	b.n	8007164 <xQueueGenericSend+0xa4>
 8007162:	2300      	movs	r3, #0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d10a      	bne.n	800717e <xQueueGenericSend+0xbe>
	__asm volatile
 8007168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800716c:	f383 8811 	msr	BASEPRI, r3
 8007170:	f3bf 8f6f 	isb	sy
 8007174:	f3bf 8f4f 	dsb	sy
 8007178:	61fb      	str	r3, [r7, #28]
}
 800717a:	bf00      	nop
 800717c:	e7fe      	b.n	800717c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800717e:	f002 fff9 	bl	800a174 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007184:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800718a:	429a      	cmp	r2, r3
 800718c:	d302      	bcc.n	8007194 <xQueueGenericSend+0xd4>
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	2b02      	cmp	r3, #2
 8007192:	d129      	bne.n	80071e8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007194:	683a      	ldr	r2, [r7, #0]
 8007196:	68b9      	ldr	r1, [r7, #8]
 8007198:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800719a:	f000 fbbb 	bl	8007914 <prvCopyDataToQueue>
 800719e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80071a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d010      	beq.n	80071ca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80071a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071aa:	3324      	adds	r3, #36	; 0x24
 80071ac:	4618      	mov	r0, r3
 80071ae:	f001 fd69 	bl	8008c84 <xTaskRemoveFromEventList>
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d013      	beq.n	80071e0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80071b8:	4b3f      	ldr	r3, [pc, #252]	; (80072b8 <xQueueGenericSend+0x1f8>)
 80071ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071be:	601a      	str	r2, [r3, #0]
 80071c0:	f3bf 8f4f 	dsb	sy
 80071c4:	f3bf 8f6f 	isb	sy
 80071c8:	e00a      	b.n	80071e0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80071ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d007      	beq.n	80071e0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80071d0:	4b39      	ldr	r3, [pc, #228]	; (80072b8 <xQueueGenericSend+0x1f8>)
 80071d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071d6:	601a      	str	r2, [r3, #0]
 80071d8:	f3bf 8f4f 	dsb	sy
 80071dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80071e0:	f002 fff8 	bl	800a1d4 <vPortExitCritical>
				return pdPASS;
 80071e4:	2301      	movs	r3, #1
 80071e6:	e063      	b.n	80072b0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d103      	bne.n	80071f6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80071ee:	f002 fff1 	bl	800a1d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80071f2:	2300      	movs	r3, #0
 80071f4:	e05c      	b.n	80072b0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80071f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d106      	bne.n	800720a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80071fc:	f107 0314 	add.w	r3, r7, #20
 8007200:	4618      	mov	r0, r3
 8007202:	f001 fdc9 	bl	8008d98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007206:	2301      	movs	r3, #1
 8007208:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800720a:	f002 ffe3 	bl	800a1d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800720e:	f001 fb0f 	bl	8008830 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007212:	f002 ffaf 	bl	800a174 <vPortEnterCritical>
 8007216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007218:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800721c:	b25b      	sxtb	r3, r3
 800721e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007222:	d103      	bne.n	800722c <xQueueGenericSend+0x16c>
 8007224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007226:	2200      	movs	r2, #0
 8007228:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800722c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007232:	b25b      	sxtb	r3, r3
 8007234:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007238:	d103      	bne.n	8007242 <xQueueGenericSend+0x182>
 800723a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800723c:	2200      	movs	r2, #0
 800723e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007242:	f002 ffc7 	bl	800a1d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007246:	1d3a      	adds	r2, r7, #4
 8007248:	f107 0314 	add.w	r3, r7, #20
 800724c:	4611      	mov	r1, r2
 800724e:	4618      	mov	r0, r3
 8007250:	f001 fdb8 	bl	8008dc4 <xTaskCheckForTimeOut>
 8007254:	4603      	mov	r3, r0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d124      	bne.n	80072a4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800725a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800725c:	f000 fc52 	bl	8007b04 <prvIsQueueFull>
 8007260:	4603      	mov	r3, r0
 8007262:	2b00      	cmp	r3, #0
 8007264:	d018      	beq.n	8007298 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007268:	3310      	adds	r3, #16
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	4611      	mov	r1, r2
 800726e:	4618      	mov	r0, r3
 8007270:	f001 fcb8 	bl	8008be4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007274:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007276:	f000 fbdd 	bl	8007a34 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800727a:	f001 fae7 	bl	800884c <xTaskResumeAll>
 800727e:	4603      	mov	r3, r0
 8007280:	2b00      	cmp	r3, #0
 8007282:	f47f af7c 	bne.w	800717e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007286:	4b0c      	ldr	r3, [pc, #48]	; (80072b8 <xQueueGenericSend+0x1f8>)
 8007288:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800728c:	601a      	str	r2, [r3, #0]
 800728e:	f3bf 8f4f 	dsb	sy
 8007292:	f3bf 8f6f 	isb	sy
 8007296:	e772      	b.n	800717e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007298:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800729a:	f000 fbcb 	bl	8007a34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800729e:	f001 fad5 	bl	800884c <xTaskResumeAll>
 80072a2:	e76c      	b.n	800717e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80072a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072a6:	f000 fbc5 	bl	8007a34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80072aa:	f001 facf 	bl	800884c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80072ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3738      	adds	r7, #56	; 0x38
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	e000ed04 	.word	0xe000ed04

080072bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b090      	sub	sp, #64	; 0x40
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	607a      	str	r2, [r7, #4]
 80072c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80072ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d10a      	bne.n	80072ea <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80072d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d8:	f383 8811 	msr	BASEPRI, r3
 80072dc:	f3bf 8f6f 	isb	sy
 80072e0:	f3bf 8f4f 	dsb	sy
 80072e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80072e6:	bf00      	nop
 80072e8:	e7fe      	b.n	80072e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d103      	bne.n	80072f8 <xQueueGenericSendFromISR+0x3c>
 80072f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d101      	bne.n	80072fc <xQueueGenericSendFromISR+0x40>
 80072f8:	2301      	movs	r3, #1
 80072fa:	e000      	b.n	80072fe <xQueueGenericSendFromISR+0x42>
 80072fc:	2300      	movs	r3, #0
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d10a      	bne.n	8007318 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007306:	f383 8811 	msr	BASEPRI, r3
 800730a:	f3bf 8f6f 	isb	sy
 800730e:	f3bf 8f4f 	dsb	sy
 8007312:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007314:	bf00      	nop
 8007316:	e7fe      	b.n	8007316 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	2b02      	cmp	r3, #2
 800731c:	d103      	bne.n	8007326 <xQueueGenericSendFromISR+0x6a>
 800731e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007322:	2b01      	cmp	r3, #1
 8007324:	d101      	bne.n	800732a <xQueueGenericSendFromISR+0x6e>
 8007326:	2301      	movs	r3, #1
 8007328:	e000      	b.n	800732c <xQueueGenericSendFromISR+0x70>
 800732a:	2300      	movs	r3, #0
 800732c:	2b00      	cmp	r3, #0
 800732e:	d10a      	bne.n	8007346 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007334:	f383 8811 	msr	BASEPRI, r3
 8007338:	f3bf 8f6f 	isb	sy
 800733c:	f3bf 8f4f 	dsb	sy
 8007340:	623b      	str	r3, [r7, #32]
}
 8007342:	bf00      	nop
 8007344:	e7fe      	b.n	8007344 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007346:	f002 fff7 	bl	800a338 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800734a:	f3ef 8211 	mrs	r2, BASEPRI
 800734e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007352:	f383 8811 	msr	BASEPRI, r3
 8007356:	f3bf 8f6f 	isb	sy
 800735a:	f3bf 8f4f 	dsb	sy
 800735e:	61fa      	str	r2, [r7, #28]
 8007360:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007362:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007364:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007368:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800736a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800736c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800736e:	429a      	cmp	r2, r3
 8007370:	d302      	bcc.n	8007378 <xQueueGenericSendFromISR+0xbc>
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	2b02      	cmp	r3, #2
 8007376:	d12f      	bne.n	80073d8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800737a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800737e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007386:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007388:	683a      	ldr	r2, [r7, #0]
 800738a:	68b9      	ldr	r1, [r7, #8]
 800738c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800738e:	f000 fac1 	bl	8007914 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007392:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007396:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800739a:	d112      	bne.n	80073c2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800739c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800739e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d016      	beq.n	80073d2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a6:	3324      	adds	r3, #36	; 0x24
 80073a8:	4618      	mov	r0, r3
 80073aa:	f001 fc6b 	bl	8008c84 <xTaskRemoveFromEventList>
 80073ae:	4603      	mov	r3, r0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d00e      	beq.n	80073d2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d00b      	beq.n	80073d2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2201      	movs	r2, #1
 80073be:	601a      	str	r2, [r3, #0]
 80073c0:	e007      	b.n	80073d2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80073c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80073c6:	3301      	adds	r3, #1
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	b25a      	sxtb	r2, r3
 80073cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80073d2:	2301      	movs	r3, #1
 80073d4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80073d6:	e001      	b.n	80073dc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80073d8:	2300      	movs	r3, #0
 80073da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073de:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80073e6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80073e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3740      	adds	r7, #64	; 0x40
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}

080073f2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80073f2:	b580      	push	{r7, lr}
 80073f4:	b08e      	sub	sp, #56	; 0x38
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
 80073fa:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007402:	2b00      	cmp	r3, #0
 8007404:	d10a      	bne.n	800741c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8007406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800740a:	f383 8811 	msr	BASEPRI, r3
 800740e:	f3bf 8f6f 	isb	sy
 8007412:	f3bf 8f4f 	dsb	sy
 8007416:	623b      	str	r3, [r7, #32]
}
 8007418:	bf00      	nop
 800741a:	e7fe      	b.n	800741a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800741c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007420:	2b00      	cmp	r3, #0
 8007422:	d00a      	beq.n	800743a <xQueueGiveFromISR+0x48>
	__asm volatile
 8007424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007428:	f383 8811 	msr	BASEPRI, r3
 800742c:	f3bf 8f6f 	isb	sy
 8007430:	f3bf 8f4f 	dsb	sy
 8007434:	61fb      	str	r3, [r7, #28]
}
 8007436:	bf00      	nop
 8007438:	e7fe      	b.n	8007438 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800743a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d103      	bne.n	800744a <xQueueGiveFromISR+0x58>
 8007442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d101      	bne.n	800744e <xQueueGiveFromISR+0x5c>
 800744a:	2301      	movs	r3, #1
 800744c:	e000      	b.n	8007450 <xQueueGiveFromISR+0x5e>
 800744e:	2300      	movs	r3, #0
 8007450:	2b00      	cmp	r3, #0
 8007452:	d10a      	bne.n	800746a <xQueueGiveFromISR+0x78>
	__asm volatile
 8007454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007458:	f383 8811 	msr	BASEPRI, r3
 800745c:	f3bf 8f6f 	isb	sy
 8007460:	f3bf 8f4f 	dsb	sy
 8007464:	61bb      	str	r3, [r7, #24]
}
 8007466:	bf00      	nop
 8007468:	e7fe      	b.n	8007468 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800746a:	f002 ff65 	bl	800a338 <vPortValidateInterruptPriority>
	__asm volatile
 800746e:	f3ef 8211 	mrs	r2, BASEPRI
 8007472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007476:	f383 8811 	msr	BASEPRI, r3
 800747a:	f3bf 8f6f 	isb	sy
 800747e:	f3bf 8f4f 	dsb	sy
 8007482:	617a      	str	r2, [r7, #20]
 8007484:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007486:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007488:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800748a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800748c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800748e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007494:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007496:	429a      	cmp	r2, r3
 8007498:	d22b      	bcs.n	80074f2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800749a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800749c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80074a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a6:	1c5a      	adds	r2, r3, #1
 80074a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074aa:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80074ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80074b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074b4:	d112      	bne.n	80074dc <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d016      	beq.n	80074ec <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c0:	3324      	adds	r3, #36	; 0x24
 80074c2:	4618      	mov	r0, r3
 80074c4:	f001 fbde 	bl	8008c84 <xTaskRemoveFromEventList>
 80074c8:	4603      	mov	r3, r0
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d00e      	beq.n	80074ec <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d00b      	beq.n	80074ec <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	2201      	movs	r2, #1
 80074d8:	601a      	str	r2, [r3, #0]
 80074da:	e007      	b.n	80074ec <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80074dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074e0:	3301      	adds	r3, #1
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	b25a      	sxtb	r2, r3
 80074e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80074ec:	2301      	movs	r3, #1
 80074ee:	637b      	str	r3, [r7, #52]	; 0x34
 80074f0:	e001      	b.n	80074f6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80074f2:	2300      	movs	r3, #0
 80074f4:	637b      	str	r3, [r7, #52]	; 0x34
 80074f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f383 8811 	msr	BASEPRI, r3
}
 8007500:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007504:	4618      	mov	r0, r3
 8007506:	3738      	adds	r7, #56	; 0x38
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b08c      	sub	sp, #48	; 0x30
 8007510:	af00      	add	r7, sp, #0
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	60b9      	str	r1, [r7, #8]
 8007516:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007518:	2300      	movs	r3, #0
 800751a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007522:	2b00      	cmp	r3, #0
 8007524:	d10a      	bne.n	800753c <xQueueReceive+0x30>
	__asm volatile
 8007526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800752a:	f383 8811 	msr	BASEPRI, r3
 800752e:	f3bf 8f6f 	isb	sy
 8007532:	f3bf 8f4f 	dsb	sy
 8007536:	623b      	str	r3, [r7, #32]
}
 8007538:	bf00      	nop
 800753a:	e7fe      	b.n	800753a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d103      	bne.n	800754a <xQueueReceive+0x3e>
 8007542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007546:	2b00      	cmp	r3, #0
 8007548:	d101      	bne.n	800754e <xQueueReceive+0x42>
 800754a:	2301      	movs	r3, #1
 800754c:	e000      	b.n	8007550 <xQueueReceive+0x44>
 800754e:	2300      	movs	r3, #0
 8007550:	2b00      	cmp	r3, #0
 8007552:	d10a      	bne.n	800756a <xQueueReceive+0x5e>
	__asm volatile
 8007554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007558:	f383 8811 	msr	BASEPRI, r3
 800755c:	f3bf 8f6f 	isb	sy
 8007560:	f3bf 8f4f 	dsb	sy
 8007564:	61fb      	str	r3, [r7, #28]
}
 8007566:	bf00      	nop
 8007568:	e7fe      	b.n	8007568 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800756a:	f001 fd83 	bl	8009074 <xTaskGetSchedulerState>
 800756e:	4603      	mov	r3, r0
 8007570:	2b00      	cmp	r3, #0
 8007572:	d102      	bne.n	800757a <xQueueReceive+0x6e>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d101      	bne.n	800757e <xQueueReceive+0x72>
 800757a:	2301      	movs	r3, #1
 800757c:	e000      	b.n	8007580 <xQueueReceive+0x74>
 800757e:	2300      	movs	r3, #0
 8007580:	2b00      	cmp	r3, #0
 8007582:	d10a      	bne.n	800759a <xQueueReceive+0x8e>
	__asm volatile
 8007584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007588:	f383 8811 	msr	BASEPRI, r3
 800758c:	f3bf 8f6f 	isb	sy
 8007590:	f3bf 8f4f 	dsb	sy
 8007594:	61bb      	str	r3, [r7, #24]
}
 8007596:	bf00      	nop
 8007598:	e7fe      	b.n	8007598 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800759a:	f002 fdeb 	bl	800a174 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800759e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80075a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d01f      	beq.n	80075ea <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80075aa:	68b9      	ldr	r1, [r7, #8]
 80075ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075ae:	f000 fa1b 	bl	80079e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80075b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b4:	1e5a      	subs	r2, r3, #1
 80075b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80075ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d00f      	beq.n	80075e2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80075c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c4:	3310      	adds	r3, #16
 80075c6:	4618      	mov	r0, r3
 80075c8:	f001 fb5c 	bl	8008c84 <xTaskRemoveFromEventList>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d007      	beq.n	80075e2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80075d2:	4b3d      	ldr	r3, [pc, #244]	; (80076c8 <xQueueReceive+0x1bc>)
 80075d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075d8:	601a      	str	r2, [r3, #0]
 80075da:	f3bf 8f4f 	dsb	sy
 80075de:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80075e2:	f002 fdf7 	bl	800a1d4 <vPortExitCritical>
				return pdPASS;
 80075e6:	2301      	movs	r3, #1
 80075e8:	e069      	b.n	80076be <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d103      	bne.n	80075f8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80075f0:	f002 fdf0 	bl	800a1d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80075f4:	2300      	movs	r3, #0
 80075f6:	e062      	b.n	80076be <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80075f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d106      	bne.n	800760c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80075fe:	f107 0310 	add.w	r3, r7, #16
 8007602:	4618      	mov	r0, r3
 8007604:	f001 fbc8 	bl	8008d98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007608:	2301      	movs	r3, #1
 800760a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800760c:	f002 fde2 	bl	800a1d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007610:	f001 f90e 	bl	8008830 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007614:	f002 fdae 	bl	800a174 <vPortEnterCritical>
 8007618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800761a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800761e:	b25b      	sxtb	r3, r3
 8007620:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007624:	d103      	bne.n	800762e <xQueueReceive+0x122>
 8007626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007628:	2200      	movs	r2, #0
 800762a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800762e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007630:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007634:	b25b      	sxtb	r3, r3
 8007636:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800763a:	d103      	bne.n	8007644 <xQueueReceive+0x138>
 800763c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800763e:	2200      	movs	r2, #0
 8007640:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007644:	f002 fdc6 	bl	800a1d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007648:	1d3a      	adds	r2, r7, #4
 800764a:	f107 0310 	add.w	r3, r7, #16
 800764e:	4611      	mov	r1, r2
 8007650:	4618      	mov	r0, r3
 8007652:	f001 fbb7 	bl	8008dc4 <xTaskCheckForTimeOut>
 8007656:	4603      	mov	r3, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	d123      	bne.n	80076a4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800765c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800765e:	f000 fa3b 	bl	8007ad8 <prvIsQueueEmpty>
 8007662:	4603      	mov	r3, r0
 8007664:	2b00      	cmp	r3, #0
 8007666:	d017      	beq.n	8007698 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766a:	3324      	adds	r3, #36	; 0x24
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	4611      	mov	r1, r2
 8007670:	4618      	mov	r0, r3
 8007672:	f001 fab7 	bl	8008be4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007676:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007678:	f000 f9dc 	bl	8007a34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800767c:	f001 f8e6 	bl	800884c <xTaskResumeAll>
 8007680:	4603      	mov	r3, r0
 8007682:	2b00      	cmp	r3, #0
 8007684:	d189      	bne.n	800759a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007686:	4b10      	ldr	r3, [pc, #64]	; (80076c8 <xQueueReceive+0x1bc>)
 8007688:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800768c:	601a      	str	r2, [r3, #0]
 800768e:	f3bf 8f4f 	dsb	sy
 8007692:	f3bf 8f6f 	isb	sy
 8007696:	e780      	b.n	800759a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007698:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800769a:	f000 f9cb 	bl	8007a34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800769e:	f001 f8d5 	bl	800884c <xTaskResumeAll>
 80076a2:	e77a      	b.n	800759a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80076a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076a6:	f000 f9c5 	bl	8007a34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80076aa:	f001 f8cf 	bl	800884c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80076ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076b0:	f000 fa12 	bl	8007ad8 <prvIsQueueEmpty>
 80076b4:	4603      	mov	r3, r0
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	f43f af6f 	beq.w	800759a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80076bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3730      	adds	r7, #48	; 0x30
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	e000ed04 	.word	0xe000ed04

080076cc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b08e      	sub	sp, #56	; 0x38
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80076d6:	2300      	movs	r3, #0
 80076d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80076de:	2300      	movs	r3, #0
 80076e0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80076e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d10a      	bne.n	80076fe <xQueueSemaphoreTake+0x32>
	__asm volatile
 80076e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ec:	f383 8811 	msr	BASEPRI, r3
 80076f0:	f3bf 8f6f 	isb	sy
 80076f4:	f3bf 8f4f 	dsb	sy
 80076f8:	623b      	str	r3, [r7, #32]
}
 80076fa:	bf00      	nop
 80076fc:	e7fe      	b.n	80076fc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80076fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007702:	2b00      	cmp	r3, #0
 8007704:	d00a      	beq.n	800771c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800770a:	f383 8811 	msr	BASEPRI, r3
 800770e:	f3bf 8f6f 	isb	sy
 8007712:	f3bf 8f4f 	dsb	sy
 8007716:	61fb      	str	r3, [r7, #28]
}
 8007718:	bf00      	nop
 800771a:	e7fe      	b.n	800771a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800771c:	f001 fcaa 	bl	8009074 <xTaskGetSchedulerState>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d102      	bne.n	800772c <xQueueSemaphoreTake+0x60>
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d101      	bne.n	8007730 <xQueueSemaphoreTake+0x64>
 800772c:	2301      	movs	r3, #1
 800772e:	e000      	b.n	8007732 <xQueueSemaphoreTake+0x66>
 8007730:	2300      	movs	r3, #0
 8007732:	2b00      	cmp	r3, #0
 8007734:	d10a      	bne.n	800774c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800773a:	f383 8811 	msr	BASEPRI, r3
 800773e:	f3bf 8f6f 	isb	sy
 8007742:	f3bf 8f4f 	dsb	sy
 8007746:	61bb      	str	r3, [r7, #24]
}
 8007748:	bf00      	nop
 800774a:	e7fe      	b.n	800774a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800774c:	f002 fd12 	bl	800a174 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007754:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007758:	2b00      	cmp	r3, #0
 800775a:	d024      	beq.n	80077a6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800775c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800775e:	1e5a      	subs	r2, r3, #1
 8007760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007762:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d104      	bne.n	8007776 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800776c:	f001 fdf8 	bl	8009360 <pvTaskIncrementMutexHeldCount>
 8007770:	4602      	mov	r2, r0
 8007772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007774:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007778:	691b      	ldr	r3, [r3, #16]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d00f      	beq.n	800779e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800777e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007780:	3310      	adds	r3, #16
 8007782:	4618      	mov	r0, r3
 8007784:	f001 fa7e 	bl	8008c84 <xTaskRemoveFromEventList>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d007      	beq.n	800779e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800778e:	4b54      	ldr	r3, [pc, #336]	; (80078e0 <xQueueSemaphoreTake+0x214>)
 8007790:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007794:	601a      	str	r2, [r3, #0]
 8007796:	f3bf 8f4f 	dsb	sy
 800779a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800779e:	f002 fd19 	bl	800a1d4 <vPortExitCritical>
				return pdPASS;
 80077a2:	2301      	movs	r3, #1
 80077a4:	e097      	b.n	80078d6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d111      	bne.n	80077d0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80077ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d00a      	beq.n	80077c8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80077b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b6:	f383 8811 	msr	BASEPRI, r3
 80077ba:	f3bf 8f6f 	isb	sy
 80077be:	f3bf 8f4f 	dsb	sy
 80077c2:	617b      	str	r3, [r7, #20]
}
 80077c4:	bf00      	nop
 80077c6:	e7fe      	b.n	80077c6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80077c8:	f002 fd04 	bl	800a1d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80077cc:	2300      	movs	r3, #0
 80077ce:	e082      	b.n	80078d6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80077d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d106      	bne.n	80077e4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80077d6:	f107 030c 	add.w	r3, r7, #12
 80077da:	4618      	mov	r0, r3
 80077dc:	f001 fadc 	bl	8008d98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80077e0:	2301      	movs	r3, #1
 80077e2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80077e4:	f002 fcf6 	bl	800a1d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80077e8:	f001 f822 	bl	8008830 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80077ec:	f002 fcc2 	bl	800a174 <vPortEnterCritical>
 80077f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80077f6:	b25b      	sxtb	r3, r3
 80077f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077fc:	d103      	bne.n	8007806 <xQueueSemaphoreTake+0x13a>
 80077fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007800:	2200      	movs	r2, #0
 8007802:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007808:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800780c:	b25b      	sxtb	r3, r3
 800780e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007812:	d103      	bne.n	800781c <xQueueSemaphoreTake+0x150>
 8007814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007816:	2200      	movs	r2, #0
 8007818:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800781c:	f002 fcda 	bl	800a1d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007820:	463a      	mov	r2, r7
 8007822:	f107 030c 	add.w	r3, r7, #12
 8007826:	4611      	mov	r1, r2
 8007828:	4618      	mov	r0, r3
 800782a:	f001 facb 	bl	8008dc4 <xTaskCheckForTimeOut>
 800782e:	4603      	mov	r3, r0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d132      	bne.n	800789a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007834:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007836:	f000 f94f 	bl	8007ad8 <prvIsQueueEmpty>
 800783a:	4603      	mov	r3, r0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d026      	beq.n	800788e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d109      	bne.n	800785c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007848:	f002 fc94 	bl	800a174 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800784c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	4618      	mov	r0, r3
 8007852:	f001 fc2d 	bl	80090b0 <xTaskPriorityInherit>
 8007856:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007858:	f002 fcbc 	bl	800a1d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800785c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800785e:	3324      	adds	r3, #36	; 0x24
 8007860:	683a      	ldr	r2, [r7, #0]
 8007862:	4611      	mov	r1, r2
 8007864:	4618      	mov	r0, r3
 8007866:	f001 f9bd 	bl	8008be4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800786a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800786c:	f000 f8e2 	bl	8007a34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007870:	f000 ffec 	bl	800884c <xTaskResumeAll>
 8007874:	4603      	mov	r3, r0
 8007876:	2b00      	cmp	r3, #0
 8007878:	f47f af68 	bne.w	800774c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800787c:	4b18      	ldr	r3, [pc, #96]	; (80078e0 <xQueueSemaphoreTake+0x214>)
 800787e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007882:	601a      	str	r2, [r3, #0]
 8007884:	f3bf 8f4f 	dsb	sy
 8007888:	f3bf 8f6f 	isb	sy
 800788c:	e75e      	b.n	800774c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800788e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007890:	f000 f8d0 	bl	8007a34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007894:	f000 ffda 	bl	800884c <xTaskResumeAll>
 8007898:	e758      	b.n	800774c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800789a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800789c:	f000 f8ca 	bl	8007a34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80078a0:	f000 ffd4 	bl	800884c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80078a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80078a6:	f000 f917 	bl	8007ad8 <prvIsQueueEmpty>
 80078aa:	4603      	mov	r3, r0
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	f43f af4d 	beq.w	800774c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80078b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d00d      	beq.n	80078d4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80078b8:	f002 fc5c 	bl	800a174 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80078bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80078be:	f000 f811 	bl	80078e4 <prvGetDisinheritPriorityAfterTimeout>
 80078c2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80078c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80078ca:	4618      	mov	r0, r3
 80078cc:	f001 fcc6 	bl	800925c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80078d0:	f002 fc80 	bl	800a1d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80078d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3738      	adds	r7, #56	; 0x38
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	bf00      	nop
 80078e0:	e000ed04 	.word	0xe000ed04

080078e4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80078e4:	b480      	push	{r7}
 80078e6:	b085      	sub	sp, #20
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d006      	beq.n	8007902 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80078fe:	60fb      	str	r3, [r7, #12]
 8007900:	e001      	b.n	8007906 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007902:	2300      	movs	r3, #0
 8007904:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007906:	68fb      	ldr	r3, [r7, #12]
	}
 8007908:	4618      	mov	r0, r3
 800790a:	3714      	adds	r7, #20
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b086      	sub	sp, #24
 8007918:	af00      	add	r7, sp, #0
 800791a:	60f8      	str	r0, [r7, #12]
 800791c:	60b9      	str	r1, [r7, #8]
 800791e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007920:	2300      	movs	r3, #0
 8007922:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007928:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800792e:	2b00      	cmp	r3, #0
 8007930:	d10d      	bne.n	800794e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d14d      	bne.n	80079d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	4618      	mov	r0, r3
 8007940:	f001 fc1e 	bl	8009180 <xTaskPriorityDisinherit>
 8007944:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2200      	movs	r2, #0
 800794a:	609a      	str	r2, [r3, #8]
 800794c:	e043      	b.n	80079d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d119      	bne.n	8007988 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	6858      	ldr	r0, [r3, #4]
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800795c:	461a      	mov	r2, r3
 800795e:	68b9      	ldr	r1, [r7, #8]
 8007960:	f003 fcdc 	bl	800b31c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	685a      	ldr	r2, [r3, #4]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800796c:	441a      	add	r2, r3
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	685a      	ldr	r2, [r3, #4]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	429a      	cmp	r2, r3
 800797c:	d32b      	bcc.n	80079d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	605a      	str	r2, [r3, #4]
 8007986:	e026      	b.n	80079d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	68d8      	ldr	r0, [r3, #12]
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007990:	461a      	mov	r2, r3
 8007992:	68b9      	ldr	r1, [r7, #8]
 8007994:	f003 fcc2 	bl	800b31c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	68da      	ldr	r2, [r3, #12]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a0:	425b      	negs	r3, r3
 80079a2:	441a      	add	r2, r3
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	68da      	ldr	r2, [r3, #12]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d207      	bcs.n	80079c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	689a      	ldr	r2, [r3, #8]
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079bc:	425b      	negs	r3, r3
 80079be:	441a      	add	r2, r3
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2b02      	cmp	r3, #2
 80079c8:	d105      	bne.n	80079d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d002      	beq.n	80079d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	3b01      	subs	r3, #1
 80079d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	1c5a      	adds	r2, r3, #1
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80079de:	697b      	ldr	r3, [r7, #20]
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3718      	adds	r7, #24
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d018      	beq.n	8007a2c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	68da      	ldr	r2, [r3, #12]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a02:	441a      	add	r2, r3
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	68da      	ldr	r2, [r3, #12]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d303      	bcc.n	8007a1c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	68d9      	ldr	r1, [r3, #12]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a24:	461a      	mov	r2, r3
 8007a26:	6838      	ldr	r0, [r7, #0]
 8007a28:	f003 fc78 	bl	800b31c <memcpy>
	}
}
 8007a2c:	bf00      	nop
 8007a2e:	3708      	adds	r7, #8
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007a3c:	f002 fb9a 	bl	800a174 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a46:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007a48:	e011      	b.n	8007a6e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d012      	beq.n	8007a78 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	3324      	adds	r3, #36	; 0x24
 8007a56:	4618      	mov	r0, r3
 8007a58:	f001 f914 	bl	8008c84 <xTaskRemoveFromEventList>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d001      	beq.n	8007a66 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007a62:	f001 fa11 	bl	8008e88 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007a66:	7bfb      	ldrb	r3, [r7, #15]
 8007a68:	3b01      	subs	r3, #1
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	dce9      	bgt.n	8007a4a <prvUnlockQueue+0x16>
 8007a76:	e000      	b.n	8007a7a <prvUnlockQueue+0x46>
					break;
 8007a78:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	22ff      	movs	r2, #255	; 0xff
 8007a7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007a82:	f002 fba7 	bl	800a1d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007a86:	f002 fb75 	bl	800a174 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a90:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007a92:	e011      	b.n	8007ab8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	691b      	ldr	r3, [r3, #16]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d012      	beq.n	8007ac2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	3310      	adds	r3, #16
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f001 f8ef 	bl	8008c84 <xTaskRemoveFromEventList>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d001      	beq.n	8007ab0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007aac:	f001 f9ec 	bl	8008e88 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007ab0:	7bbb      	ldrb	r3, [r7, #14]
 8007ab2:	3b01      	subs	r3, #1
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ab8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	dce9      	bgt.n	8007a94 <prvUnlockQueue+0x60>
 8007ac0:	e000      	b.n	8007ac4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007ac2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	22ff      	movs	r2, #255	; 0xff
 8007ac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007acc:	f002 fb82 	bl	800a1d4 <vPortExitCritical>
}
 8007ad0:	bf00      	nop
 8007ad2:	3710      	adds	r7, #16
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007ae0:	f002 fb48 	bl	800a174 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d102      	bne.n	8007af2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007aec:	2301      	movs	r3, #1
 8007aee:	60fb      	str	r3, [r7, #12]
 8007af0:	e001      	b.n	8007af6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007af2:	2300      	movs	r3, #0
 8007af4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007af6:	f002 fb6d 	bl	800a1d4 <vPortExitCritical>

	return xReturn;
 8007afa:	68fb      	ldr	r3, [r7, #12]
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3710      	adds	r7, #16
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b084      	sub	sp, #16
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007b0c:	f002 fb32 	bl	800a174 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d102      	bne.n	8007b22 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	60fb      	str	r3, [r7, #12]
 8007b20:	e001      	b.n	8007b26 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007b22:	2300      	movs	r3, #0
 8007b24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007b26:	f002 fb55 	bl	800a1d4 <vPortExitCritical>

	return xReturn;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3710      	adds	r7, #16
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007b34:	b480      	push	{r7}
 8007b36:	b085      	sub	sp, #20
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007b3e:	2300      	movs	r3, #0
 8007b40:	60fb      	str	r3, [r7, #12]
 8007b42:	e014      	b.n	8007b6e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007b44:	4a0f      	ldr	r2, [pc, #60]	; (8007b84 <vQueueAddToRegistry+0x50>)
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d10b      	bne.n	8007b68 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007b50:	490c      	ldr	r1, [pc, #48]	; (8007b84 <vQueueAddToRegistry+0x50>)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	683a      	ldr	r2, [r7, #0]
 8007b56:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007b5a:	4a0a      	ldr	r2, [pc, #40]	; (8007b84 <vQueueAddToRegistry+0x50>)
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	00db      	lsls	r3, r3, #3
 8007b60:	4413      	add	r3, r2
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007b66:	e006      	b.n	8007b76 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	60fb      	str	r3, [r7, #12]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2b07      	cmp	r3, #7
 8007b72:	d9e7      	bls.n	8007b44 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007b74:	bf00      	nop
 8007b76:	bf00      	nop
 8007b78:	3714      	adds	r7, #20
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr
 8007b82:	bf00      	nop
 8007b84:	20000950 	.word	0x20000950

08007b88 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b086      	sub	sp, #24
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	60b9      	str	r1, [r7, #8]
 8007b92:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007b98:	f002 faec 	bl	800a174 <vPortEnterCritical>
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ba2:	b25b      	sxtb	r3, r3
 8007ba4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ba8:	d103      	bne.n	8007bb2 <vQueueWaitForMessageRestricted+0x2a>
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	2200      	movs	r2, #0
 8007bae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007bb8:	b25b      	sxtb	r3, r3
 8007bba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bbe:	d103      	bne.n	8007bc8 <vQueueWaitForMessageRestricted+0x40>
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007bc8:	f002 fb04 	bl	800a1d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d106      	bne.n	8007be2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	3324      	adds	r3, #36	; 0x24
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	68b9      	ldr	r1, [r7, #8]
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f001 f825 	bl	8008c2c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007be2:	6978      	ldr	r0, [r7, #20]
 8007be4:	f7ff ff26 	bl	8007a34 <prvUnlockQueue>
	}
 8007be8:	bf00      	nop
 8007bea:	3718      	adds	r7, #24
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b08c      	sub	sp, #48	; 0x30
 8007bf4:	af02      	add	r7, sp, #8
 8007bf6:	60f8      	str	r0, [r7, #12]
 8007bf8:	60b9      	str	r1, [r7, #8]
 8007bfa:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d110      	bne.n	8007c24 <xStreamBufferGenericCreate+0x34>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 8007c02:	2301      	movs	r3, #1
 8007c04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2b04      	cmp	r3, #4
 8007c0c:	d81b      	bhi.n	8007c46 <xStreamBufferGenericCreate+0x56>
	__asm volatile
 8007c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c12:	f383 8811 	msr	BASEPRI, r3
 8007c16:	f3bf 8f6f 	isb	sy
 8007c1a:	f3bf 8f4f 	dsb	sy
 8007c1e:	61fb      	str	r3, [r7, #28]
}
 8007c20:	bf00      	nop
 8007c22:	e7fe      	b.n	8007c22 <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 8007c24:	2300      	movs	r3, #0
 8007c26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > 0 );
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d10a      	bne.n	8007c46 <xStreamBufferGenericCreate+0x56>
	__asm volatile
 8007c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c34:	f383 8811 	msr	BASEPRI, r3
 8007c38:	f3bf 8f6f 	isb	sy
 8007c3c:	f3bf 8f4f 	dsb	sy
 8007c40:	61bb      	str	r3, [r7, #24]
}
 8007c42:	bf00      	nop
 8007c44:	e7fe      	b.n	8007c44 <xStreamBufferGenericCreate+0x54>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8007c46:	68ba      	ldr	r2, [r7, #8]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d90a      	bls.n	8007c64 <xStreamBufferGenericCreate+0x74>
	__asm volatile
 8007c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c52:	f383 8811 	msr	BASEPRI, r3
 8007c56:	f3bf 8f6f 	isb	sy
 8007c5a:	f3bf 8f4f 	dsb	sy
 8007c5e:	617b      	str	r3, [r7, #20]
}
 8007c60:	bf00      	nop
 8007c62:	e7fe      	b.n	8007c62 <xStreamBufferGenericCreate+0x72>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d101      	bne.n	8007c6e <xStreamBufferGenericCreate+0x7e>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	3301      	adds	r3, #1
 8007c72:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	3324      	adds	r3, #36	; 0x24
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f002 fb9d 	bl	800a3b8 <pvPortMalloc>
 8007c7e:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 8007c80:	6a3b      	ldr	r3, [r7, #32]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d00a      	beq.n	8007c9c <xStreamBufferGenericCreate+0xac>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 8007c86:	6a3b      	ldr	r3, [r7, #32]
 8007c88:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8007c8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c90:	9300      	str	r3, [sp, #0]
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	68fa      	ldr	r2, [r7, #12]
 8007c96:	6a38      	ldr	r0, [r7, #32]
 8007c98:	f000 fb6e 	bl	8008378 <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 8007c9c:	6a3b      	ldr	r3, [r7, #32]
	}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3728      	adds	r7, #40	; 0x28
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}

08007ca6 <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 8007ca6:	b480      	push	{r7}
 8007ca8:	b087      	sub	sp, #28
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d10a      	bne.n	8007cce <xStreamBufferSpacesAvailable+0x28>
	__asm volatile
 8007cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cbc:	f383 8811 	msr	BASEPRI, r3
 8007cc0:	f3bf 8f6f 	isb	sy
 8007cc4:	f3bf 8f4f 	dsb	sy
 8007cc8:	60fb      	str	r3, [r7, #12]
}
 8007cca:	bf00      	nop
 8007ccc:	e7fe      	b.n	8007ccc <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	689a      	ldr	r2, [r3, #8]
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4413      	add	r3, r2
 8007cd8:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	697a      	ldr	r2, [r7, #20]
 8007ce0:	1ad3      	subs	r3, r2, r3
 8007ce2:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	3b01      	subs	r3, #1
 8007ce8:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	697a      	ldr	r2, [r7, #20]
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d304      	bcc.n	8007cfe <xStreamBufferSpacesAvailable+0x58>
	{
		xSpace -= pxStreamBuffer->xLength;
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	697a      	ldr	r2, [r7, #20]
 8007cfa:	1ad3      	subs	r3, r2, r3
 8007cfc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 8007cfe:	697b      	ldr	r3, [r7, #20]
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	371c      	adds	r7, #28
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr

08007d0c <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b090      	sub	sp, #64	; 0x40
 8007d10:	af02      	add	r7, sp, #8
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	60b9      	str	r1, [r7, #8]
 8007d16:	607a      	str	r2, [r7, #4]
 8007d18:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xReturn, xSpace = 0;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	637b      	str	r3, [r7, #52]	; 0x34
size_t xRequiredSpace = xDataLengthBytes;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	633b      	str	r3, [r7, #48]	; 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d10a      	bne.n	8007d42 <xStreamBufferSend+0x36>
	__asm volatile
 8007d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d30:	f383 8811 	msr	BASEPRI, r3
 8007d34:	f3bf 8f6f 	isb	sy
 8007d38:	f3bf 8f4f 	dsb	sy
 8007d3c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007d3e:	bf00      	nop
 8007d40:	e7fe      	b.n	8007d40 <xStreamBufferSend+0x34>
	configASSERT( pxStreamBuffer );
 8007d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d10a      	bne.n	8007d5e <xStreamBufferSend+0x52>
	__asm volatile
 8007d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d4c:	f383 8811 	msr	BASEPRI, r3
 8007d50:	f3bf 8f6f 	isb	sy
 8007d54:	f3bf 8f4f 	dsb	sy
 8007d58:	623b      	str	r3, [r7, #32]
}
 8007d5a:	bf00      	nop
 8007d5c:	e7fe      	b.n	8007d5c <xStreamBufferSend+0x50>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8007d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d60:	7f1b      	ldrb	r3, [r3, #28]
 8007d62:	f003 0301 	and.w	r3, r3, #1
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d011      	beq.n	8007d8e <xStreamBufferSend+0x82>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8007d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d6c:	3304      	adds	r3, #4
 8007d6e:	633b      	str	r3, [r7, #48]	; 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 8007d70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d80a      	bhi.n	8007d8e <xStreamBufferSend+0x82>
	__asm volatile
 8007d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d7c:	f383 8811 	msr	BASEPRI, r3
 8007d80:	f3bf 8f6f 	isb	sy
 8007d84:	f3bf 8f4f 	dsb	sy
 8007d88:	61fb      	str	r3, [r7, #28]
}
 8007d8a:	bf00      	nop
 8007d8c:	e7fe      	b.n	8007d8c <xStreamBufferSend+0x80>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d03e      	beq.n	8007e12 <xStreamBufferSend+0x106>
	{
		vTaskSetTimeOutState( &xTimeOut );
 8007d94:	f107 0310 	add.w	r3, r7, #16
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f000 ffd7 	bl	8008d4c <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 8007d9e:	f002 f9e9 	bl	800a174 <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8007da2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007da4:	f7ff ff7f 	bl	8007ca6 <xStreamBufferSpacesAvailable>
 8007da8:	6378      	str	r0, [r7, #52]	; 0x34

				if( xSpace < xRequiredSpace )
 8007daa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d217      	bcs.n	8007de2 <xStreamBufferSend+0xd6>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 8007db2:	2000      	movs	r0, #0
 8007db4:	f001 fcea 	bl	800978c <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 8007db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dba:	695b      	ldr	r3, [r3, #20]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d00a      	beq.n	8007dd6 <xStreamBufferSend+0xca>
	__asm volatile
 8007dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc4:	f383 8811 	msr	BASEPRI, r3
 8007dc8:	f3bf 8f6f 	isb	sy
 8007dcc:	f3bf 8f4f 	dsb	sy
 8007dd0:	61bb      	str	r3, [r7, #24]
}
 8007dd2:	bf00      	nop
 8007dd4:	e7fe      	b.n	8007dd4 <xStreamBufferSend+0xc8>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 8007dd6:	f001 f93d 	bl	8009054 <xTaskGetCurrentTaskHandle>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dde:	615a      	str	r2, [r3, #20]
 8007de0:	e002      	b.n	8007de8 <xStreamBufferSend+0xdc>
				}
				else
				{
					taskEXIT_CRITICAL();
 8007de2:	f002 f9f7 	bl	800a1d4 <vPortExitCritical>
					break;
 8007de6:	e014      	b.n	8007e12 <xStreamBufferSend+0x106>
				}
			}
			taskEXIT_CRITICAL();
 8007de8:	f002 f9f4 	bl	800a1d4 <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	2200      	movs	r2, #0
 8007df0:	2100      	movs	r1, #0
 8007df2:	2000      	movs	r0, #0
 8007df4:	f001 fac8 	bl	8009388 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 8007df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 8007dfe:	463a      	mov	r2, r7
 8007e00:	f107 0310 	add.w	r3, r7, #16
 8007e04:	4611      	mov	r1, r2
 8007e06:	4618      	mov	r0, r3
 8007e08:	f000 ffdc 	bl	8008dc4 <xTaskCheckForTimeOut>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d0c5      	beq.n	8007d9e <xStreamBufferSend+0x92>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 8007e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d103      	bne.n	8007e20 <xStreamBufferSend+0x114>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8007e18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007e1a:	f7ff ff44 	bl	8007ca6 <xStreamBufferSpacesAvailable>
 8007e1e:	6378      	str	r0, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8007e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e22:	9300      	str	r3, [sp, #0]
 8007e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	68b9      	ldr	r1, [r7, #8]
 8007e2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007e2c:	f000 f894 	bl	8007f58 <prvWriteMessageToBuffer>
 8007e30:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 8007e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d019      	beq.n	8007e6c <xStreamBufferSend+0x160>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8007e38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007e3a:	f000 fa7d 	bl	8008338 <prvBytesInBuffer>
 8007e3e:	4602      	mov	r2, r0
 8007e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d311      	bcc.n	8007e6c <xStreamBufferSend+0x160>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 8007e48:	f000 fcf2 	bl	8008830 <vTaskSuspendAll>
 8007e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e4e:	691b      	ldr	r3, [r3, #16]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d009      	beq.n	8007e68 <xStreamBufferSend+0x15c>
 8007e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e56:	6918      	ldr	r0, [r3, #16]
 8007e58:	2300      	movs	r3, #0
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	2100      	movs	r1, #0
 8007e5e:	f001 faf3 	bl	8009448 <xTaskGenericNotify>
 8007e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e64:	2200      	movs	r2, #0
 8007e66:	611a      	str	r2, [r3, #16]
 8007e68:	f000 fcf0 	bl	800884c <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 8007e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3738      	adds	r7, #56	; 0x38
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}

08007e76 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007e76:	b580      	push	{r7, lr}
 8007e78:	b090      	sub	sp, #64	; 0x40
 8007e7a:	af02      	add	r7, sp, #8
 8007e7c:	60f8      	str	r0, [r7, #12]
 8007e7e:	60b9      	str	r1, [r7, #8]
 8007e80:	607a      	str	r2, [r7, #4]
 8007e82:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	633b      	str	r3, [r7, #48]	; 0x30
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	637b      	str	r3, [r7, #52]	; 0x34

	configASSERT( pvTxData );
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d10a      	bne.n	8007ea8 <xStreamBufferSendFromISR+0x32>
	__asm volatile
 8007e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e96:	f383 8811 	msr	BASEPRI, r3
 8007e9a:	f3bf 8f6f 	isb	sy
 8007e9e:	f3bf 8f4f 	dsb	sy
 8007ea2:	623b      	str	r3, [r7, #32]
}
 8007ea4:	bf00      	nop
 8007ea6:	e7fe      	b.n	8007ea6 <xStreamBufferSendFromISR+0x30>
	configASSERT( pxStreamBuffer );
 8007ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d10a      	bne.n	8007ec4 <xStreamBufferSendFromISR+0x4e>
	__asm volatile
 8007eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb2:	f383 8811 	msr	BASEPRI, r3
 8007eb6:	f3bf 8f6f 	isb	sy
 8007eba:	f3bf 8f4f 	dsb	sy
 8007ebe:	61fb      	str	r3, [r7, #28]
}
 8007ec0:	bf00      	nop
 8007ec2:	e7fe      	b.n	8007ec2 <xStreamBufferSendFromISR+0x4c>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8007ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec6:	7f1b      	ldrb	r3, [r3, #28]
 8007ec8:	f003 0301 	and.w	r3, r3, #1
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d002      	beq.n	8007ed6 <xStreamBufferSendFromISR+0x60>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8007ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ed2:	3304      	adds	r3, #4
 8007ed4:	637b      	str	r3, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8007ed6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ed8:	f7ff fee5 	bl	8007ca6 <xStreamBufferSpacesAvailable>
 8007edc:	62f8      	str	r0, [r7, #44]	; 0x2c
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8007ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ee0:	9300      	str	r3, [sp, #0]
 8007ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	68b9      	ldr	r1, [r7, #8]
 8007ee8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007eea:	f000 f835 	bl	8007f58 <prvWriteMessageToBuffer>
 8007eee:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 8007ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d02b      	beq.n	8007f4e <xStreamBufferSendFromISR+0xd8>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8007ef6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ef8:	f000 fa1e 	bl	8008338 <prvBytesInBuffer>
 8007efc:	4602      	mov	r2, r0
 8007efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f00:	68db      	ldr	r3, [r3, #12]
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d323      	bcc.n	8007f4e <xStreamBufferSendFromISR+0xd8>
	__asm volatile
 8007f06:	f3ef 8211 	mrs	r2, BASEPRI
 8007f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0e:	f383 8811 	msr	BASEPRI, r3
 8007f12:	f3bf 8f6f 	isb	sy
 8007f16:	f3bf 8f4f 	dsb	sy
 8007f1a:	61ba      	str	r2, [r7, #24]
 8007f1c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007f1e:	69bb      	ldr	r3, [r7, #24]
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 8007f20:	627b      	str	r3, [r7, #36]	; 0x24
 8007f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f24:	691b      	ldr	r3, [r3, #16]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d00b      	beq.n	8007f42 <xStreamBufferSendFromISR+0xcc>
 8007f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f2c:	6918      	ldr	r0, [r3, #16]
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	9300      	str	r3, [sp, #0]
 8007f32:	2300      	movs	r3, #0
 8007f34:	2200      	movs	r2, #0
 8007f36:	2100      	movs	r1, #0
 8007f38:	f001 fb44 	bl	80095c4 <xTaskGenericNotifyFromISR>
 8007f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f3e:	2200      	movs	r2, #0
 8007f40:	611a      	str	r2, [r3, #16]
 8007f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f44:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	f383 8811 	msr	BASEPRI, r3
}
 8007f4c:	bf00      	nop
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
 8007f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3738      	adds	r7, #56	; 0x38
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b086      	sub	sp, #24
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	60f8      	str	r0, [r7, #12]
 8007f60:	60b9      	str	r1, [r7, #8]
 8007f62:	607a      	str	r2, [r7, #4]
 8007f64:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d102      	bne.n	8007f72 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	617b      	str	r3, [r7, #20]
 8007f70:	e01d      	b.n	8007fae <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	7f1b      	ldrb	r3, [r3, #28]
 8007f76:	f003 0301 	and.w	r3, r3, #1
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d108      	bne.n	8007f90 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	4293      	cmp	r3, r2
 8007f88:	bf28      	it	cs
 8007f8a:	4613      	movcs	r3, r2
 8007f8c:	607b      	str	r3, [r7, #4]
 8007f8e:	e00e      	b.n	8007fae <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 8007f90:	683a      	ldr	r2, [r7, #0]
 8007f92:	6a3b      	ldr	r3, [r7, #32]
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d308      	bcc.n	8007faa <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8007f9c:	1d3b      	adds	r3, r7, #4
 8007f9e:	2204      	movs	r2, #4
 8007fa0:	4619      	mov	r1, r3
 8007fa2:	68f8      	ldr	r0, [r7, #12]
 8007fa4:	f000 f8dc 	bl	8008160 <prvWriteBytesToBuffer>
 8007fa8:	e001      	b.n	8007fae <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 8007faa:	2300      	movs	r3, #0
 8007fac:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d007      	beq.n	8007fc4 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	68b9      	ldr	r1, [r7, #8]
 8007fba:	68f8      	ldr	r0, [r7, #12]
 8007fbc:	f000 f8d0 	bl	8008160 <prvWriteBytesToBuffer>
 8007fc0:	6138      	str	r0, [r7, #16]
 8007fc2:	e001      	b.n	8007fc8 <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 8007fc8:	693b      	ldr	r3, [r7, #16]
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3718      	adds	r7, #24
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}

08007fd2 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 8007fd2:	b580      	push	{r7, lr}
 8007fd4:	b08e      	sub	sp, #56	; 0x38
 8007fd6:	af02      	add	r7, sp, #8
 8007fd8:	60f8      	str	r0, [r7, #12]
 8007fda:	60b9      	str	r1, [r7, #8]
 8007fdc:	607a      	str	r2, [r7, #4]
 8007fde:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d10a      	bne.n	8008004 <xStreamBufferReceive+0x32>
	__asm volatile
 8007fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff2:	f383 8811 	msr	BASEPRI, r3
 8007ff6:	f3bf 8f6f 	isb	sy
 8007ffa:	f3bf 8f4f 	dsb	sy
 8007ffe:	61fb      	str	r3, [r7, #28]
}
 8008000:	bf00      	nop
 8008002:	e7fe      	b.n	8008002 <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 8008004:	6a3b      	ldr	r3, [r7, #32]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d10a      	bne.n	8008020 <xStreamBufferReceive+0x4e>
	__asm volatile
 800800a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800800e:	f383 8811 	msr	BASEPRI, r3
 8008012:	f3bf 8f6f 	isb	sy
 8008016:	f3bf 8f4f 	dsb	sy
 800801a:	61bb      	str	r3, [r7, #24]
}
 800801c:	bf00      	nop
 800801e:	e7fe      	b.n	800801e <xStreamBufferReceive+0x4c>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8008020:	6a3b      	ldr	r3, [r7, #32]
 8008022:	7f1b      	ldrb	r3, [r3, #28]
 8008024:	f003 0301 	and.w	r3, r3, #1
 8008028:	2b00      	cmp	r3, #0
 800802a:	d002      	beq.n	8008032 <xStreamBufferReceive+0x60>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800802c:	2304      	movs	r3, #4
 800802e:	627b      	str	r3, [r7, #36]	; 0x24
 8008030:	e001      	b.n	8008036 <xStreamBufferReceive+0x64>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 8008032:	2300      	movs	r3, #0
 8008034:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d034      	beq.n	80080a6 <xStreamBufferReceive+0xd4>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 800803c:	f002 f89a 	bl	800a174 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8008040:	6a38      	ldr	r0, [r7, #32]
 8008042:	f000 f979 	bl	8008338 <prvBytesInBuffer>
 8008046:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 8008048:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800804a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804c:	429a      	cmp	r2, r3
 800804e:	d816      	bhi.n	800807e <xStreamBufferReceive+0xac>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 8008050:	2000      	movs	r0, #0
 8008052:	f001 fb9b 	bl	800978c <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 8008056:	6a3b      	ldr	r3, [r7, #32]
 8008058:	691b      	ldr	r3, [r3, #16]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d00a      	beq.n	8008074 <xStreamBufferReceive+0xa2>
	__asm volatile
 800805e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008062:	f383 8811 	msr	BASEPRI, r3
 8008066:	f3bf 8f6f 	isb	sy
 800806a:	f3bf 8f4f 	dsb	sy
 800806e:	617b      	str	r3, [r7, #20]
}
 8008070:	bf00      	nop
 8008072:	e7fe      	b.n	8008072 <xStreamBufferReceive+0xa0>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8008074:	f000 ffee 	bl	8009054 <xTaskGetCurrentTaskHandle>
 8008078:	4602      	mov	r2, r0
 800807a:	6a3b      	ldr	r3, [r7, #32]
 800807c:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800807e:	f002 f8a9 	bl	800a1d4 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 8008082:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008086:	429a      	cmp	r2, r3
 8008088:	d811      	bhi.n	80080ae <xStreamBufferReceive+0xdc>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	2200      	movs	r2, #0
 800808e:	2100      	movs	r1, #0
 8008090:	2000      	movs	r0, #0
 8008092:	f001 f979 	bl	8009388 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8008096:	6a3b      	ldr	r3, [r7, #32]
 8008098:	2200      	movs	r2, #0
 800809a:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800809c:	6a38      	ldr	r0, [r7, #32]
 800809e:	f000 f94b 	bl	8008338 <prvBytesInBuffer>
 80080a2:	62b8      	str	r0, [r7, #40]	; 0x28
 80080a4:	e003      	b.n	80080ae <xStreamBufferReceive+0xdc>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80080a6:	6a38      	ldr	r0, [r7, #32]
 80080a8:	f000 f946 	bl	8008338 <prvBytesInBuffer>
 80080ac:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 80080ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d91d      	bls.n	80080f2 <xStreamBufferReceive+0x120>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 80080b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b8:	9300      	str	r3, [sp, #0]
 80080ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	68b9      	ldr	r1, [r7, #8]
 80080c0:	6a38      	ldr	r0, [r7, #32]
 80080c2:	f000 f81b 	bl	80080fc <prvReadMessageFromBuffer>
 80080c6:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 80080c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d011      	beq.n	80080f2 <xStreamBufferReceive+0x120>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 80080ce:	f000 fbaf 	bl	8008830 <vTaskSuspendAll>
 80080d2:	6a3b      	ldr	r3, [r7, #32]
 80080d4:	695b      	ldr	r3, [r3, #20]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d009      	beq.n	80080ee <xStreamBufferReceive+0x11c>
 80080da:	6a3b      	ldr	r3, [r7, #32]
 80080dc:	6958      	ldr	r0, [r3, #20]
 80080de:	2300      	movs	r3, #0
 80080e0:	2200      	movs	r2, #0
 80080e2:	2100      	movs	r1, #0
 80080e4:	f001 f9b0 	bl	8009448 <xTaskGenericNotify>
 80080e8:	6a3b      	ldr	r3, [r7, #32]
 80080ea:	2200      	movs	r2, #0
 80080ec:	615a      	str	r2, [r3, #20]
 80080ee:	f000 fbad 	bl	800884c <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 80080f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3730      	adds	r7, #48	; 0x30
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b088      	sub	sp, #32
 8008100:	af00      	add	r7, sp, #0
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	60b9      	str	r1, [r7, #8]
 8008106:	607a      	str	r2, [r7, #4]
 8008108:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 800810a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800810c:	2b00      	cmp	r3, #0
 800810e:	d019      	beq.n	8008144 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8008116:	f107 0110 	add.w	r1, r7, #16
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800811e:	68f8      	ldr	r0, [r7, #12]
 8008120:	f000 f890 	bl	8008244 <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 8008128:	683a      	ldr	r2, [r7, #0]
 800812a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800812c:	1ad3      	subs	r3, r2, r3
 800812e:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 8008130:	69fa      	ldr	r2, [r7, #28]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	429a      	cmp	r2, r3
 8008136:	d907      	bls.n	8008148 <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	69ba      	ldr	r2, [r7, #24]
 800813c:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 800813e:	2300      	movs	r3, #0
 8008140:	61fb      	str	r3, [r7, #28]
 8008142:	e001      	b.n	8008148 <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	69fa      	ldr	r2, [r7, #28]
 800814c:	68b9      	ldr	r1, [r7, #8]
 800814e:	68f8      	ldr	r0, [r7, #12]
 8008150:	f000 f878 	bl	8008244 <prvReadBytesFromBuffer>
 8008154:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 8008156:	697b      	ldr	r3, [r7, #20]
}
 8008158:	4618      	mov	r0, r3
 800815a:	3720      	adds	r7, #32
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b08a      	sub	sp, #40	; 0x28
 8008164:	af00      	add	r7, sp, #0
 8008166:	60f8      	str	r0, [r7, #12]
 8008168:	60b9      	str	r1, [r7, #8]
 800816a:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d10a      	bne.n	8008188 <prvWriteBytesToBuffer+0x28>
	__asm volatile
 8008172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008176:	f383 8811 	msr	BASEPRI, r3
 800817a:	f3bf 8f6f 	isb	sy
 800817e:	f3bf 8f4f 	dsb	sy
 8008182:	61fb      	str	r3, [r7, #28]
}
 8008184:	bf00      	nop
 8008186:	e7fe      	b.n	8008186 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	689a      	ldr	r2, [r3, #8]
 8008192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008194:	1ad3      	subs	r3, r2, r3
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	4293      	cmp	r3, r2
 800819a:	bf28      	it	cs
 800819c:	4613      	movcs	r3, r2
 800819e:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 80081a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081a2:	6a3b      	ldr	r3, [r7, #32]
 80081a4:	441a      	add	r2, r3
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d90a      	bls.n	80081c4 <prvWriteBytesToBuffer+0x64>
	__asm volatile
 80081ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b2:	f383 8811 	msr	BASEPRI, r3
 80081b6:	f3bf 8f6f 	isb	sy
 80081ba:	f3bf 8f4f 	dsb	sy
 80081be:	61bb      	str	r3, [r7, #24]
}
 80081c0:	bf00      	nop
 80081c2:	e7fe      	b.n	80081c2 <prvWriteBytesToBuffer+0x62>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	699a      	ldr	r2, [r3, #24]
 80081c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ca:	4413      	add	r3, r2
 80081cc:	6a3a      	ldr	r2, [r7, #32]
 80081ce:	68b9      	ldr	r1, [r7, #8]
 80081d0:	4618      	mov	r0, r3
 80081d2:	f003 f8a3 	bl	800b31c <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	6a3b      	ldr	r3, [r7, #32]
 80081da:	429a      	cmp	r2, r3
 80081dc:	d91c      	bls.n	8008218 <prvWriteBytesToBuffer+0xb8>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 80081de:	687a      	ldr	r2, [r7, #4]
 80081e0:	6a3b      	ldr	r3, [r7, #32]
 80081e2:	1ad2      	subs	r2, r2, r3
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d90a      	bls.n	8008202 <prvWriteBytesToBuffer+0xa2>
	__asm volatile
 80081ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f0:	f383 8811 	msr	BASEPRI, r3
 80081f4:	f3bf 8f6f 	isb	sy
 80081f8:	f3bf 8f4f 	dsb	sy
 80081fc:	617b      	str	r3, [r7, #20]
}
 80081fe:	bf00      	nop
 8008200:	e7fe      	b.n	8008200 <prvWriteBytesToBuffer+0xa0>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	6998      	ldr	r0, [r3, #24]
 8008206:	68ba      	ldr	r2, [r7, #8]
 8008208:	6a3b      	ldr	r3, [r7, #32]
 800820a:	18d1      	adds	r1, r2, r3
 800820c:	687a      	ldr	r2, [r7, #4]
 800820e:	6a3b      	ldr	r3, [r7, #32]
 8008210:	1ad3      	subs	r3, r2, r3
 8008212:	461a      	mov	r2, r3
 8008214:	f003 f882 	bl	800b31c <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 8008218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	4413      	add	r3, r2
 800821e:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008226:	429a      	cmp	r2, r3
 8008228:	d304      	bcc.n	8008234 <prvWriteBytesToBuffer+0xd4>
	{
		xNextHead -= pxStreamBuffer->xLength;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	689b      	ldr	r3, [r3, #8]
 800822e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008230:	1ad3      	subs	r3, r2, r3
 8008232:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008238:	605a      	str	r2, [r3, #4]

	return xCount;
 800823a:	687b      	ldr	r3, [r7, #4]
}
 800823c:	4618      	mov	r0, r3
 800823e:	3728      	adds	r7, #40	; 0x28
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b08a      	sub	sp, #40	; 0x28
 8008248:	af00      	add	r7, sp, #0
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	60b9      	str	r1, [r7, #8]
 800824e:	607a      	str	r2, [r7, #4]
 8008250:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	4293      	cmp	r3, r2
 8008258:	bf28      	it	cs
 800825a:	4613      	movcs	r3, r2
 800825c:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 800825e:	6a3b      	ldr	r3, [r7, #32]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d064      	beq.n	800832e <prvReadBytesFromBuffer+0xea>
	{
		xNextTail = pxStreamBuffer->xTail;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	689a      	ldr	r2, [r3, #8]
 800826e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008270:	1ad3      	subs	r3, r2, r3
 8008272:	6a3a      	ldr	r2, [r7, #32]
 8008274:	4293      	cmp	r3, r2
 8008276:	bf28      	it	cs
 8008278:	4613      	movcs	r3, r2
 800827a:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 800827c:	69fa      	ldr	r2, [r7, #28]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	429a      	cmp	r2, r3
 8008282:	d90a      	bls.n	800829a <prvReadBytesFromBuffer+0x56>
	__asm volatile
 8008284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008288:	f383 8811 	msr	BASEPRI, r3
 800828c:	f3bf 8f6f 	isb	sy
 8008290:	f3bf 8f4f 	dsb	sy
 8008294:	61bb      	str	r3, [r7, #24]
}
 8008296:	bf00      	nop
 8008298:	e7fe      	b.n	8008298 <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 800829a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800829c:	69fb      	ldr	r3, [r7, #28]
 800829e:	441a      	add	r2, r3
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d90a      	bls.n	80082be <prvReadBytesFromBuffer+0x7a>
	__asm volatile
 80082a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ac:	f383 8811 	msr	BASEPRI, r3
 80082b0:	f3bf 8f6f 	isb	sy
 80082b4:	f3bf 8f4f 	dsb	sy
 80082b8:	617b      	str	r3, [r7, #20]
}
 80082ba:	bf00      	nop
 80082bc:	e7fe      	b.n	80082bc <prvReadBytesFromBuffer+0x78>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	699a      	ldr	r2, [r3, #24]
 80082c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c4:	4413      	add	r3, r2
 80082c6:	69fa      	ldr	r2, [r7, #28]
 80082c8:	4619      	mov	r1, r3
 80082ca:	68b8      	ldr	r0, [r7, #8]
 80082cc:	f003 f826 	bl	800b31c <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 80082d0:	6a3a      	ldr	r2, [r7, #32]
 80082d2:	69fb      	ldr	r3, [r7, #28]
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d919      	bls.n	800830c <prvReadBytesFromBuffer+0xc8>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 80082d8:	6a3a      	ldr	r2, [r7, #32]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	429a      	cmp	r2, r3
 80082de:	d90a      	bls.n	80082f6 <prvReadBytesFromBuffer+0xb2>
	__asm volatile
 80082e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e4:	f383 8811 	msr	BASEPRI, r3
 80082e8:	f3bf 8f6f 	isb	sy
 80082ec:	f3bf 8f4f 	dsb	sy
 80082f0:	613b      	str	r3, [r7, #16]
}
 80082f2:	bf00      	nop
 80082f4:	e7fe      	b.n	80082f4 <prvReadBytesFromBuffer+0xb0>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80082f6:	68ba      	ldr	r2, [r7, #8]
 80082f8:	69fb      	ldr	r3, [r7, #28]
 80082fa:	18d0      	adds	r0, r2, r3
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6999      	ldr	r1, [r3, #24]
 8008300:	6a3a      	ldr	r2, [r7, #32]
 8008302:	69fb      	ldr	r3, [r7, #28]
 8008304:	1ad3      	subs	r3, r2, r3
 8008306:	461a      	mov	r2, r3
 8008308:	f003 f808 	bl	800b31c <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 800830c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800830e:	6a3b      	ldr	r3, [r7, #32]
 8008310:	4413      	add	r3, r2
 8008312:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800831a:	429a      	cmp	r2, r3
 800831c:	d304      	bcc.n	8008328 <prvReadBytesFromBuffer+0xe4>
		{
			xNextTail -= pxStreamBuffer->xLength;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	689b      	ldr	r3, [r3, #8]
 8008322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008324:	1ad3      	subs	r3, r2, r3
 8008326:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800832c:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800832e:	6a3b      	ldr	r3, [r7, #32]
}
 8008330:	4618      	mov	r0, r3
 8008332:	3728      	adds	r7, #40	; 0x28
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 8008338:	b480      	push	{r7}
 800833a:	b085      	sub	sp, #20
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	689a      	ldr	r2, [r3, #8]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	4413      	add	r3, r2
 800834a:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	68fa      	ldr	r2, [r7, #12]
 8008352:	1ad3      	subs	r3, r2, r3
 8008354:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	689b      	ldr	r3, [r3, #8]
 800835a:	68fa      	ldr	r2, [r7, #12]
 800835c:	429a      	cmp	r2, r3
 800835e:	d304      	bcc.n	800836a <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	689b      	ldr	r3, [r3, #8]
 8008364:	68fa      	ldr	r2, [r7, #12]
 8008366:	1ad3      	subs	r3, r2, r3
 8008368:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800836a:	68fb      	ldr	r3, [r7, #12]
}
 800836c:	4618      	mov	r0, r3
 800836e:	3714      	adds	r7, #20
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b086      	sub	sp, #24
 800837c:	af00      	add	r7, sp, #0
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	60b9      	str	r1, [r7, #8]
 8008382:	607a      	str	r2, [r7, #4]
 8008384:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 8008386:	2355      	movs	r3, #85	; 0x55
 8008388:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	6979      	ldr	r1, [r7, #20]
 800838e:	68b8      	ldr	r0, [r7, #8]
 8008390:	f002 ffd2 	bl	800b338 <memset>
 8008394:	4602      	mov	r2, r0
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	4293      	cmp	r3, r2
 800839a:	d00a      	beq.n	80083b2 <prvInitialiseNewStreamBuffer+0x3a>
	__asm volatile
 800839c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a0:	f383 8811 	msr	BASEPRI, r3
 80083a4:	f3bf 8f6f 	isb	sy
 80083a8:	f3bf 8f4f 	dsb	sy
 80083ac:	613b      	str	r3, [r7, #16]
}
 80083ae:	bf00      	nop
 80083b0:	e7fe      	b.n	80083b0 <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 80083b2:	2224      	movs	r2, #36	; 0x24
 80083b4:	2100      	movs	r1, #0
 80083b6:	68f8      	ldr	r0, [r7, #12]
 80083b8:	f002 ffbe 	bl	800b338 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	68ba      	ldr	r2, [r7, #8]
 80083c0:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	683a      	ldr	r2, [r7, #0]
 80083cc:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80083d4:	771a      	strb	r2, [r3, #28]
}
 80083d6:	bf00      	nop
 80083d8:	3718      	adds	r7, #24
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}

080083de <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80083de:	b580      	push	{r7, lr}
 80083e0:	b08e      	sub	sp, #56	; 0x38
 80083e2:	af04      	add	r7, sp, #16
 80083e4:	60f8      	str	r0, [r7, #12]
 80083e6:	60b9      	str	r1, [r7, #8]
 80083e8:	607a      	str	r2, [r7, #4]
 80083ea:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80083ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d10a      	bne.n	8008408 <xTaskCreateStatic+0x2a>
	__asm volatile
 80083f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f6:	f383 8811 	msr	BASEPRI, r3
 80083fa:	f3bf 8f6f 	isb	sy
 80083fe:	f3bf 8f4f 	dsb	sy
 8008402:	623b      	str	r3, [r7, #32]
}
 8008404:	bf00      	nop
 8008406:	e7fe      	b.n	8008406 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800840a:	2b00      	cmp	r3, #0
 800840c:	d10a      	bne.n	8008424 <xTaskCreateStatic+0x46>
	__asm volatile
 800840e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008412:	f383 8811 	msr	BASEPRI, r3
 8008416:	f3bf 8f6f 	isb	sy
 800841a:	f3bf 8f4f 	dsb	sy
 800841e:	61fb      	str	r3, [r7, #28]
}
 8008420:	bf00      	nop
 8008422:	e7fe      	b.n	8008422 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008424:	23bc      	movs	r3, #188	; 0xbc
 8008426:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	2bbc      	cmp	r3, #188	; 0xbc
 800842c:	d00a      	beq.n	8008444 <xTaskCreateStatic+0x66>
	__asm volatile
 800842e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008432:	f383 8811 	msr	BASEPRI, r3
 8008436:	f3bf 8f6f 	isb	sy
 800843a:	f3bf 8f4f 	dsb	sy
 800843e:	61bb      	str	r3, [r7, #24]
}
 8008440:	bf00      	nop
 8008442:	e7fe      	b.n	8008442 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008444:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008448:	2b00      	cmp	r3, #0
 800844a:	d01e      	beq.n	800848a <xTaskCreateStatic+0xac>
 800844c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800844e:	2b00      	cmp	r3, #0
 8008450:	d01b      	beq.n	800848a <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008454:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008458:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800845a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800845c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845e:	2202      	movs	r2, #2
 8008460:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008464:	2300      	movs	r3, #0
 8008466:	9303      	str	r3, [sp, #12]
 8008468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846a:	9302      	str	r3, [sp, #8]
 800846c:	f107 0314 	add.w	r3, r7, #20
 8008470:	9301      	str	r3, [sp, #4]
 8008472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008474:	9300      	str	r3, [sp, #0]
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	687a      	ldr	r2, [r7, #4]
 800847a:	68b9      	ldr	r1, [r7, #8]
 800847c:	68f8      	ldr	r0, [r7, #12]
 800847e:	f000 f851 	bl	8008524 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008482:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008484:	f000 f8f4 	bl	8008670 <prvAddNewTaskToReadyList>
 8008488:	e001      	b.n	800848e <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800848a:	2300      	movs	r3, #0
 800848c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800848e:	697b      	ldr	r3, [r7, #20]
	}
 8008490:	4618      	mov	r0, r3
 8008492:	3728      	adds	r7, #40	; 0x28
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008498:	b580      	push	{r7, lr}
 800849a:	b08c      	sub	sp, #48	; 0x30
 800849c:	af04      	add	r7, sp, #16
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	603b      	str	r3, [r7, #0]
 80084a4:	4613      	mov	r3, r2
 80084a6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80084a8:	88fb      	ldrh	r3, [r7, #6]
 80084aa:	009b      	lsls	r3, r3, #2
 80084ac:	4618      	mov	r0, r3
 80084ae:	f001 ff83 	bl	800a3b8 <pvPortMalloc>
 80084b2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d00e      	beq.n	80084d8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80084ba:	20bc      	movs	r0, #188	; 0xbc
 80084bc:	f001 ff7c 	bl	800a3b8 <pvPortMalloc>
 80084c0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80084c2:	69fb      	ldr	r3, [r7, #28]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d003      	beq.n	80084d0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80084c8:	69fb      	ldr	r3, [r7, #28]
 80084ca:	697a      	ldr	r2, [r7, #20]
 80084cc:	631a      	str	r2, [r3, #48]	; 0x30
 80084ce:	e005      	b.n	80084dc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80084d0:	6978      	ldr	r0, [r7, #20]
 80084d2:	f002 f83d 	bl	800a550 <vPortFree>
 80084d6:	e001      	b.n	80084dc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80084d8:	2300      	movs	r3, #0
 80084da:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80084dc:	69fb      	ldr	r3, [r7, #28]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d017      	beq.n	8008512 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80084e2:	69fb      	ldr	r3, [r7, #28]
 80084e4:	2200      	movs	r2, #0
 80084e6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80084ea:	88fa      	ldrh	r2, [r7, #6]
 80084ec:	2300      	movs	r3, #0
 80084ee:	9303      	str	r3, [sp, #12]
 80084f0:	69fb      	ldr	r3, [r7, #28]
 80084f2:	9302      	str	r3, [sp, #8]
 80084f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f6:	9301      	str	r3, [sp, #4]
 80084f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084fa:	9300      	str	r3, [sp, #0]
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	68b9      	ldr	r1, [r7, #8]
 8008500:	68f8      	ldr	r0, [r7, #12]
 8008502:	f000 f80f 	bl	8008524 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008506:	69f8      	ldr	r0, [r7, #28]
 8008508:	f000 f8b2 	bl	8008670 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800850c:	2301      	movs	r3, #1
 800850e:	61bb      	str	r3, [r7, #24]
 8008510:	e002      	b.n	8008518 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008512:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008516:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008518:	69bb      	ldr	r3, [r7, #24]
	}
 800851a:	4618      	mov	r0, r3
 800851c:	3720      	adds	r7, #32
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
	...

08008524 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b088      	sub	sp, #32
 8008528:	af00      	add	r7, sp, #0
 800852a:	60f8      	str	r0, [r7, #12]
 800852c:	60b9      	str	r1, [r7, #8]
 800852e:	607a      	str	r2, [r7, #4]
 8008530:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008534:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	009b      	lsls	r3, r3, #2
 800853a:	461a      	mov	r2, r3
 800853c:	21a5      	movs	r1, #165	; 0xa5
 800853e:	f002 fefb 	bl	800b338 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008544:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800854c:	3b01      	subs	r3, #1
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	4413      	add	r3, r2
 8008552:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008554:	69bb      	ldr	r3, [r7, #24]
 8008556:	f023 0307 	bic.w	r3, r3, #7
 800855a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800855c:	69bb      	ldr	r3, [r7, #24]
 800855e:	f003 0307 	and.w	r3, r3, #7
 8008562:	2b00      	cmp	r3, #0
 8008564:	d00a      	beq.n	800857c <prvInitialiseNewTask+0x58>
	__asm volatile
 8008566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800856a:	f383 8811 	msr	BASEPRI, r3
 800856e:	f3bf 8f6f 	isb	sy
 8008572:	f3bf 8f4f 	dsb	sy
 8008576:	617b      	str	r3, [r7, #20]
}
 8008578:	bf00      	nop
 800857a:	e7fe      	b.n	800857a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d01f      	beq.n	80085c2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008582:	2300      	movs	r3, #0
 8008584:	61fb      	str	r3, [r7, #28]
 8008586:	e012      	b.n	80085ae <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008588:	68ba      	ldr	r2, [r7, #8]
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	4413      	add	r3, r2
 800858e:	7819      	ldrb	r1, [r3, #0]
 8008590:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008592:	69fb      	ldr	r3, [r7, #28]
 8008594:	4413      	add	r3, r2
 8008596:	3334      	adds	r3, #52	; 0x34
 8008598:	460a      	mov	r2, r1
 800859a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800859c:	68ba      	ldr	r2, [r7, #8]
 800859e:	69fb      	ldr	r3, [r7, #28]
 80085a0:	4413      	add	r3, r2
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d006      	beq.n	80085b6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80085a8:	69fb      	ldr	r3, [r7, #28]
 80085aa:	3301      	adds	r3, #1
 80085ac:	61fb      	str	r3, [r7, #28]
 80085ae:	69fb      	ldr	r3, [r7, #28]
 80085b0:	2b0f      	cmp	r3, #15
 80085b2:	d9e9      	bls.n	8008588 <prvInitialiseNewTask+0x64>
 80085b4:	e000      	b.n	80085b8 <prvInitialiseNewTask+0x94>
			{
				break;
 80085b6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80085b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ba:	2200      	movs	r2, #0
 80085bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80085c0:	e003      	b.n	80085ca <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80085c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c4:	2200      	movs	r2, #0
 80085c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80085ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085cc:	2b37      	cmp	r3, #55	; 0x37
 80085ce:	d901      	bls.n	80085d4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80085d0:	2337      	movs	r3, #55	; 0x37
 80085d2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80085d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085d8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80085da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085de:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80085e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e2:	2200      	movs	r2, #0
 80085e4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80085e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e8:	3304      	adds	r3, #4
 80085ea:	4618      	mov	r0, r3
 80085ec:	f7fe fb64 	bl	8006cb8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80085f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f2:	3318      	adds	r3, #24
 80085f4:	4618      	mov	r0, r3
 80085f6:	f7fe fb5f 	bl	8006cb8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80085fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085fe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008602:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008608:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800860a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800860e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008612:	2200      	movs	r2, #0
 8008614:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800861a:	2200      	movs	r2, #0
 800861c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008622:	3354      	adds	r3, #84	; 0x54
 8008624:	2260      	movs	r2, #96	; 0x60
 8008626:	2100      	movs	r1, #0
 8008628:	4618      	mov	r0, r3
 800862a:	f002 fe85 	bl	800b338 <memset>
 800862e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008630:	4a0c      	ldr	r2, [pc, #48]	; (8008664 <prvInitialiseNewTask+0x140>)
 8008632:	659a      	str	r2, [r3, #88]	; 0x58
 8008634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008636:	4a0c      	ldr	r2, [pc, #48]	; (8008668 <prvInitialiseNewTask+0x144>)
 8008638:	65da      	str	r2, [r3, #92]	; 0x5c
 800863a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800863c:	4a0b      	ldr	r2, [pc, #44]	; (800866c <prvInitialiseNewTask+0x148>)
 800863e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008640:	683a      	ldr	r2, [r7, #0]
 8008642:	68f9      	ldr	r1, [r7, #12]
 8008644:	69b8      	ldr	r0, [r7, #24]
 8008646:	f001 fc69 	bl	8009f1c <pxPortInitialiseStack>
 800864a:	4602      	mov	r2, r0
 800864c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800864e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008652:	2b00      	cmp	r3, #0
 8008654:	d002      	beq.n	800865c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008658:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800865a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800865c:	bf00      	nop
 800865e:	3720      	adds	r7, #32
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}
 8008664:	0800b5ac 	.word	0x0800b5ac
 8008668:	0800b5cc 	.word	0x0800b5cc
 800866c:	0800b58c 	.word	0x0800b58c

08008670 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b082      	sub	sp, #8
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008678:	f001 fd7c 	bl	800a174 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800867c:	4b2d      	ldr	r3, [pc, #180]	; (8008734 <prvAddNewTaskToReadyList+0xc4>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	3301      	adds	r3, #1
 8008682:	4a2c      	ldr	r2, [pc, #176]	; (8008734 <prvAddNewTaskToReadyList+0xc4>)
 8008684:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008686:	4b2c      	ldr	r3, [pc, #176]	; (8008738 <prvAddNewTaskToReadyList+0xc8>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d109      	bne.n	80086a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800868e:	4a2a      	ldr	r2, [pc, #168]	; (8008738 <prvAddNewTaskToReadyList+0xc8>)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008694:	4b27      	ldr	r3, [pc, #156]	; (8008734 <prvAddNewTaskToReadyList+0xc4>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	2b01      	cmp	r3, #1
 800869a:	d110      	bne.n	80086be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800869c:	f000 fc18 	bl	8008ed0 <prvInitialiseTaskLists>
 80086a0:	e00d      	b.n	80086be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80086a2:	4b26      	ldr	r3, [pc, #152]	; (800873c <prvAddNewTaskToReadyList+0xcc>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d109      	bne.n	80086be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80086aa:	4b23      	ldr	r3, [pc, #140]	; (8008738 <prvAddNewTaskToReadyList+0xc8>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d802      	bhi.n	80086be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80086b8:	4a1f      	ldr	r2, [pc, #124]	; (8008738 <prvAddNewTaskToReadyList+0xc8>)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80086be:	4b20      	ldr	r3, [pc, #128]	; (8008740 <prvAddNewTaskToReadyList+0xd0>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	3301      	adds	r3, #1
 80086c4:	4a1e      	ldr	r2, [pc, #120]	; (8008740 <prvAddNewTaskToReadyList+0xd0>)
 80086c6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80086c8:	4b1d      	ldr	r3, [pc, #116]	; (8008740 <prvAddNewTaskToReadyList+0xd0>)
 80086ca:	681a      	ldr	r2, [r3, #0]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086d4:	4b1b      	ldr	r3, [pc, #108]	; (8008744 <prvAddNewTaskToReadyList+0xd4>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	429a      	cmp	r2, r3
 80086da:	d903      	bls.n	80086e4 <prvAddNewTaskToReadyList+0x74>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e0:	4a18      	ldr	r2, [pc, #96]	; (8008744 <prvAddNewTaskToReadyList+0xd4>)
 80086e2:	6013      	str	r3, [r2, #0]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086e8:	4613      	mov	r3, r2
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	4413      	add	r3, r2
 80086ee:	009b      	lsls	r3, r3, #2
 80086f0:	4a15      	ldr	r2, [pc, #84]	; (8008748 <prvAddNewTaskToReadyList+0xd8>)
 80086f2:	441a      	add	r2, r3
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	3304      	adds	r3, #4
 80086f8:	4619      	mov	r1, r3
 80086fa:	4610      	mov	r0, r2
 80086fc:	f7fe fae9 	bl	8006cd2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008700:	f001 fd68 	bl	800a1d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008704:	4b0d      	ldr	r3, [pc, #52]	; (800873c <prvAddNewTaskToReadyList+0xcc>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d00e      	beq.n	800872a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800870c:	4b0a      	ldr	r3, [pc, #40]	; (8008738 <prvAddNewTaskToReadyList+0xc8>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008716:	429a      	cmp	r2, r3
 8008718:	d207      	bcs.n	800872a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800871a:	4b0c      	ldr	r3, [pc, #48]	; (800874c <prvAddNewTaskToReadyList+0xdc>)
 800871c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008720:	601a      	str	r2, [r3, #0]
 8008722:	f3bf 8f4f 	dsb	sy
 8008726:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800872a:	bf00      	nop
 800872c:	3708      	adds	r7, #8
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
 8008732:	bf00      	nop
 8008734:	20000e64 	.word	0x20000e64
 8008738:	20000990 	.word	0x20000990
 800873c:	20000e70 	.word	0x20000e70
 8008740:	20000e80 	.word	0x20000e80
 8008744:	20000e6c 	.word	0x20000e6c
 8008748:	20000994 	.word	0x20000994
 800874c:	e000ed04 	.word	0xe000ed04

08008750 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b08a      	sub	sp, #40	; 0x28
 8008754:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008756:	2300      	movs	r3, #0
 8008758:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800875a:	2300      	movs	r3, #0
 800875c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800875e:	463a      	mov	r2, r7
 8008760:	1d39      	adds	r1, r7, #4
 8008762:	f107 0308 	add.w	r3, r7, #8
 8008766:	4618      	mov	r0, r3
 8008768:	f7fe fa52 	bl	8006c10 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800876c:	6839      	ldr	r1, [r7, #0]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	68ba      	ldr	r2, [r7, #8]
 8008772:	9202      	str	r2, [sp, #8]
 8008774:	9301      	str	r3, [sp, #4]
 8008776:	2300      	movs	r3, #0
 8008778:	9300      	str	r3, [sp, #0]
 800877a:	2300      	movs	r3, #0
 800877c:	460a      	mov	r2, r1
 800877e:	4924      	ldr	r1, [pc, #144]	; (8008810 <vTaskStartScheduler+0xc0>)
 8008780:	4824      	ldr	r0, [pc, #144]	; (8008814 <vTaskStartScheduler+0xc4>)
 8008782:	f7ff fe2c 	bl	80083de <xTaskCreateStatic>
 8008786:	4603      	mov	r3, r0
 8008788:	4a23      	ldr	r2, [pc, #140]	; (8008818 <vTaskStartScheduler+0xc8>)
 800878a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800878c:	4b22      	ldr	r3, [pc, #136]	; (8008818 <vTaskStartScheduler+0xc8>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d002      	beq.n	800879a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008794:	2301      	movs	r3, #1
 8008796:	617b      	str	r3, [r7, #20]
 8008798:	e001      	b.n	800879e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800879a:	2300      	movs	r3, #0
 800879c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	d102      	bne.n	80087aa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80087a4:	f001 f86c 	bl	8009880 <xTimerCreateTimerTask>
 80087a8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d11b      	bne.n	80087e8 <vTaskStartScheduler+0x98>
	__asm volatile
 80087b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b4:	f383 8811 	msr	BASEPRI, r3
 80087b8:	f3bf 8f6f 	isb	sy
 80087bc:	f3bf 8f4f 	dsb	sy
 80087c0:	613b      	str	r3, [r7, #16]
}
 80087c2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80087c4:	4b15      	ldr	r3, [pc, #84]	; (800881c <vTaskStartScheduler+0xcc>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	3354      	adds	r3, #84	; 0x54
 80087ca:	4a15      	ldr	r2, [pc, #84]	; (8008820 <vTaskStartScheduler+0xd0>)
 80087cc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80087ce:	4b15      	ldr	r3, [pc, #84]	; (8008824 <vTaskStartScheduler+0xd4>)
 80087d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80087d4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80087d6:	4b14      	ldr	r3, [pc, #80]	; (8008828 <vTaskStartScheduler+0xd8>)
 80087d8:	2201      	movs	r2, #1
 80087da:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80087dc:	4b13      	ldr	r3, [pc, #76]	; (800882c <vTaskStartScheduler+0xdc>)
 80087de:	2200      	movs	r2, #0
 80087e0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80087e2:	f001 fc25 	bl	800a030 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80087e6:	e00e      	b.n	8008806 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087ee:	d10a      	bne.n	8008806 <vTaskStartScheduler+0xb6>
	__asm volatile
 80087f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f4:	f383 8811 	msr	BASEPRI, r3
 80087f8:	f3bf 8f6f 	isb	sy
 80087fc:	f3bf 8f4f 	dsb	sy
 8008800:	60fb      	str	r3, [r7, #12]
}
 8008802:	bf00      	nop
 8008804:	e7fe      	b.n	8008804 <vTaskStartScheduler+0xb4>
}
 8008806:	bf00      	nop
 8008808:	3718      	adds	r7, #24
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
 800880e:	bf00      	nop
 8008810:	0800b4f0 	.word	0x0800b4f0
 8008814:	08008ea1 	.word	0x08008ea1
 8008818:	20000e88 	.word	0x20000e88
 800881c:	20000990 	.word	0x20000990
 8008820:	20000100 	.word	0x20000100
 8008824:	20000e84 	.word	0x20000e84
 8008828:	20000e70 	.word	0x20000e70
 800882c:	20000e68 	.word	0x20000e68

08008830 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008830:	b480      	push	{r7}
 8008832:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008834:	4b04      	ldr	r3, [pc, #16]	; (8008848 <vTaskSuspendAll+0x18>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	3301      	adds	r3, #1
 800883a:	4a03      	ldr	r2, [pc, #12]	; (8008848 <vTaskSuspendAll+0x18>)
 800883c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800883e:	bf00      	nop
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr
 8008848:	20000e8c 	.word	0x20000e8c

0800884c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b084      	sub	sp, #16
 8008850:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008852:	2300      	movs	r3, #0
 8008854:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008856:	2300      	movs	r3, #0
 8008858:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800885a:	4b42      	ldr	r3, [pc, #264]	; (8008964 <xTaskResumeAll+0x118>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d10a      	bne.n	8008878 <xTaskResumeAll+0x2c>
	__asm volatile
 8008862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008866:	f383 8811 	msr	BASEPRI, r3
 800886a:	f3bf 8f6f 	isb	sy
 800886e:	f3bf 8f4f 	dsb	sy
 8008872:	603b      	str	r3, [r7, #0]
}
 8008874:	bf00      	nop
 8008876:	e7fe      	b.n	8008876 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008878:	f001 fc7c 	bl	800a174 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800887c:	4b39      	ldr	r3, [pc, #228]	; (8008964 <xTaskResumeAll+0x118>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	3b01      	subs	r3, #1
 8008882:	4a38      	ldr	r2, [pc, #224]	; (8008964 <xTaskResumeAll+0x118>)
 8008884:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008886:	4b37      	ldr	r3, [pc, #220]	; (8008964 <xTaskResumeAll+0x118>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d162      	bne.n	8008954 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800888e:	4b36      	ldr	r3, [pc, #216]	; (8008968 <xTaskResumeAll+0x11c>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d05e      	beq.n	8008954 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008896:	e02f      	b.n	80088f8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008898:	4b34      	ldr	r3, [pc, #208]	; (800896c <xTaskResumeAll+0x120>)
 800889a:	68db      	ldr	r3, [r3, #12]
 800889c:	68db      	ldr	r3, [r3, #12]
 800889e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	3318      	adds	r3, #24
 80088a4:	4618      	mov	r0, r3
 80088a6:	f7fe fa71 	bl	8006d8c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	3304      	adds	r3, #4
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7fe fa6c 	bl	8006d8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088b8:	4b2d      	ldr	r3, [pc, #180]	; (8008970 <xTaskResumeAll+0x124>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	429a      	cmp	r2, r3
 80088be:	d903      	bls.n	80088c8 <xTaskResumeAll+0x7c>
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088c4:	4a2a      	ldr	r2, [pc, #168]	; (8008970 <xTaskResumeAll+0x124>)
 80088c6:	6013      	str	r3, [r2, #0]
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088cc:	4613      	mov	r3, r2
 80088ce:	009b      	lsls	r3, r3, #2
 80088d0:	4413      	add	r3, r2
 80088d2:	009b      	lsls	r3, r3, #2
 80088d4:	4a27      	ldr	r2, [pc, #156]	; (8008974 <xTaskResumeAll+0x128>)
 80088d6:	441a      	add	r2, r3
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	3304      	adds	r3, #4
 80088dc:	4619      	mov	r1, r3
 80088de:	4610      	mov	r0, r2
 80088e0:	f7fe f9f7 	bl	8006cd2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088e8:	4b23      	ldr	r3, [pc, #140]	; (8008978 <xTaskResumeAll+0x12c>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ee:	429a      	cmp	r2, r3
 80088f0:	d302      	bcc.n	80088f8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80088f2:	4b22      	ldr	r3, [pc, #136]	; (800897c <xTaskResumeAll+0x130>)
 80088f4:	2201      	movs	r2, #1
 80088f6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80088f8:	4b1c      	ldr	r3, [pc, #112]	; (800896c <xTaskResumeAll+0x120>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d1cb      	bne.n	8008898 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d001      	beq.n	800890a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008906:	f000 fb85 	bl	8009014 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800890a:	4b1d      	ldr	r3, [pc, #116]	; (8008980 <xTaskResumeAll+0x134>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d010      	beq.n	8008938 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008916:	f000 f847 	bl	80089a8 <xTaskIncrementTick>
 800891a:	4603      	mov	r3, r0
 800891c:	2b00      	cmp	r3, #0
 800891e:	d002      	beq.n	8008926 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008920:	4b16      	ldr	r3, [pc, #88]	; (800897c <xTaskResumeAll+0x130>)
 8008922:	2201      	movs	r2, #1
 8008924:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	3b01      	subs	r3, #1
 800892a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d1f1      	bne.n	8008916 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008932:	4b13      	ldr	r3, [pc, #76]	; (8008980 <xTaskResumeAll+0x134>)
 8008934:	2200      	movs	r2, #0
 8008936:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008938:	4b10      	ldr	r3, [pc, #64]	; (800897c <xTaskResumeAll+0x130>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d009      	beq.n	8008954 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008940:	2301      	movs	r3, #1
 8008942:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008944:	4b0f      	ldr	r3, [pc, #60]	; (8008984 <xTaskResumeAll+0x138>)
 8008946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800894a:	601a      	str	r2, [r3, #0]
 800894c:	f3bf 8f4f 	dsb	sy
 8008950:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008954:	f001 fc3e 	bl	800a1d4 <vPortExitCritical>

	return xAlreadyYielded;
 8008958:	68bb      	ldr	r3, [r7, #8]
}
 800895a:	4618      	mov	r0, r3
 800895c:	3710      	adds	r7, #16
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop
 8008964:	20000e8c 	.word	0x20000e8c
 8008968:	20000e64 	.word	0x20000e64
 800896c:	20000e24 	.word	0x20000e24
 8008970:	20000e6c 	.word	0x20000e6c
 8008974:	20000994 	.word	0x20000994
 8008978:	20000990 	.word	0x20000990
 800897c:	20000e78 	.word	0x20000e78
 8008980:	20000e74 	.word	0x20000e74
 8008984:	e000ed04 	.word	0xe000ed04

08008988 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008988:	b480      	push	{r7}
 800898a:	b083      	sub	sp, #12
 800898c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800898e:	4b05      	ldr	r3, [pc, #20]	; (80089a4 <xTaskGetTickCount+0x1c>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008994:	687b      	ldr	r3, [r7, #4]
}
 8008996:	4618      	mov	r0, r3
 8008998:	370c      	adds	r7, #12
 800899a:	46bd      	mov	sp, r7
 800899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a0:	4770      	bx	lr
 80089a2:	bf00      	nop
 80089a4:	20000e68 	.word	0x20000e68

080089a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b086      	sub	sp, #24
 80089ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80089ae:	2300      	movs	r3, #0
 80089b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089b2:	4b4f      	ldr	r3, [pc, #316]	; (8008af0 <xTaskIncrementTick+0x148>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	f040 808f 	bne.w	8008ada <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80089bc:	4b4d      	ldr	r3, [pc, #308]	; (8008af4 <xTaskIncrementTick+0x14c>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	3301      	adds	r3, #1
 80089c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80089c4:	4a4b      	ldr	r2, [pc, #300]	; (8008af4 <xTaskIncrementTick+0x14c>)
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d120      	bne.n	8008a12 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80089d0:	4b49      	ldr	r3, [pc, #292]	; (8008af8 <xTaskIncrementTick+0x150>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d00a      	beq.n	80089f0 <xTaskIncrementTick+0x48>
	__asm volatile
 80089da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089de:	f383 8811 	msr	BASEPRI, r3
 80089e2:	f3bf 8f6f 	isb	sy
 80089e6:	f3bf 8f4f 	dsb	sy
 80089ea:	603b      	str	r3, [r7, #0]
}
 80089ec:	bf00      	nop
 80089ee:	e7fe      	b.n	80089ee <xTaskIncrementTick+0x46>
 80089f0:	4b41      	ldr	r3, [pc, #260]	; (8008af8 <xTaskIncrementTick+0x150>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	60fb      	str	r3, [r7, #12]
 80089f6:	4b41      	ldr	r3, [pc, #260]	; (8008afc <xTaskIncrementTick+0x154>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4a3f      	ldr	r2, [pc, #252]	; (8008af8 <xTaskIncrementTick+0x150>)
 80089fc:	6013      	str	r3, [r2, #0]
 80089fe:	4a3f      	ldr	r2, [pc, #252]	; (8008afc <xTaskIncrementTick+0x154>)
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	6013      	str	r3, [r2, #0]
 8008a04:	4b3e      	ldr	r3, [pc, #248]	; (8008b00 <xTaskIncrementTick+0x158>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	3301      	adds	r3, #1
 8008a0a:	4a3d      	ldr	r2, [pc, #244]	; (8008b00 <xTaskIncrementTick+0x158>)
 8008a0c:	6013      	str	r3, [r2, #0]
 8008a0e:	f000 fb01 	bl	8009014 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008a12:	4b3c      	ldr	r3, [pc, #240]	; (8008b04 <xTaskIncrementTick+0x15c>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	693a      	ldr	r2, [r7, #16]
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d349      	bcc.n	8008ab0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a1c:	4b36      	ldr	r3, [pc, #216]	; (8008af8 <xTaskIncrementTick+0x150>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d104      	bne.n	8008a30 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a26:	4b37      	ldr	r3, [pc, #220]	; (8008b04 <xTaskIncrementTick+0x15c>)
 8008a28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a2c:	601a      	str	r2, [r3, #0]
					break;
 8008a2e:	e03f      	b.n	8008ab0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a30:	4b31      	ldr	r3, [pc, #196]	; (8008af8 <xTaskIncrementTick+0x150>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	68db      	ldr	r3, [r3, #12]
 8008a36:	68db      	ldr	r3, [r3, #12]
 8008a38:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008a40:	693a      	ldr	r2, [r7, #16]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d203      	bcs.n	8008a50 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008a48:	4a2e      	ldr	r2, [pc, #184]	; (8008b04 <xTaskIncrementTick+0x15c>)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008a4e:	e02f      	b.n	8008ab0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	3304      	adds	r3, #4
 8008a54:	4618      	mov	r0, r3
 8008a56:	f7fe f999 	bl	8006d8c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d004      	beq.n	8008a6c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	3318      	adds	r3, #24
 8008a66:	4618      	mov	r0, r3
 8008a68:	f7fe f990 	bl	8006d8c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a70:	4b25      	ldr	r3, [pc, #148]	; (8008b08 <xTaskIncrementTick+0x160>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d903      	bls.n	8008a80 <xTaskIncrementTick+0xd8>
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a7c:	4a22      	ldr	r2, [pc, #136]	; (8008b08 <xTaskIncrementTick+0x160>)
 8008a7e:	6013      	str	r3, [r2, #0]
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a84:	4613      	mov	r3, r2
 8008a86:	009b      	lsls	r3, r3, #2
 8008a88:	4413      	add	r3, r2
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	4a1f      	ldr	r2, [pc, #124]	; (8008b0c <xTaskIncrementTick+0x164>)
 8008a8e:	441a      	add	r2, r3
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	3304      	adds	r3, #4
 8008a94:	4619      	mov	r1, r3
 8008a96:	4610      	mov	r0, r2
 8008a98:	f7fe f91b 	bl	8006cd2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aa0:	4b1b      	ldr	r3, [pc, #108]	; (8008b10 <xTaskIncrementTick+0x168>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d3b8      	bcc.n	8008a1c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008aaa:	2301      	movs	r3, #1
 8008aac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008aae:	e7b5      	b.n	8008a1c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008ab0:	4b17      	ldr	r3, [pc, #92]	; (8008b10 <xTaskIncrementTick+0x168>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ab6:	4915      	ldr	r1, [pc, #84]	; (8008b0c <xTaskIncrementTick+0x164>)
 8008ab8:	4613      	mov	r3, r2
 8008aba:	009b      	lsls	r3, r3, #2
 8008abc:	4413      	add	r3, r2
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	440b      	add	r3, r1
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	d901      	bls.n	8008acc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008ac8:	2301      	movs	r3, #1
 8008aca:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008acc:	4b11      	ldr	r3, [pc, #68]	; (8008b14 <xTaskIncrementTick+0x16c>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d007      	beq.n	8008ae4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	617b      	str	r3, [r7, #20]
 8008ad8:	e004      	b.n	8008ae4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008ada:	4b0f      	ldr	r3, [pc, #60]	; (8008b18 <xTaskIncrementTick+0x170>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	3301      	adds	r3, #1
 8008ae0:	4a0d      	ldr	r2, [pc, #52]	; (8008b18 <xTaskIncrementTick+0x170>)
 8008ae2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008ae4:	697b      	ldr	r3, [r7, #20]
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3718      	adds	r7, #24
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
 8008aee:	bf00      	nop
 8008af0:	20000e8c 	.word	0x20000e8c
 8008af4:	20000e68 	.word	0x20000e68
 8008af8:	20000e1c 	.word	0x20000e1c
 8008afc:	20000e20 	.word	0x20000e20
 8008b00:	20000e7c 	.word	0x20000e7c
 8008b04:	20000e84 	.word	0x20000e84
 8008b08:	20000e6c 	.word	0x20000e6c
 8008b0c:	20000994 	.word	0x20000994
 8008b10:	20000990 	.word	0x20000990
 8008b14:	20000e78 	.word	0x20000e78
 8008b18:	20000e74 	.word	0x20000e74

08008b1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b085      	sub	sp, #20
 8008b20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008b22:	4b2a      	ldr	r3, [pc, #168]	; (8008bcc <vTaskSwitchContext+0xb0>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d003      	beq.n	8008b32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008b2a:	4b29      	ldr	r3, [pc, #164]	; (8008bd0 <vTaskSwitchContext+0xb4>)
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008b30:	e046      	b.n	8008bc0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008b32:	4b27      	ldr	r3, [pc, #156]	; (8008bd0 <vTaskSwitchContext+0xb4>)
 8008b34:	2200      	movs	r2, #0
 8008b36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b38:	4b26      	ldr	r3, [pc, #152]	; (8008bd4 <vTaskSwitchContext+0xb8>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	60fb      	str	r3, [r7, #12]
 8008b3e:	e010      	b.n	8008b62 <vTaskSwitchContext+0x46>
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d10a      	bne.n	8008b5c <vTaskSwitchContext+0x40>
	__asm volatile
 8008b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b4a:	f383 8811 	msr	BASEPRI, r3
 8008b4e:	f3bf 8f6f 	isb	sy
 8008b52:	f3bf 8f4f 	dsb	sy
 8008b56:	607b      	str	r3, [r7, #4]
}
 8008b58:	bf00      	nop
 8008b5a:	e7fe      	b.n	8008b5a <vTaskSwitchContext+0x3e>
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	3b01      	subs	r3, #1
 8008b60:	60fb      	str	r3, [r7, #12]
 8008b62:	491d      	ldr	r1, [pc, #116]	; (8008bd8 <vTaskSwitchContext+0xbc>)
 8008b64:	68fa      	ldr	r2, [r7, #12]
 8008b66:	4613      	mov	r3, r2
 8008b68:	009b      	lsls	r3, r3, #2
 8008b6a:	4413      	add	r3, r2
 8008b6c:	009b      	lsls	r3, r3, #2
 8008b6e:	440b      	add	r3, r1
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d0e4      	beq.n	8008b40 <vTaskSwitchContext+0x24>
 8008b76:	68fa      	ldr	r2, [r7, #12]
 8008b78:	4613      	mov	r3, r2
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	4413      	add	r3, r2
 8008b7e:	009b      	lsls	r3, r3, #2
 8008b80:	4a15      	ldr	r2, [pc, #84]	; (8008bd8 <vTaskSwitchContext+0xbc>)
 8008b82:	4413      	add	r3, r2
 8008b84:	60bb      	str	r3, [r7, #8]
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	685a      	ldr	r2, [r3, #4]
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	605a      	str	r2, [r3, #4]
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	685a      	ldr	r2, [r3, #4]
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	3308      	adds	r3, #8
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d104      	bne.n	8008ba6 <vTaskSwitchContext+0x8a>
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	685a      	ldr	r2, [r3, #4]
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	605a      	str	r2, [r3, #4]
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	68db      	ldr	r3, [r3, #12]
 8008bac:	4a0b      	ldr	r2, [pc, #44]	; (8008bdc <vTaskSwitchContext+0xc0>)
 8008bae:	6013      	str	r3, [r2, #0]
 8008bb0:	4a08      	ldr	r2, [pc, #32]	; (8008bd4 <vTaskSwitchContext+0xb8>)
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008bb6:	4b09      	ldr	r3, [pc, #36]	; (8008bdc <vTaskSwitchContext+0xc0>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	3354      	adds	r3, #84	; 0x54
 8008bbc:	4a08      	ldr	r2, [pc, #32]	; (8008be0 <vTaskSwitchContext+0xc4>)
 8008bbe:	6013      	str	r3, [r2, #0]
}
 8008bc0:	bf00      	nop
 8008bc2:	3714      	adds	r7, #20
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr
 8008bcc:	20000e8c 	.word	0x20000e8c
 8008bd0:	20000e78 	.word	0x20000e78
 8008bd4:	20000e6c 	.word	0x20000e6c
 8008bd8:	20000994 	.word	0x20000994
 8008bdc:	20000990 	.word	0x20000990
 8008be0:	20000100 	.word	0x20000100

08008be4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d10a      	bne.n	8008c0a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf8:	f383 8811 	msr	BASEPRI, r3
 8008bfc:	f3bf 8f6f 	isb	sy
 8008c00:	f3bf 8f4f 	dsb	sy
 8008c04:	60fb      	str	r3, [r7, #12]
}
 8008c06:	bf00      	nop
 8008c08:	e7fe      	b.n	8008c08 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c0a:	4b07      	ldr	r3, [pc, #28]	; (8008c28 <vTaskPlaceOnEventList+0x44>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	3318      	adds	r3, #24
 8008c10:	4619      	mov	r1, r3
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f7fe f881 	bl	8006d1a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008c18:	2101      	movs	r1, #1
 8008c1a:	6838      	ldr	r0, [r7, #0]
 8008c1c:	f000 fddc 	bl	80097d8 <prvAddCurrentTaskToDelayedList>
}
 8008c20:	bf00      	nop
 8008c22:	3710      	adds	r7, #16
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}
 8008c28:	20000990 	.word	0x20000990

08008c2c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b086      	sub	sp, #24
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	60f8      	str	r0, [r7, #12]
 8008c34:	60b9      	str	r1, [r7, #8]
 8008c36:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d10a      	bne.n	8008c54 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c42:	f383 8811 	msr	BASEPRI, r3
 8008c46:	f3bf 8f6f 	isb	sy
 8008c4a:	f3bf 8f4f 	dsb	sy
 8008c4e:	617b      	str	r3, [r7, #20]
}
 8008c50:	bf00      	nop
 8008c52:	e7fe      	b.n	8008c52 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c54:	4b0a      	ldr	r3, [pc, #40]	; (8008c80 <vTaskPlaceOnEventListRestricted+0x54>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	3318      	adds	r3, #24
 8008c5a:	4619      	mov	r1, r3
 8008c5c:	68f8      	ldr	r0, [r7, #12]
 8008c5e:	f7fe f838 	bl	8006cd2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d002      	beq.n	8008c6e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008c68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c6c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008c6e:	6879      	ldr	r1, [r7, #4]
 8008c70:	68b8      	ldr	r0, [r7, #8]
 8008c72:	f000 fdb1 	bl	80097d8 <prvAddCurrentTaskToDelayedList>
	}
 8008c76:	bf00      	nop
 8008c78:	3718      	adds	r7, #24
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}
 8008c7e:	bf00      	nop
 8008c80:	20000990 	.word	0x20000990

08008c84 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b086      	sub	sp, #24
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	68db      	ldr	r3, [r3, #12]
 8008c90:	68db      	ldr	r3, [r3, #12]
 8008c92:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d10a      	bne.n	8008cb0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c9e:	f383 8811 	msr	BASEPRI, r3
 8008ca2:	f3bf 8f6f 	isb	sy
 8008ca6:	f3bf 8f4f 	dsb	sy
 8008caa:	60fb      	str	r3, [r7, #12]
}
 8008cac:	bf00      	nop
 8008cae:	e7fe      	b.n	8008cae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	3318      	adds	r3, #24
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f7fe f869 	bl	8006d8c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008cba:	4b1e      	ldr	r3, [pc, #120]	; (8008d34 <xTaskRemoveFromEventList+0xb0>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d11d      	bne.n	8008cfe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	3304      	adds	r3, #4
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f7fe f860 	bl	8006d8c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cd0:	4b19      	ldr	r3, [pc, #100]	; (8008d38 <xTaskRemoveFromEventList+0xb4>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d903      	bls.n	8008ce0 <xTaskRemoveFromEventList+0x5c>
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cdc:	4a16      	ldr	r2, [pc, #88]	; (8008d38 <xTaskRemoveFromEventList+0xb4>)
 8008cde:	6013      	str	r3, [r2, #0]
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ce4:	4613      	mov	r3, r2
 8008ce6:	009b      	lsls	r3, r3, #2
 8008ce8:	4413      	add	r3, r2
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	4a13      	ldr	r2, [pc, #76]	; (8008d3c <xTaskRemoveFromEventList+0xb8>)
 8008cee:	441a      	add	r2, r3
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	3304      	adds	r3, #4
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	4610      	mov	r0, r2
 8008cf8:	f7fd ffeb 	bl	8006cd2 <vListInsertEnd>
 8008cfc:	e005      	b.n	8008d0a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	3318      	adds	r3, #24
 8008d02:	4619      	mov	r1, r3
 8008d04:	480e      	ldr	r0, [pc, #56]	; (8008d40 <xTaskRemoveFromEventList+0xbc>)
 8008d06:	f7fd ffe4 	bl	8006cd2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d0e:	4b0d      	ldr	r3, [pc, #52]	; (8008d44 <xTaskRemoveFromEventList+0xc0>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d905      	bls.n	8008d24 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008d18:	2301      	movs	r3, #1
 8008d1a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008d1c:	4b0a      	ldr	r3, [pc, #40]	; (8008d48 <xTaskRemoveFromEventList+0xc4>)
 8008d1e:	2201      	movs	r2, #1
 8008d20:	601a      	str	r2, [r3, #0]
 8008d22:	e001      	b.n	8008d28 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008d24:	2300      	movs	r3, #0
 8008d26:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008d28:	697b      	ldr	r3, [r7, #20]
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3718      	adds	r7, #24
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}
 8008d32:	bf00      	nop
 8008d34:	20000e8c 	.word	0x20000e8c
 8008d38:	20000e6c 	.word	0x20000e6c
 8008d3c:	20000994 	.word	0x20000994
 8008d40:	20000e24 	.word	0x20000e24
 8008d44:	20000990 	.word	0x20000990
 8008d48:	20000e78 	.word	0x20000e78

08008d4c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b084      	sub	sp, #16
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d10a      	bne.n	8008d70 <vTaskSetTimeOutState+0x24>
	__asm volatile
 8008d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d5e:	f383 8811 	msr	BASEPRI, r3
 8008d62:	f3bf 8f6f 	isb	sy
 8008d66:	f3bf 8f4f 	dsb	sy
 8008d6a:	60fb      	str	r3, [r7, #12]
}
 8008d6c:	bf00      	nop
 8008d6e:	e7fe      	b.n	8008d6e <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8008d70:	f001 fa00 	bl	800a174 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008d74:	4b06      	ldr	r3, [pc, #24]	; (8008d90 <vTaskSetTimeOutState+0x44>)
 8008d76:	681a      	ldr	r2, [r3, #0]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8008d7c:	4b05      	ldr	r3, [pc, #20]	; (8008d94 <vTaskSetTimeOutState+0x48>)
 8008d7e:	681a      	ldr	r2, [r3, #0]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8008d84:	f001 fa26 	bl	800a1d4 <vPortExitCritical>
}
 8008d88:	bf00      	nop
 8008d8a:	3710      	adds	r7, #16
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}
 8008d90:	20000e7c 	.word	0x20000e7c
 8008d94:	20000e68 	.word	0x20000e68

08008d98 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b083      	sub	sp, #12
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008da0:	4b06      	ldr	r3, [pc, #24]	; (8008dbc <vTaskInternalSetTimeOutState+0x24>)
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008da8:	4b05      	ldr	r3, [pc, #20]	; (8008dc0 <vTaskInternalSetTimeOutState+0x28>)
 8008daa:	681a      	ldr	r2, [r3, #0]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	605a      	str	r2, [r3, #4]
}
 8008db0:	bf00      	nop
 8008db2:	370c      	adds	r7, #12
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr
 8008dbc:	20000e7c 	.word	0x20000e7c
 8008dc0:	20000e68 	.word	0x20000e68

08008dc4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b088      	sub	sp, #32
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d10a      	bne.n	8008dea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd8:	f383 8811 	msr	BASEPRI, r3
 8008ddc:	f3bf 8f6f 	isb	sy
 8008de0:	f3bf 8f4f 	dsb	sy
 8008de4:	613b      	str	r3, [r7, #16]
}
 8008de6:	bf00      	nop
 8008de8:	e7fe      	b.n	8008de8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d10a      	bne.n	8008e06 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df4:	f383 8811 	msr	BASEPRI, r3
 8008df8:	f3bf 8f6f 	isb	sy
 8008dfc:	f3bf 8f4f 	dsb	sy
 8008e00:	60fb      	str	r3, [r7, #12]
}
 8008e02:	bf00      	nop
 8008e04:	e7fe      	b.n	8008e04 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008e06:	f001 f9b5 	bl	800a174 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008e0a:	4b1d      	ldr	r3, [pc, #116]	; (8008e80 <xTaskCheckForTimeOut+0xbc>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	69ba      	ldr	r2, [r7, #24]
 8008e16:	1ad3      	subs	r3, r2, r3
 8008e18:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e22:	d102      	bne.n	8008e2a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008e24:	2300      	movs	r3, #0
 8008e26:	61fb      	str	r3, [r7, #28]
 8008e28:	e023      	b.n	8008e72 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681a      	ldr	r2, [r3, #0]
 8008e2e:	4b15      	ldr	r3, [pc, #84]	; (8008e84 <xTaskCheckForTimeOut+0xc0>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d007      	beq.n	8008e46 <xTaskCheckForTimeOut+0x82>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	69ba      	ldr	r2, [r7, #24]
 8008e3c:	429a      	cmp	r2, r3
 8008e3e:	d302      	bcc.n	8008e46 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008e40:	2301      	movs	r3, #1
 8008e42:	61fb      	str	r3, [r7, #28]
 8008e44:	e015      	b.n	8008e72 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	697a      	ldr	r2, [r7, #20]
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d20b      	bcs.n	8008e68 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	1ad2      	subs	r2, r2, r3
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f7ff ff9b 	bl	8008d98 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008e62:	2300      	movs	r3, #0
 8008e64:	61fb      	str	r3, [r7, #28]
 8008e66:	e004      	b.n	8008e72 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008e72:	f001 f9af 	bl	800a1d4 <vPortExitCritical>

	return xReturn;
 8008e76:	69fb      	ldr	r3, [r7, #28]
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3720      	adds	r7, #32
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}
 8008e80:	20000e68 	.word	0x20000e68
 8008e84:	20000e7c 	.word	0x20000e7c

08008e88 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008e88:	b480      	push	{r7}
 8008e8a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008e8c:	4b03      	ldr	r3, [pc, #12]	; (8008e9c <vTaskMissedYield+0x14>)
 8008e8e:	2201      	movs	r2, #1
 8008e90:	601a      	str	r2, [r3, #0]
}
 8008e92:	bf00      	nop
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr
 8008e9c:	20000e78 	.word	0x20000e78

08008ea0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b082      	sub	sp, #8
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008ea8:	f000 f852 	bl	8008f50 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008eac:	4b06      	ldr	r3, [pc, #24]	; (8008ec8 <prvIdleTask+0x28>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d9f9      	bls.n	8008ea8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008eb4:	4b05      	ldr	r3, [pc, #20]	; (8008ecc <prvIdleTask+0x2c>)
 8008eb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eba:	601a      	str	r2, [r3, #0]
 8008ebc:	f3bf 8f4f 	dsb	sy
 8008ec0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008ec4:	e7f0      	b.n	8008ea8 <prvIdleTask+0x8>
 8008ec6:	bf00      	nop
 8008ec8:	20000994 	.word	0x20000994
 8008ecc:	e000ed04 	.word	0xe000ed04

08008ed0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b082      	sub	sp, #8
 8008ed4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	607b      	str	r3, [r7, #4]
 8008eda:	e00c      	b.n	8008ef6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008edc:	687a      	ldr	r2, [r7, #4]
 8008ede:	4613      	mov	r3, r2
 8008ee0:	009b      	lsls	r3, r3, #2
 8008ee2:	4413      	add	r3, r2
 8008ee4:	009b      	lsls	r3, r3, #2
 8008ee6:	4a12      	ldr	r2, [pc, #72]	; (8008f30 <prvInitialiseTaskLists+0x60>)
 8008ee8:	4413      	add	r3, r2
 8008eea:	4618      	mov	r0, r3
 8008eec:	f7fd fec4 	bl	8006c78 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	607b      	str	r3, [r7, #4]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2b37      	cmp	r3, #55	; 0x37
 8008efa:	d9ef      	bls.n	8008edc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008efc:	480d      	ldr	r0, [pc, #52]	; (8008f34 <prvInitialiseTaskLists+0x64>)
 8008efe:	f7fd febb 	bl	8006c78 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008f02:	480d      	ldr	r0, [pc, #52]	; (8008f38 <prvInitialiseTaskLists+0x68>)
 8008f04:	f7fd feb8 	bl	8006c78 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008f08:	480c      	ldr	r0, [pc, #48]	; (8008f3c <prvInitialiseTaskLists+0x6c>)
 8008f0a:	f7fd feb5 	bl	8006c78 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008f0e:	480c      	ldr	r0, [pc, #48]	; (8008f40 <prvInitialiseTaskLists+0x70>)
 8008f10:	f7fd feb2 	bl	8006c78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008f14:	480b      	ldr	r0, [pc, #44]	; (8008f44 <prvInitialiseTaskLists+0x74>)
 8008f16:	f7fd feaf 	bl	8006c78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008f1a:	4b0b      	ldr	r3, [pc, #44]	; (8008f48 <prvInitialiseTaskLists+0x78>)
 8008f1c:	4a05      	ldr	r2, [pc, #20]	; (8008f34 <prvInitialiseTaskLists+0x64>)
 8008f1e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008f20:	4b0a      	ldr	r3, [pc, #40]	; (8008f4c <prvInitialiseTaskLists+0x7c>)
 8008f22:	4a05      	ldr	r2, [pc, #20]	; (8008f38 <prvInitialiseTaskLists+0x68>)
 8008f24:	601a      	str	r2, [r3, #0]
}
 8008f26:	bf00      	nop
 8008f28:	3708      	adds	r7, #8
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
 8008f2e:	bf00      	nop
 8008f30:	20000994 	.word	0x20000994
 8008f34:	20000df4 	.word	0x20000df4
 8008f38:	20000e08 	.word	0x20000e08
 8008f3c:	20000e24 	.word	0x20000e24
 8008f40:	20000e38 	.word	0x20000e38
 8008f44:	20000e50 	.word	0x20000e50
 8008f48:	20000e1c 	.word	0x20000e1c
 8008f4c:	20000e20 	.word	0x20000e20

08008f50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b082      	sub	sp, #8
 8008f54:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f56:	e019      	b.n	8008f8c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008f58:	f001 f90c 	bl	800a174 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f5c:	4b10      	ldr	r3, [pc, #64]	; (8008fa0 <prvCheckTasksWaitingTermination+0x50>)
 8008f5e:	68db      	ldr	r3, [r3, #12]
 8008f60:	68db      	ldr	r3, [r3, #12]
 8008f62:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	3304      	adds	r3, #4
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f7fd ff0f 	bl	8006d8c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008f6e:	4b0d      	ldr	r3, [pc, #52]	; (8008fa4 <prvCheckTasksWaitingTermination+0x54>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	3b01      	subs	r3, #1
 8008f74:	4a0b      	ldr	r2, [pc, #44]	; (8008fa4 <prvCheckTasksWaitingTermination+0x54>)
 8008f76:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008f78:	4b0b      	ldr	r3, [pc, #44]	; (8008fa8 <prvCheckTasksWaitingTermination+0x58>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	3b01      	subs	r3, #1
 8008f7e:	4a0a      	ldr	r2, [pc, #40]	; (8008fa8 <prvCheckTasksWaitingTermination+0x58>)
 8008f80:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008f82:	f001 f927 	bl	800a1d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 f810 	bl	8008fac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f8c:	4b06      	ldr	r3, [pc, #24]	; (8008fa8 <prvCheckTasksWaitingTermination+0x58>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d1e1      	bne.n	8008f58 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008f94:	bf00      	nop
 8008f96:	bf00      	nop
 8008f98:	3708      	adds	r7, #8
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
 8008f9e:	bf00      	nop
 8008fa0:	20000e38 	.word	0x20000e38
 8008fa4:	20000e64 	.word	0x20000e64
 8008fa8:	20000e4c 	.word	0x20000e4c

08008fac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b084      	sub	sp, #16
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	3354      	adds	r3, #84	; 0x54
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f002 f9d3 	bl	800b364 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d108      	bne.n	8008fda <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f001 fabf 	bl	800a550 <vPortFree>
				vPortFree( pxTCB );
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f001 fabc 	bl	800a550 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008fd8:	e018      	b.n	800900c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	d103      	bne.n	8008fec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f001 fab3 	bl	800a550 <vPortFree>
	}
 8008fea:	e00f      	b.n	800900c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008ff2:	2b02      	cmp	r3, #2
 8008ff4:	d00a      	beq.n	800900c <prvDeleteTCB+0x60>
	__asm volatile
 8008ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ffa:	f383 8811 	msr	BASEPRI, r3
 8008ffe:	f3bf 8f6f 	isb	sy
 8009002:	f3bf 8f4f 	dsb	sy
 8009006:	60fb      	str	r3, [r7, #12]
}
 8009008:	bf00      	nop
 800900a:	e7fe      	b.n	800900a <prvDeleteTCB+0x5e>
	}
 800900c:	bf00      	nop
 800900e:	3710      	adds	r7, #16
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009014:	b480      	push	{r7}
 8009016:	b083      	sub	sp, #12
 8009018:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800901a:	4b0c      	ldr	r3, [pc, #48]	; (800904c <prvResetNextTaskUnblockTime+0x38>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d104      	bne.n	800902e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009024:	4b0a      	ldr	r3, [pc, #40]	; (8009050 <prvResetNextTaskUnblockTime+0x3c>)
 8009026:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800902a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800902c:	e008      	b.n	8009040 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800902e:	4b07      	ldr	r3, [pc, #28]	; (800904c <prvResetNextTaskUnblockTime+0x38>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	68db      	ldr	r3, [r3, #12]
 8009036:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	4a04      	ldr	r2, [pc, #16]	; (8009050 <prvResetNextTaskUnblockTime+0x3c>)
 800903e:	6013      	str	r3, [r2, #0]
}
 8009040:	bf00      	nop
 8009042:	370c      	adds	r7, #12
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr
 800904c:	20000e1c 	.word	0x20000e1c
 8009050:	20000e84 	.word	0x20000e84

08009054 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009054:	b480      	push	{r7}
 8009056:	b083      	sub	sp, #12
 8009058:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800905a:	4b05      	ldr	r3, [pc, #20]	; (8009070 <xTaskGetCurrentTaskHandle+0x1c>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009060:	687b      	ldr	r3, [r7, #4]
	}
 8009062:	4618      	mov	r0, r3
 8009064:	370c      	adds	r7, #12
 8009066:	46bd      	mov	sp, r7
 8009068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906c:	4770      	bx	lr
 800906e:	bf00      	nop
 8009070:	20000990 	.word	0x20000990

08009074 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009074:	b480      	push	{r7}
 8009076:	b083      	sub	sp, #12
 8009078:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800907a:	4b0b      	ldr	r3, [pc, #44]	; (80090a8 <xTaskGetSchedulerState+0x34>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d102      	bne.n	8009088 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009082:	2301      	movs	r3, #1
 8009084:	607b      	str	r3, [r7, #4]
 8009086:	e008      	b.n	800909a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009088:	4b08      	ldr	r3, [pc, #32]	; (80090ac <xTaskGetSchedulerState+0x38>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d102      	bne.n	8009096 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009090:	2302      	movs	r3, #2
 8009092:	607b      	str	r3, [r7, #4]
 8009094:	e001      	b.n	800909a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009096:	2300      	movs	r3, #0
 8009098:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800909a:	687b      	ldr	r3, [r7, #4]
	}
 800909c:	4618      	mov	r0, r3
 800909e:	370c      	adds	r7, #12
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr
 80090a8:	20000e70 	.word	0x20000e70
 80090ac:	20000e8c 	.word	0x20000e8c

080090b0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b084      	sub	sp, #16
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80090bc:	2300      	movs	r3, #0
 80090be:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d051      	beq.n	800916a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090ca:	4b2a      	ldr	r3, [pc, #168]	; (8009174 <xTaskPriorityInherit+0xc4>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090d0:	429a      	cmp	r2, r3
 80090d2:	d241      	bcs.n	8009158 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	699b      	ldr	r3, [r3, #24]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	db06      	blt.n	80090ea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090dc:	4b25      	ldr	r3, [pc, #148]	; (8009174 <xTaskPriorityInherit+0xc4>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	6959      	ldr	r1, [r3, #20]
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090f2:	4613      	mov	r3, r2
 80090f4:	009b      	lsls	r3, r3, #2
 80090f6:	4413      	add	r3, r2
 80090f8:	009b      	lsls	r3, r3, #2
 80090fa:	4a1f      	ldr	r2, [pc, #124]	; (8009178 <xTaskPriorityInherit+0xc8>)
 80090fc:	4413      	add	r3, r2
 80090fe:	4299      	cmp	r1, r3
 8009100:	d122      	bne.n	8009148 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	3304      	adds	r3, #4
 8009106:	4618      	mov	r0, r3
 8009108:	f7fd fe40 	bl	8006d8c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800910c:	4b19      	ldr	r3, [pc, #100]	; (8009174 <xTaskPriorityInherit+0xc4>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800911a:	4b18      	ldr	r3, [pc, #96]	; (800917c <xTaskPriorityInherit+0xcc>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	429a      	cmp	r2, r3
 8009120:	d903      	bls.n	800912a <xTaskPriorityInherit+0x7a>
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009126:	4a15      	ldr	r2, [pc, #84]	; (800917c <xTaskPriorityInherit+0xcc>)
 8009128:	6013      	str	r3, [r2, #0]
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800912e:	4613      	mov	r3, r2
 8009130:	009b      	lsls	r3, r3, #2
 8009132:	4413      	add	r3, r2
 8009134:	009b      	lsls	r3, r3, #2
 8009136:	4a10      	ldr	r2, [pc, #64]	; (8009178 <xTaskPriorityInherit+0xc8>)
 8009138:	441a      	add	r2, r3
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	3304      	adds	r3, #4
 800913e:	4619      	mov	r1, r3
 8009140:	4610      	mov	r0, r2
 8009142:	f7fd fdc6 	bl	8006cd2 <vListInsertEnd>
 8009146:	e004      	b.n	8009152 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009148:	4b0a      	ldr	r3, [pc, #40]	; (8009174 <xTaskPriorityInherit+0xc4>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009152:	2301      	movs	r3, #1
 8009154:	60fb      	str	r3, [r7, #12]
 8009156:	e008      	b.n	800916a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800915c:	4b05      	ldr	r3, [pc, #20]	; (8009174 <xTaskPriorityInherit+0xc4>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009162:	429a      	cmp	r2, r3
 8009164:	d201      	bcs.n	800916a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009166:	2301      	movs	r3, #1
 8009168:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800916a:	68fb      	ldr	r3, [r7, #12]
	}
 800916c:	4618      	mov	r0, r3
 800916e:	3710      	adds	r7, #16
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}
 8009174:	20000990 	.word	0x20000990
 8009178:	20000994 	.word	0x20000994
 800917c:	20000e6c 	.word	0x20000e6c

08009180 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009180:	b580      	push	{r7, lr}
 8009182:	b086      	sub	sp, #24
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800918c:	2300      	movs	r3, #0
 800918e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d056      	beq.n	8009244 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009196:	4b2e      	ldr	r3, [pc, #184]	; (8009250 <xTaskPriorityDisinherit+0xd0>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	693a      	ldr	r2, [r7, #16]
 800919c:	429a      	cmp	r2, r3
 800919e:	d00a      	beq.n	80091b6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80091a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a4:	f383 8811 	msr	BASEPRI, r3
 80091a8:	f3bf 8f6f 	isb	sy
 80091ac:	f3bf 8f4f 	dsb	sy
 80091b0:	60fb      	str	r3, [r7, #12]
}
 80091b2:	bf00      	nop
 80091b4:	e7fe      	b.n	80091b4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d10a      	bne.n	80091d4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80091be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c2:	f383 8811 	msr	BASEPRI, r3
 80091c6:	f3bf 8f6f 	isb	sy
 80091ca:	f3bf 8f4f 	dsb	sy
 80091ce:	60bb      	str	r3, [r7, #8]
}
 80091d0:	bf00      	nop
 80091d2:	e7fe      	b.n	80091d2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091d8:	1e5a      	subs	r2, r3, #1
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d02c      	beq.n	8009244 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d128      	bne.n	8009244 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	3304      	adds	r3, #4
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7fd fdc8 	bl	8006d8c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009208:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009214:	4b0f      	ldr	r3, [pc, #60]	; (8009254 <xTaskPriorityDisinherit+0xd4>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	429a      	cmp	r2, r3
 800921a:	d903      	bls.n	8009224 <xTaskPriorityDisinherit+0xa4>
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009220:	4a0c      	ldr	r2, [pc, #48]	; (8009254 <xTaskPriorityDisinherit+0xd4>)
 8009222:	6013      	str	r3, [r2, #0]
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009228:	4613      	mov	r3, r2
 800922a:	009b      	lsls	r3, r3, #2
 800922c:	4413      	add	r3, r2
 800922e:	009b      	lsls	r3, r3, #2
 8009230:	4a09      	ldr	r2, [pc, #36]	; (8009258 <xTaskPriorityDisinherit+0xd8>)
 8009232:	441a      	add	r2, r3
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	3304      	adds	r3, #4
 8009238:	4619      	mov	r1, r3
 800923a:	4610      	mov	r0, r2
 800923c:	f7fd fd49 	bl	8006cd2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009240:	2301      	movs	r3, #1
 8009242:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009244:	697b      	ldr	r3, [r7, #20]
	}
 8009246:	4618      	mov	r0, r3
 8009248:	3718      	adds	r7, #24
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
 800924e:	bf00      	nop
 8009250:	20000990 	.word	0x20000990
 8009254:	20000e6c 	.word	0x20000e6c
 8009258:	20000994 	.word	0x20000994

0800925c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800925c:	b580      	push	{r7, lr}
 800925e:	b088      	sub	sp, #32
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800926a:	2301      	movs	r3, #1
 800926c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d06a      	beq.n	800934a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009274:	69bb      	ldr	r3, [r7, #24]
 8009276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009278:	2b00      	cmp	r3, #0
 800927a:	d10a      	bne.n	8009292 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800927c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009280:	f383 8811 	msr	BASEPRI, r3
 8009284:	f3bf 8f6f 	isb	sy
 8009288:	f3bf 8f4f 	dsb	sy
 800928c:	60fb      	str	r3, [r7, #12]
}
 800928e:	bf00      	nop
 8009290:	e7fe      	b.n	8009290 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009292:	69bb      	ldr	r3, [r7, #24]
 8009294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009296:	683a      	ldr	r2, [r7, #0]
 8009298:	429a      	cmp	r2, r3
 800929a:	d902      	bls.n	80092a2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	61fb      	str	r3, [r7, #28]
 80092a0:	e002      	b.n	80092a8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80092a2:	69bb      	ldr	r3, [r7, #24]
 80092a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092a6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80092a8:	69bb      	ldr	r3, [r7, #24]
 80092aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ac:	69fa      	ldr	r2, [r7, #28]
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d04b      	beq.n	800934a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80092b2:	69bb      	ldr	r3, [r7, #24]
 80092b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092b6:	697a      	ldr	r2, [r7, #20]
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d146      	bne.n	800934a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80092bc:	4b25      	ldr	r3, [pc, #148]	; (8009354 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	69ba      	ldr	r2, [r7, #24]
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d10a      	bne.n	80092dc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80092c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ca:	f383 8811 	msr	BASEPRI, r3
 80092ce:	f3bf 8f6f 	isb	sy
 80092d2:	f3bf 8f4f 	dsb	sy
 80092d6:	60bb      	str	r3, [r7, #8]
}
 80092d8:	bf00      	nop
 80092da:	e7fe      	b.n	80092da <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80092dc:	69bb      	ldr	r3, [r7, #24]
 80092de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092e0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80092e2:	69bb      	ldr	r3, [r7, #24]
 80092e4:	69fa      	ldr	r2, [r7, #28]
 80092e6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80092e8:	69bb      	ldr	r3, [r7, #24]
 80092ea:	699b      	ldr	r3, [r3, #24]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	db04      	blt.n	80092fa <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092f0:	69fb      	ldr	r3, [r7, #28]
 80092f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80092f6:	69bb      	ldr	r3, [r7, #24]
 80092f8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80092fa:	69bb      	ldr	r3, [r7, #24]
 80092fc:	6959      	ldr	r1, [r3, #20]
 80092fe:	693a      	ldr	r2, [r7, #16]
 8009300:	4613      	mov	r3, r2
 8009302:	009b      	lsls	r3, r3, #2
 8009304:	4413      	add	r3, r2
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	4a13      	ldr	r2, [pc, #76]	; (8009358 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800930a:	4413      	add	r3, r2
 800930c:	4299      	cmp	r1, r3
 800930e:	d11c      	bne.n	800934a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009310:	69bb      	ldr	r3, [r7, #24]
 8009312:	3304      	adds	r3, #4
 8009314:	4618      	mov	r0, r3
 8009316:	f7fd fd39 	bl	8006d8c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800931a:	69bb      	ldr	r3, [r7, #24]
 800931c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800931e:	4b0f      	ldr	r3, [pc, #60]	; (800935c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	429a      	cmp	r2, r3
 8009324:	d903      	bls.n	800932e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8009326:	69bb      	ldr	r3, [r7, #24]
 8009328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800932a:	4a0c      	ldr	r2, [pc, #48]	; (800935c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800932c:	6013      	str	r3, [r2, #0]
 800932e:	69bb      	ldr	r3, [r7, #24]
 8009330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009332:	4613      	mov	r3, r2
 8009334:	009b      	lsls	r3, r3, #2
 8009336:	4413      	add	r3, r2
 8009338:	009b      	lsls	r3, r3, #2
 800933a:	4a07      	ldr	r2, [pc, #28]	; (8009358 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800933c:	441a      	add	r2, r3
 800933e:	69bb      	ldr	r3, [r7, #24]
 8009340:	3304      	adds	r3, #4
 8009342:	4619      	mov	r1, r3
 8009344:	4610      	mov	r0, r2
 8009346:	f7fd fcc4 	bl	8006cd2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800934a:	bf00      	nop
 800934c:	3720      	adds	r7, #32
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}
 8009352:	bf00      	nop
 8009354:	20000990 	.word	0x20000990
 8009358:	20000994 	.word	0x20000994
 800935c:	20000e6c 	.word	0x20000e6c

08009360 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009360:	b480      	push	{r7}
 8009362:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009364:	4b07      	ldr	r3, [pc, #28]	; (8009384 <pvTaskIncrementMutexHeldCount+0x24>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d004      	beq.n	8009376 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800936c:	4b05      	ldr	r3, [pc, #20]	; (8009384 <pvTaskIncrementMutexHeldCount+0x24>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009372:	3201      	adds	r2, #1
 8009374:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009376:	4b03      	ldr	r3, [pc, #12]	; (8009384 <pvTaskIncrementMutexHeldCount+0x24>)
 8009378:	681b      	ldr	r3, [r3, #0]
	}
 800937a:	4618      	mov	r0, r3
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr
 8009384:	20000990 	.word	0x20000990

08009388 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8009388:	b580      	push	{r7, lr}
 800938a:	b086      	sub	sp, #24
 800938c:	af00      	add	r7, sp, #0
 800938e:	60f8      	str	r0, [r7, #12]
 8009390:	60b9      	str	r1, [r7, #8]
 8009392:	607a      	str	r2, [r7, #4]
 8009394:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8009396:	f000 feed 	bl	800a174 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800939a:	4b29      	ldr	r3, [pc, #164]	; (8009440 <xTaskNotifyWait+0xb8>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80093a2:	b2db      	uxtb	r3, r3
 80093a4:	2b02      	cmp	r3, #2
 80093a6:	d01c      	beq.n	80093e2 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80093a8:	4b25      	ldr	r3, [pc, #148]	; (8009440 <xTaskNotifyWait+0xb8>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 80093b0:	68fa      	ldr	r2, [r7, #12]
 80093b2:	43d2      	mvns	r2, r2
 80093b4:	400a      	ands	r2, r1
 80093b6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80093ba:	4b21      	ldr	r3, [pc, #132]	; (8009440 <xTaskNotifyWait+0xb8>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	2201      	movs	r2, #1
 80093c0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d00b      	beq.n	80093e2 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80093ca:	2101      	movs	r1, #1
 80093cc:	6838      	ldr	r0, [r7, #0]
 80093ce:	f000 fa03 	bl	80097d8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80093d2:	4b1c      	ldr	r3, [pc, #112]	; (8009444 <xTaskNotifyWait+0xbc>)
 80093d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093d8:	601a      	str	r2, [r3, #0]
 80093da:	f3bf 8f4f 	dsb	sy
 80093de:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80093e2:	f000 fef7 	bl	800a1d4 <vPortExitCritical>

		taskENTER_CRITICAL();
 80093e6:	f000 fec5 	bl	800a174 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d005      	beq.n	80093fc <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80093f0:	4b13      	ldr	r3, [pc, #76]	; (8009440 <xTaskNotifyWait+0xb8>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80093fc:	4b10      	ldr	r3, [pc, #64]	; (8009440 <xTaskNotifyWait+0xb8>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8009404:	b2db      	uxtb	r3, r3
 8009406:	2b02      	cmp	r3, #2
 8009408:	d002      	beq.n	8009410 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800940a:	2300      	movs	r3, #0
 800940c:	617b      	str	r3, [r7, #20]
 800940e:	e00a      	b.n	8009426 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8009410:	4b0b      	ldr	r3, [pc, #44]	; (8009440 <xTaskNotifyWait+0xb8>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8009418:	68ba      	ldr	r2, [r7, #8]
 800941a:	43d2      	mvns	r2, r2
 800941c:	400a      	ands	r2, r1
 800941e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 8009422:	2301      	movs	r3, #1
 8009424:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009426:	4b06      	ldr	r3, [pc, #24]	; (8009440 <xTaskNotifyWait+0xb8>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	2200      	movs	r2, #0
 800942c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 8009430:	f000 fed0 	bl	800a1d4 <vPortExitCritical>

		return xReturn;
 8009434:	697b      	ldr	r3, [r7, #20]
	}
 8009436:	4618      	mov	r0, r3
 8009438:	3718      	adds	r7, #24
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
 800943e:	bf00      	nop
 8009440:	20000990 	.word	0x20000990
 8009444:	e000ed04 	.word	0xe000ed04

08009448 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8009448:	b580      	push	{r7, lr}
 800944a:	b08a      	sub	sp, #40	; 0x28
 800944c:	af00      	add	r7, sp, #0
 800944e:	60f8      	str	r0, [r7, #12]
 8009450:	60b9      	str	r1, [r7, #8]
 8009452:	603b      	str	r3, [r7, #0]
 8009454:	4613      	mov	r3, r2
 8009456:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8009458:	2301      	movs	r3, #1
 800945a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d10a      	bne.n	8009478 <xTaskGenericNotify+0x30>
	__asm volatile
 8009462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009466:	f383 8811 	msr	BASEPRI, r3
 800946a:	f3bf 8f6f 	isb	sy
 800946e:	f3bf 8f4f 	dsb	sy
 8009472:	61bb      	str	r3, [r7, #24]
}
 8009474:	bf00      	nop
 8009476:	e7fe      	b.n	8009476 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800947c:	f000 fe7a 	bl	800a174 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d004      	beq.n	8009490 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009486:	6a3b      	ldr	r3, [r7, #32]
 8009488:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009490:	6a3b      	ldr	r3, [r7, #32]
 8009492:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8009496:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009498:	6a3b      	ldr	r3, [r7, #32]
 800949a:	2202      	movs	r2, #2
 800949c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 80094a0:	79fb      	ldrb	r3, [r7, #7]
 80094a2:	2b04      	cmp	r3, #4
 80094a4:	d82d      	bhi.n	8009502 <xTaskGenericNotify+0xba>
 80094a6:	a201      	add	r2, pc, #4	; (adr r2, 80094ac <xTaskGenericNotify+0x64>)
 80094a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ac:	08009525 	.word	0x08009525
 80094b0:	080094c1 	.word	0x080094c1
 80094b4:	080094d3 	.word	0x080094d3
 80094b8:	080094e3 	.word	0x080094e3
 80094bc:	080094ed 	.word	0x080094ed
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80094c0:	6a3b      	ldr	r3, [r7, #32]
 80094c2:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	431a      	orrs	r2, r3
 80094ca:	6a3b      	ldr	r3, [r7, #32]
 80094cc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80094d0:	e02b      	b.n	800952a <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80094d2:	6a3b      	ldr	r3, [r7, #32]
 80094d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80094d8:	1c5a      	adds	r2, r3, #1
 80094da:	6a3b      	ldr	r3, [r7, #32]
 80094dc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80094e0:	e023      	b.n	800952a <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80094e2:	6a3b      	ldr	r3, [r7, #32]
 80094e4:	68ba      	ldr	r2, [r7, #8]
 80094e6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80094ea:	e01e      	b.n	800952a <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80094ec:	7ffb      	ldrb	r3, [r7, #31]
 80094ee:	2b02      	cmp	r3, #2
 80094f0:	d004      	beq.n	80094fc <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80094f2:	6a3b      	ldr	r3, [r7, #32]
 80094f4:	68ba      	ldr	r2, [r7, #8]
 80094f6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80094fa:	e016      	b.n	800952a <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 80094fc:	2300      	movs	r3, #0
 80094fe:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8009500:	e013      	b.n	800952a <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009502:	6a3b      	ldr	r3, [r7, #32]
 8009504:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009508:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800950c:	d00c      	beq.n	8009528 <xTaskGenericNotify+0xe0>
	__asm volatile
 800950e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009512:	f383 8811 	msr	BASEPRI, r3
 8009516:	f3bf 8f6f 	isb	sy
 800951a:	f3bf 8f4f 	dsb	sy
 800951e:	617b      	str	r3, [r7, #20]
}
 8009520:	bf00      	nop
 8009522:	e7fe      	b.n	8009522 <xTaskGenericNotify+0xda>
					break;
 8009524:	bf00      	nop
 8009526:	e000      	b.n	800952a <xTaskGenericNotify+0xe2>

					break;
 8009528:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800952a:	7ffb      	ldrb	r3, [r7, #31]
 800952c:	2b01      	cmp	r3, #1
 800952e:	d13a      	bne.n	80095a6 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009530:	6a3b      	ldr	r3, [r7, #32]
 8009532:	3304      	adds	r3, #4
 8009534:	4618      	mov	r0, r3
 8009536:	f7fd fc29 	bl	8006d8c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800953a:	6a3b      	ldr	r3, [r7, #32]
 800953c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800953e:	4b1d      	ldr	r3, [pc, #116]	; (80095b4 <xTaskGenericNotify+0x16c>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	429a      	cmp	r2, r3
 8009544:	d903      	bls.n	800954e <xTaskGenericNotify+0x106>
 8009546:	6a3b      	ldr	r3, [r7, #32]
 8009548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800954a:	4a1a      	ldr	r2, [pc, #104]	; (80095b4 <xTaskGenericNotify+0x16c>)
 800954c:	6013      	str	r3, [r2, #0]
 800954e:	6a3b      	ldr	r3, [r7, #32]
 8009550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009552:	4613      	mov	r3, r2
 8009554:	009b      	lsls	r3, r3, #2
 8009556:	4413      	add	r3, r2
 8009558:	009b      	lsls	r3, r3, #2
 800955a:	4a17      	ldr	r2, [pc, #92]	; (80095b8 <xTaskGenericNotify+0x170>)
 800955c:	441a      	add	r2, r3
 800955e:	6a3b      	ldr	r3, [r7, #32]
 8009560:	3304      	adds	r3, #4
 8009562:	4619      	mov	r1, r3
 8009564:	4610      	mov	r0, r2
 8009566:	f7fd fbb4 	bl	8006cd2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800956a:	6a3b      	ldr	r3, [r7, #32]
 800956c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800956e:	2b00      	cmp	r3, #0
 8009570:	d00a      	beq.n	8009588 <xTaskGenericNotify+0x140>
	__asm volatile
 8009572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009576:	f383 8811 	msr	BASEPRI, r3
 800957a:	f3bf 8f6f 	isb	sy
 800957e:	f3bf 8f4f 	dsb	sy
 8009582:	613b      	str	r3, [r7, #16]
}
 8009584:	bf00      	nop
 8009586:	e7fe      	b.n	8009586 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009588:	6a3b      	ldr	r3, [r7, #32]
 800958a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800958c:	4b0b      	ldr	r3, [pc, #44]	; (80095bc <xTaskGenericNotify+0x174>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009592:	429a      	cmp	r2, r3
 8009594:	d907      	bls.n	80095a6 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8009596:	4b0a      	ldr	r3, [pc, #40]	; (80095c0 <xTaskGenericNotify+0x178>)
 8009598:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800959c:	601a      	str	r2, [r3, #0]
 800959e:	f3bf 8f4f 	dsb	sy
 80095a2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80095a6:	f000 fe15 	bl	800a1d4 <vPortExitCritical>

		return xReturn;
 80095aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3728      	adds	r7, #40	; 0x28
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}
 80095b4:	20000e6c 	.word	0x20000e6c
 80095b8:	20000994 	.word	0x20000994
 80095bc:	20000990 	.word	0x20000990
 80095c0:	e000ed04 	.word	0xe000ed04

080095c4 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b08e      	sub	sp, #56	; 0x38
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	60f8      	str	r0, [r7, #12]
 80095cc:	60b9      	str	r1, [r7, #8]
 80095ce:	603b      	str	r3, [r7, #0]
 80095d0:	4613      	mov	r3, r2
 80095d2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80095d4:	2301      	movs	r3, #1
 80095d6:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d10a      	bne.n	80095f4 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 80095de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e2:	f383 8811 	msr	BASEPRI, r3
 80095e6:	f3bf 8f6f 	isb	sy
 80095ea:	f3bf 8f4f 	dsb	sy
 80095ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 80095f0:	bf00      	nop
 80095f2:	e7fe      	b.n	80095f2 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80095f4:	f000 fea0 	bl	800a338 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 80095fc:	f3ef 8211 	mrs	r2, BASEPRI
 8009600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009604:	f383 8811 	msr	BASEPRI, r3
 8009608:	f3bf 8f6f 	isb	sy
 800960c:	f3bf 8f4f 	dsb	sy
 8009610:	623a      	str	r2, [r7, #32]
 8009612:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8009614:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009616:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d004      	beq.n	8009628 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800961e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009620:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800962a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800962e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009634:	2202      	movs	r2, #2
 8009636:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800963a:	79fb      	ldrb	r3, [r7, #7]
 800963c:	2b04      	cmp	r3, #4
 800963e:	d82f      	bhi.n	80096a0 <xTaskGenericNotifyFromISR+0xdc>
 8009640:	a201      	add	r2, pc, #4	; (adr r2, 8009648 <xTaskGenericNotifyFromISR+0x84>)
 8009642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009646:	bf00      	nop
 8009648:	080096c3 	.word	0x080096c3
 800964c:	0800965d 	.word	0x0800965d
 8009650:	0800966f 	.word	0x0800966f
 8009654:	0800967f 	.word	0x0800967f
 8009658:	08009689 	.word	0x08009689
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800965c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800965e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	431a      	orrs	r2, r3
 8009666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009668:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800966c:	e02c      	b.n	80096c8 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800966e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009670:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009674:	1c5a      	adds	r2, r3, #1
 8009676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009678:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800967c:	e024      	b.n	80096c8 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800967e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009680:	68ba      	ldr	r2, [r7, #8]
 8009682:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8009686:	e01f      	b.n	80096c8 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009688:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800968c:	2b02      	cmp	r3, #2
 800968e:	d004      	beq.n	800969a <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009692:	68ba      	ldr	r2, [r7, #8]
 8009694:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009698:	e016      	b.n	80096c8 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800969a:	2300      	movs	r3, #0
 800969c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800969e:	e013      	b.n	80096c8 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80096a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80096a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096aa:	d00c      	beq.n	80096c6 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 80096ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b0:	f383 8811 	msr	BASEPRI, r3
 80096b4:	f3bf 8f6f 	isb	sy
 80096b8:	f3bf 8f4f 	dsb	sy
 80096bc:	61bb      	str	r3, [r7, #24]
}
 80096be:	bf00      	nop
 80096c0:	e7fe      	b.n	80096c0 <xTaskGenericNotifyFromISR+0xfc>
					break;
 80096c2:	bf00      	nop
 80096c4:	e000      	b.n	80096c8 <xTaskGenericNotifyFromISR+0x104>
					break;
 80096c6:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80096c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80096cc:	2b01      	cmp	r3, #1
 80096ce:	d146      	bne.n	800975e <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80096d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d00a      	beq.n	80096ee <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 80096d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096dc:	f383 8811 	msr	BASEPRI, r3
 80096e0:	f3bf 8f6f 	isb	sy
 80096e4:	f3bf 8f4f 	dsb	sy
 80096e8:	617b      	str	r3, [r7, #20]
}
 80096ea:	bf00      	nop
 80096ec:	e7fe      	b.n	80096ec <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096ee:	4b21      	ldr	r3, [pc, #132]	; (8009774 <xTaskGenericNotifyFromISR+0x1b0>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d11d      	bne.n	8009732 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80096f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f8:	3304      	adds	r3, #4
 80096fa:	4618      	mov	r0, r3
 80096fc:	f7fd fb46 	bl	8006d8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009704:	4b1c      	ldr	r3, [pc, #112]	; (8009778 <xTaskGenericNotifyFromISR+0x1b4>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	429a      	cmp	r2, r3
 800970a:	d903      	bls.n	8009714 <xTaskGenericNotifyFromISR+0x150>
 800970c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800970e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009710:	4a19      	ldr	r2, [pc, #100]	; (8009778 <xTaskGenericNotifyFromISR+0x1b4>)
 8009712:	6013      	str	r3, [r2, #0]
 8009714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009718:	4613      	mov	r3, r2
 800971a:	009b      	lsls	r3, r3, #2
 800971c:	4413      	add	r3, r2
 800971e:	009b      	lsls	r3, r3, #2
 8009720:	4a16      	ldr	r2, [pc, #88]	; (800977c <xTaskGenericNotifyFromISR+0x1b8>)
 8009722:	441a      	add	r2, r3
 8009724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009726:	3304      	adds	r3, #4
 8009728:	4619      	mov	r1, r3
 800972a:	4610      	mov	r0, r2
 800972c:	f7fd fad1 	bl	8006cd2 <vListInsertEnd>
 8009730:	e005      	b.n	800973e <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009734:	3318      	adds	r3, #24
 8009736:	4619      	mov	r1, r3
 8009738:	4811      	ldr	r0, [pc, #68]	; (8009780 <xTaskGenericNotifyFromISR+0x1bc>)
 800973a:	f7fd faca 	bl	8006cd2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800973e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009742:	4b10      	ldr	r3, [pc, #64]	; (8009784 <xTaskGenericNotifyFromISR+0x1c0>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009748:	429a      	cmp	r2, r3
 800974a:	d908      	bls.n	800975e <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800974c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800974e:	2b00      	cmp	r3, #0
 8009750:	d002      	beq.n	8009758 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8009752:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009754:	2201      	movs	r2, #1
 8009756:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8009758:	4b0b      	ldr	r3, [pc, #44]	; (8009788 <xTaskGenericNotifyFromISR+0x1c4>)
 800975a:	2201      	movs	r2, #1
 800975c:	601a      	str	r2, [r3, #0]
 800975e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009760:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	f383 8811 	msr	BASEPRI, r3
}
 8009768:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800976a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800976c:	4618      	mov	r0, r3
 800976e:	3738      	adds	r7, #56	; 0x38
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}
 8009774:	20000e8c 	.word	0x20000e8c
 8009778:	20000e6c 	.word	0x20000e6c
 800977c:	20000994 	.word	0x20000994
 8009780:	20000e24 	.word	0x20000e24
 8009784:	20000990 	.word	0x20000990
 8009788:	20000e78 	.word	0x20000e78

0800978c <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 800978c:	b580      	push	{r7, lr}
 800978e:	b084      	sub	sp, #16
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d102      	bne.n	80097a0 <xTaskNotifyStateClear+0x14>
 800979a:	4b0e      	ldr	r3, [pc, #56]	; (80097d4 <xTaskNotifyStateClear+0x48>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	e000      	b.n	80097a2 <xTaskNotifyStateClear+0x16>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 80097a4:	f000 fce6 	bl	800a174 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80097ae:	b2db      	uxtb	r3, r3
 80097b0:	2b02      	cmp	r3, #2
 80097b2:	d106      	bne.n	80097c2 <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	2200      	movs	r2, #0
 80097b8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
				xReturn = pdPASS;
 80097bc:	2301      	movs	r3, #1
 80097be:	60fb      	str	r3, [r7, #12]
 80097c0:	e001      	b.n	80097c6 <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 80097c2:	2300      	movs	r3, #0
 80097c4:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 80097c6:	f000 fd05 	bl	800a1d4 <vPortExitCritical>

		return xReturn;
 80097ca:	68fb      	ldr	r3, [r7, #12]
	}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3710      	adds	r7, #16
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}
 80097d4:	20000990 	.word	0x20000990

080097d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b084      	sub	sp, #16
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80097e2:	4b21      	ldr	r3, [pc, #132]	; (8009868 <prvAddCurrentTaskToDelayedList+0x90>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80097e8:	4b20      	ldr	r3, [pc, #128]	; (800986c <prvAddCurrentTaskToDelayedList+0x94>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	3304      	adds	r3, #4
 80097ee:	4618      	mov	r0, r3
 80097f0:	f7fd facc 	bl	8006d8c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097fa:	d10a      	bne.n	8009812 <prvAddCurrentTaskToDelayedList+0x3a>
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d007      	beq.n	8009812 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009802:	4b1a      	ldr	r3, [pc, #104]	; (800986c <prvAddCurrentTaskToDelayedList+0x94>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	3304      	adds	r3, #4
 8009808:	4619      	mov	r1, r3
 800980a:	4819      	ldr	r0, [pc, #100]	; (8009870 <prvAddCurrentTaskToDelayedList+0x98>)
 800980c:	f7fd fa61 	bl	8006cd2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009810:	e026      	b.n	8009860 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009812:	68fa      	ldr	r2, [r7, #12]
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	4413      	add	r3, r2
 8009818:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800981a:	4b14      	ldr	r3, [pc, #80]	; (800986c <prvAddCurrentTaskToDelayedList+0x94>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	68ba      	ldr	r2, [r7, #8]
 8009820:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009822:	68ba      	ldr	r2, [r7, #8]
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	429a      	cmp	r2, r3
 8009828:	d209      	bcs.n	800983e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800982a:	4b12      	ldr	r3, [pc, #72]	; (8009874 <prvAddCurrentTaskToDelayedList+0x9c>)
 800982c:	681a      	ldr	r2, [r3, #0]
 800982e:	4b0f      	ldr	r3, [pc, #60]	; (800986c <prvAddCurrentTaskToDelayedList+0x94>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	3304      	adds	r3, #4
 8009834:	4619      	mov	r1, r3
 8009836:	4610      	mov	r0, r2
 8009838:	f7fd fa6f 	bl	8006d1a <vListInsert>
}
 800983c:	e010      	b.n	8009860 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800983e:	4b0e      	ldr	r3, [pc, #56]	; (8009878 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009840:	681a      	ldr	r2, [r3, #0]
 8009842:	4b0a      	ldr	r3, [pc, #40]	; (800986c <prvAddCurrentTaskToDelayedList+0x94>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	3304      	adds	r3, #4
 8009848:	4619      	mov	r1, r3
 800984a:	4610      	mov	r0, r2
 800984c:	f7fd fa65 	bl	8006d1a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009850:	4b0a      	ldr	r3, [pc, #40]	; (800987c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	68ba      	ldr	r2, [r7, #8]
 8009856:	429a      	cmp	r2, r3
 8009858:	d202      	bcs.n	8009860 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800985a:	4a08      	ldr	r2, [pc, #32]	; (800987c <prvAddCurrentTaskToDelayedList+0xa4>)
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	6013      	str	r3, [r2, #0]
}
 8009860:	bf00      	nop
 8009862:	3710      	adds	r7, #16
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}
 8009868:	20000e68 	.word	0x20000e68
 800986c:	20000990 	.word	0x20000990
 8009870:	20000e50 	.word	0x20000e50
 8009874:	20000e20 	.word	0x20000e20
 8009878:	20000e1c 	.word	0x20000e1c
 800987c:	20000e84 	.word	0x20000e84

08009880 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b08a      	sub	sp, #40	; 0x28
 8009884:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009886:	2300      	movs	r3, #0
 8009888:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800988a:	f000 fb07 	bl	8009e9c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800988e:	4b1c      	ldr	r3, [pc, #112]	; (8009900 <xTimerCreateTimerTask+0x80>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d021      	beq.n	80098da <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009896:	2300      	movs	r3, #0
 8009898:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800989a:	2300      	movs	r3, #0
 800989c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800989e:	1d3a      	adds	r2, r7, #4
 80098a0:	f107 0108 	add.w	r1, r7, #8
 80098a4:	f107 030c 	add.w	r3, r7, #12
 80098a8:	4618      	mov	r0, r3
 80098aa:	f7fd f9cb 	bl	8006c44 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80098ae:	6879      	ldr	r1, [r7, #4]
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	68fa      	ldr	r2, [r7, #12]
 80098b4:	9202      	str	r2, [sp, #8]
 80098b6:	9301      	str	r3, [sp, #4]
 80098b8:	2302      	movs	r3, #2
 80098ba:	9300      	str	r3, [sp, #0]
 80098bc:	2300      	movs	r3, #0
 80098be:	460a      	mov	r2, r1
 80098c0:	4910      	ldr	r1, [pc, #64]	; (8009904 <xTimerCreateTimerTask+0x84>)
 80098c2:	4811      	ldr	r0, [pc, #68]	; (8009908 <xTimerCreateTimerTask+0x88>)
 80098c4:	f7fe fd8b 	bl	80083de <xTaskCreateStatic>
 80098c8:	4603      	mov	r3, r0
 80098ca:	4a10      	ldr	r2, [pc, #64]	; (800990c <xTimerCreateTimerTask+0x8c>)
 80098cc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80098ce:	4b0f      	ldr	r3, [pc, #60]	; (800990c <xTimerCreateTimerTask+0x8c>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d001      	beq.n	80098da <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80098d6:	2301      	movs	r3, #1
 80098d8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d10a      	bne.n	80098f6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80098e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e4:	f383 8811 	msr	BASEPRI, r3
 80098e8:	f3bf 8f6f 	isb	sy
 80098ec:	f3bf 8f4f 	dsb	sy
 80098f0:	613b      	str	r3, [r7, #16]
}
 80098f2:	bf00      	nop
 80098f4:	e7fe      	b.n	80098f4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80098f6:	697b      	ldr	r3, [r7, #20]
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3718      	adds	r7, #24
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}
 8009900:	20000ec0 	.word	0x20000ec0
 8009904:	0800b4f8 	.word	0x0800b4f8
 8009908:	08009a45 	.word	0x08009a45
 800990c:	20000ec4 	.word	0x20000ec4

08009910 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b08a      	sub	sp, #40	; 0x28
 8009914:	af00      	add	r7, sp, #0
 8009916:	60f8      	str	r0, [r7, #12]
 8009918:	60b9      	str	r1, [r7, #8]
 800991a:	607a      	str	r2, [r7, #4]
 800991c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800991e:	2300      	movs	r3, #0
 8009920:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d10a      	bne.n	800993e <xTimerGenericCommand+0x2e>
	__asm volatile
 8009928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800992c:	f383 8811 	msr	BASEPRI, r3
 8009930:	f3bf 8f6f 	isb	sy
 8009934:	f3bf 8f4f 	dsb	sy
 8009938:	623b      	str	r3, [r7, #32]
}
 800993a:	bf00      	nop
 800993c:	e7fe      	b.n	800993c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800993e:	4b1a      	ldr	r3, [pc, #104]	; (80099a8 <xTimerGenericCommand+0x98>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d02a      	beq.n	800999c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	2b05      	cmp	r3, #5
 8009956:	dc18      	bgt.n	800998a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009958:	f7ff fb8c 	bl	8009074 <xTaskGetSchedulerState>
 800995c:	4603      	mov	r3, r0
 800995e:	2b02      	cmp	r3, #2
 8009960:	d109      	bne.n	8009976 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009962:	4b11      	ldr	r3, [pc, #68]	; (80099a8 <xTimerGenericCommand+0x98>)
 8009964:	6818      	ldr	r0, [r3, #0]
 8009966:	f107 0110 	add.w	r1, r7, #16
 800996a:	2300      	movs	r3, #0
 800996c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800996e:	f7fd fba7 	bl	80070c0 <xQueueGenericSend>
 8009972:	6278      	str	r0, [r7, #36]	; 0x24
 8009974:	e012      	b.n	800999c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009976:	4b0c      	ldr	r3, [pc, #48]	; (80099a8 <xTimerGenericCommand+0x98>)
 8009978:	6818      	ldr	r0, [r3, #0]
 800997a:	f107 0110 	add.w	r1, r7, #16
 800997e:	2300      	movs	r3, #0
 8009980:	2200      	movs	r2, #0
 8009982:	f7fd fb9d 	bl	80070c0 <xQueueGenericSend>
 8009986:	6278      	str	r0, [r7, #36]	; 0x24
 8009988:	e008      	b.n	800999c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800998a:	4b07      	ldr	r3, [pc, #28]	; (80099a8 <xTimerGenericCommand+0x98>)
 800998c:	6818      	ldr	r0, [r3, #0]
 800998e:	f107 0110 	add.w	r1, r7, #16
 8009992:	2300      	movs	r3, #0
 8009994:	683a      	ldr	r2, [r7, #0]
 8009996:	f7fd fc91 	bl	80072bc <xQueueGenericSendFromISR>
 800999a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800999c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3728      	adds	r7, #40	; 0x28
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}
 80099a6:	bf00      	nop
 80099a8:	20000ec0 	.word	0x20000ec0

080099ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b088      	sub	sp, #32
 80099b0:	af02      	add	r7, sp, #8
 80099b2:	6078      	str	r0, [r7, #4]
 80099b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099b6:	4b22      	ldr	r3, [pc, #136]	; (8009a40 <prvProcessExpiredTimer+0x94>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	68db      	ldr	r3, [r3, #12]
 80099bc:	68db      	ldr	r3, [r3, #12]
 80099be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	3304      	adds	r3, #4
 80099c4:	4618      	mov	r0, r3
 80099c6:	f7fd f9e1 	bl	8006d8c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099d0:	f003 0304 	and.w	r3, r3, #4
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d022      	beq.n	8009a1e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	699a      	ldr	r2, [r3, #24]
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	18d1      	adds	r1, r2, r3
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	683a      	ldr	r2, [r7, #0]
 80099e4:	6978      	ldr	r0, [r7, #20]
 80099e6:	f000 f8d1 	bl	8009b8c <prvInsertTimerInActiveList>
 80099ea:	4603      	mov	r3, r0
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d01f      	beq.n	8009a30 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80099f0:	2300      	movs	r3, #0
 80099f2:	9300      	str	r3, [sp, #0]
 80099f4:	2300      	movs	r3, #0
 80099f6:	687a      	ldr	r2, [r7, #4]
 80099f8:	2100      	movs	r1, #0
 80099fa:	6978      	ldr	r0, [r7, #20]
 80099fc:	f7ff ff88 	bl	8009910 <xTimerGenericCommand>
 8009a00:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d113      	bne.n	8009a30 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a0c:	f383 8811 	msr	BASEPRI, r3
 8009a10:	f3bf 8f6f 	isb	sy
 8009a14:	f3bf 8f4f 	dsb	sy
 8009a18:	60fb      	str	r3, [r7, #12]
}
 8009a1a:	bf00      	nop
 8009a1c:	e7fe      	b.n	8009a1c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a24:	f023 0301 	bic.w	r3, r3, #1
 8009a28:	b2da      	uxtb	r2, r3
 8009a2a:	697b      	ldr	r3, [r7, #20]
 8009a2c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a30:	697b      	ldr	r3, [r7, #20]
 8009a32:	6a1b      	ldr	r3, [r3, #32]
 8009a34:	6978      	ldr	r0, [r7, #20]
 8009a36:	4798      	blx	r3
}
 8009a38:	bf00      	nop
 8009a3a:	3718      	adds	r7, #24
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}
 8009a40:	20000eb8 	.word	0x20000eb8

08009a44 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b084      	sub	sp, #16
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009a4c:	f107 0308 	add.w	r3, r7, #8
 8009a50:	4618      	mov	r0, r3
 8009a52:	f000 f857 	bl	8009b04 <prvGetNextExpireTime>
 8009a56:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	4619      	mov	r1, r3
 8009a5c:	68f8      	ldr	r0, [r7, #12]
 8009a5e:	f000 f803 	bl	8009a68 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009a62:	f000 f8d5 	bl	8009c10 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009a66:	e7f1      	b.n	8009a4c <prvTimerTask+0x8>

08009a68 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b084      	sub	sp, #16
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009a72:	f7fe fedd 	bl	8008830 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009a76:	f107 0308 	add.w	r3, r7, #8
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f000 f866 	bl	8009b4c <prvSampleTimeNow>
 8009a80:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d130      	bne.n	8009aea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d10a      	bne.n	8009aa4 <prvProcessTimerOrBlockTask+0x3c>
 8009a8e:	687a      	ldr	r2, [r7, #4]
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	429a      	cmp	r2, r3
 8009a94:	d806      	bhi.n	8009aa4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009a96:	f7fe fed9 	bl	800884c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009a9a:	68f9      	ldr	r1, [r7, #12]
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f7ff ff85 	bl	80099ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009aa2:	e024      	b.n	8009aee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d008      	beq.n	8009abc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009aaa:	4b13      	ldr	r3, [pc, #76]	; (8009af8 <prvProcessTimerOrBlockTask+0x90>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d101      	bne.n	8009ab8 <prvProcessTimerOrBlockTask+0x50>
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	e000      	b.n	8009aba <prvProcessTimerOrBlockTask+0x52>
 8009ab8:	2300      	movs	r3, #0
 8009aba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009abc:	4b0f      	ldr	r3, [pc, #60]	; (8009afc <prvProcessTimerOrBlockTask+0x94>)
 8009abe:	6818      	ldr	r0, [r3, #0]
 8009ac0:	687a      	ldr	r2, [r7, #4]
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	1ad3      	subs	r3, r2, r3
 8009ac6:	683a      	ldr	r2, [r7, #0]
 8009ac8:	4619      	mov	r1, r3
 8009aca:	f7fe f85d 	bl	8007b88 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009ace:	f7fe febd 	bl	800884c <xTaskResumeAll>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d10a      	bne.n	8009aee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009ad8:	4b09      	ldr	r3, [pc, #36]	; (8009b00 <prvProcessTimerOrBlockTask+0x98>)
 8009ada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ade:	601a      	str	r2, [r3, #0]
 8009ae0:	f3bf 8f4f 	dsb	sy
 8009ae4:	f3bf 8f6f 	isb	sy
}
 8009ae8:	e001      	b.n	8009aee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009aea:	f7fe feaf 	bl	800884c <xTaskResumeAll>
}
 8009aee:	bf00      	nop
 8009af0:	3710      	adds	r7, #16
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}
 8009af6:	bf00      	nop
 8009af8:	20000ebc 	.word	0x20000ebc
 8009afc:	20000ec0 	.word	0x20000ec0
 8009b00:	e000ed04 	.word	0xe000ed04

08009b04 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009b04:	b480      	push	{r7}
 8009b06:	b085      	sub	sp, #20
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009b0c:	4b0e      	ldr	r3, [pc, #56]	; (8009b48 <prvGetNextExpireTime+0x44>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d101      	bne.n	8009b1a <prvGetNextExpireTime+0x16>
 8009b16:	2201      	movs	r2, #1
 8009b18:	e000      	b.n	8009b1c <prvGetNextExpireTime+0x18>
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d105      	bne.n	8009b34 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009b28:	4b07      	ldr	r3, [pc, #28]	; (8009b48 <prvGetNextExpireTime+0x44>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	68db      	ldr	r3, [r3, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	60fb      	str	r3, [r7, #12]
 8009b32:	e001      	b.n	8009b38 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009b34:	2300      	movs	r3, #0
 8009b36:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009b38:	68fb      	ldr	r3, [r7, #12]
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3714      	adds	r7, #20
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b44:	4770      	bx	lr
 8009b46:	bf00      	nop
 8009b48:	20000eb8 	.word	0x20000eb8

08009b4c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b084      	sub	sp, #16
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009b54:	f7fe ff18 	bl	8008988 <xTaskGetTickCount>
 8009b58:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009b5a:	4b0b      	ldr	r3, [pc, #44]	; (8009b88 <prvSampleTimeNow+0x3c>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	68fa      	ldr	r2, [r7, #12]
 8009b60:	429a      	cmp	r2, r3
 8009b62:	d205      	bcs.n	8009b70 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009b64:	f000 f936 	bl	8009dd4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	601a      	str	r2, [r3, #0]
 8009b6e:	e002      	b.n	8009b76 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2200      	movs	r2, #0
 8009b74:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009b76:	4a04      	ldr	r2, [pc, #16]	; (8009b88 <prvSampleTimeNow+0x3c>)
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3710      	adds	r7, #16
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}
 8009b86:	bf00      	nop
 8009b88:	20000ec8 	.word	0x20000ec8

08009b8c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b086      	sub	sp, #24
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	60f8      	str	r0, [r7, #12]
 8009b94:	60b9      	str	r1, [r7, #8]
 8009b96:	607a      	str	r2, [r7, #4]
 8009b98:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	68ba      	ldr	r2, [r7, #8]
 8009ba2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	68fa      	ldr	r2, [r7, #12]
 8009ba8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009baa:	68ba      	ldr	r2, [r7, #8]
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d812      	bhi.n	8009bd8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bb2:	687a      	ldr	r2, [r7, #4]
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	1ad2      	subs	r2, r2, r3
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	699b      	ldr	r3, [r3, #24]
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	d302      	bcc.n	8009bc6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	617b      	str	r3, [r7, #20]
 8009bc4:	e01b      	b.n	8009bfe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009bc6:	4b10      	ldr	r3, [pc, #64]	; (8009c08 <prvInsertTimerInActiveList+0x7c>)
 8009bc8:	681a      	ldr	r2, [r3, #0]
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	3304      	adds	r3, #4
 8009bce:	4619      	mov	r1, r3
 8009bd0:	4610      	mov	r0, r2
 8009bd2:	f7fd f8a2 	bl	8006d1a <vListInsert>
 8009bd6:	e012      	b.n	8009bfe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009bd8:	687a      	ldr	r2, [r7, #4]
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d206      	bcs.n	8009bee <prvInsertTimerInActiveList+0x62>
 8009be0:	68ba      	ldr	r2, [r7, #8]
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	429a      	cmp	r2, r3
 8009be6:	d302      	bcc.n	8009bee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009be8:	2301      	movs	r3, #1
 8009bea:	617b      	str	r3, [r7, #20]
 8009bec:	e007      	b.n	8009bfe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009bee:	4b07      	ldr	r3, [pc, #28]	; (8009c0c <prvInsertTimerInActiveList+0x80>)
 8009bf0:	681a      	ldr	r2, [r3, #0]
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	3304      	adds	r3, #4
 8009bf6:	4619      	mov	r1, r3
 8009bf8:	4610      	mov	r0, r2
 8009bfa:	f7fd f88e 	bl	8006d1a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009bfe:	697b      	ldr	r3, [r7, #20]
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3718      	adds	r7, #24
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}
 8009c08:	20000ebc 	.word	0x20000ebc
 8009c0c:	20000eb8 	.word	0x20000eb8

08009c10 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b08e      	sub	sp, #56	; 0x38
 8009c14:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009c16:	e0ca      	b.n	8009dae <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	da18      	bge.n	8009c50 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009c1e:	1d3b      	adds	r3, r7, #4
 8009c20:	3304      	adds	r3, #4
 8009c22:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d10a      	bne.n	8009c40 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c2e:	f383 8811 	msr	BASEPRI, r3
 8009c32:	f3bf 8f6f 	isb	sy
 8009c36:	f3bf 8f4f 	dsb	sy
 8009c3a:	61fb      	str	r3, [r7, #28]
}
 8009c3c:	bf00      	nop
 8009c3e:	e7fe      	b.n	8009c3e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c46:	6850      	ldr	r0, [r2, #4]
 8009c48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c4a:	6892      	ldr	r2, [r2, #8]
 8009c4c:	4611      	mov	r1, r2
 8009c4e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	f2c0 80aa 	blt.w	8009dac <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c5e:	695b      	ldr	r3, [r3, #20]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d004      	beq.n	8009c6e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c66:	3304      	adds	r3, #4
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f7fd f88f 	bl	8006d8c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009c6e:	463b      	mov	r3, r7
 8009c70:	4618      	mov	r0, r3
 8009c72:	f7ff ff6b 	bl	8009b4c <prvSampleTimeNow>
 8009c76:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2b09      	cmp	r3, #9
 8009c7c:	f200 8097 	bhi.w	8009dae <prvProcessReceivedCommands+0x19e>
 8009c80:	a201      	add	r2, pc, #4	; (adr r2, 8009c88 <prvProcessReceivedCommands+0x78>)
 8009c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c86:	bf00      	nop
 8009c88:	08009cb1 	.word	0x08009cb1
 8009c8c:	08009cb1 	.word	0x08009cb1
 8009c90:	08009cb1 	.word	0x08009cb1
 8009c94:	08009d25 	.word	0x08009d25
 8009c98:	08009d39 	.word	0x08009d39
 8009c9c:	08009d83 	.word	0x08009d83
 8009ca0:	08009cb1 	.word	0x08009cb1
 8009ca4:	08009cb1 	.word	0x08009cb1
 8009ca8:	08009d25 	.word	0x08009d25
 8009cac:	08009d39 	.word	0x08009d39
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009cb6:	f043 0301 	orr.w	r3, r3, #1
 8009cba:	b2da      	uxtb	r2, r3
 8009cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009cc2:	68ba      	ldr	r2, [r7, #8]
 8009cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc6:	699b      	ldr	r3, [r3, #24]
 8009cc8:	18d1      	adds	r1, r2, r3
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cd0:	f7ff ff5c 	bl	8009b8c <prvInsertTimerInActiveList>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d069      	beq.n	8009dae <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cdc:	6a1b      	ldr	r3, [r3, #32]
 8009cde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ce0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ce4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ce8:	f003 0304 	and.w	r3, r3, #4
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d05e      	beq.n	8009dae <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009cf0:	68ba      	ldr	r2, [r7, #8]
 8009cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cf4:	699b      	ldr	r3, [r3, #24]
 8009cf6:	441a      	add	r2, r3
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	9300      	str	r3, [sp, #0]
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	2100      	movs	r1, #0
 8009d00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d02:	f7ff fe05 	bl	8009910 <xTimerGenericCommand>
 8009d06:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009d08:	6a3b      	ldr	r3, [r7, #32]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d14f      	bne.n	8009dae <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d12:	f383 8811 	msr	BASEPRI, r3
 8009d16:	f3bf 8f6f 	isb	sy
 8009d1a:	f3bf 8f4f 	dsb	sy
 8009d1e:	61bb      	str	r3, [r7, #24]
}
 8009d20:	bf00      	nop
 8009d22:	e7fe      	b.n	8009d22 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d2a:	f023 0301 	bic.w	r3, r3, #1
 8009d2e:	b2da      	uxtb	r2, r3
 8009d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009d36:	e03a      	b.n	8009dae <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d3e:	f043 0301 	orr.w	r3, r3, #1
 8009d42:	b2da      	uxtb	r2, r3
 8009d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009d4a:	68ba      	ldr	r2, [r7, #8]
 8009d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d4e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d52:	699b      	ldr	r3, [r3, #24]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d10a      	bne.n	8009d6e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d5c:	f383 8811 	msr	BASEPRI, r3
 8009d60:	f3bf 8f6f 	isb	sy
 8009d64:	f3bf 8f4f 	dsb	sy
 8009d68:	617b      	str	r3, [r7, #20]
}
 8009d6a:	bf00      	nop
 8009d6c:	e7fe      	b.n	8009d6c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d70:	699a      	ldr	r2, [r3, #24]
 8009d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d74:	18d1      	adds	r1, r2, r3
 8009d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d7c:	f7ff ff06 	bl	8009b8c <prvInsertTimerInActiveList>
					break;
 8009d80:	e015      	b.n	8009dae <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d88:	f003 0302 	and.w	r3, r3, #2
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d103      	bne.n	8009d98 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009d90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d92:	f000 fbdd 	bl	800a550 <vPortFree>
 8009d96:	e00a      	b.n	8009dae <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d9e:	f023 0301 	bic.w	r3, r3, #1
 8009da2:	b2da      	uxtb	r2, r3
 8009da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009daa:	e000      	b.n	8009dae <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009dac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009dae:	4b08      	ldr	r3, [pc, #32]	; (8009dd0 <prvProcessReceivedCommands+0x1c0>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	1d39      	adds	r1, r7, #4
 8009db4:	2200      	movs	r2, #0
 8009db6:	4618      	mov	r0, r3
 8009db8:	f7fd fba8 	bl	800750c <xQueueReceive>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	f47f af2a 	bne.w	8009c18 <prvProcessReceivedCommands+0x8>
	}
}
 8009dc4:	bf00      	nop
 8009dc6:	bf00      	nop
 8009dc8:	3730      	adds	r7, #48	; 0x30
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
 8009dce:	bf00      	nop
 8009dd0:	20000ec0 	.word	0x20000ec0

08009dd4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b088      	sub	sp, #32
 8009dd8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009dda:	e048      	b.n	8009e6e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ddc:	4b2d      	ldr	r3, [pc, #180]	; (8009e94 <prvSwitchTimerLists+0xc0>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	68db      	ldr	r3, [r3, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009de6:	4b2b      	ldr	r3, [pc, #172]	; (8009e94 <prvSwitchTimerLists+0xc0>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	68db      	ldr	r3, [r3, #12]
 8009dec:	68db      	ldr	r3, [r3, #12]
 8009dee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	3304      	adds	r3, #4
 8009df4:	4618      	mov	r0, r3
 8009df6:	f7fc ffc9 	bl	8006d8c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	6a1b      	ldr	r3, [r3, #32]
 8009dfe:	68f8      	ldr	r0, [r7, #12]
 8009e00:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e08:	f003 0304 	and.w	r3, r3, #4
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d02e      	beq.n	8009e6e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	699b      	ldr	r3, [r3, #24]
 8009e14:	693a      	ldr	r2, [r7, #16]
 8009e16:	4413      	add	r3, r2
 8009e18:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009e1a:	68ba      	ldr	r2, [r7, #8]
 8009e1c:	693b      	ldr	r3, [r7, #16]
 8009e1e:	429a      	cmp	r2, r3
 8009e20:	d90e      	bls.n	8009e40 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	68ba      	ldr	r2, [r7, #8]
 8009e26:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	68fa      	ldr	r2, [r7, #12]
 8009e2c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009e2e:	4b19      	ldr	r3, [pc, #100]	; (8009e94 <prvSwitchTimerLists+0xc0>)
 8009e30:	681a      	ldr	r2, [r3, #0]
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	3304      	adds	r3, #4
 8009e36:	4619      	mov	r1, r3
 8009e38:	4610      	mov	r0, r2
 8009e3a:	f7fc ff6e 	bl	8006d1a <vListInsert>
 8009e3e:	e016      	b.n	8009e6e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009e40:	2300      	movs	r3, #0
 8009e42:	9300      	str	r3, [sp, #0]
 8009e44:	2300      	movs	r3, #0
 8009e46:	693a      	ldr	r2, [r7, #16]
 8009e48:	2100      	movs	r1, #0
 8009e4a:	68f8      	ldr	r0, [r7, #12]
 8009e4c:	f7ff fd60 	bl	8009910 <xTimerGenericCommand>
 8009e50:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d10a      	bne.n	8009e6e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e5c:	f383 8811 	msr	BASEPRI, r3
 8009e60:	f3bf 8f6f 	isb	sy
 8009e64:	f3bf 8f4f 	dsb	sy
 8009e68:	603b      	str	r3, [r7, #0]
}
 8009e6a:	bf00      	nop
 8009e6c:	e7fe      	b.n	8009e6c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009e6e:	4b09      	ldr	r3, [pc, #36]	; (8009e94 <prvSwitchTimerLists+0xc0>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d1b1      	bne.n	8009ddc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009e78:	4b06      	ldr	r3, [pc, #24]	; (8009e94 <prvSwitchTimerLists+0xc0>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009e7e:	4b06      	ldr	r3, [pc, #24]	; (8009e98 <prvSwitchTimerLists+0xc4>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4a04      	ldr	r2, [pc, #16]	; (8009e94 <prvSwitchTimerLists+0xc0>)
 8009e84:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009e86:	4a04      	ldr	r2, [pc, #16]	; (8009e98 <prvSwitchTimerLists+0xc4>)
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	6013      	str	r3, [r2, #0]
}
 8009e8c:	bf00      	nop
 8009e8e:	3718      	adds	r7, #24
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}
 8009e94:	20000eb8 	.word	0x20000eb8
 8009e98:	20000ebc 	.word	0x20000ebc

08009e9c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b082      	sub	sp, #8
 8009ea0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009ea2:	f000 f967 	bl	800a174 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009ea6:	4b15      	ldr	r3, [pc, #84]	; (8009efc <prvCheckForValidListAndQueue+0x60>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d120      	bne.n	8009ef0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009eae:	4814      	ldr	r0, [pc, #80]	; (8009f00 <prvCheckForValidListAndQueue+0x64>)
 8009eb0:	f7fc fee2 	bl	8006c78 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009eb4:	4813      	ldr	r0, [pc, #76]	; (8009f04 <prvCheckForValidListAndQueue+0x68>)
 8009eb6:	f7fc fedf 	bl	8006c78 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009eba:	4b13      	ldr	r3, [pc, #76]	; (8009f08 <prvCheckForValidListAndQueue+0x6c>)
 8009ebc:	4a10      	ldr	r2, [pc, #64]	; (8009f00 <prvCheckForValidListAndQueue+0x64>)
 8009ebe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009ec0:	4b12      	ldr	r3, [pc, #72]	; (8009f0c <prvCheckForValidListAndQueue+0x70>)
 8009ec2:	4a10      	ldr	r2, [pc, #64]	; (8009f04 <prvCheckForValidListAndQueue+0x68>)
 8009ec4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	9300      	str	r3, [sp, #0]
 8009eca:	4b11      	ldr	r3, [pc, #68]	; (8009f10 <prvCheckForValidListAndQueue+0x74>)
 8009ecc:	4a11      	ldr	r2, [pc, #68]	; (8009f14 <prvCheckForValidListAndQueue+0x78>)
 8009ece:	2110      	movs	r1, #16
 8009ed0:	200a      	movs	r0, #10
 8009ed2:	f7fc ffed 	bl	8006eb0 <xQueueGenericCreateStatic>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	4a08      	ldr	r2, [pc, #32]	; (8009efc <prvCheckForValidListAndQueue+0x60>)
 8009eda:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009edc:	4b07      	ldr	r3, [pc, #28]	; (8009efc <prvCheckForValidListAndQueue+0x60>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d005      	beq.n	8009ef0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009ee4:	4b05      	ldr	r3, [pc, #20]	; (8009efc <prvCheckForValidListAndQueue+0x60>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	490b      	ldr	r1, [pc, #44]	; (8009f18 <prvCheckForValidListAndQueue+0x7c>)
 8009eea:	4618      	mov	r0, r3
 8009eec:	f7fd fe22 	bl	8007b34 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009ef0:	f000 f970 	bl	800a1d4 <vPortExitCritical>
}
 8009ef4:	bf00      	nop
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
 8009efa:	bf00      	nop
 8009efc:	20000ec0 	.word	0x20000ec0
 8009f00:	20000e90 	.word	0x20000e90
 8009f04:	20000ea4 	.word	0x20000ea4
 8009f08:	20000eb8 	.word	0x20000eb8
 8009f0c:	20000ebc 	.word	0x20000ebc
 8009f10:	20000f6c 	.word	0x20000f6c
 8009f14:	20000ecc 	.word	0x20000ecc
 8009f18:	0800b500 	.word	0x0800b500

08009f1c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b085      	sub	sp, #20
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	60f8      	str	r0, [r7, #12]
 8009f24:	60b9      	str	r1, [r7, #8]
 8009f26:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	3b04      	subs	r3, #4
 8009f2c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009f34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	3b04      	subs	r3, #4
 8009f3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	f023 0201 	bic.w	r2, r3, #1
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	3b04      	subs	r3, #4
 8009f4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009f4c:	4a0c      	ldr	r2, [pc, #48]	; (8009f80 <pxPortInitialiseStack+0x64>)
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	3b14      	subs	r3, #20
 8009f56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009f58:	687a      	ldr	r2, [r7, #4]
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	3b04      	subs	r3, #4
 8009f62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f06f 0202 	mvn.w	r2, #2
 8009f6a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	3b20      	subs	r3, #32
 8009f70:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009f72:	68fb      	ldr	r3, [r7, #12]
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3714      	adds	r7, #20
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7e:	4770      	bx	lr
 8009f80:	08009f85 	.word	0x08009f85

08009f84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009f84:	b480      	push	{r7}
 8009f86:	b085      	sub	sp, #20
 8009f88:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009f8e:	4b12      	ldr	r3, [pc, #72]	; (8009fd8 <prvTaskExitError+0x54>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f96:	d00a      	beq.n	8009fae <prvTaskExitError+0x2a>
	__asm volatile
 8009f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f9c:	f383 8811 	msr	BASEPRI, r3
 8009fa0:	f3bf 8f6f 	isb	sy
 8009fa4:	f3bf 8f4f 	dsb	sy
 8009fa8:	60fb      	str	r3, [r7, #12]
}
 8009faa:	bf00      	nop
 8009fac:	e7fe      	b.n	8009fac <prvTaskExitError+0x28>
	__asm volatile
 8009fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb2:	f383 8811 	msr	BASEPRI, r3
 8009fb6:	f3bf 8f6f 	isb	sy
 8009fba:	f3bf 8f4f 	dsb	sy
 8009fbe:	60bb      	str	r3, [r7, #8]
}
 8009fc0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009fc2:	bf00      	nop
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d0fc      	beq.n	8009fc4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009fca:	bf00      	nop
 8009fcc:	bf00      	nop
 8009fce:	3714      	adds	r7, #20
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd6:	4770      	bx	lr
 8009fd8:	20000098 	.word	0x20000098
 8009fdc:	00000000 	.word	0x00000000

08009fe0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009fe0:	4b07      	ldr	r3, [pc, #28]	; (800a000 <pxCurrentTCBConst2>)
 8009fe2:	6819      	ldr	r1, [r3, #0]
 8009fe4:	6808      	ldr	r0, [r1, #0]
 8009fe6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fea:	f380 8809 	msr	PSP, r0
 8009fee:	f3bf 8f6f 	isb	sy
 8009ff2:	f04f 0000 	mov.w	r0, #0
 8009ff6:	f380 8811 	msr	BASEPRI, r0
 8009ffa:	4770      	bx	lr
 8009ffc:	f3af 8000 	nop.w

0800a000 <pxCurrentTCBConst2>:
 800a000:	20000990 	.word	0x20000990
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a004:	bf00      	nop
 800a006:	bf00      	nop

0800a008 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a008:	4808      	ldr	r0, [pc, #32]	; (800a02c <prvPortStartFirstTask+0x24>)
 800a00a:	6800      	ldr	r0, [r0, #0]
 800a00c:	6800      	ldr	r0, [r0, #0]
 800a00e:	f380 8808 	msr	MSP, r0
 800a012:	f04f 0000 	mov.w	r0, #0
 800a016:	f380 8814 	msr	CONTROL, r0
 800a01a:	b662      	cpsie	i
 800a01c:	b661      	cpsie	f
 800a01e:	f3bf 8f4f 	dsb	sy
 800a022:	f3bf 8f6f 	isb	sy
 800a026:	df00      	svc	0
 800a028:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a02a:	bf00      	nop
 800a02c:	e000ed08 	.word	0xe000ed08

0800a030 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b086      	sub	sp, #24
 800a034:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a036:	4b46      	ldr	r3, [pc, #280]	; (800a150 <xPortStartScheduler+0x120>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4a46      	ldr	r2, [pc, #280]	; (800a154 <xPortStartScheduler+0x124>)
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d10a      	bne.n	800a056 <xPortStartScheduler+0x26>
	__asm volatile
 800a040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a044:	f383 8811 	msr	BASEPRI, r3
 800a048:	f3bf 8f6f 	isb	sy
 800a04c:	f3bf 8f4f 	dsb	sy
 800a050:	613b      	str	r3, [r7, #16]
}
 800a052:	bf00      	nop
 800a054:	e7fe      	b.n	800a054 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a056:	4b3e      	ldr	r3, [pc, #248]	; (800a150 <xPortStartScheduler+0x120>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	4a3f      	ldr	r2, [pc, #252]	; (800a158 <xPortStartScheduler+0x128>)
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d10a      	bne.n	800a076 <xPortStartScheduler+0x46>
	__asm volatile
 800a060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a064:	f383 8811 	msr	BASEPRI, r3
 800a068:	f3bf 8f6f 	isb	sy
 800a06c:	f3bf 8f4f 	dsb	sy
 800a070:	60fb      	str	r3, [r7, #12]
}
 800a072:	bf00      	nop
 800a074:	e7fe      	b.n	800a074 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a076:	4b39      	ldr	r3, [pc, #228]	; (800a15c <xPortStartScheduler+0x12c>)
 800a078:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	781b      	ldrb	r3, [r3, #0]
 800a07e:	b2db      	uxtb	r3, r3
 800a080:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	22ff      	movs	r2, #255	; 0xff
 800a086:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	781b      	ldrb	r3, [r3, #0]
 800a08c:	b2db      	uxtb	r3, r3
 800a08e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a090:	78fb      	ldrb	r3, [r7, #3]
 800a092:	b2db      	uxtb	r3, r3
 800a094:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a098:	b2da      	uxtb	r2, r3
 800a09a:	4b31      	ldr	r3, [pc, #196]	; (800a160 <xPortStartScheduler+0x130>)
 800a09c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a09e:	4b31      	ldr	r3, [pc, #196]	; (800a164 <xPortStartScheduler+0x134>)
 800a0a0:	2207      	movs	r2, #7
 800a0a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a0a4:	e009      	b.n	800a0ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a0a6:	4b2f      	ldr	r3, [pc, #188]	; (800a164 <xPortStartScheduler+0x134>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	3b01      	subs	r3, #1
 800a0ac:	4a2d      	ldr	r2, [pc, #180]	; (800a164 <xPortStartScheduler+0x134>)
 800a0ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a0b0:	78fb      	ldrb	r3, [r7, #3]
 800a0b2:	b2db      	uxtb	r3, r3
 800a0b4:	005b      	lsls	r3, r3, #1
 800a0b6:	b2db      	uxtb	r3, r3
 800a0b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a0ba:	78fb      	ldrb	r3, [r7, #3]
 800a0bc:	b2db      	uxtb	r3, r3
 800a0be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0c2:	2b80      	cmp	r3, #128	; 0x80
 800a0c4:	d0ef      	beq.n	800a0a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a0c6:	4b27      	ldr	r3, [pc, #156]	; (800a164 <xPortStartScheduler+0x134>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f1c3 0307 	rsb	r3, r3, #7
 800a0ce:	2b04      	cmp	r3, #4
 800a0d0:	d00a      	beq.n	800a0e8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a0d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d6:	f383 8811 	msr	BASEPRI, r3
 800a0da:	f3bf 8f6f 	isb	sy
 800a0de:	f3bf 8f4f 	dsb	sy
 800a0e2:	60bb      	str	r3, [r7, #8]
}
 800a0e4:	bf00      	nop
 800a0e6:	e7fe      	b.n	800a0e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a0e8:	4b1e      	ldr	r3, [pc, #120]	; (800a164 <xPortStartScheduler+0x134>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	021b      	lsls	r3, r3, #8
 800a0ee:	4a1d      	ldr	r2, [pc, #116]	; (800a164 <xPortStartScheduler+0x134>)
 800a0f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a0f2:	4b1c      	ldr	r3, [pc, #112]	; (800a164 <xPortStartScheduler+0x134>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a0fa:	4a1a      	ldr	r2, [pc, #104]	; (800a164 <xPortStartScheduler+0x134>)
 800a0fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	b2da      	uxtb	r2, r3
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a106:	4b18      	ldr	r3, [pc, #96]	; (800a168 <xPortStartScheduler+0x138>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	4a17      	ldr	r2, [pc, #92]	; (800a168 <xPortStartScheduler+0x138>)
 800a10c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a110:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a112:	4b15      	ldr	r3, [pc, #84]	; (800a168 <xPortStartScheduler+0x138>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	4a14      	ldr	r2, [pc, #80]	; (800a168 <xPortStartScheduler+0x138>)
 800a118:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a11c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a11e:	f000 f8dd 	bl	800a2dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a122:	4b12      	ldr	r3, [pc, #72]	; (800a16c <xPortStartScheduler+0x13c>)
 800a124:	2200      	movs	r2, #0
 800a126:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a128:	f000 f8fc 	bl	800a324 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a12c:	4b10      	ldr	r3, [pc, #64]	; (800a170 <xPortStartScheduler+0x140>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	4a0f      	ldr	r2, [pc, #60]	; (800a170 <xPortStartScheduler+0x140>)
 800a132:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a136:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a138:	f7ff ff66 	bl	800a008 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a13c:	f7fe fcee 	bl	8008b1c <vTaskSwitchContext>
	prvTaskExitError();
 800a140:	f7ff ff20 	bl	8009f84 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a144:	2300      	movs	r3, #0
}
 800a146:	4618      	mov	r0, r3
 800a148:	3718      	adds	r7, #24
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}
 800a14e:	bf00      	nop
 800a150:	e000ed00 	.word	0xe000ed00
 800a154:	410fc271 	.word	0x410fc271
 800a158:	410fc270 	.word	0x410fc270
 800a15c:	e000e400 	.word	0xe000e400
 800a160:	20000fbc 	.word	0x20000fbc
 800a164:	20000fc0 	.word	0x20000fc0
 800a168:	e000ed20 	.word	0xe000ed20
 800a16c:	20000098 	.word	0x20000098
 800a170:	e000ef34 	.word	0xe000ef34

0800a174 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a174:	b480      	push	{r7}
 800a176:	b083      	sub	sp, #12
 800a178:	af00      	add	r7, sp, #0
	__asm volatile
 800a17a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a17e:	f383 8811 	msr	BASEPRI, r3
 800a182:	f3bf 8f6f 	isb	sy
 800a186:	f3bf 8f4f 	dsb	sy
 800a18a:	607b      	str	r3, [r7, #4]
}
 800a18c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a18e:	4b0f      	ldr	r3, [pc, #60]	; (800a1cc <vPortEnterCritical+0x58>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	3301      	adds	r3, #1
 800a194:	4a0d      	ldr	r2, [pc, #52]	; (800a1cc <vPortEnterCritical+0x58>)
 800a196:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a198:	4b0c      	ldr	r3, [pc, #48]	; (800a1cc <vPortEnterCritical+0x58>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	2b01      	cmp	r3, #1
 800a19e:	d10f      	bne.n	800a1c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a1a0:	4b0b      	ldr	r3, [pc, #44]	; (800a1d0 <vPortEnterCritical+0x5c>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	b2db      	uxtb	r3, r3
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d00a      	beq.n	800a1c0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ae:	f383 8811 	msr	BASEPRI, r3
 800a1b2:	f3bf 8f6f 	isb	sy
 800a1b6:	f3bf 8f4f 	dsb	sy
 800a1ba:	603b      	str	r3, [r7, #0]
}
 800a1bc:	bf00      	nop
 800a1be:	e7fe      	b.n	800a1be <vPortEnterCritical+0x4a>
	}
}
 800a1c0:	bf00      	nop
 800a1c2:	370c      	adds	r7, #12
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ca:	4770      	bx	lr
 800a1cc:	20000098 	.word	0x20000098
 800a1d0:	e000ed04 	.word	0xe000ed04

0800a1d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b083      	sub	sp, #12
 800a1d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a1da:	4b12      	ldr	r3, [pc, #72]	; (800a224 <vPortExitCritical+0x50>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d10a      	bne.n	800a1f8 <vPortExitCritical+0x24>
	__asm volatile
 800a1e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1e6:	f383 8811 	msr	BASEPRI, r3
 800a1ea:	f3bf 8f6f 	isb	sy
 800a1ee:	f3bf 8f4f 	dsb	sy
 800a1f2:	607b      	str	r3, [r7, #4]
}
 800a1f4:	bf00      	nop
 800a1f6:	e7fe      	b.n	800a1f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a1f8:	4b0a      	ldr	r3, [pc, #40]	; (800a224 <vPortExitCritical+0x50>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	3b01      	subs	r3, #1
 800a1fe:	4a09      	ldr	r2, [pc, #36]	; (800a224 <vPortExitCritical+0x50>)
 800a200:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a202:	4b08      	ldr	r3, [pc, #32]	; (800a224 <vPortExitCritical+0x50>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d105      	bne.n	800a216 <vPortExitCritical+0x42>
 800a20a:	2300      	movs	r3, #0
 800a20c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	f383 8811 	msr	BASEPRI, r3
}
 800a214:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a216:	bf00      	nop
 800a218:	370c      	adds	r7, #12
 800a21a:	46bd      	mov	sp, r7
 800a21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a220:	4770      	bx	lr
 800a222:	bf00      	nop
 800a224:	20000098 	.word	0x20000098
	...

0800a230 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a230:	f3ef 8009 	mrs	r0, PSP
 800a234:	f3bf 8f6f 	isb	sy
 800a238:	4b15      	ldr	r3, [pc, #84]	; (800a290 <pxCurrentTCBConst>)
 800a23a:	681a      	ldr	r2, [r3, #0]
 800a23c:	f01e 0f10 	tst.w	lr, #16
 800a240:	bf08      	it	eq
 800a242:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a246:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a24a:	6010      	str	r0, [r2, #0]
 800a24c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a250:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a254:	f380 8811 	msr	BASEPRI, r0
 800a258:	f3bf 8f4f 	dsb	sy
 800a25c:	f3bf 8f6f 	isb	sy
 800a260:	f7fe fc5c 	bl	8008b1c <vTaskSwitchContext>
 800a264:	f04f 0000 	mov.w	r0, #0
 800a268:	f380 8811 	msr	BASEPRI, r0
 800a26c:	bc09      	pop	{r0, r3}
 800a26e:	6819      	ldr	r1, [r3, #0]
 800a270:	6808      	ldr	r0, [r1, #0]
 800a272:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a276:	f01e 0f10 	tst.w	lr, #16
 800a27a:	bf08      	it	eq
 800a27c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a280:	f380 8809 	msr	PSP, r0
 800a284:	f3bf 8f6f 	isb	sy
 800a288:	4770      	bx	lr
 800a28a:	bf00      	nop
 800a28c:	f3af 8000 	nop.w

0800a290 <pxCurrentTCBConst>:
 800a290:	20000990 	.word	0x20000990
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a294:	bf00      	nop
 800a296:	bf00      	nop

0800a298 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b082      	sub	sp, #8
 800a29c:	af00      	add	r7, sp, #0
	__asm volatile
 800a29e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a2:	f383 8811 	msr	BASEPRI, r3
 800a2a6:	f3bf 8f6f 	isb	sy
 800a2aa:	f3bf 8f4f 	dsb	sy
 800a2ae:	607b      	str	r3, [r7, #4]
}
 800a2b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a2b2:	f7fe fb79 	bl	80089a8 <xTaskIncrementTick>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d003      	beq.n	800a2c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a2bc:	4b06      	ldr	r3, [pc, #24]	; (800a2d8 <xPortSysTickHandler+0x40>)
 800a2be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2c2:	601a      	str	r2, [r3, #0]
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	f383 8811 	msr	BASEPRI, r3
}
 800a2ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a2d0:	bf00      	nop
 800a2d2:	3708      	adds	r7, #8
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}
 800a2d8:	e000ed04 	.word	0xe000ed04

0800a2dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a2dc:	b480      	push	{r7}
 800a2de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a2e0:	4b0b      	ldr	r3, [pc, #44]	; (800a310 <vPortSetupTimerInterrupt+0x34>)
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a2e6:	4b0b      	ldr	r3, [pc, #44]	; (800a314 <vPortSetupTimerInterrupt+0x38>)
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a2ec:	4b0a      	ldr	r3, [pc, #40]	; (800a318 <vPortSetupTimerInterrupt+0x3c>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	4a0a      	ldr	r2, [pc, #40]	; (800a31c <vPortSetupTimerInterrupt+0x40>)
 800a2f2:	fba2 2303 	umull	r2, r3, r2, r3
 800a2f6:	099b      	lsrs	r3, r3, #6
 800a2f8:	4a09      	ldr	r2, [pc, #36]	; (800a320 <vPortSetupTimerInterrupt+0x44>)
 800a2fa:	3b01      	subs	r3, #1
 800a2fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a2fe:	4b04      	ldr	r3, [pc, #16]	; (800a310 <vPortSetupTimerInterrupt+0x34>)
 800a300:	2207      	movs	r2, #7
 800a302:	601a      	str	r2, [r3, #0]
}
 800a304:	bf00      	nop
 800a306:	46bd      	mov	sp, r7
 800a308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30c:	4770      	bx	lr
 800a30e:	bf00      	nop
 800a310:	e000e010 	.word	0xe000e010
 800a314:	e000e018 	.word	0xe000e018
 800a318:	20000000 	.word	0x20000000
 800a31c:	10624dd3 	.word	0x10624dd3
 800a320:	e000e014 	.word	0xe000e014

0800a324 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a324:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a334 <vPortEnableVFP+0x10>
 800a328:	6801      	ldr	r1, [r0, #0]
 800a32a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a32e:	6001      	str	r1, [r0, #0]
 800a330:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a332:	bf00      	nop
 800a334:	e000ed88 	.word	0xe000ed88

0800a338 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a338:	b480      	push	{r7}
 800a33a:	b085      	sub	sp, #20
 800a33c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a33e:	f3ef 8305 	mrs	r3, IPSR
 800a342:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	2b0f      	cmp	r3, #15
 800a348:	d914      	bls.n	800a374 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a34a:	4a17      	ldr	r2, [pc, #92]	; (800a3a8 <vPortValidateInterruptPriority+0x70>)
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	4413      	add	r3, r2
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a354:	4b15      	ldr	r3, [pc, #84]	; (800a3ac <vPortValidateInterruptPriority+0x74>)
 800a356:	781b      	ldrb	r3, [r3, #0]
 800a358:	7afa      	ldrb	r2, [r7, #11]
 800a35a:	429a      	cmp	r2, r3
 800a35c:	d20a      	bcs.n	800a374 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a362:	f383 8811 	msr	BASEPRI, r3
 800a366:	f3bf 8f6f 	isb	sy
 800a36a:	f3bf 8f4f 	dsb	sy
 800a36e:	607b      	str	r3, [r7, #4]
}
 800a370:	bf00      	nop
 800a372:	e7fe      	b.n	800a372 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a374:	4b0e      	ldr	r3, [pc, #56]	; (800a3b0 <vPortValidateInterruptPriority+0x78>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a37c:	4b0d      	ldr	r3, [pc, #52]	; (800a3b4 <vPortValidateInterruptPriority+0x7c>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	429a      	cmp	r2, r3
 800a382:	d90a      	bls.n	800a39a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a384:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a388:	f383 8811 	msr	BASEPRI, r3
 800a38c:	f3bf 8f6f 	isb	sy
 800a390:	f3bf 8f4f 	dsb	sy
 800a394:	603b      	str	r3, [r7, #0]
}
 800a396:	bf00      	nop
 800a398:	e7fe      	b.n	800a398 <vPortValidateInterruptPriority+0x60>
	}
 800a39a:	bf00      	nop
 800a39c:	3714      	adds	r7, #20
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a4:	4770      	bx	lr
 800a3a6:	bf00      	nop
 800a3a8:	e000e3f0 	.word	0xe000e3f0
 800a3ac:	20000fbc 	.word	0x20000fbc
 800a3b0:	e000ed0c 	.word	0xe000ed0c
 800a3b4:	20000fc0 	.word	0x20000fc0

0800a3b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b08a      	sub	sp, #40	; 0x28
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a3c4:	f7fe fa34 	bl	8008830 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a3c8:	4b5b      	ldr	r3, [pc, #364]	; (800a538 <pvPortMalloc+0x180>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d101      	bne.n	800a3d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a3d0:	f000 f920 	bl	800a614 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a3d4:	4b59      	ldr	r3, [pc, #356]	; (800a53c <pvPortMalloc+0x184>)
 800a3d6:	681a      	ldr	r2, [r3, #0]
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	4013      	ands	r3, r2
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	f040 8093 	bne.w	800a508 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d01d      	beq.n	800a424 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a3e8:	2208      	movs	r2, #8
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	4413      	add	r3, r2
 800a3ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f003 0307 	and.w	r3, r3, #7
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d014      	beq.n	800a424 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f023 0307 	bic.w	r3, r3, #7
 800a400:	3308      	adds	r3, #8
 800a402:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f003 0307 	and.w	r3, r3, #7
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d00a      	beq.n	800a424 <pvPortMalloc+0x6c>
	__asm volatile
 800a40e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a412:	f383 8811 	msr	BASEPRI, r3
 800a416:	f3bf 8f6f 	isb	sy
 800a41a:	f3bf 8f4f 	dsb	sy
 800a41e:	617b      	str	r3, [r7, #20]
}
 800a420:	bf00      	nop
 800a422:	e7fe      	b.n	800a422 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d06e      	beq.n	800a508 <pvPortMalloc+0x150>
 800a42a:	4b45      	ldr	r3, [pc, #276]	; (800a540 <pvPortMalloc+0x188>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	687a      	ldr	r2, [r7, #4]
 800a430:	429a      	cmp	r2, r3
 800a432:	d869      	bhi.n	800a508 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a434:	4b43      	ldr	r3, [pc, #268]	; (800a544 <pvPortMalloc+0x18c>)
 800a436:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a438:	4b42      	ldr	r3, [pc, #264]	; (800a544 <pvPortMalloc+0x18c>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a43e:	e004      	b.n	800a44a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a442:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44c:	685b      	ldr	r3, [r3, #4]
 800a44e:	687a      	ldr	r2, [r7, #4]
 800a450:	429a      	cmp	r2, r3
 800a452:	d903      	bls.n	800a45c <pvPortMalloc+0xa4>
 800a454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d1f1      	bne.n	800a440 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a45c:	4b36      	ldr	r3, [pc, #216]	; (800a538 <pvPortMalloc+0x180>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a462:	429a      	cmp	r2, r3
 800a464:	d050      	beq.n	800a508 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a466:	6a3b      	ldr	r3, [r7, #32]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	2208      	movs	r2, #8
 800a46c:	4413      	add	r3, r2
 800a46e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a472:	681a      	ldr	r2, [r3, #0]
 800a474:	6a3b      	ldr	r3, [r7, #32]
 800a476:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a47a:	685a      	ldr	r2, [r3, #4]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	1ad2      	subs	r2, r2, r3
 800a480:	2308      	movs	r3, #8
 800a482:	005b      	lsls	r3, r3, #1
 800a484:	429a      	cmp	r2, r3
 800a486:	d91f      	bls.n	800a4c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	4413      	add	r3, r2
 800a48e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a490:	69bb      	ldr	r3, [r7, #24]
 800a492:	f003 0307 	and.w	r3, r3, #7
 800a496:	2b00      	cmp	r3, #0
 800a498:	d00a      	beq.n	800a4b0 <pvPortMalloc+0xf8>
	__asm volatile
 800a49a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a49e:	f383 8811 	msr	BASEPRI, r3
 800a4a2:	f3bf 8f6f 	isb	sy
 800a4a6:	f3bf 8f4f 	dsb	sy
 800a4aa:	613b      	str	r3, [r7, #16]
}
 800a4ac:	bf00      	nop
 800a4ae:	e7fe      	b.n	800a4ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b2:	685a      	ldr	r2, [r3, #4]
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	1ad2      	subs	r2, r2, r3
 800a4b8:	69bb      	ldr	r3, [r7, #24]
 800a4ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4be:	687a      	ldr	r2, [r7, #4]
 800a4c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a4c2:	69b8      	ldr	r0, [r7, #24]
 800a4c4:	f000 f908 	bl	800a6d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a4c8:	4b1d      	ldr	r3, [pc, #116]	; (800a540 <pvPortMalloc+0x188>)
 800a4ca:	681a      	ldr	r2, [r3, #0]
 800a4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ce:	685b      	ldr	r3, [r3, #4]
 800a4d0:	1ad3      	subs	r3, r2, r3
 800a4d2:	4a1b      	ldr	r2, [pc, #108]	; (800a540 <pvPortMalloc+0x188>)
 800a4d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a4d6:	4b1a      	ldr	r3, [pc, #104]	; (800a540 <pvPortMalloc+0x188>)
 800a4d8:	681a      	ldr	r2, [r3, #0]
 800a4da:	4b1b      	ldr	r3, [pc, #108]	; (800a548 <pvPortMalloc+0x190>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	429a      	cmp	r2, r3
 800a4e0:	d203      	bcs.n	800a4ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a4e2:	4b17      	ldr	r3, [pc, #92]	; (800a540 <pvPortMalloc+0x188>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	4a18      	ldr	r2, [pc, #96]	; (800a548 <pvPortMalloc+0x190>)
 800a4e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ec:	685a      	ldr	r2, [r3, #4]
 800a4ee:	4b13      	ldr	r3, [pc, #76]	; (800a53c <pvPortMalloc+0x184>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	431a      	orrs	r2, r3
 800a4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a4fe:	4b13      	ldr	r3, [pc, #76]	; (800a54c <pvPortMalloc+0x194>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	3301      	adds	r3, #1
 800a504:	4a11      	ldr	r2, [pc, #68]	; (800a54c <pvPortMalloc+0x194>)
 800a506:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a508:	f7fe f9a0 	bl	800884c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a50c:	69fb      	ldr	r3, [r7, #28]
 800a50e:	f003 0307 	and.w	r3, r3, #7
 800a512:	2b00      	cmp	r3, #0
 800a514:	d00a      	beq.n	800a52c <pvPortMalloc+0x174>
	__asm volatile
 800a516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a51a:	f383 8811 	msr	BASEPRI, r3
 800a51e:	f3bf 8f6f 	isb	sy
 800a522:	f3bf 8f4f 	dsb	sy
 800a526:	60fb      	str	r3, [r7, #12]
}
 800a528:	bf00      	nop
 800a52a:	e7fe      	b.n	800a52a <pvPortMalloc+0x172>
	return pvReturn;
 800a52c:	69fb      	ldr	r3, [r7, #28]
}
 800a52e:	4618      	mov	r0, r3
 800a530:	3728      	adds	r7, #40	; 0x28
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}
 800a536:	bf00      	nop
 800a538:	20008fcc 	.word	0x20008fcc
 800a53c:	20008fe0 	.word	0x20008fe0
 800a540:	20008fd0 	.word	0x20008fd0
 800a544:	20008fc4 	.word	0x20008fc4
 800a548:	20008fd4 	.word	0x20008fd4
 800a54c:	20008fd8 	.word	0x20008fd8

0800a550 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b086      	sub	sp, #24
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d04d      	beq.n	800a5fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a562:	2308      	movs	r3, #8
 800a564:	425b      	negs	r3, r3
 800a566:	697a      	ldr	r2, [r7, #20]
 800a568:	4413      	add	r3, r2
 800a56a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	685a      	ldr	r2, [r3, #4]
 800a574:	4b24      	ldr	r3, [pc, #144]	; (800a608 <vPortFree+0xb8>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	4013      	ands	r3, r2
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d10a      	bne.n	800a594 <vPortFree+0x44>
	__asm volatile
 800a57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a582:	f383 8811 	msr	BASEPRI, r3
 800a586:	f3bf 8f6f 	isb	sy
 800a58a:	f3bf 8f4f 	dsb	sy
 800a58e:	60fb      	str	r3, [r7, #12]
}
 800a590:	bf00      	nop
 800a592:	e7fe      	b.n	800a592 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a594:	693b      	ldr	r3, [r7, #16]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d00a      	beq.n	800a5b2 <vPortFree+0x62>
	__asm volatile
 800a59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5a0:	f383 8811 	msr	BASEPRI, r3
 800a5a4:	f3bf 8f6f 	isb	sy
 800a5a8:	f3bf 8f4f 	dsb	sy
 800a5ac:	60bb      	str	r3, [r7, #8]
}
 800a5ae:	bf00      	nop
 800a5b0:	e7fe      	b.n	800a5b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a5b2:	693b      	ldr	r3, [r7, #16]
 800a5b4:	685a      	ldr	r2, [r3, #4]
 800a5b6:	4b14      	ldr	r3, [pc, #80]	; (800a608 <vPortFree+0xb8>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	4013      	ands	r3, r2
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d01e      	beq.n	800a5fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a5c0:	693b      	ldr	r3, [r7, #16]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d11a      	bne.n	800a5fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	685a      	ldr	r2, [r3, #4]
 800a5cc:	4b0e      	ldr	r3, [pc, #56]	; (800a608 <vPortFree+0xb8>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	43db      	mvns	r3, r3
 800a5d2:	401a      	ands	r2, r3
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a5d8:	f7fe f92a 	bl	8008830 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a5dc:	693b      	ldr	r3, [r7, #16]
 800a5de:	685a      	ldr	r2, [r3, #4]
 800a5e0:	4b0a      	ldr	r3, [pc, #40]	; (800a60c <vPortFree+0xbc>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	4413      	add	r3, r2
 800a5e6:	4a09      	ldr	r2, [pc, #36]	; (800a60c <vPortFree+0xbc>)
 800a5e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a5ea:	6938      	ldr	r0, [r7, #16]
 800a5ec:	f000 f874 	bl	800a6d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a5f0:	4b07      	ldr	r3, [pc, #28]	; (800a610 <vPortFree+0xc0>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	3301      	adds	r3, #1
 800a5f6:	4a06      	ldr	r2, [pc, #24]	; (800a610 <vPortFree+0xc0>)
 800a5f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a5fa:	f7fe f927 	bl	800884c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a5fe:	bf00      	nop
 800a600:	3718      	adds	r7, #24
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}
 800a606:	bf00      	nop
 800a608:	20008fe0 	.word	0x20008fe0
 800a60c:	20008fd0 	.word	0x20008fd0
 800a610:	20008fdc 	.word	0x20008fdc

0800a614 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a614:	b480      	push	{r7}
 800a616:	b085      	sub	sp, #20
 800a618:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a61a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a61e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a620:	4b27      	ldr	r3, [pc, #156]	; (800a6c0 <prvHeapInit+0xac>)
 800a622:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	f003 0307 	and.w	r3, r3, #7
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d00c      	beq.n	800a648 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	3307      	adds	r3, #7
 800a632:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f023 0307 	bic.w	r3, r3, #7
 800a63a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a63c:	68ba      	ldr	r2, [r7, #8]
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	1ad3      	subs	r3, r2, r3
 800a642:	4a1f      	ldr	r2, [pc, #124]	; (800a6c0 <prvHeapInit+0xac>)
 800a644:	4413      	add	r3, r2
 800a646:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a64c:	4a1d      	ldr	r2, [pc, #116]	; (800a6c4 <prvHeapInit+0xb0>)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a652:	4b1c      	ldr	r3, [pc, #112]	; (800a6c4 <prvHeapInit+0xb0>)
 800a654:	2200      	movs	r2, #0
 800a656:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	68ba      	ldr	r2, [r7, #8]
 800a65c:	4413      	add	r3, r2
 800a65e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a660:	2208      	movs	r2, #8
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	1a9b      	subs	r3, r3, r2
 800a666:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	f023 0307 	bic.w	r3, r3, #7
 800a66e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	4a15      	ldr	r2, [pc, #84]	; (800a6c8 <prvHeapInit+0xb4>)
 800a674:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a676:	4b14      	ldr	r3, [pc, #80]	; (800a6c8 <prvHeapInit+0xb4>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	2200      	movs	r2, #0
 800a67c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a67e:	4b12      	ldr	r3, [pc, #72]	; (800a6c8 <prvHeapInit+0xb4>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	2200      	movs	r2, #0
 800a684:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	68fa      	ldr	r2, [r7, #12]
 800a68e:	1ad2      	subs	r2, r2, r3
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a694:	4b0c      	ldr	r3, [pc, #48]	; (800a6c8 <prvHeapInit+0xb4>)
 800a696:	681a      	ldr	r2, [r3, #0]
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	685b      	ldr	r3, [r3, #4]
 800a6a0:	4a0a      	ldr	r2, [pc, #40]	; (800a6cc <prvHeapInit+0xb8>)
 800a6a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	685b      	ldr	r3, [r3, #4]
 800a6a8:	4a09      	ldr	r2, [pc, #36]	; (800a6d0 <prvHeapInit+0xbc>)
 800a6aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a6ac:	4b09      	ldr	r3, [pc, #36]	; (800a6d4 <prvHeapInit+0xc0>)
 800a6ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a6b2:	601a      	str	r2, [r3, #0]
}
 800a6b4:	bf00      	nop
 800a6b6:	3714      	adds	r7, #20
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6be:	4770      	bx	lr
 800a6c0:	20000fc4 	.word	0x20000fc4
 800a6c4:	20008fc4 	.word	0x20008fc4
 800a6c8:	20008fcc 	.word	0x20008fcc
 800a6cc:	20008fd4 	.word	0x20008fd4
 800a6d0:	20008fd0 	.word	0x20008fd0
 800a6d4:	20008fe0 	.word	0x20008fe0

0800a6d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b085      	sub	sp, #20
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a6e0:	4b28      	ldr	r3, [pc, #160]	; (800a784 <prvInsertBlockIntoFreeList+0xac>)
 800a6e2:	60fb      	str	r3, [r7, #12]
 800a6e4:	e002      	b.n	800a6ec <prvInsertBlockIntoFreeList+0x14>
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	60fb      	str	r3, [r7, #12]
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	687a      	ldr	r2, [r7, #4]
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d8f7      	bhi.n	800a6e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	685b      	ldr	r3, [r3, #4]
 800a6fe:	68ba      	ldr	r2, [r7, #8]
 800a700:	4413      	add	r3, r2
 800a702:	687a      	ldr	r2, [r7, #4]
 800a704:	429a      	cmp	r2, r3
 800a706:	d108      	bne.n	800a71a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	685a      	ldr	r2, [r3, #4]
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	685b      	ldr	r3, [r3, #4]
 800a710:	441a      	add	r2, r3
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	685b      	ldr	r3, [r3, #4]
 800a722:	68ba      	ldr	r2, [r7, #8]
 800a724:	441a      	add	r2, r3
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	429a      	cmp	r2, r3
 800a72c:	d118      	bne.n	800a760 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	681a      	ldr	r2, [r3, #0]
 800a732:	4b15      	ldr	r3, [pc, #84]	; (800a788 <prvInsertBlockIntoFreeList+0xb0>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	429a      	cmp	r2, r3
 800a738:	d00d      	beq.n	800a756 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	685a      	ldr	r2, [r3, #4]
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	685b      	ldr	r3, [r3, #4]
 800a744:	441a      	add	r2, r3
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	681a      	ldr	r2, [r3, #0]
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	601a      	str	r2, [r3, #0]
 800a754:	e008      	b.n	800a768 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a756:	4b0c      	ldr	r3, [pc, #48]	; (800a788 <prvInsertBlockIntoFreeList+0xb0>)
 800a758:	681a      	ldr	r2, [r3, #0]
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	601a      	str	r2, [r3, #0]
 800a75e:	e003      	b.n	800a768 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	681a      	ldr	r2, [r3, #0]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a768:	68fa      	ldr	r2, [r7, #12]
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	429a      	cmp	r2, r3
 800a76e:	d002      	beq.n	800a776 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	687a      	ldr	r2, [r7, #4]
 800a774:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a776:	bf00      	nop
 800a778:	3714      	adds	r7, #20
 800a77a:	46bd      	mov	sp, r7
 800a77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a780:	4770      	bx	lr
 800a782:	bf00      	nop
 800a784:	20008fc4 	.word	0x20008fc4
 800a788:	20008fcc 	.word	0x20008fcc

0800a78c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a790:	2200      	movs	r2, #0
 800a792:	4912      	ldr	r1, [pc, #72]	; (800a7dc <MX_USB_DEVICE_Init+0x50>)
 800a794:	4812      	ldr	r0, [pc, #72]	; (800a7e0 <MX_USB_DEVICE_Init+0x54>)
 800a796:	f7fa fe29 	bl	80053ec <USBD_Init>
 800a79a:	4603      	mov	r3, r0
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d001      	beq.n	800a7a4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a7a0:	f7f5 ff74 	bl	800068c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a7a4:	490f      	ldr	r1, [pc, #60]	; (800a7e4 <MX_USB_DEVICE_Init+0x58>)
 800a7a6:	480e      	ldr	r0, [pc, #56]	; (800a7e0 <MX_USB_DEVICE_Init+0x54>)
 800a7a8:	f7fa fe50 	bl	800544c <USBD_RegisterClass>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d001      	beq.n	800a7b6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a7b2:	f7f5 ff6b 	bl	800068c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a7b6:	490c      	ldr	r1, [pc, #48]	; (800a7e8 <MX_USB_DEVICE_Init+0x5c>)
 800a7b8:	4809      	ldr	r0, [pc, #36]	; (800a7e0 <MX_USB_DEVICE_Init+0x54>)
 800a7ba:	f7fa fd87 	bl	80052cc <USBD_CDC_RegisterInterface>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d001      	beq.n	800a7c8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a7c4:	f7f5 ff62 	bl	800068c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a7c8:	4805      	ldr	r0, [pc, #20]	; (800a7e0 <MX_USB_DEVICE_Init+0x54>)
 800a7ca:	f7fa fe75 	bl	80054b8 <USBD_Start>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d001      	beq.n	800a7d8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a7d4:	f7f5 ff5a 	bl	800068c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a7d8:	bf00      	nop
 800a7da:	bd80      	pop	{r7, pc}
 800a7dc:	200000b0 	.word	0x200000b0
 800a7e0:	20008fe4 	.word	0x20008fe4
 800a7e4:	20000018 	.word	0x20000018
 800a7e8:	2000009c 	.word	0x2000009c

0800a7ec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	4905      	ldr	r1, [pc, #20]	; (800a808 <CDC_Init_FS+0x1c>)
 800a7f4:	4805      	ldr	r0, [pc, #20]	; (800a80c <CDC_Init_FS+0x20>)
 800a7f6:	f7fa fd83 	bl	8005300 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a7fa:	4905      	ldr	r1, [pc, #20]	; (800a810 <CDC_Init_FS+0x24>)
 800a7fc:	4803      	ldr	r0, [pc, #12]	; (800a80c <CDC_Init_FS+0x20>)
 800a7fe:	f7fa fda1 	bl	8005344 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a802:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a804:	4618      	mov	r0, r3
 800a806:	bd80      	pop	{r7, pc}
 800a808:	20009ac8 	.word	0x20009ac8
 800a80c:	20008fe4 	.word	0x20008fe4
 800a810:	200092c8 	.word	0x200092c8

0800a814 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a814:	b480      	push	{r7}
 800a816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a818:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr

0800a824 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a824:	b480      	push	{r7}
 800a826:	b083      	sub	sp, #12
 800a828:	af00      	add	r7, sp, #0
 800a82a:	4603      	mov	r3, r0
 800a82c:	6039      	str	r1, [r7, #0]
 800a82e:	71fb      	strb	r3, [r7, #7]
 800a830:	4613      	mov	r3, r2
 800a832:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a834:	79fb      	ldrb	r3, [r7, #7]
 800a836:	2b23      	cmp	r3, #35	; 0x23
 800a838:	d84a      	bhi.n	800a8d0 <CDC_Control_FS+0xac>
 800a83a:	a201      	add	r2, pc, #4	; (adr r2, 800a840 <CDC_Control_FS+0x1c>)
 800a83c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a840:	0800a8d1 	.word	0x0800a8d1
 800a844:	0800a8d1 	.word	0x0800a8d1
 800a848:	0800a8d1 	.word	0x0800a8d1
 800a84c:	0800a8d1 	.word	0x0800a8d1
 800a850:	0800a8d1 	.word	0x0800a8d1
 800a854:	0800a8d1 	.word	0x0800a8d1
 800a858:	0800a8d1 	.word	0x0800a8d1
 800a85c:	0800a8d1 	.word	0x0800a8d1
 800a860:	0800a8d1 	.word	0x0800a8d1
 800a864:	0800a8d1 	.word	0x0800a8d1
 800a868:	0800a8d1 	.word	0x0800a8d1
 800a86c:	0800a8d1 	.word	0x0800a8d1
 800a870:	0800a8d1 	.word	0x0800a8d1
 800a874:	0800a8d1 	.word	0x0800a8d1
 800a878:	0800a8d1 	.word	0x0800a8d1
 800a87c:	0800a8d1 	.word	0x0800a8d1
 800a880:	0800a8d1 	.word	0x0800a8d1
 800a884:	0800a8d1 	.word	0x0800a8d1
 800a888:	0800a8d1 	.word	0x0800a8d1
 800a88c:	0800a8d1 	.word	0x0800a8d1
 800a890:	0800a8d1 	.word	0x0800a8d1
 800a894:	0800a8d1 	.word	0x0800a8d1
 800a898:	0800a8d1 	.word	0x0800a8d1
 800a89c:	0800a8d1 	.word	0x0800a8d1
 800a8a0:	0800a8d1 	.word	0x0800a8d1
 800a8a4:	0800a8d1 	.word	0x0800a8d1
 800a8a8:	0800a8d1 	.word	0x0800a8d1
 800a8ac:	0800a8d1 	.word	0x0800a8d1
 800a8b0:	0800a8d1 	.word	0x0800a8d1
 800a8b4:	0800a8d1 	.word	0x0800a8d1
 800a8b8:	0800a8d1 	.word	0x0800a8d1
 800a8bc:	0800a8d1 	.word	0x0800a8d1
 800a8c0:	0800a8d1 	.word	0x0800a8d1
 800a8c4:	0800a8d1 	.word	0x0800a8d1
 800a8c8:	0800a8d1 	.word	0x0800a8d1
 800a8cc:	0800a8d1 	.word	0x0800a8d1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a8d0:	bf00      	nop
  }

  return (USBD_OK);
 800a8d2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	370c      	adds	r7, #12
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8de:	4770      	bx	lr

0800a8e0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b084      	sub	sp, #16
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
 800a8e8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  portBASE_TYPE yield = pdFALSE;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	60fb      	str	r3, [r7, #12]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a8ee:	6879      	ldr	r1, [r7, #4]
 800a8f0:	480f      	ldr	r0, [pc, #60]	; (800a930 <CDC_Receive_FS+0x50>)
 800a8f2:	f7fa fd27 	bl	8005344 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a8f6:	480e      	ldr	r0, [pc, #56]	; (800a930 <CDC_Receive_FS+0x50>)
 800a8f8:	f7fa fd42 	bl	8005380 <USBD_CDC_ReceivePacket>

  xMessageBufferSendFromISR(rMessageBuffer, Buf, *Len, &yield);
 800a8fc:	4b0d      	ldr	r3, [pc, #52]	; (800a934 <CDC_Receive_FS+0x54>)
 800a8fe:	6818      	ldr	r0, [r3, #0]
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	681a      	ldr	r2, [r3, #0]
 800a904:	f107 030c 	add.w	r3, r7, #12
 800a908:	6879      	ldr	r1, [r7, #4]
 800a90a:	f7fd fab4 	bl	8007e76 <xStreamBufferSendFromISR>
  portYIELD_FROM_ISR(yield);
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d007      	beq.n	800a924 <CDC_Receive_FS+0x44>
 800a914:	4b08      	ldr	r3, [pc, #32]	; (800a938 <CDC_Receive_FS+0x58>)
 800a916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a91a:	601a      	str	r2, [r3, #0]
 800a91c:	f3bf 8f4f 	dsb	sy
 800a920:	f3bf 8f6f 	isb	sy

  return (USBD_OK);
 800a924:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a926:	4618      	mov	r0, r3
 800a928:	3710      	adds	r7, #16
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}
 800a92e:	bf00      	nop
 800a930:	20008fe4 	.word	0x20008fe4
 800a934:	2000a2cc 	.word	0x2000a2cc
 800a938:	e000ed04 	.word	0xe000ed04

0800a93c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b086      	sub	sp, #24
 800a940:	af00      	add	r7, sp, #0
 800a942:	60f8      	str	r0, [r7, #12]
 800a944:	60b9      	str	r1, [r7, #8]
 800a946:	4613      	mov	r3, r2
 800a948:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a94a:	2300      	movs	r3, #0
 800a94c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  portBASE_TYPE tmp = pdFALSE;
 800a94e:	2300      	movs	r3, #0
 800a950:	613b      	str	r3, [r7, #16]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  xSemaphoreGiveFromISR(sem_usb_tx, &tmp);
 800a952:	4b0c      	ldr	r3, [pc, #48]	; (800a984 <CDC_TransmitCplt_FS+0x48>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f107 0210 	add.w	r2, r7, #16
 800a95a:	4611      	mov	r1, r2
 800a95c:	4618      	mov	r0, r3
 800a95e:	f7fc fd48 	bl	80073f2 <xQueueGiveFromISR>
  portYIELD_FROM_ISR(tmp);
 800a962:	693b      	ldr	r3, [r7, #16]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d007      	beq.n	800a978 <CDC_TransmitCplt_FS+0x3c>
 800a968:	4b07      	ldr	r3, [pc, #28]	; (800a988 <CDC_TransmitCplt_FS+0x4c>)
 800a96a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a96e:	601a      	str	r2, [r3, #0]
 800a970:	f3bf 8f4f 	dsb	sy
 800a974:	f3bf 8f6f 	isb	sy
  /* USER CODE END 13 */
  return result;
 800a978:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a97c:	4618      	mov	r0, r3
 800a97e:	3718      	adds	r7, #24
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}
 800a984:	200092c0 	.word	0x200092c0
 800a988:	e000ed04 	.word	0xe000ed04

0800a98c <init_usb_rtos_obj>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
volatile uint32_t usb_is_on = 0;
void init_usb_rtos_obj(void){
 800a98c:	b580      	push	{r7, lr}
 800a98e:	af00      	add	r7, sp, #0

	sem_usb_tx = xSemaphoreCreateBinary();
 800a990:	2203      	movs	r2, #3
 800a992:	2100      	movs	r1, #0
 800a994:	2001      	movs	r0, #1
 800a996:	f7fc fb03 	bl	8006fa0 <xQueueGenericCreate>
 800a99a:	4603      	mov	r3, r0
 800a99c:	4a0f      	ldr	r2, [pc, #60]	; (800a9dc <init_usb_rtos_obj+0x50>)
 800a99e:	6013      	str	r3, [r2, #0]
	mutex_usb = xSemaphoreCreateMutex();
 800a9a0:	2001      	movs	r0, #1
 800a9a2:	f7fc fb74 	bl	800708e <xQueueCreateMutex>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	4a0d      	ldr	r2, [pc, #52]	; (800a9e0 <init_usb_rtos_obj+0x54>)
 800a9aa:	6013      	str	r3, [r2, #0]
	//queue_usb = xQueueCreate(768, sizeof(char));
	xMessageBuffer = xMessageBufferCreate(768);
 800a9ac:	2201      	movs	r2, #1
 800a9ae:	2100      	movs	r1, #0
 800a9b0:	f44f 7040 	mov.w	r0, #768	; 0x300
 800a9b4:	f7fd f91c 	bl	8007bf0 <xStreamBufferGenericCreate>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	4a0a      	ldr	r2, [pc, #40]	; (800a9e4 <init_usb_rtos_obj+0x58>)
 800a9bc:	6013      	str	r3, [r2, #0]
	rMessageBuffer = xMessageBufferCreate(768);
 800a9be:	2201      	movs	r2, #1
 800a9c0:	2100      	movs	r1, #0
 800a9c2:	f44f 7040 	mov.w	r0, #768	; 0x300
 800a9c6:	f7fd f913 	bl	8007bf0 <xStreamBufferGenericCreate>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	4a06      	ldr	r2, [pc, #24]	; (800a9e8 <init_usb_rtos_obj+0x5c>)
 800a9ce:	6013      	str	r3, [r2, #0]
	usb_is_on = 1;
 800a9d0:	4b06      	ldr	r3, [pc, #24]	; (800a9ec <init_usb_rtos_obj+0x60>)
 800a9d2:	2201      	movs	r2, #1
 800a9d4:	601a      	str	r2, [r3, #0]
}
 800a9d6:	bf00      	nop
 800a9d8:	bd80      	pop	{r7, pc}
 800a9da:	bf00      	nop
 800a9dc:	200092c0 	.word	0x200092c0
 800a9e0:	200092c4 	.word	0x200092c4
 800a9e4:	2000a2c8 	.word	0x2000a2c8
 800a9e8:	2000a2cc 	.word	0x2000a2cc
 800a9ec:	2000a2d0 	.word	0x2000a2d0

0800a9f0 <receive_usb_data>:
    // The entire table was written directly to the output buffer.  Execution
    of this command is complete, so return pdFALSE.
    //return pdFALSE;
}*/

size_t receive_usb_data(uint8_t *data, int size, TickType_t timeout){
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b084      	sub	sp, #16
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	60f8      	str	r0, [r7, #12]
 800a9f8:	60b9      	str	r1, [r7, #8]
 800a9fa:	607a      	str	r2, [r7, #4]
	return xMessageBufferReceive(rMessageBuffer, (void *)data, size, timeout);
 800a9fc:	4b05      	ldr	r3, [pc, #20]	; (800aa14 <receive_usb_data+0x24>)
 800a9fe:	6818      	ldr	r0, [r3, #0]
 800aa00:	68ba      	ldr	r2, [r7, #8]
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	68f9      	ldr	r1, [r7, #12]
 800aa06:	f7fd fae4 	bl	8007fd2 <xStreamBufferReceive>
 800aa0a:	4603      	mov	r3, r0
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	3710      	adds	r7, #16
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd80      	pop	{r7, pc}
 800aa14:	2000a2cc 	.word	0x2000a2cc

0800aa18 <queue_print_usb>:

void queue_print_usb(uint8_t *data, int size, TickType_t timeout){
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b084      	sub	sp, #16
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	60f8      	str	r0, [r7, #12]
 800aa20:	60b9      	str	r1, [r7, #8]
 800aa22:	607a      	str	r2, [r7, #4]
	if(xSemaphoreTake(mutex_usb, portMAX_DELAY) == pdTRUE) {
 800aa24:	4b0e      	ldr	r3, [pc, #56]	; (800aa60 <queue_print_usb+0x48>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f7fc fe4d 	bl	80076cc <xQueueSemaphoreTake>
 800aa32:	4603      	mov	r3, r0
 800aa34:	2b01      	cmp	r3, #1
 800aa36:	d10e      	bne.n	800aa56 <queue_print_usb+0x3e>
		xMessageBufferSend(xMessageBuffer, data, size, portMAX_DELAY);
 800aa38:	4b0a      	ldr	r3, [pc, #40]	; (800aa64 <queue_print_usb+0x4c>)
 800aa3a:	6818      	ldr	r0, [r3, #0]
 800aa3c:	68ba      	ldr	r2, [r7, #8]
 800aa3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aa42:	68f9      	ldr	r1, [r7, #12]
 800aa44:	f7fd f962 	bl	8007d0c <xStreamBufferSend>
		xSemaphoreTake(sem_usb_tx, portMAX_DELAY);
 800aa48:	4b07      	ldr	r3, [pc, #28]	; (800aa68 <queue_print_usb+0x50>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800aa50:	4618      	mov	r0, r3
 800aa52:	f7fc fe3b 	bl	80076cc <xQueueSemaphoreTake>
	}
}
 800aa56:	bf00      	nop
 800aa58:	3710      	adds	r7, #16
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}
 800aa5e:	bf00      	nop
 800aa60:	200092c4 	.word	0x200092c4
 800aa64:	2000a2c8 	.word	0x2000a2c8
 800aa68:	200092c0 	.word	0x200092c0

0800aa6c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b083      	sub	sp, #12
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	4603      	mov	r3, r0
 800aa74:	6039      	str	r1, [r7, #0]
 800aa76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	2212      	movs	r2, #18
 800aa7c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800aa7e:	4b03      	ldr	r3, [pc, #12]	; (800aa8c <USBD_FS_DeviceDescriptor+0x20>)
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	370c      	adds	r7, #12
 800aa84:	46bd      	mov	sp, r7
 800aa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8a:	4770      	bx	lr
 800aa8c:	200000cc 	.word	0x200000cc

0800aa90 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa90:	b480      	push	{r7}
 800aa92:	b083      	sub	sp, #12
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	4603      	mov	r3, r0
 800aa98:	6039      	str	r1, [r7, #0]
 800aa9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	2204      	movs	r2, #4
 800aaa0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800aaa2:	4b03      	ldr	r3, [pc, #12]	; (800aab0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	370c      	adds	r7, #12
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaae:	4770      	bx	lr
 800aab0:	200000e0 	.word	0x200000e0

0800aab4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b082      	sub	sp, #8
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	4603      	mov	r3, r0
 800aabc:	6039      	str	r1, [r7, #0]
 800aabe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aac0:	79fb      	ldrb	r3, [r7, #7]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d105      	bne.n	800aad2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aac6:	683a      	ldr	r2, [r7, #0]
 800aac8:	4907      	ldr	r1, [pc, #28]	; (800aae8 <USBD_FS_ProductStrDescriptor+0x34>)
 800aaca:	4808      	ldr	r0, [pc, #32]	; (800aaec <USBD_FS_ProductStrDescriptor+0x38>)
 800aacc:	f7fb fea0 	bl	8006810 <USBD_GetString>
 800aad0:	e004      	b.n	800aadc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aad2:	683a      	ldr	r2, [r7, #0]
 800aad4:	4904      	ldr	r1, [pc, #16]	; (800aae8 <USBD_FS_ProductStrDescriptor+0x34>)
 800aad6:	4805      	ldr	r0, [pc, #20]	; (800aaec <USBD_FS_ProductStrDescriptor+0x38>)
 800aad8:	f7fb fe9a 	bl	8006810 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aadc:	4b02      	ldr	r3, [pc, #8]	; (800aae8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800aade:	4618      	mov	r0, r3
 800aae0:	3708      	adds	r7, #8
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}
 800aae6:	bf00      	nop
 800aae8:	2000a2d4 	.word	0x2000a2d4
 800aaec:	0800b508 	.word	0x0800b508

0800aaf0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b082      	sub	sp, #8
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	6039      	str	r1, [r7, #0]
 800aafa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800aafc:	683a      	ldr	r2, [r7, #0]
 800aafe:	4904      	ldr	r1, [pc, #16]	; (800ab10 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ab00:	4804      	ldr	r0, [pc, #16]	; (800ab14 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ab02:	f7fb fe85 	bl	8006810 <USBD_GetString>
  return USBD_StrDesc;
 800ab06:	4b02      	ldr	r3, [pc, #8]	; (800ab10 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3708      	adds	r7, #8
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}
 800ab10:	2000a2d4 	.word	0x2000a2d4
 800ab14:	0800b520 	.word	0x0800b520

0800ab18 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b082      	sub	sp, #8
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	4603      	mov	r3, r0
 800ab20:	6039      	str	r1, [r7, #0]
 800ab22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	221a      	movs	r2, #26
 800ab28:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ab2a:	f000 f843 	bl	800abb4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ab2e:	4b02      	ldr	r3, [pc, #8]	; (800ab38 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ab30:	4618      	mov	r0, r3
 800ab32:	3708      	adds	r7, #8
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}
 800ab38:	200000e4 	.word	0x200000e4

0800ab3c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b082      	sub	sp, #8
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	4603      	mov	r3, r0
 800ab44:	6039      	str	r1, [r7, #0]
 800ab46:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ab48:	79fb      	ldrb	r3, [r7, #7]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d105      	bne.n	800ab5a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ab4e:	683a      	ldr	r2, [r7, #0]
 800ab50:	4907      	ldr	r1, [pc, #28]	; (800ab70 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ab52:	4808      	ldr	r0, [pc, #32]	; (800ab74 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ab54:	f7fb fe5c 	bl	8006810 <USBD_GetString>
 800ab58:	e004      	b.n	800ab64 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ab5a:	683a      	ldr	r2, [r7, #0]
 800ab5c:	4904      	ldr	r1, [pc, #16]	; (800ab70 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ab5e:	4805      	ldr	r0, [pc, #20]	; (800ab74 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ab60:	f7fb fe56 	bl	8006810 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab64:	4b02      	ldr	r3, [pc, #8]	; (800ab70 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ab66:	4618      	mov	r0, r3
 800ab68:	3708      	adds	r7, #8
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd80      	pop	{r7, pc}
 800ab6e:	bf00      	nop
 800ab70:	2000a2d4 	.word	0x2000a2d4
 800ab74:	0800b534 	.word	0x0800b534

0800ab78 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b082      	sub	sp, #8
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	4603      	mov	r3, r0
 800ab80:	6039      	str	r1, [r7, #0]
 800ab82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ab84:	79fb      	ldrb	r3, [r7, #7]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d105      	bne.n	800ab96 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ab8a:	683a      	ldr	r2, [r7, #0]
 800ab8c:	4907      	ldr	r1, [pc, #28]	; (800abac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ab8e:	4808      	ldr	r0, [pc, #32]	; (800abb0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ab90:	f7fb fe3e 	bl	8006810 <USBD_GetString>
 800ab94:	e004      	b.n	800aba0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ab96:	683a      	ldr	r2, [r7, #0]
 800ab98:	4904      	ldr	r1, [pc, #16]	; (800abac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ab9a:	4805      	ldr	r0, [pc, #20]	; (800abb0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ab9c:	f7fb fe38 	bl	8006810 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aba0:	4b02      	ldr	r3, [pc, #8]	; (800abac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	3708      	adds	r7, #8
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}
 800abaa:	bf00      	nop
 800abac:	2000a2d4 	.word	0x2000a2d4
 800abb0:	0800b540 	.word	0x0800b540

0800abb4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b084      	sub	sp, #16
 800abb8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800abba:	4b0f      	ldr	r3, [pc, #60]	; (800abf8 <Get_SerialNum+0x44>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800abc0:	4b0e      	ldr	r3, [pc, #56]	; (800abfc <Get_SerialNum+0x48>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800abc6:	4b0e      	ldr	r3, [pc, #56]	; (800ac00 <Get_SerialNum+0x4c>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800abcc:	68fa      	ldr	r2, [r7, #12]
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	4413      	add	r3, r2
 800abd2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d009      	beq.n	800abee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800abda:	2208      	movs	r2, #8
 800abdc:	4909      	ldr	r1, [pc, #36]	; (800ac04 <Get_SerialNum+0x50>)
 800abde:	68f8      	ldr	r0, [r7, #12]
 800abe0:	f000 f814 	bl	800ac0c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800abe4:	2204      	movs	r2, #4
 800abe6:	4908      	ldr	r1, [pc, #32]	; (800ac08 <Get_SerialNum+0x54>)
 800abe8:	68b8      	ldr	r0, [r7, #8]
 800abea:	f000 f80f 	bl	800ac0c <IntToUnicode>
  }
}
 800abee:	bf00      	nop
 800abf0:	3710      	adds	r7, #16
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}
 800abf6:	bf00      	nop
 800abf8:	1fff7a10 	.word	0x1fff7a10
 800abfc:	1fff7a14 	.word	0x1fff7a14
 800ac00:	1fff7a18 	.word	0x1fff7a18
 800ac04:	200000e6 	.word	0x200000e6
 800ac08:	200000f6 	.word	0x200000f6

0800ac0c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b087      	sub	sp, #28
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	60f8      	str	r0, [r7, #12]
 800ac14:	60b9      	str	r1, [r7, #8]
 800ac16:	4613      	mov	r3, r2
 800ac18:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ac1e:	2300      	movs	r3, #0
 800ac20:	75fb      	strb	r3, [r7, #23]
 800ac22:	e027      	b.n	800ac74 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	0f1b      	lsrs	r3, r3, #28
 800ac28:	2b09      	cmp	r3, #9
 800ac2a:	d80b      	bhi.n	800ac44 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	0f1b      	lsrs	r3, r3, #28
 800ac30:	b2da      	uxtb	r2, r3
 800ac32:	7dfb      	ldrb	r3, [r7, #23]
 800ac34:	005b      	lsls	r3, r3, #1
 800ac36:	4619      	mov	r1, r3
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	440b      	add	r3, r1
 800ac3c:	3230      	adds	r2, #48	; 0x30
 800ac3e:	b2d2      	uxtb	r2, r2
 800ac40:	701a      	strb	r2, [r3, #0]
 800ac42:	e00a      	b.n	800ac5a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	0f1b      	lsrs	r3, r3, #28
 800ac48:	b2da      	uxtb	r2, r3
 800ac4a:	7dfb      	ldrb	r3, [r7, #23]
 800ac4c:	005b      	lsls	r3, r3, #1
 800ac4e:	4619      	mov	r1, r3
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	440b      	add	r3, r1
 800ac54:	3237      	adds	r2, #55	; 0x37
 800ac56:	b2d2      	uxtb	r2, r2
 800ac58:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	011b      	lsls	r3, r3, #4
 800ac5e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ac60:	7dfb      	ldrb	r3, [r7, #23]
 800ac62:	005b      	lsls	r3, r3, #1
 800ac64:	3301      	adds	r3, #1
 800ac66:	68ba      	ldr	r2, [r7, #8]
 800ac68:	4413      	add	r3, r2
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ac6e:	7dfb      	ldrb	r3, [r7, #23]
 800ac70:	3301      	adds	r3, #1
 800ac72:	75fb      	strb	r3, [r7, #23]
 800ac74:	7dfa      	ldrb	r2, [r7, #23]
 800ac76:	79fb      	ldrb	r3, [r7, #7]
 800ac78:	429a      	cmp	r2, r3
 800ac7a:	d3d3      	bcc.n	800ac24 <IntToUnicode+0x18>
  }
}
 800ac7c:	bf00      	nop
 800ac7e:	bf00      	nop
 800ac80:	371c      	adds	r7, #28
 800ac82:	46bd      	mov	sp, r7
 800ac84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac88:	4770      	bx	lr
	...

0800ac8c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b08a      	sub	sp, #40	; 0x28
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ac94:	f107 0314 	add.w	r3, r7, #20
 800ac98:	2200      	movs	r2, #0
 800ac9a:	601a      	str	r2, [r3, #0]
 800ac9c:	605a      	str	r2, [r3, #4]
 800ac9e:	609a      	str	r2, [r3, #8]
 800aca0:	60da      	str	r2, [r3, #12]
 800aca2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800acac:	d147      	bne.n	800ad3e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800acae:	2300      	movs	r3, #0
 800acb0:	613b      	str	r3, [r7, #16]
 800acb2:	4b25      	ldr	r3, [pc, #148]	; (800ad48 <HAL_PCD_MspInit+0xbc>)
 800acb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acb6:	4a24      	ldr	r2, [pc, #144]	; (800ad48 <HAL_PCD_MspInit+0xbc>)
 800acb8:	f043 0301 	orr.w	r3, r3, #1
 800acbc:	6313      	str	r3, [r2, #48]	; 0x30
 800acbe:	4b22      	ldr	r3, [pc, #136]	; (800ad48 <HAL_PCD_MspInit+0xbc>)
 800acc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acc2:	f003 0301 	and.w	r3, r3, #1
 800acc6:	613b      	str	r3, [r7, #16]
 800acc8:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800acca:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800acce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800acd0:	2302      	movs	r3, #2
 800acd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acd4:	2300      	movs	r3, #0
 800acd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800acd8:	2303      	movs	r3, #3
 800acda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800acdc:	230a      	movs	r3, #10
 800acde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ace0:	f107 0314 	add.w	r3, r7, #20
 800ace4:	4619      	mov	r1, r3
 800ace6:	4819      	ldr	r0, [pc, #100]	; (800ad4c <HAL_PCD_MspInit+0xc0>)
 800ace8:	f7f5 ff24 	bl	8000b34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800acec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800acf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800acf2:	2300      	movs	r3, #0
 800acf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acf6:	2300      	movs	r3, #0
 800acf8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800acfa:	f107 0314 	add.w	r3, r7, #20
 800acfe:	4619      	mov	r1, r3
 800ad00:	4812      	ldr	r0, [pc, #72]	; (800ad4c <HAL_PCD_MspInit+0xc0>)
 800ad02:	f7f5 ff17 	bl	8000b34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ad06:	4b10      	ldr	r3, [pc, #64]	; (800ad48 <HAL_PCD_MspInit+0xbc>)
 800ad08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad0a:	4a0f      	ldr	r2, [pc, #60]	; (800ad48 <HAL_PCD_MspInit+0xbc>)
 800ad0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad10:	6353      	str	r3, [r2, #52]	; 0x34
 800ad12:	2300      	movs	r3, #0
 800ad14:	60fb      	str	r3, [r7, #12]
 800ad16:	4b0c      	ldr	r3, [pc, #48]	; (800ad48 <HAL_PCD_MspInit+0xbc>)
 800ad18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad1a:	4a0b      	ldr	r2, [pc, #44]	; (800ad48 <HAL_PCD_MspInit+0xbc>)
 800ad1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ad20:	6453      	str	r3, [r2, #68]	; 0x44
 800ad22:	4b09      	ldr	r3, [pc, #36]	; (800ad48 <HAL_PCD_MspInit+0xbc>)
 800ad24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad2a:	60fb      	str	r3, [r7, #12]
 800ad2c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800ad2e:	2200      	movs	r2, #0
 800ad30:	2105      	movs	r1, #5
 800ad32:	2043      	movs	r0, #67	; 0x43
 800ad34:	f7f5 fed4 	bl	8000ae0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ad38:	2043      	movs	r0, #67	; 0x43
 800ad3a:	f7f5 feed 	bl	8000b18 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ad3e:	bf00      	nop
 800ad40:	3728      	adds	r7, #40	; 0x28
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}
 800ad46:	bf00      	nop
 800ad48:	40023800 	.word	0x40023800
 800ad4c:	40020000 	.word	0x40020000

0800ad50 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b082      	sub	sp, #8
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ad64:	4619      	mov	r1, r3
 800ad66:	4610      	mov	r0, r2
 800ad68:	f7fa fbf3 	bl	8005552 <USBD_LL_SetupStage>
}
 800ad6c:	bf00      	nop
 800ad6e:	3708      	adds	r7, #8
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}

0800ad74 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b082      	sub	sp, #8
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
 800ad7c:	460b      	mov	r3, r1
 800ad7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ad86:	78fa      	ldrb	r2, [r7, #3]
 800ad88:	6879      	ldr	r1, [r7, #4]
 800ad8a:	4613      	mov	r3, r2
 800ad8c:	00db      	lsls	r3, r3, #3
 800ad8e:	4413      	add	r3, r2
 800ad90:	009b      	lsls	r3, r3, #2
 800ad92:	440b      	add	r3, r1
 800ad94:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800ad98:	681a      	ldr	r2, [r3, #0]
 800ad9a:	78fb      	ldrb	r3, [r7, #3]
 800ad9c:	4619      	mov	r1, r3
 800ad9e:	f7fa fc2d 	bl	80055fc <USBD_LL_DataOutStage>
}
 800ada2:	bf00      	nop
 800ada4:	3708      	adds	r7, #8
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bd80      	pop	{r7, pc}

0800adaa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adaa:	b580      	push	{r7, lr}
 800adac:	b082      	sub	sp, #8
 800adae:	af00      	add	r7, sp, #0
 800adb0:	6078      	str	r0, [r7, #4]
 800adb2:	460b      	mov	r3, r1
 800adb4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800adbc:	78fa      	ldrb	r2, [r7, #3]
 800adbe:	6879      	ldr	r1, [r7, #4]
 800adc0:	4613      	mov	r3, r2
 800adc2:	00db      	lsls	r3, r3, #3
 800adc4:	4413      	add	r3, r2
 800adc6:	009b      	lsls	r3, r3, #2
 800adc8:	440b      	add	r3, r1
 800adca:	334c      	adds	r3, #76	; 0x4c
 800adcc:	681a      	ldr	r2, [r3, #0]
 800adce:	78fb      	ldrb	r3, [r7, #3]
 800add0:	4619      	mov	r1, r3
 800add2:	f7fa fcc6 	bl	8005762 <USBD_LL_DataInStage>
}
 800add6:	bf00      	nop
 800add8:	3708      	adds	r7, #8
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}

0800adde <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adde:	b580      	push	{r7, lr}
 800ade0:	b082      	sub	sp, #8
 800ade2:	af00      	add	r7, sp, #0
 800ade4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800adec:	4618      	mov	r0, r3
 800adee:	f7fa fdfa 	bl	80059e6 <USBD_LL_SOF>
}
 800adf2:	bf00      	nop
 800adf4:	3708      	adds	r7, #8
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}

0800adfa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adfa:	b580      	push	{r7, lr}
 800adfc:	b084      	sub	sp, #16
 800adfe:	af00      	add	r7, sp, #0
 800ae00:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ae02:	2301      	movs	r3, #1
 800ae04:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	68db      	ldr	r3, [r3, #12]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d102      	bne.n	800ae14 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	73fb      	strb	r3, [r7, #15]
 800ae12:	e008      	b.n	800ae26 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	68db      	ldr	r3, [r3, #12]
 800ae18:	2b02      	cmp	r3, #2
 800ae1a:	d102      	bne.n	800ae22 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	73fb      	strb	r3, [r7, #15]
 800ae20:	e001      	b.n	800ae26 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ae22:	f7f5 fc33 	bl	800068c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ae2c:	7bfa      	ldrb	r2, [r7, #15]
 800ae2e:	4611      	mov	r1, r2
 800ae30:	4618      	mov	r0, r3
 800ae32:	f7fa fd9a 	bl	800596a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f7fa fd42 	bl	80058c6 <USBD_LL_Reset>
}
 800ae42:	bf00      	nop
 800ae44:	3710      	adds	r7, #16
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}
	...

0800ae4c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b082      	sub	sp, #8
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f7fa fd95 	bl	800598a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	687a      	ldr	r2, [r7, #4]
 800ae6c:	6812      	ldr	r2, [r2, #0]
 800ae6e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ae72:	f043 0301 	orr.w	r3, r3, #1
 800ae76:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6a1b      	ldr	r3, [r3, #32]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d005      	beq.n	800ae8c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ae80:	4b04      	ldr	r3, [pc, #16]	; (800ae94 <HAL_PCD_SuspendCallback+0x48>)
 800ae82:	691b      	ldr	r3, [r3, #16]
 800ae84:	4a03      	ldr	r2, [pc, #12]	; (800ae94 <HAL_PCD_SuspendCallback+0x48>)
 800ae86:	f043 0306 	orr.w	r3, r3, #6
 800ae8a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ae8c:	bf00      	nop
 800ae8e:	3708      	adds	r7, #8
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}
 800ae94:	e000ed00 	.word	0xe000ed00

0800ae98 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b082      	sub	sp, #8
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aea6:	4618      	mov	r0, r3
 800aea8:	f7fa fd85 	bl	80059b6 <USBD_LL_Resume>
}
 800aeac:	bf00      	nop
 800aeae:	3708      	adds	r7, #8
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bd80      	pop	{r7, pc}

0800aeb4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b082      	sub	sp, #8
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
 800aebc:	460b      	mov	r3, r1
 800aebe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aec6:	78fa      	ldrb	r2, [r7, #3]
 800aec8:	4611      	mov	r1, r2
 800aeca:	4618      	mov	r0, r3
 800aecc:	f7fa fddd 	bl	8005a8a <USBD_LL_IsoOUTIncomplete>
}
 800aed0:	bf00      	nop
 800aed2:	3708      	adds	r7, #8
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}

0800aed8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b082      	sub	sp, #8
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
 800aee0:	460b      	mov	r3, r1
 800aee2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aeea:	78fa      	ldrb	r2, [r7, #3]
 800aeec:	4611      	mov	r1, r2
 800aeee:	4618      	mov	r0, r3
 800aef0:	f7fa fd99 	bl	8005a26 <USBD_LL_IsoINIncomplete>
}
 800aef4:	bf00      	nop
 800aef6:	3708      	adds	r7, #8
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}

0800aefc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b082      	sub	sp, #8
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800af0a:	4618      	mov	r0, r3
 800af0c:	f7fa fdef 	bl	8005aee <USBD_LL_DevConnected>
}
 800af10:	bf00      	nop
 800af12:	3708      	adds	r7, #8
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}

0800af18 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b082      	sub	sp, #8
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800af26:	4618      	mov	r0, r3
 800af28:	f7fa fdec 	bl	8005b04 <USBD_LL_DevDisconnected>
}
 800af2c:	bf00      	nop
 800af2e:	3708      	adds	r7, #8
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}

0800af34 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b082      	sub	sp, #8
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	781b      	ldrb	r3, [r3, #0]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d13c      	bne.n	800afbe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800af44:	4a20      	ldr	r2, [pc, #128]	; (800afc8 <USBD_LL_Init+0x94>)
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	4a1e      	ldr	r2, [pc, #120]	; (800afc8 <USBD_LL_Init+0x94>)
 800af50:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800af54:	4b1c      	ldr	r3, [pc, #112]	; (800afc8 <USBD_LL_Init+0x94>)
 800af56:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800af5a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800af5c:	4b1a      	ldr	r3, [pc, #104]	; (800afc8 <USBD_LL_Init+0x94>)
 800af5e:	2204      	movs	r2, #4
 800af60:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800af62:	4b19      	ldr	r3, [pc, #100]	; (800afc8 <USBD_LL_Init+0x94>)
 800af64:	2202      	movs	r2, #2
 800af66:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800af68:	4b17      	ldr	r3, [pc, #92]	; (800afc8 <USBD_LL_Init+0x94>)
 800af6a:	2200      	movs	r2, #0
 800af6c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800af6e:	4b16      	ldr	r3, [pc, #88]	; (800afc8 <USBD_LL_Init+0x94>)
 800af70:	2202      	movs	r2, #2
 800af72:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800af74:	4b14      	ldr	r3, [pc, #80]	; (800afc8 <USBD_LL_Init+0x94>)
 800af76:	2201      	movs	r2, #1
 800af78:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800af7a:	4b13      	ldr	r3, [pc, #76]	; (800afc8 <USBD_LL_Init+0x94>)
 800af7c:	2200      	movs	r2, #0
 800af7e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800af80:	4b11      	ldr	r3, [pc, #68]	; (800afc8 <USBD_LL_Init+0x94>)
 800af82:	2200      	movs	r2, #0
 800af84:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800af86:	4b10      	ldr	r3, [pc, #64]	; (800afc8 <USBD_LL_Init+0x94>)
 800af88:	2201      	movs	r2, #1
 800af8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800af8c:	4b0e      	ldr	r3, [pc, #56]	; (800afc8 <USBD_LL_Init+0x94>)
 800af8e:	2200      	movs	r2, #0
 800af90:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800af92:	480d      	ldr	r0, [pc, #52]	; (800afc8 <USBD_LL_Init+0x94>)
 800af94:	f7f5 ff6a 	bl	8000e6c <HAL_PCD_Init>
 800af98:	4603      	mov	r3, r0
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d001      	beq.n	800afa2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800af9e:	f7f5 fb75 	bl	800068c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800afa2:	2180      	movs	r1, #128	; 0x80
 800afa4:	4808      	ldr	r0, [pc, #32]	; (800afc8 <USBD_LL_Init+0x94>)
 800afa6:	f7f7 f9c2 	bl	800232e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800afaa:	2240      	movs	r2, #64	; 0x40
 800afac:	2100      	movs	r1, #0
 800afae:	4806      	ldr	r0, [pc, #24]	; (800afc8 <USBD_LL_Init+0x94>)
 800afb0:	f7f7 f976 	bl	80022a0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800afb4:	2280      	movs	r2, #128	; 0x80
 800afb6:	2101      	movs	r1, #1
 800afb8:	4803      	ldr	r0, [pc, #12]	; (800afc8 <USBD_LL_Init+0x94>)
 800afba:	f7f7 f971 	bl	80022a0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800afbe:	2300      	movs	r3, #0
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	3708      	adds	r7, #8
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}
 800afc8:	2000a4d4 	.word	0x2000a4d4

0800afcc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b084      	sub	sp, #16
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afd4:	2300      	movs	r3, #0
 800afd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afd8:	2300      	movs	r3, #0
 800afda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800afe2:	4618      	mov	r0, r3
 800afe4:	f7f6 f85f 	bl	80010a6 <HAL_PCD_Start>
 800afe8:	4603      	mov	r3, r0
 800afea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afec:	7bfb      	ldrb	r3, [r7, #15]
 800afee:	4618      	mov	r0, r3
 800aff0:	f000 f942 	bl	800b278 <USBD_Get_USB_Status>
 800aff4:	4603      	mov	r3, r0
 800aff6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aff8:	7bbb      	ldrb	r3, [r7, #14]
}
 800affa:	4618      	mov	r0, r3
 800affc:	3710      	adds	r7, #16
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}

0800b002 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b002:	b580      	push	{r7, lr}
 800b004:	b084      	sub	sp, #16
 800b006:	af00      	add	r7, sp, #0
 800b008:	6078      	str	r0, [r7, #4]
 800b00a:	4608      	mov	r0, r1
 800b00c:	4611      	mov	r1, r2
 800b00e:	461a      	mov	r2, r3
 800b010:	4603      	mov	r3, r0
 800b012:	70fb      	strb	r3, [r7, #3]
 800b014:	460b      	mov	r3, r1
 800b016:	70bb      	strb	r3, [r7, #2]
 800b018:	4613      	mov	r3, r2
 800b01a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b01c:	2300      	movs	r3, #0
 800b01e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b020:	2300      	movs	r3, #0
 800b022:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b02a:	78bb      	ldrb	r3, [r7, #2]
 800b02c:	883a      	ldrh	r2, [r7, #0]
 800b02e:	78f9      	ldrb	r1, [r7, #3]
 800b030:	f7f6 fd30 	bl	8001a94 <HAL_PCD_EP_Open>
 800b034:	4603      	mov	r3, r0
 800b036:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b038:	7bfb      	ldrb	r3, [r7, #15]
 800b03a:	4618      	mov	r0, r3
 800b03c:	f000 f91c 	bl	800b278 <USBD_Get_USB_Status>
 800b040:	4603      	mov	r3, r0
 800b042:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b044:	7bbb      	ldrb	r3, [r7, #14]
}
 800b046:	4618      	mov	r0, r3
 800b048:	3710      	adds	r7, #16
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}

0800b04e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b04e:	b580      	push	{r7, lr}
 800b050:	b084      	sub	sp, #16
 800b052:	af00      	add	r7, sp, #0
 800b054:	6078      	str	r0, [r7, #4]
 800b056:	460b      	mov	r3, r1
 800b058:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b05a:	2300      	movs	r3, #0
 800b05c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b05e:	2300      	movs	r3, #0
 800b060:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b068:	78fa      	ldrb	r2, [r7, #3]
 800b06a:	4611      	mov	r1, r2
 800b06c:	4618      	mov	r0, r3
 800b06e:	f7f6 fd79 	bl	8001b64 <HAL_PCD_EP_Close>
 800b072:	4603      	mov	r3, r0
 800b074:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b076:	7bfb      	ldrb	r3, [r7, #15]
 800b078:	4618      	mov	r0, r3
 800b07a:	f000 f8fd 	bl	800b278 <USBD_Get_USB_Status>
 800b07e:	4603      	mov	r3, r0
 800b080:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b082:	7bbb      	ldrb	r3, [r7, #14]
}
 800b084:	4618      	mov	r0, r3
 800b086:	3710      	adds	r7, #16
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}

0800b08c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b084      	sub	sp, #16
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
 800b094:	460b      	mov	r3, r1
 800b096:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b098:	2300      	movs	r3, #0
 800b09a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b09c:	2300      	movs	r3, #0
 800b09e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b0a6:	78fa      	ldrb	r2, [r7, #3]
 800b0a8:	4611      	mov	r1, r2
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f7f6 fe51 	bl	8001d52 <HAL_PCD_EP_SetStall>
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0b4:	7bfb      	ldrb	r3, [r7, #15]
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f000 f8de 	bl	800b278 <USBD_Get_USB_Status>
 800b0bc:	4603      	mov	r3, r0
 800b0be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	3710      	adds	r7, #16
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}

0800b0ca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0ca:	b580      	push	{r7, lr}
 800b0cc:	b084      	sub	sp, #16
 800b0ce:	af00      	add	r7, sp, #0
 800b0d0:	6078      	str	r0, [r7, #4]
 800b0d2:	460b      	mov	r3, r1
 800b0d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b0e4:	78fa      	ldrb	r2, [r7, #3]
 800b0e6:	4611      	mov	r1, r2
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	f7f6 fe96 	bl	8001e1a <HAL_PCD_EP_ClrStall>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0f2:	7bfb      	ldrb	r3, [r7, #15]
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	f000 f8bf 	bl	800b278 <USBD_Get_USB_Status>
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800b100:	4618      	mov	r0, r3
 800b102:	3710      	adds	r7, #16
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}

0800b108 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b108:	b480      	push	{r7}
 800b10a:	b085      	sub	sp, #20
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
 800b110:	460b      	mov	r3, r1
 800b112:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b11a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b11c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b120:	2b00      	cmp	r3, #0
 800b122:	da0b      	bge.n	800b13c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b124:	78fb      	ldrb	r3, [r7, #3]
 800b126:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b12a:	68f9      	ldr	r1, [r7, #12]
 800b12c:	4613      	mov	r3, r2
 800b12e:	00db      	lsls	r3, r3, #3
 800b130:	4413      	add	r3, r2
 800b132:	009b      	lsls	r3, r3, #2
 800b134:	440b      	add	r3, r1
 800b136:	333e      	adds	r3, #62	; 0x3e
 800b138:	781b      	ldrb	r3, [r3, #0]
 800b13a:	e00b      	b.n	800b154 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b13c:	78fb      	ldrb	r3, [r7, #3]
 800b13e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b142:	68f9      	ldr	r1, [r7, #12]
 800b144:	4613      	mov	r3, r2
 800b146:	00db      	lsls	r3, r3, #3
 800b148:	4413      	add	r3, r2
 800b14a:	009b      	lsls	r3, r3, #2
 800b14c:	440b      	add	r3, r1
 800b14e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800b152:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b154:	4618      	mov	r0, r3
 800b156:	3714      	adds	r7, #20
 800b158:	46bd      	mov	sp, r7
 800b15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15e:	4770      	bx	lr

0800b160 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b084      	sub	sp, #16
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
 800b168:	460b      	mov	r3, r1
 800b16a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b16c:	2300      	movs	r3, #0
 800b16e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b170:	2300      	movs	r3, #0
 800b172:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b17a:	78fa      	ldrb	r2, [r7, #3]
 800b17c:	4611      	mov	r1, r2
 800b17e:	4618      	mov	r0, r3
 800b180:	f7f6 fc63 	bl	8001a4a <HAL_PCD_SetAddress>
 800b184:	4603      	mov	r3, r0
 800b186:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b188:	7bfb      	ldrb	r3, [r7, #15]
 800b18a:	4618      	mov	r0, r3
 800b18c:	f000 f874 	bl	800b278 <USBD_Get_USB_Status>
 800b190:	4603      	mov	r3, r0
 800b192:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b194:	7bbb      	ldrb	r3, [r7, #14]
}
 800b196:	4618      	mov	r0, r3
 800b198:	3710      	adds	r7, #16
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}

0800b19e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b19e:	b580      	push	{r7, lr}
 800b1a0:	b086      	sub	sp, #24
 800b1a2:	af00      	add	r7, sp, #0
 800b1a4:	60f8      	str	r0, [r7, #12]
 800b1a6:	607a      	str	r2, [r7, #4]
 800b1a8:	603b      	str	r3, [r7, #0]
 800b1aa:	460b      	mov	r3, r1
 800b1ac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b1bc:	7af9      	ldrb	r1, [r7, #11]
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	687a      	ldr	r2, [r7, #4]
 800b1c2:	f7f6 fd7c 	bl	8001cbe <HAL_PCD_EP_Transmit>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1ca:	7dfb      	ldrb	r3, [r7, #23]
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f000 f853 	bl	800b278 <USBD_Get_USB_Status>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b1d6:	7dbb      	ldrb	r3, [r7, #22]
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	3718      	adds	r7, #24
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}

0800b1e0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b086      	sub	sp, #24
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	60f8      	str	r0, [r7, #12]
 800b1e8:	607a      	str	r2, [r7, #4]
 800b1ea:	603b      	str	r3, [r7, #0]
 800b1ec:	460b      	mov	r3, r1
 800b1ee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b1fe:	7af9      	ldrb	r1, [r7, #11]
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	687a      	ldr	r2, [r7, #4]
 800b204:	f7f6 fcf8 	bl	8001bf8 <HAL_PCD_EP_Receive>
 800b208:	4603      	mov	r3, r0
 800b20a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b20c:	7dfb      	ldrb	r3, [r7, #23]
 800b20e:	4618      	mov	r0, r3
 800b210:	f000 f832 	bl	800b278 <USBD_Get_USB_Status>
 800b214:	4603      	mov	r3, r0
 800b216:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b218:	7dbb      	ldrb	r3, [r7, #22]
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	3718      	adds	r7, #24
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}

0800b222 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b222:	b580      	push	{r7, lr}
 800b224:	b082      	sub	sp, #8
 800b226:	af00      	add	r7, sp, #0
 800b228:	6078      	str	r0, [r7, #4]
 800b22a:	460b      	mov	r3, r1
 800b22c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b234:	78fa      	ldrb	r2, [r7, #3]
 800b236:	4611      	mov	r1, r2
 800b238:	4618      	mov	r0, r3
 800b23a:	f7f6 fd28 	bl	8001c8e <HAL_PCD_EP_GetRxCount>
 800b23e:	4603      	mov	r3, r0
}
 800b240:	4618      	mov	r0, r3
 800b242:	3708      	adds	r7, #8
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}

0800b248 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b248:	b480      	push	{r7}
 800b24a:	b083      	sub	sp, #12
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b250:	4b03      	ldr	r3, [pc, #12]	; (800b260 <USBD_static_malloc+0x18>)
}
 800b252:	4618      	mov	r0, r3
 800b254:	370c      	adds	r7, #12
 800b256:	46bd      	mov	sp, r7
 800b258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25c:	4770      	bx	lr
 800b25e:	bf00      	nop
 800b260:	2000a9e0 	.word	0x2000a9e0

0800b264 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b264:	b480      	push	{r7}
 800b266:	b083      	sub	sp, #12
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]

}
 800b26c:	bf00      	nop
 800b26e:	370c      	adds	r7, #12
 800b270:	46bd      	mov	sp, r7
 800b272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b276:	4770      	bx	lr

0800b278 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b278:	b480      	push	{r7}
 800b27a:	b085      	sub	sp, #20
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	4603      	mov	r3, r0
 800b280:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b282:	2300      	movs	r3, #0
 800b284:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b286:	79fb      	ldrb	r3, [r7, #7]
 800b288:	2b03      	cmp	r3, #3
 800b28a:	d817      	bhi.n	800b2bc <USBD_Get_USB_Status+0x44>
 800b28c:	a201      	add	r2, pc, #4	; (adr r2, 800b294 <USBD_Get_USB_Status+0x1c>)
 800b28e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b292:	bf00      	nop
 800b294:	0800b2a5 	.word	0x0800b2a5
 800b298:	0800b2ab 	.word	0x0800b2ab
 800b29c:	0800b2b1 	.word	0x0800b2b1
 800b2a0:	0800b2b7 	.word	0x0800b2b7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	73fb      	strb	r3, [r7, #15]
    break;
 800b2a8:	e00b      	b.n	800b2c2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b2aa:	2303      	movs	r3, #3
 800b2ac:	73fb      	strb	r3, [r7, #15]
    break;
 800b2ae:	e008      	b.n	800b2c2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	73fb      	strb	r3, [r7, #15]
    break;
 800b2b4:	e005      	b.n	800b2c2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b2b6:	2303      	movs	r3, #3
 800b2b8:	73fb      	strb	r3, [r7, #15]
    break;
 800b2ba:	e002      	b.n	800b2c2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b2bc:	2303      	movs	r3, #3
 800b2be:	73fb      	strb	r3, [r7, #15]
    break;
 800b2c0:	bf00      	nop
  }
  return usb_status;
 800b2c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	3714      	adds	r7, #20
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ce:	4770      	bx	lr

0800b2d0 <__libc_init_array>:
 800b2d0:	b570      	push	{r4, r5, r6, lr}
 800b2d2:	4d0d      	ldr	r5, [pc, #52]	; (800b308 <__libc_init_array+0x38>)
 800b2d4:	4c0d      	ldr	r4, [pc, #52]	; (800b30c <__libc_init_array+0x3c>)
 800b2d6:	1b64      	subs	r4, r4, r5
 800b2d8:	10a4      	asrs	r4, r4, #2
 800b2da:	2600      	movs	r6, #0
 800b2dc:	42a6      	cmp	r6, r4
 800b2de:	d109      	bne.n	800b2f4 <__libc_init_array+0x24>
 800b2e0:	4d0b      	ldr	r5, [pc, #44]	; (800b310 <__libc_init_array+0x40>)
 800b2e2:	4c0c      	ldr	r4, [pc, #48]	; (800b314 <__libc_init_array+0x44>)
 800b2e4:	f000 f8f2 	bl	800b4cc <_init>
 800b2e8:	1b64      	subs	r4, r4, r5
 800b2ea:	10a4      	asrs	r4, r4, #2
 800b2ec:	2600      	movs	r6, #0
 800b2ee:	42a6      	cmp	r6, r4
 800b2f0:	d105      	bne.n	800b2fe <__libc_init_array+0x2e>
 800b2f2:	bd70      	pop	{r4, r5, r6, pc}
 800b2f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2f8:	4798      	blx	r3
 800b2fa:	3601      	adds	r6, #1
 800b2fc:	e7ee      	b.n	800b2dc <__libc_init_array+0xc>
 800b2fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800b302:	4798      	blx	r3
 800b304:	3601      	adds	r6, #1
 800b306:	e7f2      	b.n	800b2ee <__libc_init_array+0x1e>
 800b308:	0800b5f4 	.word	0x0800b5f4
 800b30c:	0800b5f4 	.word	0x0800b5f4
 800b310:	0800b5f4 	.word	0x0800b5f4
 800b314:	0800b5f8 	.word	0x0800b5f8

0800b318 <__retarget_lock_acquire_recursive>:
 800b318:	4770      	bx	lr

0800b31a <__retarget_lock_release_recursive>:
 800b31a:	4770      	bx	lr

0800b31c <memcpy>:
 800b31c:	440a      	add	r2, r1
 800b31e:	4291      	cmp	r1, r2
 800b320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b324:	d100      	bne.n	800b328 <memcpy+0xc>
 800b326:	4770      	bx	lr
 800b328:	b510      	push	{r4, lr}
 800b32a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b32e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b332:	4291      	cmp	r1, r2
 800b334:	d1f9      	bne.n	800b32a <memcpy+0xe>
 800b336:	bd10      	pop	{r4, pc}

0800b338 <memset>:
 800b338:	4402      	add	r2, r0
 800b33a:	4603      	mov	r3, r0
 800b33c:	4293      	cmp	r3, r2
 800b33e:	d100      	bne.n	800b342 <memset+0xa>
 800b340:	4770      	bx	lr
 800b342:	f803 1b01 	strb.w	r1, [r3], #1
 800b346:	e7f9      	b.n	800b33c <memset+0x4>

0800b348 <cleanup_glue>:
 800b348:	b538      	push	{r3, r4, r5, lr}
 800b34a:	460c      	mov	r4, r1
 800b34c:	6809      	ldr	r1, [r1, #0]
 800b34e:	4605      	mov	r5, r0
 800b350:	b109      	cbz	r1, 800b356 <cleanup_glue+0xe>
 800b352:	f7ff fff9 	bl	800b348 <cleanup_glue>
 800b356:	4621      	mov	r1, r4
 800b358:	4628      	mov	r0, r5
 800b35a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b35e:	f000 b869 	b.w	800b434 <_free_r>
	...

0800b364 <_reclaim_reent>:
 800b364:	4b2c      	ldr	r3, [pc, #176]	; (800b418 <_reclaim_reent+0xb4>)
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	4283      	cmp	r3, r0
 800b36a:	b570      	push	{r4, r5, r6, lr}
 800b36c:	4604      	mov	r4, r0
 800b36e:	d051      	beq.n	800b414 <_reclaim_reent+0xb0>
 800b370:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b372:	b143      	cbz	r3, 800b386 <_reclaim_reent+0x22>
 800b374:	68db      	ldr	r3, [r3, #12]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d14a      	bne.n	800b410 <_reclaim_reent+0xac>
 800b37a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b37c:	6819      	ldr	r1, [r3, #0]
 800b37e:	b111      	cbz	r1, 800b386 <_reclaim_reent+0x22>
 800b380:	4620      	mov	r0, r4
 800b382:	f000 f857 	bl	800b434 <_free_r>
 800b386:	6961      	ldr	r1, [r4, #20]
 800b388:	b111      	cbz	r1, 800b390 <_reclaim_reent+0x2c>
 800b38a:	4620      	mov	r0, r4
 800b38c:	f000 f852 	bl	800b434 <_free_r>
 800b390:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b392:	b111      	cbz	r1, 800b39a <_reclaim_reent+0x36>
 800b394:	4620      	mov	r0, r4
 800b396:	f000 f84d 	bl	800b434 <_free_r>
 800b39a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b39c:	b111      	cbz	r1, 800b3a4 <_reclaim_reent+0x40>
 800b39e:	4620      	mov	r0, r4
 800b3a0:	f000 f848 	bl	800b434 <_free_r>
 800b3a4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b3a6:	b111      	cbz	r1, 800b3ae <_reclaim_reent+0x4a>
 800b3a8:	4620      	mov	r0, r4
 800b3aa:	f000 f843 	bl	800b434 <_free_r>
 800b3ae:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b3b0:	b111      	cbz	r1, 800b3b8 <_reclaim_reent+0x54>
 800b3b2:	4620      	mov	r0, r4
 800b3b4:	f000 f83e 	bl	800b434 <_free_r>
 800b3b8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b3ba:	b111      	cbz	r1, 800b3c2 <_reclaim_reent+0x5e>
 800b3bc:	4620      	mov	r0, r4
 800b3be:	f000 f839 	bl	800b434 <_free_r>
 800b3c2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b3c4:	b111      	cbz	r1, 800b3cc <_reclaim_reent+0x68>
 800b3c6:	4620      	mov	r0, r4
 800b3c8:	f000 f834 	bl	800b434 <_free_r>
 800b3cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b3ce:	b111      	cbz	r1, 800b3d6 <_reclaim_reent+0x72>
 800b3d0:	4620      	mov	r0, r4
 800b3d2:	f000 f82f 	bl	800b434 <_free_r>
 800b3d6:	69a3      	ldr	r3, [r4, #24]
 800b3d8:	b1e3      	cbz	r3, 800b414 <_reclaim_reent+0xb0>
 800b3da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b3dc:	4620      	mov	r0, r4
 800b3de:	4798      	blx	r3
 800b3e0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b3e2:	b1b9      	cbz	r1, 800b414 <_reclaim_reent+0xb0>
 800b3e4:	4620      	mov	r0, r4
 800b3e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b3ea:	f7ff bfad 	b.w	800b348 <cleanup_glue>
 800b3ee:	5949      	ldr	r1, [r1, r5]
 800b3f0:	b941      	cbnz	r1, 800b404 <_reclaim_reent+0xa0>
 800b3f2:	3504      	adds	r5, #4
 800b3f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b3f6:	2d80      	cmp	r5, #128	; 0x80
 800b3f8:	68d9      	ldr	r1, [r3, #12]
 800b3fa:	d1f8      	bne.n	800b3ee <_reclaim_reent+0x8a>
 800b3fc:	4620      	mov	r0, r4
 800b3fe:	f000 f819 	bl	800b434 <_free_r>
 800b402:	e7ba      	b.n	800b37a <_reclaim_reent+0x16>
 800b404:	680e      	ldr	r6, [r1, #0]
 800b406:	4620      	mov	r0, r4
 800b408:	f000 f814 	bl	800b434 <_free_r>
 800b40c:	4631      	mov	r1, r6
 800b40e:	e7ef      	b.n	800b3f0 <_reclaim_reent+0x8c>
 800b410:	2500      	movs	r5, #0
 800b412:	e7ef      	b.n	800b3f4 <_reclaim_reent+0x90>
 800b414:	bd70      	pop	{r4, r5, r6, pc}
 800b416:	bf00      	nop
 800b418:	20000100 	.word	0x20000100

0800b41c <__malloc_lock>:
 800b41c:	4801      	ldr	r0, [pc, #4]	; (800b424 <__malloc_lock+0x8>)
 800b41e:	f7ff bf7b 	b.w	800b318 <__retarget_lock_acquire_recursive>
 800b422:	bf00      	nop
 800b424:	2000ac00 	.word	0x2000ac00

0800b428 <__malloc_unlock>:
 800b428:	4801      	ldr	r0, [pc, #4]	; (800b430 <__malloc_unlock+0x8>)
 800b42a:	f7ff bf76 	b.w	800b31a <__retarget_lock_release_recursive>
 800b42e:	bf00      	nop
 800b430:	2000ac00 	.word	0x2000ac00

0800b434 <_free_r>:
 800b434:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b436:	2900      	cmp	r1, #0
 800b438:	d044      	beq.n	800b4c4 <_free_r+0x90>
 800b43a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b43e:	9001      	str	r0, [sp, #4]
 800b440:	2b00      	cmp	r3, #0
 800b442:	f1a1 0404 	sub.w	r4, r1, #4
 800b446:	bfb8      	it	lt
 800b448:	18e4      	addlt	r4, r4, r3
 800b44a:	f7ff ffe7 	bl	800b41c <__malloc_lock>
 800b44e:	4a1e      	ldr	r2, [pc, #120]	; (800b4c8 <_free_r+0x94>)
 800b450:	9801      	ldr	r0, [sp, #4]
 800b452:	6813      	ldr	r3, [r2, #0]
 800b454:	b933      	cbnz	r3, 800b464 <_free_r+0x30>
 800b456:	6063      	str	r3, [r4, #4]
 800b458:	6014      	str	r4, [r2, #0]
 800b45a:	b003      	add	sp, #12
 800b45c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b460:	f7ff bfe2 	b.w	800b428 <__malloc_unlock>
 800b464:	42a3      	cmp	r3, r4
 800b466:	d908      	bls.n	800b47a <_free_r+0x46>
 800b468:	6825      	ldr	r5, [r4, #0]
 800b46a:	1961      	adds	r1, r4, r5
 800b46c:	428b      	cmp	r3, r1
 800b46e:	bf01      	itttt	eq
 800b470:	6819      	ldreq	r1, [r3, #0]
 800b472:	685b      	ldreq	r3, [r3, #4]
 800b474:	1949      	addeq	r1, r1, r5
 800b476:	6021      	streq	r1, [r4, #0]
 800b478:	e7ed      	b.n	800b456 <_free_r+0x22>
 800b47a:	461a      	mov	r2, r3
 800b47c:	685b      	ldr	r3, [r3, #4]
 800b47e:	b10b      	cbz	r3, 800b484 <_free_r+0x50>
 800b480:	42a3      	cmp	r3, r4
 800b482:	d9fa      	bls.n	800b47a <_free_r+0x46>
 800b484:	6811      	ldr	r1, [r2, #0]
 800b486:	1855      	adds	r5, r2, r1
 800b488:	42a5      	cmp	r5, r4
 800b48a:	d10b      	bne.n	800b4a4 <_free_r+0x70>
 800b48c:	6824      	ldr	r4, [r4, #0]
 800b48e:	4421      	add	r1, r4
 800b490:	1854      	adds	r4, r2, r1
 800b492:	42a3      	cmp	r3, r4
 800b494:	6011      	str	r1, [r2, #0]
 800b496:	d1e0      	bne.n	800b45a <_free_r+0x26>
 800b498:	681c      	ldr	r4, [r3, #0]
 800b49a:	685b      	ldr	r3, [r3, #4]
 800b49c:	6053      	str	r3, [r2, #4]
 800b49e:	4421      	add	r1, r4
 800b4a0:	6011      	str	r1, [r2, #0]
 800b4a2:	e7da      	b.n	800b45a <_free_r+0x26>
 800b4a4:	d902      	bls.n	800b4ac <_free_r+0x78>
 800b4a6:	230c      	movs	r3, #12
 800b4a8:	6003      	str	r3, [r0, #0]
 800b4aa:	e7d6      	b.n	800b45a <_free_r+0x26>
 800b4ac:	6825      	ldr	r5, [r4, #0]
 800b4ae:	1961      	adds	r1, r4, r5
 800b4b0:	428b      	cmp	r3, r1
 800b4b2:	bf04      	itt	eq
 800b4b4:	6819      	ldreq	r1, [r3, #0]
 800b4b6:	685b      	ldreq	r3, [r3, #4]
 800b4b8:	6063      	str	r3, [r4, #4]
 800b4ba:	bf04      	itt	eq
 800b4bc:	1949      	addeq	r1, r1, r5
 800b4be:	6021      	streq	r1, [r4, #0]
 800b4c0:	6054      	str	r4, [r2, #4]
 800b4c2:	e7ca      	b.n	800b45a <_free_r+0x26>
 800b4c4:	b003      	add	sp, #12
 800b4c6:	bd30      	pop	{r4, r5, pc}
 800b4c8:	2000ac04 	.word	0x2000ac04

0800b4cc <_init>:
 800b4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ce:	bf00      	nop
 800b4d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4d2:	bc08      	pop	{r3}
 800b4d4:	469e      	mov	lr, r3
 800b4d6:	4770      	bx	lr

0800b4d8 <_fini>:
 800b4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4da:	bf00      	nop
 800b4dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4de:	bc08      	pop	{r3}
 800b4e0:	469e      	mov	lr, r3
 800b4e2:	4770      	bx	lr
