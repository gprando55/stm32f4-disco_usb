
stm32f4-disco_usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  0800b66c  0800b66c  0001b66c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b790  0800b790  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  0800b790  0800b790  0001b790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b798  0800b798  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b798  0800b798  0001b798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b79c  0800b79c  0001b79c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  0800b7a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020164  2**0
                  CONTENTS
 10 .bss          0000aaa4  20000164  20000164  00020164  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000ac08  2000ac08  00020164  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020a3b  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000049c1  00000000  00000000  00040bcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019d8  00000000  00000000  00045590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017f0  00000000  00000000  00046f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006586  00000000  00000000  00048758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e2a7  00000000  00000000  0004ecde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d89fb  00000000  00000000  0006cf85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00145980  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006f54  00000000  00000000  001459d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000164 	.word	0x20000164
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b654 	.word	0x0800b654

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000168 	.word	0x20000168
 80001cc:	0800b654 	.word	0x0800b654

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 f9e4 	bl	80008a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f816 	bl	800050c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 f87e 	bl	80005e0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004e4:	f006 fafe 	bl	8006ae4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004e8:	4a05      	ldr	r2, [pc, #20]	; (8000500 <main+0x2c>)
 80004ea:	2100      	movs	r1, #0
 80004ec:	4805      	ldr	r0, [pc, #20]	; (8000504 <main+0x30>)
 80004ee:	f006 fb43 	bl	8006b78 <osThreadNew>
 80004f2:	4603      	mov	r3, r0
 80004f4:	4a04      	ldr	r2, [pc, #16]	; (8000508 <main+0x34>)
 80004f6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80004f8:	f006 fb18 	bl	8006b2c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004fc:	e7fe      	b.n	80004fc <main+0x28>
 80004fe:	bf00      	nop
 8000500:	0800b6f4 	.word	0x0800b6f4
 8000504:	08000631 	.word	0x08000631
 8000508:	20000180 	.word	0x20000180

0800050c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b094      	sub	sp, #80	; 0x50
 8000510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000512:	f107 0320 	add.w	r3, r7, #32
 8000516:	2230      	movs	r2, #48	; 0x30
 8000518:	2100      	movs	r1, #0
 800051a:	4618      	mov	r0, r3
 800051c:	f00a ffd0 	bl	800b4c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000520:	f107 030c 	add.w	r3, r7, #12
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	605a      	str	r2, [r3, #4]
 800052a:	609a      	str	r2, [r3, #8]
 800052c:	60da      	str	r2, [r3, #12]
 800052e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000530:	2300      	movs	r3, #0
 8000532:	60bb      	str	r3, [r7, #8]
 8000534:	4b28      	ldr	r3, [pc, #160]	; (80005d8 <SystemClock_Config+0xcc>)
 8000536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000538:	4a27      	ldr	r2, [pc, #156]	; (80005d8 <SystemClock_Config+0xcc>)
 800053a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053e:	6413      	str	r3, [r2, #64]	; 0x40
 8000540:	4b25      	ldr	r3, [pc, #148]	; (80005d8 <SystemClock_Config+0xcc>)
 8000542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000548:	60bb      	str	r3, [r7, #8]
 800054a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800054c:	2300      	movs	r3, #0
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	4b22      	ldr	r3, [pc, #136]	; (80005dc <SystemClock_Config+0xd0>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a21      	ldr	r2, [pc, #132]	; (80005dc <SystemClock_Config+0xd0>)
 8000556:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800055a:	6013      	str	r3, [r2, #0]
 800055c:	4b1f      	ldr	r3, [pc, #124]	; (80005dc <SystemClock_Config+0xd0>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000568:	2301      	movs	r3, #1
 800056a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800056c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000570:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000572:	2302      	movs	r3, #2
 8000574:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000576:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800057a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800057c:	2304      	movs	r3, #4
 800057e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000580:	23a8      	movs	r3, #168	; 0xa8
 8000582:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000584:	2302      	movs	r3, #2
 8000586:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000588:	2307      	movs	r3, #7
 800058a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058c:	f107 0320 	add.w	r3, r7, #32
 8000590:	4618      	mov	r0, r3
 8000592:	f001 fee9 	bl	8002368 <HAL_RCC_OscConfig>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800059c:	f000 f876 	bl	800068c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a0:	230f      	movs	r3, #15
 80005a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a4:	2302      	movs	r3, #2
 80005a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	2105      	movs	r1, #5
 80005be:	4618      	mov	r0, r3
 80005c0:	f002 f94a 	bl	8002858 <HAL_RCC_ClockConfig>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005ca:	f000 f85f 	bl	800068c <Error_Handler>
  }
}
 80005ce:	bf00      	nop
 80005d0:	3750      	adds	r7, #80	; 0x50
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40023800 	.word	0x40023800
 80005dc:	40007000 	.word	0x40007000

080005e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	4b10      	ldr	r3, [pc, #64]	; (800062c <MX_GPIO_Init+0x4c>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a0f      	ldr	r2, [pc, #60]	; (800062c <MX_GPIO_Init+0x4c>)
 80005f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4b0d      	ldr	r3, [pc, #52]	; (800062c <MX_GPIO_Init+0x4c>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	603b      	str	r3, [r7, #0]
 8000606:	4b09      	ldr	r3, [pc, #36]	; (800062c <MX_GPIO_Init+0x4c>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a08      	ldr	r2, [pc, #32]	; (800062c <MX_GPIO_Init+0x4c>)
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b06      	ldr	r3, [pc, #24]	; (800062c <MX_GPIO_Init+0x4c>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	603b      	str	r3, [r7, #0]
 800061c:	683b      	ldr	r3, [r7, #0]

}
 800061e:	bf00      	nop
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	40023800 	.word	0x40023800

08000630 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b0a4      	sub	sp, #144	; 0x90
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000638:	f00a f8f0 	bl	800a81c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  init_usb_rtos_obj();
 800063c:	f00a fa36 	bl	800aaac <init_usb_rtos_obj>
  /* Infinite loop */
  for(;;)
  {
	//char data;
	//(void)CDC_Receiveq_HS(&data, portMAX_DELAY);
	qtd = receive_usb_data(data, 128, portMAX_DELAY);
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000648:	2180      	movs	r1, #128	; 0x80
 800064a:	4618      	mov	r0, r3
 800064c:	f00a fa70 	bl	800ab30 <receive_usb_data>
 8000650:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	//(void)CDC_Transmit_FS((uint8_t*)&data, 768);
	(void)queue_print_usb(data, qtd, portMAX_DELAY);
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800065c:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8000660:	4618      	mov	r0, r3
 8000662:	f00a fa79 	bl	800ab58 <queue_print_usb>
  {
 8000666:	e7eb      	b.n	8000640 <StartDefaultTask+0x10>

08000668 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a04      	ldr	r2, [pc, #16]	; (8000688 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d101      	bne.n	800067e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800067a:	f000 f935 	bl	80008e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40010000 	.word	0x40010000

0800068c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000690:	b672      	cpsid	i
}
 8000692:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000694:	e7fe      	b.n	8000694 <Error_Handler+0x8>
	...

08000698 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	4b12      	ldr	r3, [pc, #72]	; (80006ec <HAL_MspInit+0x54>)
 80006a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006a6:	4a11      	ldr	r2, [pc, #68]	; (80006ec <HAL_MspInit+0x54>)
 80006a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ac:	6453      	str	r3, [r2, #68]	; 0x44
 80006ae:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <HAL_MspInit+0x54>)
 80006b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	603b      	str	r3, [r7, #0]
 80006be:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <HAL_MspInit+0x54>)
 80006c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c2:	4a0a      	ldr	r2, [pc, #40]	; (80006ec <HAL_MspInit+0x54>)
 80006c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c8:	6413      	str	r3, [r2, #64]	; 0x40
 80006ca:	4b08      	ldr	r3, [pc, #32]	; (80006ec <HAL_MspInit+0x54>)
 80006cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80006d6:	2200      	movs	r2, #0
 80006d8:	210f      	movs	r1, #15
 80006da:	f06f 0001 	mvn.w	r0, #1
 80006de:	f000 f9ff 	bl	8000ae0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006e2:	bf00      	nop
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800

080006f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08c      	sub	sp, #48	; 0x30
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80006f8:	2300      	movs	r3, #0
 80006fa:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80006fc:	2300      	movs	r3, #0
 80006fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000700:	2300      	movs	r3, #0
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	4b2f      	ldr	r3, [pc, #188]	; (80007c4 <HAL_InitTick+0xd4>)
 8000706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000708:	4a2e      	ldr	r2, [pc, #184]	; (80007c4 <HAL_InitTick+0xd4>)
 800070a:	f043 0301 	orr.w	r3, r3, #1
 800070e:	6453      	str	r3, [r2, #68]	; 0x44
 8000710:	4b2c      	ldr	r3, [pc, #176]	; (80007c4 <HAL_InitTick+0xd4>)
 8000712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000714:	f003 0301 	and.w	r3, r3, #1
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800071c:	f107 020c 	add.w	r2, r7, #12
 8000720:	f107 0310 	add.w	r3, r7, #16
 8000724:	4611      	mov	r1, r2
 8000726:	4618      	mov	r0, r3
 8000728:	f002 faa2 	bl	8002c70 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800072c:	f002 fa8c 	bl	8002c48 <HAL_RCC_GetPCLK2Freq>
 8000730:	4603      	mov	r3, r0
 8000732:	005b      	lsls	r3, r3, #1
 8000734:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000738:	4a23      	ldr	r2, [pc, #140]	; (80007c8 <HAL_InitTick+0xd8>)
 800073a:	fba2 2303 	umull	r2, r3, r2, r3
 800073e:	0c9b      	lsrs	r3, r3, #18
 8000740:	3b01      	subs	r3, #1
 8000742:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000744:	4b21      	ldr	r3, [pc, #132]	; (80007cc <HAL_InitTick+0xdc>)
 8000746:	4a22      	ldr	r2, [pc, #136]	; (80007d0 <HAL_InitTick+0xe0>)
 8000748:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800074a:	4b20      	ldr	r3, [pc, #128]	; (80007cc <HAL_InitTick+0xdc>)
 800074c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000750:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000752:	4a1e      	ldr	r2, [pc, #120]	; (80007cc <HAL_InitTick+0xdc>)
 8000754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000756:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000758:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <HAL_InitTick+0xdc>)
 800075a:	2200      	movs	r2, #0
 800075c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800075e:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <HAL_InitTick+0xdc>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000764:	4b19      	ldr	r3, [pc, #100]	; (80007cc <HAL_InitTick+0xdc>)
 8000766:	2200      	movs	r2, #0
 8000768:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800076a:	4818      	ldr	r0, [pc, #96]	; (80007cc <HAL_InitTick+0xdc>)
 800076c:	f002 fab2 	bl	8002cd4 <HAL_TIM_Base_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000776:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800077a:	2b00      	cmp	r3, #0
 800077c:	d11b      	bne.n	80007b6 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800077e:	4813      	ldr	r0, [pc, #76]	; (80007cc <HAL_InitTick+0xdc>)
 8000780:	f002 fb02 	bl	8002d88 <HAL_TIM_Base_Start_IT>
 8000784:	4603      	mov	r3, r0
 8000786:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800078a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800078e:	2b00      	cmp	r3, #0
 8000790:	d111      	bne.n	80007b6 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000792:	2019      	movs	r0, #25
 8000794:	f000 f9c0 	bl	8000b18 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2b0f      	cmp	r3, #15
 800079c:	d808      	bhi.n	80007b0 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800079e:	2200      	movs	r2, #0
 80007a0:	6879      	ldr	r1, [r7, #4]
 80007a2:	2019      	movs	r0, #25
 80007a4:	f000 f99c 	bl	8000ae0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007a8:	4a0a      	ldr	r2, [pc, #40]	; (80007d4 <HAL_InitTick+0xe4>)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	6013      	str	r3, [r2, #0]
 80007ae:	e002      	b.n	80007b6 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80007b0:	2301      	movs	r3, #1
 80007b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80007b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3730      	adds	r7, #48	; 0x30
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40023800 	.word	0x40023800
 80007c8:	431bde83 	.word	0x431bde83
 80007cc:	20000184 	.word	0x20000184
 80007d0:	40010000 	.word	0x40010000
 80007d4:	20000004 	.word	0x20000004

080007d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007dc:	e7fe      	b.n	80007dc <NMI_Handler+0x4>

080007de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007e2:	e7fe      	b.n	80007e2 <HardFault_Handler+0x4>

080007e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007e8:	e7fe      	b.n	80007e8 <MemManage_Handler+0x4>

080007ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ea:	b480      	push	{r7}
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ee:	e7fe      	b.n	80007ee <BusFault_Handler+0x4>

080007f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007f4:	e7fe      	b.n	80007f4 <UsageFault_Handler+0x4>

080007f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000808:	4802      	ldr	r0, [pc, #8]	; (8000814 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800080a:	f002 fb2d 	bl	8002e68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20000184 	.word	0x20000184

08000818 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800081c:	4802      	ldr	r0, [pc, #8]	; (8000828 <OTG_FS_IRQHandler+0x10>)
 800081e:	f000 fc75 	bl	800110c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	2000a4d4 	.word	0x2000a4d4

0800082c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <SystemInit+0x20>)
 8000832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000836:	4a05      	ldr	r2, [pc, #20]	; (800084c <SystemInit+0x20>)
 8000838:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800083c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	e000ed00 	.word	0xe000ed00

08000850 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000850:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000888 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000854:	480d      	ldr	r0, [pc, #52]	; (800088c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000856:	490e      	ldr	r1, [pc, #56]	; (8000890 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000858:	4a0e      	ldr	r2, [pc, #56]	; (8000894 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800085a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800085c:	e002      	b.n	8000864 <LoopCopyDataInit>

0800085e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800085e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000860:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000862:	3304      	adds	r3, #4

08000864 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000864:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000866:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000868:	d3f9      	bcc.n	800085e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800086a:	4a0b      	ldr	r2, [pc, #44]	; (8000898 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800086c:	4c0b      	ldr	r4, [pc, #44]	; (800089c <LoopFillZerobss+0x26>)
  movs r3, #0
 800086e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000870:	e001      	b.n	8000876 <LoopFillZerobss>

08000872 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000872:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000874:	3204      	adds	r2, #4

08000876 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000876:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000878:	d3fb      	bcc.n	8000872 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800087a:	f7ff ffd7 	bl	800082c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800087e:	f00a fdeb 	bl	800b458 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000882:	f7ff fe27 	bl	80004d4 <main>
  bx  lr    
 8000886:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000888:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800088c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000890:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8000894:	0800b7a0 	.word	0x0800b7a0
  ldr r2, =_sbss
 8000898:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 800089c:	2000ac08 	.word	0x2000ac08

080008a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008a0:	e7fe      	b.n	80008a0 <ADC_IRQHandler>
	...

080008a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008a8:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <HAL_Init+0x40>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a0d      	ldr	r2, [pc, #52]	; (80008e4 <HAL_Init+0x40>)
 80008ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008b4:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <HAL_Init+0x40>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a0a      	ldr	r2, [pc, #40]	; (80008e4 <HAL_Init+0x40>)
 80008ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008c0:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <HAL_Init+0x40>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a07      	ldr	r2, [pc, #28]	; (80008e4 <HAL_Init+0x40>)
 80008c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008cc:	2003      	movs	r0, #3
 80008ce:	f000 f8fc 	bl	8000aca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008d2:	200f      	movs	r0, #15
 80008d4:	f7ff ff0c 	bl	80006f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008d8:	f7ff fede 	bl	8000698 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008dc:	2300      	movs	r3, #0
}
 80008de:	4618      	mov	r0, r3
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40023c00 	.word	0x40023c00

080008e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <HAL_IncTick+0x20>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	461a      	mov	r2, r3
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <HAL_IncTick+0x24>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4413      	add	r3, r2
 80008f8:	4a04      	ldr	r2, [pc, #16]	; (800090c <HAL_IncTick+0x24>)
 80008fa:	6013      	str	r3, [r2, #0]
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	20000008 	.word	0x20000008
 800090c:	200001cc 	.word	0x200001cc

08000910 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  return uwTick;
 8000914:	4b03      	ldr	r3, [pc, #12]	; (8000924 <HAL_GetTick+0x14>)
 8000916:	681b      	ldr	r3, [r3, #0]
}
 8000918:	4618      	mov	r0, r3
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	200001cc 	.word	0x200001cc

08000928 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000930:	f7ff ffee 	bl	8000910 <HAL_GetTick>
 8000934:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000940:	d005      	beq.n	800094e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000942:	4b0a      	ldr	r3, [pc, #40]	; (800096c <HAL_Delay+0x44>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	461a      	mov	r2, r3
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	4413      	add	r3, r2
 800094c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800094e:	bf00      	nop
 8000950:	f7ff ffde 	bl	8000910 <HAL_GetTick>
 8000954:	4602      	mov	r2, r0
 8000956:	68bb      	ldr	r3, [r7, #8]
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	68fa      	ldr	r2, [r7, #12]
 800095c:	429a      	cmp	r2, r3
 800095e:	d8f7      	bhi.n	8000950 <HAL_Delay+0x28>
  {
  }
}
 8000960:	bf00      	nop
 8000962:	bf00      	nop
 8000964:	3710      	adds	r7, #16
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000008 	.word	0x20000008

08000970 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000970:	b480      	push	{r7}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	f003 0307 	and.w	r3, r3, #7
 800097e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000980:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <__NVIC_SetPriorityGrouping+0x44>)
 8000982:	68db      	ldr	r3, [r3, #12]
 8000984:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000986:	68ba      	ldr	r2, [r7, #8]
 8000988:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800098c:	4013      	ands	r3, r2
 800098e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000998:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800099c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009a2:	4a04      	ldr	r2, [pc, #16]	; (80009b4 <__NVIC_SetPriorityGrouping+0x44>)
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	60d3      	str	r3, [r2, #12]
}
 80009a8:	bf00      	nop
 80009aa:	3714      	adds	r7, #20
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009bc:	4b04      	ldr	r3, [pc, #16]	; (80009d0 <__NVIC_GetPriorityGrouping+0x18>)
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	0a1b      	lsrs	r3, r3, #8
 80009c2:	f003 0307 	and.w	r3, r3, #7
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	e000ed00 	.word	0xe000ed00

080009d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	db0b      	blt.n	80009fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	f003 021f 	and.w	r2, r3, #31
 80009ec:	4907      	ldr	r1, [pc, #28]	; (8000a0c <__NVIC_EnableIRQ+0x38>)
 80009ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f2:	095b      	lsrs	r3, r3, #5
 80009f4:	2001      	movs	r0, #1
 80009f6:	fa00 f202 	lsl.w	r2, r0, r2
 80009fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009fe:	bf00      	nop
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	e000e100 	.word	0xe000e100

08000a10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	6039      	str	r1, [r7, #0]
 8000a1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	db0a      	blt.n	8000a3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	490c      	ldr	r1, [pc, #48]	; (8000a5c <__NVIC_SetPriority+0x4c>)
 8000a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2e:	0112      	lsls	r2, r2, #4
 8000a30:	b2d2      	uxtb	r2, r2
 8000a32:	440b      	add	r3, r1
 8000a34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a38:	e00a      	b.n	8000a50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	b2da      	uxtb	r2, r3
 8000a3e:	4908      	ldr	r1, [pc, #32]	; (8000a60 <__NVIC_SetPriority+0x50>)
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	f003 030f 	and.w	r3, r3, #15
 8000a46:	3b04      	subs	r3, #4
 8000a48:	0112      	lsls	r2, r2, #4
 8000a4a:	b2d2      	uxtb	r2, r2
 8000a4c:	440b      	add	r3, r1
 8000a4e:	761a      	strb	r2, [r3, #24]
}
 8000a50:	bf00      	nop
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	e000e100 	.word	0xe000e100
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b089      	sub	sp, #36	; 0x24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	60b9      	str	r1, [r7, #8]
 8000a6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	f003 0307 	and.w	r3, r3, #7
 8000a76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a78:	69fb      	ldr	r3, [r7, #28]
 8000a7a:	f1c3 0307 	rsb	r3, r3, #7
 8000a7e:	2b04      	cmp	r3, #4
 8000a80:	bf28      	it	cs
 8000a82:	2304      	movcs	r3, #4
 8000a84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	3304      	adds	r3, #4
 8000a8a:	2b06      	cmp	r3, #6
 8000a8c:	d902      	bls.n	8000a94 <NVIC_EncodePriority+0x30>
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	3b03      	subs	r3, #3
 8000a92:	e000      	b.n	8000a96 <NVIC_EncodePriority+0x32>
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa2:	43da      	mvns	r2, r3
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	401a      	ands	r2, r3
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab6:	43d9      	mvns	r1, r3
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000abc:	4313      	orrs	r3, r2
         );
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3724      	adds	r7, #36	; 0x24
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr

08000aca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	b082      	sub	sp, #8
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f7ff ff4c 	bl	8000970 <__NVIC_SetPriorityGrouping>
}
 8000ad8:	bf00      	nop
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	60b9      	str	r1, [r7, #8]
 8000aea:	607a      	str	r2, [r7, #4]
 8000aec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000aee:	2300      	movs	r3, #0
 8000af0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000af2:	f7ff ff61 	bl	80009b8 <__NVIC_GetPriorityGrouping>
 8000af6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000af8:	687a      	ldr	r2, [r7, #4]
 8000afa:	68b9      	ldr	r1, [r7, #8]
 8000afc:	6978      	ldr	r0, [r7, #20]
 8000afe:	f7ff ffb1 	bl	8000a64 <NVIC_EncodePriority>
 8000b02:	4602      	mov	r2, r0
 8000b04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b08:	4611      	mov	r1, r2
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff ff80 	bl	8000a10 <__NVIC_SetPriority>
}
 8000b10:	bf00      	nop
 8000b12:	3718      	adds	r7, #24
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff ff54 	bl	80009d4 <__NVIC_EnableIRQ>
}
 8000b2c:	bf00      	nop
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b089      	sub	sp, #36	; 0x24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b46:	2300      	movs	r3, #0
 8000b48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61fb      	str	r3, [r7, #28]
 8000b4e:	e16b      	b.n	8000e28 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b50:	2201      	movs	r2, #1
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	fa02 f303 	lsl.w	r3, r2, r3
 8000b58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	697a      	ldr	r2, [r7, #20]
 8000b60:	4013      	ands	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b64:	693a      	ldr	r2, [r7, #16]
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	f040 815a 	bne.w	8000e22 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	f003 0303 	and.w	r3, r3, #3
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d005      	beq.n	8000b86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b82:	2b02      	cmp	r3, #2
 8000b84:	d130      	bne.n	8000be8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	689b      	ldr	r3, [r3, #8]
 8000b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	2203      	movs	r2, #3
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	43db      	mvns	r3, r3
 8000b98:	69ba      	ldr	r2, [r7, #24]
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	68da      	ldr	r2, [r3, #12]
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	69ba      	ldr	r2, [r7, #24]
 8000bac:	4313      	orrs	r3, r2
 8000bae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	69ba      	ldr	r2, [r7, #24]
 8000bb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc4:	43db      	mvns	r3, r3
 8000bc6:	69ba      	ldr	r2, [r7, #24]
 8000bc8:	4013      	ands	r3, r2
 8000bca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	091b      	lsrs	r3, r3, #4
 8000bd2:	f003 0201 	and.w	r2, r3, #1
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bdc:	69ba      	ldr	r2, [r7, #24]
 8000bde:	4313      	orrs	r3, r2
 8000be0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	69ba      	ldr	r2, [r7, #24]
 8000be6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	f003 0303 	and.w	r3, r3, #3
 8000bf0:	2b03      	cmp	r3, #3
 8000bf2:	d017      	beq.n	8000c24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	2203      	movs	r2, #3
 8000c00:	fa02 f303 	lsl.w	r3, r2, r3
 8000c04:	43db      	mvns	r3, r3
 8000c06:	69ba      	ldr	r2, [r7, #24]
 8000c08:	4013      	ands	r3, r2
 8000c0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	689a      	ldr	r2, [r3, #8]
 8000c10:	69fb      	ldr	r3, [r7, #28]
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	69ba      	ldr	r2, [r7, #24]
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	69ba      	ldr	r2, [r7, #24]
 8000c22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	f003 0303 	and.w	r3, r3, #3
 8000c2c:	2b02      	cmp	r3, #2
 8000c2e:	d123      	bne.n	8000c78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c30:	69fb      	ldr	r3, [r7, #28]
 8000c32:	08da      	lsrs	r2, r3, #3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	3208      	adds	r2, #8
 8000c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	f003 0307 	and.w	r3, r3, #7
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	220f      	movs	r2, #15
 8000c48:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4c:	43db      	mvns	r3, r3
 8000c4e:	69ba      	ldr	r2, [r7, #24]
 8000c50:	4013      	ands	r3, r2
 8000c52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	691a      	ldr	r2, [r3, #16]
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	69ba      	ldr	r2, [r7, #24]
 8000c66:	4313      	orrs	r3, r2
 8000c68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	08da      	lsrs	r2, r3, #3
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	3208      	adds	r2, #8
 8000c72:	69b9      	ldr	r1, [r7, #24]
 8000c74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	2203      	movs	r2, #3
 8000c84:	fa02 f303 	lsl.w	r3, r2, r3
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	69ba      	ldr	r2, [r7, #24]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f003 0203 	and.w	r2, r3, #3
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca0:	69ba      	ldr	r2, [r7, #24]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	69ba      	ldr	r2, [r7, #24]
 8000caa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	f000 80b4 	beq.w	8000e22 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	4b60      	ldr	r3, [pc, #384]	; (8000e40 <HAL_GPIO_Init+0x30c>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc2:	4a5f      	ldr	r2, [pc, #380]	; (8000e40 <HAL_GPIO_Init+0x30c>)
 8000cc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cca:	4b5d      	ldr	r3, [pc, #372]	; (8000e40 <HAL_GPIO_Init+0x30c>)
 8000ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cd6:	4a5b      	ldr	r2, [pc, #364]	; (8000e44 <HAL_GPIO_Init+0x310>)
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	089b      	lsrs	r3, r3, #2
 8000cdc:	3302      	adds	r3, #2
 8000cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	f003 0303 	and.w	r3, r3, #3
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	220f      	movs	r2, #15
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	43db      	mvns	r3, r3
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4a52      	ldr	r2, [pc, #328]	; (8000e48 <HAL_GPIO_Init+0x314>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d02b      	beq.n	8000d5a <HAL_GPIO_Init+0x226>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a51      	ldr	r2, [pc, #324]	; (8000e4c <HAL_GPIO_Init+0x318>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d025      	beq.n	8000d56 <HAL_GPIO_Init+0x222>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4a50      	ldr	r2, [pc, #320]	; (8000e50 <HAL_GPIO_Init+0x31c>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d01f      	beq.n	8000d52 <HAL_GPIO_Init+0x21e>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a4f      	ldr	r2, [pc, #316]	; (8000e54 <HAL_GPIO_Init+0x320>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d019      	beq.n	8000d4e <HAL_GPIO_Init+0x21a>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a4e      	ldr	r2, [pc, #312]	; (8000e58 <HAL_GPIO_Init+0x324>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d013      	beq.n	8000d4a <HAL_GPIO_Init+0x216>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a4d      	ldr	r2, [pc, #308]	; (8000e5c <HAL_GPIO_Init+0x328>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d00d      	beq.n	8000d46 <HAL_GPIO_Init+0x212>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4a4c      	ldr	r2, [pc, #304]	; (8000e60 <HAL_GPIO_Init+0x32c>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d007      	beq.n	8000d42 <HAL_GPIO_Init+0x20e>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4a4b      	ldr	r2, [pc, #300]	; (8000e64 <HAL_GPIO_Init+0x330>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d101      	bne.n	8000d3e <HAL_GPIO_Init+0x20a>
 8000d3a:	2307      	movs	r3, #7
 8000d3c:	e00e      	b.n	8000d5c <HAL_GPIO_Init+0x228>
 8000d3e:	2308      	movs	r3, #8
 8000d40:	e00c      	b.n	8000d5c <HAL_GPIO_Init+0x228>
 8000d42:	2306      	movs	r3, #6
 8000d44:	e00a      	b.n	8000d5c <HAL_GPIO_Init+0x228>
 8000d46:	2305      	movs	r3, #5
 8000d48:	e008      	b.n	8000d5c <HAL_GPIO_Init+0x228>
 8000d4a:	2304      	movs	r3, #4
 8000d4c:	e006      	b.n	8000d5c <HAL_GPIO_Init+0x228>
 8000d4e:	2303      	movs	r3, #3
 8000d50:	e004      	b.n	8000d5c <HAL_GPIO_Init+0x228>
 8000d52:	2302      	movs	r3, #2
 8000d54:	e002      	b.n	8000d5c <HAL_GPIO_Init+0x228>
 8000d56:	2301      	movs	r3, #1
 8000d58:	e000      	b.n	8000d5c <HAL_GPIO_Init+0x228>
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	69fa      	ldr	r2, [r7, #28]
 8000d5e:	f002 0203 	and.w	r2, r2, #3
 8000d62:	0092      	lsls	r2, r2, #2
 8000d64:	4093      	lsls	r3, r2
 8000d66:	69ba      	ldr	r2, [r7, #24]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d6c:	4935      	ldr	r1, [pc, #212]	; (8000e44 <HAL_GPIO_Init+0x310>)
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	089b      	lsrs	r3, r3, #2
 8000d72:	3302      	adds	r3, #2
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d7a:	4b3b      	ldr	r3, [pc, #236]	; (8000e68 <HAL_GPIO_Init+0x334>)
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	43db      	mvns	r3, r3
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	4013      	ands	r3, r2
 8000d88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d003      	beq.n	8000d9e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d9e:	4a32      	ldr	r2, [pc, #200]	; (8000e68 <HAL_GPIO_Init+0x334>)
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000da4:	4b30      	ldr	r3, [pc, #192]	; (8000e68 <HAL_GPIO_Init+0x334>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	43db      	mvns	r3, r3
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	4013      	ands	r3, r2
 8000db2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d003      	beq.n	8000dc8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000dc8:	4a27      	ldr	r2, [pc, #156]	; (8000e68 <HAL_GPIO_Init+0x334>)
 8000dca:	69bb      	ldr	r3, [r7, #24]
 8000dcc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000dce:	4b26      	ldr	r3, [pc, #152]	; (8000e68 <HAL_GPIO_Init+0x334>)
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d003      	beq.n	8000df2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000df2:	4a1d      	ldr	r2, [pc, #116]	; (8000e68 <HAL_GPIO_Init+0x334>)
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000df8:	4b1b      	ldr	r3, [pc, #108]	; (8000e68 <HAL_GPIO_Init+0x334>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	43db      	mvns	r3, r3
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4013      	ands	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d003      	beq.n	8000e1c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e1c:	4a12      	ldr	r2, [pc, #72]	; (8000e68 <HAL_GPIO_Init+0x334>)
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	3301      	adds	r3, #1
 8000e26:	61fb      	str	r3, [r7, #28]
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	2b0f      	cmp	r3, #15
 8000e2c:	f67f ae90 	bls.w	8000b50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e30:	bf00      	nop
 8000e32:	bf00      	nop
 8000e34:	3724      	adds	r7, #36	; 0x24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	40023800 	.word	0x40023800
 8000e44:	40013800 	.word	0x40013800
 8000e48:	40020000 	.word	0x40020000
 8000e4c:	40020400 	.word	0x40020400
 8000e50:	40020800 	.word	0x40020800
 8000e54:	40020c00 	.word	0x40020c00
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	40021400 	.word	0x40021400
 8000e60:	40021800 	.word	0x40021800
 8000e64:	40021c00 	.word	0x40021c00
 8000e68:	40013c00 	.word	0x40013c00

08000e6c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e6e:	b08f      	sub	sp, #60	; 0x3c
 8000e70:	af0a      	add	r7, sp, #40	; 0x28
 8000e72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d101      	bne.n	8000e7e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e10f      	b.n	800109e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d106      	bne.n	8000e9e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2200      	movs	r2, #0
 8000e94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f009 ffbb 	bl	800ae14 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d102      	bne.n	8000eb8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f002 facc 	bl	800345a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	603b      	str	r3, [r7, #0]
 8000ec8:	687e      	ldr	r6, [r7, #4]
 8000eca:	466d      	mov	r5, sp
 8000ecc:	f106 0410 	add.w	r4, r6, #16
 8000ed0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ed2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ed4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ed6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ed8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000edc:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ee0:	1d33      	adds	r3, r6, #4
 8000ee2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ee4:	6838      	ldr	r0, [r7, #0]
 8000ee6:	f002 f9a3 	bl	8003230 <USB_CoreInit>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d005      	beq.n	8000efc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2202      	movs	r2, #2
 8000ef4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	e0d0      	b.n	800109e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2100      	movs	r1, #0
 8000f02:	4618      	mov	r0, r3
 8000f04:	f002 faba 	bl	800347c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f08:	2300      	movs	r3, #0
 8000f0a:	73fb      	strb	r3, [r7, #15]
 8000f0c:	e04a      	b.n	8000fa4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f0e:	7bfa      	ldrb	r2, [r7, #15]
 8000f10:	6879      	ldr	r1, [r7, #4]
 8000f12:	4613      	mov	r3, r2
 8000f14:	00db      	lsls	r3, r3, #3
 8000f16:	4413      	add	r3, r2
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	440b      	add	r3, r1
 8000f1c:	333d      	adds	r3, #61	; 0x3d
 8000f1e:	2201      	movs	r2, #1
 8000f20:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f22:	7bfa      	ldrb	r2, [r7, #15]
 8000f24:	6879      	ldr	r1, [r7, #4]
 8000f26:	4613      	mov	r3, r2
 8000f28:	00db      	lsls	r3, r3, #3
 8000f2a:	4413      	add	r3, r2
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	440b      	add	r3, r1
 8000f30:	333c      	adds	r3, #60	; 0x3c
 8000f32:	7bfa      	ldrb	r2, [r7, #15]
 8000f34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000f36:	7bfa      	ldrb	r2, [r7, #15]
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
 8000f3a:	b298      	uxth	r0, r3
 8000f3c:	6879      	ldr	r1, [r7, #4]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	00db      	lsls	r3, r3, #3
 8000f42:	4413      	add	r3, r2
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	440b      	add	r3, r1
 8000f48:	3344      	adds	r3, #68	; 0x44
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f4e:	7bfa      	ldrb	r2, [r7, #15]
 8000f50:	6879      	ldr	r1, [r7, #4]
 8000f52:	4613      	mov	r3, r2
 8000f54:	00db      	lsls	r3, r3, #3
 8000f56:	4413      	add	r3, r2
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	440b      	add	r3, r1
 8000f5c:	3340      	adds	r3, #64	; 0x40
 8000f5e:	2200      	movs	r2, #0
 8000f60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f62:	7bfa      	ldrb	r2, [r7, #15]
 8000f64:	6879      	ldr	r1, [r7, #4]
 8000f66:	4613      	mov	r3, r2
 8000f68:	00db      	lsls	r3, r3, #3
 8000f6a:	4413      	add	r3, r2
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	440b      	add	r3, r1
 8000f70:	3348      	adds	r3, #72	; 0x48
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f76:	7bfa      	ldrb	r2, [r7, #15]
 8000f78:	6879      	ldr	r1, [r7, #4]
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	00db      	lsls	r3, r3, #3
 8000f7e:	4413      	add	r3, r2
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	440b      	add	r3, r1
 8000f84:	334c      	adds	r3, #76	; 0x4c
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f8a:	7bfa      	ldrb	r2, [r7, #15]
 8000f8c:	6879      	ldr	r1, [r7, #4]
 8000f8e:	4613      	mov	r3, r2
 8000f90:	00db      	lsls	r3, r3, #3
 8000f92:	4413      	add	r3, r2
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	440b      	add	r3, r1
 8000f98:	3354      	adds	r3, #84	; 0x54
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f9e:	7bfb      	ldrb	r3, [r7, #15]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	73fb      	strb	r3, [r7, #15]
 8000fa4:	7bfa      	ldrb	r2, [r7, #15]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	429a      	cmp	r2, r3
 8000fac:	d3af      	bcc.n	8000f0e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fae:	2300      	movs	r3, #0
 8000fb0:	73fb      	strb	r3, [r7, #15]
 8000fb2:	e044      	b.n	800103e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000fb4:	7bfa      	ldrb	r2, [r7, #15]
 8000fb6:	6879      	ldr	r1, [r7, #4]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	00db      	lsls	r3, r3, #3
 8000fbc:	4413      	add	r3, r2
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	440b      	add	r3, r1
 8000fc2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000fca:	7bfa      	ldrb	r2, [r7, #15]
 8000fcc:	6879      	ldr	r1, [r7, #4]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	4413      	add	r3, r2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	440b      	add	r3, r1
 8000fd8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8000fdc:	7bfa      	ldrb	r2, [r7, #15]
 8000fde:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000fe0:	7bfa      	ldrb	r2, [r7, #15]
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	00db      	lsls	r3, r3, #3
 8000fe8:	4413      	add	r3, r2
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	440b      	add	r3, r1
 8000fee:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000ff6:	7bfa      	ldrb	r2, [r7, #15]
 8000ff8:	6879      	ldr	r1, [r7, #4]
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	00db      	lsls	r3, r3, #3
 8000ffe:	4413      	add	r3, r2
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	440b      	add	r3, r1
 8001004:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800100c:	7bfa      	ldrb	r2, [r7, #15]
 800100e:	6879      	ldr	r1, [r7, #4]
 8001010:	4613      	mov	r3, r2
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	4413      	add	r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	440b      	add	r3, r1
 800101a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001022:	7bfa      	ldrb	r2, [r7, #15]
 8001024:	6879      	ldr	r1, [r7, #4]
 8001026:	4613      	mov	r3, r2
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	4413      	add	r3, r2
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	440b      	add	r3, r1
 8001030:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001038:	7bfb      	ldrb	r3, [r7, #15]
 800103a:	3301      	adds	r3, #1
 800103c:	73fb      	strb	r3, [r7, #15]
 800103e:	7bfa      	ldrb	r2, [r7, #15]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	429a      	cmp	r2, r3
 8001046:	d3b5      	bcc.n	8000fb4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	603b      	str	r3, [r7, #0]
 800104e:	687e      	ldr	r6, [r7, #4]
 8001050:	466d      	mov	r5, sp
 8001052:	f106 0410 	add.w	r4, r6, #16
 8001056:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001058:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800105a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800105c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800105e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001062:	e885 0003 	stmia.w	r5, {r0, r1}
 8001066:	1d33      	adds	r3, r6, #4
 8001068:	cb0e      	ldmia	r3, {r1, r2, r3}
 800106a:	6838      	ldr	r0, [r7, #0]
 800106c:	f002 fa52 	bl	8003514 <USB_DevInit>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d005      	beq.n	8001082 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2202      	movs	r2, #2
 800107a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e00d      	b.n	800109e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2200      	movs	r2, #0
 8001086:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2201      	movs	r2, #1
 800108e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4618      	mov	r0, r3
 8001098:	f003 fba1 	bl	80047de <USB_DevDisconnect>

  return HAL_OK;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3714      	adds	r7, #20
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080010a6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b084      	sub	sp, #16
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d101      	bne.n	80010c2 <HAL_PCD_Start+0x1c>
 80010be:	2302      	movs	r3, #2
 80010c0:	e020      	b.n	8001104 <HAL_PCD_Start+0x5e>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2201      	movs	r2, #1
 80010c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d109      	bne.n	80010e6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d005      	beq.n	80010e6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f002 f9a4 	bl	8003438 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f003 fb51 	bl	800479c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001102:	2300      	movs	r3, #0
}
 8001104:	4618      	mov	r0, r3
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800110c:	b590      	push	{r4, r7, lr}
 800110e:	b08d      	sub	sp, #52	; 0x34
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800111a:	6a3b      	ldr	r3, [r7, #32]
 800111c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4618      	mov	r0, r3
 8001124:	f003 fc0f 	bl	8004946 <USB_GetMode>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	f040 848a 	bne.w	8001a44 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4618      	mov	r0, r3
 8001136:	f003 fb73 	bl	8004820 <USB_ReadInterrupts>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	f000 8480 	beq.w	8001a42 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	0a1b      	lsrs	r3, r3, #8
 800114c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4618      	mov	r0, r3
 800115c:	f003 fb60 	bl	8004820 <USB_ReadInterrupts>
 8001160:	4603      	mov	r3, r0
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	2b02      	cmp	r3, #2
 8001168:	d107      	bne.n	800117a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	695a      	ldr	r2, [r3, #20]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f002 0202 	and.w	r2, r2, #2
 8001178:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4618      	mov	r0, r3
 8001180:	f003 fb4e 	bl	8004820 <USB_ReadInterrupts>
 8001184:	4603      	mov	r3, r0
 8001186:	f003 0310 	and.w	r3, r3, #16
 800118a:	2b10      	cmp	r3, #16
 800118c:	d161      	bne.n	8001252 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	699a      	ldr	r2, [r3, #24]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f022 0210 	bic.w	r2, r2, #16
 800119c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800119e:	6a3b      	ldr	r3, [r7, #32]
 80011a0:	6a1b      	ldr	r3, [r3, #32]
 80011a2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	f003 020f 	and.w	r2, r3, #15
 80011aa:	4613      	mov	r3, r2
 80011ac:	00db      	lsls	r3, r3, #3
 80011ae:	4413      	add	r3, r2
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	4413      	add	r3, r2
 80011ba:	3304      	adds	r3, #4
 80011bc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	0c5b      	lsrs	r3, r3, #17
 80011c2:	f003 030f 	and.w	r3, r3, #15
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d124      	bne.n	8001214 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80011d0:	4013      	ands	r3, r2
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d035      	beq.n	8001242 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	091b      	lsrs	r3, r3, #4
 80011de:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80011e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	461a      	mov	r2, r3
 80011e8:	6a38      	ldr	r0, [r7, #32]
 80011ea:	f003 f985 	bl	80044f8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	691a      	ldr	r2, [r3, #16]
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	091b      	lsrs	r3, r3, #4
 80011f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011fa:	441a      	add	r2, r3
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	6a1a      	ldr	r2, [r3, #32]
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	091b      	lsrs	r3, r3, #4
 8001208:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800120c:	441a      	add	r2, r3
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	621a      	str	r2, [r3, #32]
 8001212:	e016      	b.n	8001242 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	0c5b      	lsrs	r3, r3, #17
 8001218:	f003 030f 	and.w	r3, r3, #15
 800121c:	2b06      	cmp	r3, #6
 800121e:	d110      	bne.n	8001242 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001226:	2208      	movs	r2, #8
 8001228:	4619      	mov	r1, r3
 800122a:	6a38      	ldr	r0, [r7, #32]
 800122c:	f003 f964 	bl	80044f8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	6a1a      	ldr	r2, [r3, #32]
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	091b      	lsrs	r3, r3, #4
 8001238:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800123c:	441a      	add	r2, r3
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	699a      	ldr	r2, [r3, #24]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f042 0210 	orr.w	r2, r2, #16
 8001250:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f003 fae2 	bl	8004820 <USB_ReadInterrupts>
 800125c:	4603      	mov	r3, r0
 800125e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001262:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001266:	f040 80a7 	bne.w	80013b8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800126a:	2300      	movs	r3, #0
 800126c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4618      	mov	r0, r3
 8001274:	f003 fae7 	bl	8004846 <USB_ReadDevAllOutEpInterrupt>
 8001278:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800127a:	e099      	b.n	80013b0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800127c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	2b00      	cmp	r3, #0
 8001284:	f000 808e 	beq.w	80013a4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800128e:	b2d2      	uxtb	r2, r2
 8001290:	4611      	mov	r1, r2
 8001292:	4618      	mov	r0, r3
 8001294:	f003 fb0b 	bl	80048ae <USB_ReadDevOutEPInterrupt>
 8001298:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	f003 0301 	and.w	r3, r3, #1
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d00c      	beq.n	80012be <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80012a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a6:	015a      	lsls	r2, r3, #5
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	4413      	add	r3, r2
 80012ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012b0:	461a      	mov	r2, r3
 80012b2:	2301      	movs	r3, #1
 80012b4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80012b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f000 fec3 	bl	8002044 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	f003 0308 	and.w	r3, r3, #8
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d00c      	beq.n	80012e2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80012c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ca:	015a      	lsls	r2, r3, #5
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	4413      	add	r3, r2
 80012d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012d4:	461a      	mov	r2, r3
 80012d6:	2308      	movs	r3, #8
 80012d8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80012da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f000 ff99 	bl	8002214 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	f003 0310 	and.w	r3, r3, #16
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d008      	beq.n	80012fe <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80012ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ee:	015a      	lsls	r2, r3, #5
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	4413      	add	r3, r2
 80012f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012f8:	461a      	mov	r2, r3
 80012fa:	2310      	movs	r3, #16
 80012fc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	f003 0302 	and.w	r3, r3, #2
 8001304:	2b00      	cmp	r3, #0
 8001306:	d030      	beq.n	800136a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001308:	6a3b      	ldr	r3, [r7, #32]
 800130a:	695b      	ldr	r3, [r3, #20]
 800130c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001310:	2b80      	cmp	r3, #128	; 0x80
 8001312:	d109      	bne.n	8001328 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	69fa      	ldr	r2, [r7, #28]
 800131e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001322:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001326:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800132a:	4613      	mov	r3, r2
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	4413      	add	r3, r2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	4413      	add	r3, r2
 800133a:	3304      	adds	r3, #4
 800133c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	78db      	ldrb	r3, [r3, #3]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d108      	bne.n	8001358 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	2200      	movs	r2, #0
 800134a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800134c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134e:	b2db      	uxtb	r3, r3
 8001350:	4619      	mov	r1, r3
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f009 fe72 	bl	800b03c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135a:	015a      	lsls	r2, r3, #5
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	4413      	add	r3, r2
 8001360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001364:	461a      	mov	r2, r3
 8001366:	2302      	movs	r3, #2
 8001368:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	f003 0320 	and.w	r3, r3, #32
 8001370:	2b00      	cmp	r3, #0
 8001372:	d008      	beq.n	8001386 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001376:	015a      	lsls	r2, r3, #5
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	4413      	add	r3, r2
 800137c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001380:	461a      	mov	r2, r3
 8001382:	2320      	movs	r3, #32
 8001384:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d009      	beq.n	80013a4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001392:	015a      	lsls	r2, r3, #5
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	4413      	add	r3, r2
 8001398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800139c:	461a      	mov	r2, r3
 800139e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013a2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80013a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a6:	3301      	adds	r3, #1
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80013aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ac:	085b      	lsrs	r3, r3, #1
 80013ae:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80013b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	f47f af62 	bne.w	800127c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4618      	mov	r0, r3
 80013be:	f003 fa2f 	bl	8004820 <USB_ReadInterrupts>
 80013c2:	4603      	mov	r3, r0
 80013c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80013cc:	f040 80db 	bne.w	8001586 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f003 fa50 	bl	800487a <USB_ReadDevAllInEpInterrupt>
 80013da:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80013dc:	2300      	movs	r3, #0
 80013de:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80013e0:	e0cd      	b.n	800157e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80013e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	f000 80c2 	beq.w	8001572 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013f4:	b2d2      	uxtb	r2, r2
 80013f6:	4611      	mov	r1, r2
 80013f8:	4618      	mov	r0, r3
 80013fa:	f003 fa76 	bl	80048ea <USB_ReadDevInEPInterrupt>
 80013fe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	2b00      	cmp	r3, #0
 8001408:	d057      	beq.n	80014ba <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800140a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140c:	f003 030f 	and.w	r3, r3, #15
 8001410:	2201      	movs	r2, #1
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800141e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	43db      	mvns	r3, r3
 8001424:	69f9      	ldr	r1, [r7, #28]
 8001426:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800142a:	4013      	ands	r3, r2
 800142c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800142e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001430:	015a      	lsls	r2, r3, #5
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	4413      	add	r3, r2
 8001436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800143a:	461a      	mov	r2, r3
 800143c:	2301      	movs	r3, #1
 800143e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	691b      	ldr	r3, [r3, #16]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d132      	bne.n	80014ae <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001448:	6879      	ldr	r1, [r7, #4]
 800144a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800144c:	4613      	mov	r3, r2
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	4413      	add	r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	440b      	add	r3, r1
 8001456:	334c      	adds	r3, #76	; 0x4c
 8001458:	6819      	ldr	r1, [r3, #0]
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800145e:	4613      	mov	r3, r2
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	4413      	add	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4403      	add	r3, r0
 8001468:	3348      	adds	r3, #72	; 0x48
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4419      	add	r1, r3
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001472:	4613      	mov	r3, r2
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	4413      	add	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	4403      	add	r3, r0
 800147c:	334c      	adds	r3, #76	; 0x4c
 800147e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001482:	2b00      	cmp	r3, #0
 8001484:	d113      	bne.n	80014ae <HAL_PCD_IRQHandler+0x3a2>
 8001486:	6879      	ldr	r1, [r7, #4]
 8001488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800148a:	4613      	mov	r3, r2
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	4413      	add	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	440b      	add	r3, r1
 8001494:	3354      	adds	r3, #84	; 0x54
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d108      	bne.n	80014ae <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6818      	ldr	r0, [r3, #0]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80014a6:	461a      	mov	r2, r3
 80014a8:	2101      	movs	r1, #1
 80014aa:	f003 fa7d 	bl	80049a8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80014ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	4619      	mov	r1, r3
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f009 fd3c 	bl	800af32 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	f003 0308 	and.w	r3, r3, #8
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d008      	beq.n	80014d6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80014c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c6:	015a      	lsls	r2, r3, #5
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	4413      	add	r3, r2
 80014cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014d0:	461a      	mov	r2, r3
 80014d2:	2308      	movs	r3, #8
 80014d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	f003 0310 	and.w	r3, r3, #16
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d008      	beq.n	80014f2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80014e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e2:	015a      	lsls	r2, r3, #5
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	4413      	add	r3, r2
 80014e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014ec:	461a      	mov	r2, r3
 80014ee:	2310      	movs	r3, #16
 80014f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d008      	beq.n	800150e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80014fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fe:	015a      	lsls	r2, r3, #5
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	4413      	add	r3, r2
 8001504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001508:	461a      	mov	r2, r3
 800150a:	2340      	movs	r3, #64	; 0x40
 800150c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d023      	beq.n	8001560 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001518:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800151a:	6a38      	ldr	r0, [r7, #32]
 800151c:	f002 f95e 	bl	80037dc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001522:	4613      	mov	r3, r2
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	4413      	add	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	3338      	adds	r3, #56	; 0x38
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	4413      	add	r3, r2
 8001530:	3304      	adds	r3, #4
 8001532:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	78db      	ldrb	r3, [r3, #3]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d108      	bne.n	800154e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	2200      	movs	r2, #0
 8001540:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001544:	b2db      	uxtb	r3, r3
 8001546:	4619      	mov	r1, r3
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f009 fd89 	bl	800b060 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800154e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001550:	015a      	lsls	r2, r3, #5
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	4413      	add	r3, r2
 8001556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800155a:	461a      	mov	r2, r3
 800155c:	2302      	movs	r3, #2
 800155e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001566:	2b00      	cmp	r3, #0
 8001568:	d003      	beq.n	8001572 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800156a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f000 fcdb 	bl	8001f28 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001574:	3301      	adds	r3, #1
 8001576:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800157a:	085b      	lsrs	r3, r3, #1
 800157c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800157e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001580:	2b00      	cmp	r3, #0
 8001582:	f47f af2e 	bne.w	80013e2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f003 f948 	bl	8004820 <USB_ReadInterrupts>
 8001590:	4603      	mov	r3, r0
 8001592:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001596:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800159a:	d122      	bne.n	80015e2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	69fa      	ldr	r2, [r7, #28]
 80015a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015aa:	f023 0301 	bic.w	r3, r3, #1
 80015ae:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d108      	bne.n	80015cc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80015c2:	2100      	movs	r1, #0
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f000 fec3 	bl	8002350 <HAL_PCDEx_LPM_Callback>
 80015ca:	e002      	b.n	80015d2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f009 fd27 	bl	800b020 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	695a      	ldr	r2, [r3, #20]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80015e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f003 f91a 	bl	8004820 <USB_ReadInterrupts>
 80015ec:	4603      	mov	r3, r0
 80015ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015f6:	d112      	bne.n	800161e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	2b01      	cmp	r3, #1
 8001606:	d102      	bne.n	800160e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f009 fce3 	bl	800afd4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	695a      	ldr	r2, [r3, #20]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800161c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f003 f8fc 	bl	8004820 <USB_ReadInterrupts>
 8001628:	4603      	mov	r3, r0
 800162a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800162e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001632:	f040 80b7 	bne.w	80017a4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	69fa      	ldr	r2, [r7, #28]
 8001640:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001644:	f023 0301 	bic.w	r3, r3, #1
 8001648:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2110      	movs	r1, #16
 8001650:	4618      	mov	r0, r3
 8001652:	f002 f8c3 	bl	80037dc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001656:	2300      	movs	r3, #0
 8001658:	62fb      	str	r3, [r7, #44]	; 0x2c
 800165a:	e046      	b.n	80016ea <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800165c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800165e:	015a      	lsls	r2, r3, #5
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	4413      	add	r3, r2
 8001664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001668:	461a      	mov	r2, r3
 800166a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800166e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001672:	015a      	lsls	r2, r3, #5
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	4413      	add	r3, r2
 8001678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001680:	0151      	lsls	r1, r2, #5
 8001682:	69fa      	ldr	r2, [r7, #28]
 8001684:	440a      	add	r2, r1
 8001686:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800168a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800168e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001692:	015a      	lsls	r2, r3, #5
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	4413      	add	r3, r2
 8001698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800169c:	461a      	mov	r2, r3
 800169e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80016a2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80016a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016a6:	015a      	lsls	r2, r3, #5
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	4413      	add	r3, r2
 80016ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016b4:	0151      	lsls	r1, r2, #5
 80016b6:	69fa      	ldr	r2, [r7, #28]
 80016b8:	440a      	add	r2, r1
 80016ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80016be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80016c2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80016c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016c6:	015a      	lsls	r2, r3, #5
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	4413      	add	r3, r2
 80016cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016d4:	0151      	lsls	r1, r2, #5
 80016d6:	69fa      	ldr	r2, [r7, #28]
 80016d8:	440a      	add	r2, r1
 80016da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80016de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80016e2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016e6:	3301      	adds	r3, #1
 80016e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d3b3      	bcc.n	800165c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016fa:	69db      	ldr	r3, [r3, #28]
 80016fc:	69fa      	ldr	r2, [r7, #28]
 80016fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001702:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001706:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170c:	2b00      	cmp	r3, #0
 800170e:	d016      	beq.n	800173e <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001716:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800171a:	69fa      	ldr	r2, [r7, #28]
 800171c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001720:	f043 030b 	orr.w	r3, r3, #11
 8001724:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800172e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001730:	69fa      	ldr	r2, [r7, #28]
 8001732:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001736:	f043 030b 	orr.w	r3, r3, #11
 800173a:	6453      	str	r3, [r2, #68]	; 0x44
 800173c:	e015      	b.n	800176a <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001744:	695b      	ldr	r3, [r3, #20]
 8001746:	69fa      	ldr	r2, [r7, #28]
 8001748:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800174c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001750:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001754:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800175c:	691b      	ldr	r3, [r3, #16]
 800175e:	69fa      	ldr	r2, [r7, #28]
 8001760:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001764:	f043 030b 	orr.w	r3, r3, #11
 8001768:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	69fa      	ldr	r2, [r7, #28]
 8001774:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001778:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800177c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6818      	ldr	r0, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800178e:	461a      	mov	r2, r3
 8001790:	f003 f90a 	bl	80049a8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	695a      	ldr	r2, [r3, #20]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80017a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f003 f839 	bl	8004820 <USB_ReadInterrupts>
 80017ae:	4603      	mov	r3, r0
 80017b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017b8:	d124      	bne.n	8001804 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f003 f8cf 	bl	8004962 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f002 f884 	bl	80038d6 <USB_GetDevSpeed>
 80017ce:	4603      	mov	r3, r0
 80017d0:	461a      	mov	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681c      	ldr	r4, [r3, #0]
 80017da:	f001 fa29 	bl	8002c30 <HAL_RCC_GetHCLKFreq>
 80017de:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	461a      	mov	r2, r3
 80017e8:	4620      	mov	r0, r4
 80017ea:	f001 fd83 	bl	80032f4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f009 fbc7 	bl	800af82 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	695a      	ldr	r2, [r3, #20]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001802:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4618      	mov	r0, r3
 800180a:	f003 f809 	bl	8004820 <USB_ReadInterrupts>
 800180e:	4603      	mov	r3, r0
 8001810:	f003 0308 	and.w	r3, r3, #8
 8001814:	2b08      	cmp	r3, #8
 8001816:	d10a      	bne.n	800182e <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f009 fba4 	bl	800af66 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	695a      	ldr	r2, [r3, #20]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f002 0208 	and.w	r2, r2, #8
 800182c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f002 fff4 	bl	8004820 <USB_ReadInterrupts>
 8001838:	4603      	mov	r3, r0
 800183a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800183e:	2b80      	cmp	r3, #128	; 0x80
 8001840:	d122      	bne.n	8001888 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001842:	6a3b      	ldr	r3, [r7, #32]
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800184a:	6a3b      	ldr	r3, [r7, #32]
 800184c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800184e:	2301      	movs	r3, #1
 8001850:	627b      	str	r3, [r7, #36]	; 0x24
 8001852:	e014      	b.n	800187e <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001854:	6879      	ldr	r1, [r7, #4]
 8001856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001858:	4613      	mov	r3, r2
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	4413      	add	r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	440b      	add	r3, r1
 8001862:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d105      	bne.n	8001878 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800186c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186e:	b2db      	uxtb	r3, r3
 8001870:	4619      	mov	r1, r3
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f000 fb27 	bl	8001ec6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187a:	3301      	adds	r3, #1
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001884:	429a      	cmp	r2, r3
 8001886:	d3e5      	bcc.n	8001854 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f002 ffc7 	bl	8004820 <USB_ReadInterrupts>
 8001892:	4603      	mov	r3, r0
 8001894:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001898:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800189c:	d13b      	bne.n	8001916 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800189e:	2301      	movs	r3, #1
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
 80018a2:	e02b      	b.n	80018fc <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80018a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a6:	015a      	lsls	r2, r3, #5
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	4413      	add	r3, r2
 80018ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80018b4:	6879      	ldr	r1, [r7, #4]
 80018b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018b8:	4613      	mov	r3, r2
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	4413      	add	r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	440b      	add	r3, r1
 80018c2:	3340      	adds	r3, #64	; 0x40
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d115      	bne.n	80018f6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80018ca:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	da12      	bge.n	80018f6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80018d0:	6879      	ldr	r1, [r7, #4]
 80018d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018d4:	4613      	mov	r3, r2
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	4413      	add	r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	440b      	add	r3, r1
 80018de:	333f      	adds	r3, #63	; 0x3f
 80018e0:	2201      	movs	r2, #1
 80018e2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	4619      	mov	r1, r3
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f000 fae8 	bl	8001ec6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	3301      	adds	r3, #1
 80018fa:	627b      	str	r3, [r7, #36]	; 0x24
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001902:	429a      	cmp	r2, r3
 8001904:	d3ce      	bcc.n	80018a4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	695a      	ldr	r2, [r3, #20]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001914:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f002 ff80 	bl	8004820 <USB_ReadInterrupts>
 8001920:	4603      	mov	r3, r0
 8001922:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001926:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800192a:	d155      	bne.n	80019d8 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800192c:	2301      	movs	r3, #1
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
 8001930:	e045      	b.n	80019be <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	015a      	lsls	r2, r3, #5
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	4413      	add	r3, r2
 800193a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001946:	4613      	mov	r3, r2
 8001948:	00db      	lsls	r3, r3, #3
 800194a:	4413      	add	r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	440b      	add	r3, r1
 8001950:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d12e      	bne.n	80019b8 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800195a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800195c:	2b00      	cmp	r3, #0
 800195e:	da2b      	bge.n	80019b8 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800196c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001970:	429a      	cmp	r2, r3
 8001972:	d121      	bne.n	80019b8 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001974:	6879      	ldr	r1, [r7, #4]
 8001976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001978:	4613      	mov	r3, r2
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	4413      	add	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	440b      	add	r3, r1
 8001982:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001986:	2201      	movs	r2, #1
 8001988:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800198a:	6a3b      	ldr	r3, [r7, #32]
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001992:	6a3b      	ldr	r3, [r7, #32]
 8001994:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001996:	6a3b      	ldr	r3, [r7, #32]
 8001998:	695b      	ldr	r3, [r3, #20]
 800199a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d10a      	bne.n	80019b8 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	69fa      	ldr	r2, [r7, #28]
 80019ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019b4:	6053      	str	r3, [r2, #4]
            break;
 80019b6:	e007      	b.n	80019c8 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ba:	3301      	adds	r3, #1
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d3b4      	bcc.n	8001932 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	695a      	ldr	r2, [r3, #20]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80019d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	f002 ff1f 	bl	8004820 <USB_ReadInterrupts>
 80019e2:	4603      	mov	r3, r0
 80019e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80019e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019ec:	d10a      	bne.n	8001a04 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f009 fb48 	bl	800b084 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	695a      	ldr	r2, [r3, #20]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001a02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f002 ff09 	bl	8004820 <USB_ReadInterrupts>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	f003 0304 	and.w	r3, r3, #4
 8001a14:	2b04      	cmp	r3, #4
 8001a16:	d115      	bne.n	8001a44 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	f003 0304 	and.w	r3, r3, #4
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d002      	beq.n	8001a30 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f009 fb38 	bl	800b0a0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6859      	ldr	r1, [r3, #4]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	605a      	str	r2, [r3, #4]
 8001a40:	e000      	b.n	8001a44 <HAL_PCD_IRQHandler+0x938>
      return;
 8001a42:	bf00      	nop
    }
  }
}
 8001a44:	3734      	adds	r7, #52	; 0x34
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd90      	pop	{r4, r7, pc}

08001a4a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
 8001a52:	460b      	mov	r3, r1
 8001a54:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d101      	bne.n	8001a64 <HAL_PCD_SetAddress+0x1a>
 8001a60:	2302      	movs	r3, #2
 8001a62:	e013      	b.n	8001a8c <HAL_PCD_SetAddress+0x42>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	78fa      	ldrb	r2, [r7, #3]
 8001a70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	78fa      	ldrb	r2, [r7, #3]
 8001a7a:	4611      	mov	r1, r2
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f002 fe67 	bl	8004750 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001a8a:	2300      	movs	r3, #0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	4608      	mov	r0, r1
 8001a9e:	4611      	mov	r1, r2
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	70fb      	strb	r3, [r7, #3]
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	803b      	strh	r3, [r7, #0]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ab2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	da0f      	bge.n	8001ada <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001aba:	78fb      	ldrb	r3, [r7, #3]
 8001abc:	f003 020f 	and.w	r2, r3, #15
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	4413      	add	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	3338      	adds	r3, #56	; 0x38
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	4413      	add	r3, r2
 8001ace:	3304      	adds	r3, #4
 8001ad0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	705a      	strb	r2, [r3, #1]
 8001ad8:	e00f      	b.n	8001afa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ada:	78fb      	ldrb	r3, [r7, #3]
 8001adc:	f003 020f 	and.w	r2, r3, #15
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	4413      	add	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	4413      	add	r3, r2
 8001af0:	3304      	adds	r3, #4
 8001af2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2200      	movs	r2, #0
 8001af8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001afa:	78fb      	ldrb	r3, [r7, #3]
 8001afc:	f003 030f 	and.w	r3, r3, #15
 8001b00:	b2da      	uxtb	r2, r3
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001b06:	883a      	ldrh	r2, [r7, #0]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	78ba      	ldrb	r2, [r7, #2]
 8001b10:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	785b      	ldrb	r3, [r3, #1]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d004      	beq.n	8001b24 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b24:	78bb      	ldrb	r3, [r7, #2]
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d102      	bne.n	8001b30 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d101      	bne.n	8001b3e <HAL_PCD_EP_Open+0xaa>
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	e00e      	b.n	8001b5c <HAL_PCD_EP_Open+0xc8>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2201      	movs	r2, #1
 8001b42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	68f9      	ldr	r1, [r7, #12]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f001 fee7 	bl	8003920 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001b5a:	7afb      	ldrb	r3, [r7, #11]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	da0f      	bge.n	8001b98 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b78:	78fb      	ldrb	r3, [r7, #3]
 8001b7a:	f003 020f 	and.w	r2, r3, #15
 8001b7e:	4613      	mov	r3, r2
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	4413      	add	r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	3338      	adds	r3, #56	; 0x38
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	3304      	adds	r3, #4
 8001b8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2201      	movs	r2, #1
 8001b94:	705a      	strb	r2, [r3, #1]
 8001b96:	e00f      	b.n	8001bb8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b98:	78fb      	ldrb	r3, [r7, #3]
 8001b9a:	f003 020f 	and.w	r2, r3, #15
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	4413      	add	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	4413      	add	r3, r2
 8001bae:	3304      	adds	r3, #4
 8001bb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001bb8:	78fb      	ldrb	r3, [r7, #3]
 8001bba:	f003 030f 	and.w	r3, r3, #15
 8001bbe:	b2da      	uxtb	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d101      	bne.n	8001bd2 <HAL_PCD_EP_Close+0x6e>
 8001bce:	2302      	movs	r3, #2
 8001bd0:	e00e      	b.n	8001bf0 <HAL_PCD_EP_Close+0x8c>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68f9      	ldr	r1, [r7, #12]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f001 ff25 	bl	8003a30 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3710      	adds	r7, #16
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	607a      	str	r2, [r7, #4]
 8001c02:	603b      	str	r3, [r7, #0]
 8001c04:	460b      	mov	r3, r1
 8001c06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c08:	7afb      	ldrb	r3, [r7, #11]
 8001c0a:	f003 020f 	and.w	r2, r3, #15
 8001c0e:	4613      	mov	r3, r2
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	4413      	add	r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	3304      	adds	r3, #4
 8001c20:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	2200      	movs	r2, #0
 8001c32:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	2200      	movs	r2, #0
 8001c38:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c3a:	7afb      	ldrb	r3, [r7, #11]
 8001c3c:	f003 030f 	and.w	r3, r3, #15
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d102      	bne.n	8001c54 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c54:	7afb      	ldrb	r3, [r7, #11]
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d109      	bne.n	8001c72 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	6818      	ldr	r0, [r3, #0]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	461a      	mov	r2, r3
 8001c6a:	6979      	ldr	r1, [r7, #20]
 8001c6c:	f002 fa04 	bl	8004078 <USB_EP0StartXfer>
 8001c70:	e008      	b.n	8001c84 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6818      	ldr	r0, [r3, #0]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	6979      	ldr	r1, [r7, #20]
 8001c80:	f001 ffb2 	bl	8003be8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3718      	adds	r7, #24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
 8001c96:	460b      	mov	r3, r1
 8001c98:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001c9a:	78fb      	ldrb	r3, [r7, #3]
 8001c9c:	f003 020f 	and.w	r2, r3, #15
 8001ca0:	6879      	ldr	r1, [r7, #4]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	4413      	add	r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	440b      	add	r3, r1
 8001cac:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001cb0:	681b      	ldr	r3, [r3, #0]
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b086      	sub	sp, #24
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	60f8      	str	r0, [r7, #12]
 8001cc6:	607a      	str	r2, [r7, #4]
 8001cc8:	603b      	str	r3, [r7, #0]
 8001cca:	460b      	mov	r3, r1
 8001ccc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cce:	7afb      	ldrb	r3, [r7, #11]
 8001cd0:	f003 020f 	and.w	r2, r3, #15
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	4413      	add	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	3338      	adds	r3, #56	; 0x38
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	3304      	adds	r3, #4
 8001ce4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cfe:	7afb      	ldrb	r3, [r7, #11]
 8001d00:	f003 030f 	and.w	r3, r3, #15
 8001d04:	b2da      	uxtb	r2, r3
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d102      	bne.n	8001d18 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d18:	7afb      	ldrb	r3, [r7, #11]
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d109      	bne.n	8001d36 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6818      	ldr	r0, [r3, #0]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	6979      	ldr	r1, [r7, #20]
 8001d30:	f002 f9a2 	bl	8004078 <USB_EP0StartXfer>
 8001d34:	e008      	b.n	8001d48 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6818      	ldr	r0, [r3, #0]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	461a      	mov	r2, r3
 8001d42:	6979      	ldr	r1, [r7, #20]
 8001d44:	f001 ff50 	bl	8003be8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3718      	adds	r7, #24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b084      	sub	sp, #16
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001d5e:	78fb      	ldrb	r3, [r7, #3]
 8001d60:	f003 020f 	and.w	r2, r3, #15
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d901      	bls.n	8001d70 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e050      	b.n	8001e12 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	da0f      	bge.n	8001d98 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d78:	78fb      	ldrb	r3, [r7, #3]
 8001d7a:	f003 020f 	and.w	r2, r3, #15
 8001d7e:	4613      	mov	r3, r2
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	4413      	add	r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	3338      	adds	r3, #56	; 0x38
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2201      	movs	r2, #1
 8001d94:	705a      	strb	r2, [r3, #1]
 8001d96:	e00d      	b.n	8001db4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001d98:	78fa      	ldrb	r2, [r7, #3]
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	4413      	add	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	4413      	add	r3, r2
 8001daa:	3304      	adds	r3, #4
 8001dac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2200      	movs	r2, #0
 8001db2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2201      	movs	r2, #1
 8001db8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dba:	78fb      	ldrb	r3, [r7, #3]
 8001dbc:	f003 030f 	and.w	r3, r3, #15
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d101      	bne.n	8001dd4 <HAL_PCD_EP_SetStall+0x82>
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	e01e      	b.n	8001e12 <HAL_PCD_EP_SetStall+0xc0>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	68f9      	ldr	r1, [r7, #12]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f002 fbe0 	bl	80045a8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001de8:	78fb      	ldrb	r3, [r7, #3]
 8001dea:	f003 030f 	and.w	r3, r3, #15
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d10a      	bne.n	8001e08 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6818      	ldr	r0, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	b2d9      	uxtb	r1, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001e02:	461a      	mov	r2, r3
 8001e04:	f002 fdd0 	bl	80049a8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b084      	sub	sp, #16
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
 8001e22:	460b      	mov	r3, r1
 8001e24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001e26:	78fb      	ldrb	r3, [r7, #3]
 8001e28:	f003 020f 	and.w	r2, r3, #15
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d901      	bls.n	8001e38 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e042      	b.n	8001ebe <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	da0f      	bge.n	8001e60 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e40:	78fb      	ldrb	r3, [r7, #3]
 8001e42:	f003 020f 	and.w	r2, r3, #15
 8001e46:	4613      	mov	r3, r2
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	4413      	add	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	3338      	adds	r3, #56	; 0x38
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	4413      	add	r3, r2
 8001e54:	3304      	adds	r3, #4
 8001e56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	705a      	strb	r2, [r3, #1]
 8001e5e:	e00f      	b.n	8001e80 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e60:	78fb      	ldrb	r3, [r7, #3]
 8001e62:	f003 020f 	and.w	r2, r3, #15
 8001e66:	4613      	mov	r3, r2
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	4413      	add	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	4413      	add	r3, r2
 8001e76:	3304      	adds	r3, #4
 8001e78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2200      	movs	r2, #0
 8001e84:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e86:	78fb      	ldrb	r3, [r7, #3]
 8001e88:	f003 030f 	and.w	r3, r3, #15
 8001e8c:	b2da      	uxtb	r2, r3
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d101      	bne.n	8001ea0 <HAL_PCD_EP_ClrStall+0x86>
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	e00e      	b.n	8001ebe <HAL_PCD_EP_ClrStall+0xa4>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68f9      	ldr	r1, [r7, #12]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f002 fbe8 	bl	8004684 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b084      	sub	sp, #16
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
 8001ece:	460b      	mov	r3, r1
 8001ed0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001ed2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	da0c      	bge.n	8001ef4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001eda:	78fb      	ldrb	r3, [r7, #3]
 8001edc:	f003 020f 	and.w	r2, r3, #15
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	4413      	add	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	3338      	adds	r3, #56	; 0x38
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	4413      	add	r3, r2
 8001eee:	3304      	adds	r3, #4
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	e00c      	b.n	8001f0e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ef4:	78fb      	ldrb	r3, [r7, #3]
 8001ef6:	f003 020f 	and.w	r2, r3, #15
 8001efa:	4613      	mov	r3, r2
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	4413      	add	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	4413      	add	r3, r2
 8001f0a:	3304      	adds	r3, #4
 8001f0c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68f9      	ldr	r1, [r7, #12]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f002 fa07 	bl	8004328 <USB_EPStopXfer>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001f1e:	7afb      	ldrb	r3, [r7, #11]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3710      	adds	r7, #16
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b08a      	sub	sp, #40	; 0x28
 8001f2c:	af02      	add	r7, sp, #8
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	4413      	add	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	3338      	adds	r3, #56	; 0x38
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	3304      	adds	r3, #4
 8001f4e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6a1a      	ldr	r2, [r3, #32]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d901      	bls.n	8001f60 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e06c      	b.n	800203a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	699a      	ldr	r2, [r3, #24]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	69fa      	ldr	r2, [r7, #28]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d902      	bls.n	8001f7c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	3303      	adds	r3, #3
 8001f80:	089b      	lsrs	r3, r3, #2
 8001f82:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f84:	e02b      	b.n	8001fde <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	699a      	ldr	r2, [r3, #24]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	69fa      	ldr	r2, [r7, #28]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d902      	bls.n	8001fa2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	3303      	adds	r3, #3
 8001fa6:	089b      	lsrs	r3, r3, #2
 8001fa8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6919      	ldr	r1, [r3, #16]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	9300      	str	r3, [sp, #0]
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	6978      	ldr	r0, [r7, #20]
 8001fc2:	f002 fa5b 	bl	800447c <USB_WritePacket>

    ep->xfer_buff  += len;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	691a      	ldr	r2, [r3, #16]
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	441a      	add	r2, r3
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6a1a      	ldr	r2, [r3, #32]
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	441a      	add	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	015a      	lsls	r2, r3, #5
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d809      	bhi.n	8002008 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6a1a      	ldr	r2, [r3, #32]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d203      	bcs.n	8002008 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d1be      	bne.n	8001f86 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	699a      	ldr	r2, [r3, #24]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	429a      	cmp	r2, r3
 8002012:	d811      	bhi.n	8002038 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	2201      	movs	r2, #1
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002028:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	43db      	mvns	r3, r3
 800202e:	6939      	ldr	r1, [r7, #16]
 8002030:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002034:	4013      	ands	r3, r2
 8002036:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3720      	adds	r7, #32
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
	...

08002044 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b088      	sub	sp, #32
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	333c      	adds	r3, #60	; 0x3c
 800205c:	3304      	adds	r3, #4
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	015a      	lsls	r2, r3, #5
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	4413      	add	r3, r2
 800206a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d17b      	bne.n	8002172 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	f003 0308 	and.w	r3, r3, #8
 8002080:	2b00      	cmp	r3, #0
 8002082:	d015      	beq.n	80020b0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	4a61      	ldr	r2, [pc, #388]	; (800220c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002088:	4293      	cmp	r3, r2
 800208a:	f240 80b9 	bls.w	8002200 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002094:	2b00      	cmp	r3, #0
 8002096:	f000 80b3 	beq.w	8002200 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	015a      	lsls	r2, r3, #5
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	4413      	add	r3, r2
 80020a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020a6:	461a      	mov	r2, r3
 80020a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020ac:	6093      	str	r3, [r2, #8]
 80020ae:	e0a7      	b.n	8002200 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	f003 0320 	and.w	r3, r3, #32
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d009      	beq.n	80020ce <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	015a      	lsls	r2, r3, #5
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	4413      	add	r3, r2
 80020c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020c6:	461a      	mov	r2, r3
 80020c8:	2320      	movs	r3, #32
 80020ca:	6093      	str	r3, [r2, #8]
 80020cc:	e098      	b.n	8002200 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f040 8093 	bne.w	8002200 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	4a4b      	ldr	r2, [pc, #300]	; (800220c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d90f      	bls.n	8002102 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00a      	beq.n	8002102 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	015a      	lsls	r2, r3, #5
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	4413      	add	r3, r2
 80020f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020f8:	461a      	mov	r2, r3
 80020fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020fe:	6093      	str	r3, [r2, #8]
 8002100:	e07e      	b.n	8002200 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	4613      	mov	r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	4413      	add	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	4413      	add	r3, r2
 8002114:	3304      	adds	r3, #4
 8002116:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	69da      	ldr	r2, [r3, #28]
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	0159      	lsls	r1, r3, #5
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	440b      	add	r3, r1
 8002124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800212e:	1ad2      	subs	r2, r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d114      	bne.n	8002164 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d109      	bne.n	8002156 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6818      	ldr	r0, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800214c:	461a      	mov	r2, r3
 800214e:	2101      	movs	r1, #1
 8002150:	f002 fc2a 	bl	80049a8 <USB_EP0_OutStart>
 8002154:	e006      	b.n	8002164 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	691a      	ldr	r2, [r3, #16]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6a1b      	ldr	r3, [r3, #32]
 800215e:	441a      	add	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	b2db      	uxtb	r3, r3
 8002168:	4619      	mov	r1, r3
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f008 fec6 	bl	800aefc <HAL_PCD_DataOutStageCallback>
 8002170:	e046      	b.n	8002200 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	4a26      	ldr	r2, [pc, #152]	; (8002210 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d124      	bne.n	80021c4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d00a      	beq.n	800219a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	015a      	lsls	r2, r3, #5
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	4413      	add	r3, r2
 800218c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002190:	461a      	mov	r2, r3
 8002192:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002196:	6093      	str	r3, [r2, #8]
 8002198:	e032      	b.n	8002200 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	f003 0320 	and.w	r3, r3, #32
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d008      	beq.n	80021b6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	015a      	lsls	r2, r3, #5
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	4413      	add	r3, r2
 80021ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021b0:	461a      	mov	r2, r3
 80021b2:	2320      	movs	r3, #32
 80021b4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	4619      	mov	r1, r3
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f008 fe9d 	bl	800aefc <HAL_PCD_DataOutStageCallback>
 80021c2:	e01d      	b.n	8002200 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d114      	bne.n	80021f4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	4613      	mov	r3, r2
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	4413      	add	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	440b      	add	r3, r1
 80021d8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d108      	bne.n	80021f4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6818      	ldr	r0, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80021ec:	461a      	mov	r2, r3
 80021ee:	2100      	movs	r1, #0
 80021f0:	f002 fbda 	bl	80049a8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	4619      	mov	r1, r3
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f008 fe7e 	bl	800aefc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3720      	adds	r7, #32
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	4f54300a 	.word	0x4f54300a
 8002210:	4f54310a 	.word	0x4f54310a

08002214 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	333c      	adds	r3, #60	; 0x3c
 800222c:	3304      	adds	r3, #4
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	015a      	lsls	r2, r3, #5
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	4413      	add	r3, r2
 800223a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	4a15      	ldr	r2, [pc, #84]	; (800229c <PCD_EP_OutSetupPacket_int+0x88>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d90e      	bls.n	8002268 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002250:	2b00      	cmp	r3, #0
 8002252:	d009      	beq.n	8002268 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	015a      	lsls	r2, r3, #5
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	4413      	add	r3, r2
 800225c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002260:	461a      	mov	r2, r3
 8002262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002266:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f008 fe35 	bl	800aed8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	4a0a      	ldr	r2, [pc, #40]	; (800229c <PCD_EP_OutSetupPacket_int+0x88>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d90c      	bls.n	8002290 <PCD_EP_OutSetupPacket_int+0x7c>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d108      	bne.n	8002290 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6818      	ldr	r0, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002288:	461a      	mov	r2, r3
 800228a:	2101      	movs	r1, #1
 800228c:	f002 fb8c 	bl	80049a8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3718      	adds	r7, #24
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	4f54300a 	.word	0x4f54300a

080022a0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	460b      	mov	r3, r1
 80022aa:	70fb      	strb	r3, [r7, #3]
 80022ac:	4613      	mov	r3, r2
 80022ae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80022b8:	78fb      	ldrb	r3, [r7, #3]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d107      	bne.n	80022ce <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80022be:	883b      	ldrh	r3, [r7, #0]
 80022c0:	0419      	lsls	r1, r3, #16
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	430a      	orrs	r2, r1
 80022ca:	629a      	str	r2, [r3, #40]	; 0x28
 80022cc:	e028      	b.n	8002320 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d4:	0c1b      	lsrs	r3, r3, #16
 80022d6:	68ba      	ldr	r2, [r7, #8]
 80022d8:	4413      	add	r3, r2
 80022da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80022dc:	2300      	movs	r3, #0
 80022de:	73fb      	strb	r3, [r7, #15]
 80022e0:	e00d      	b.n	80022fe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	7bfb      	ldrb	r3, [r7, #15]
 80022e8:	3340      	adds	r3, #64	; 0x40
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	0c1b      	lsrs	r3, r3, #16
 80022f2:	68ba      	ldr	r2, [r7, #8]
 80022f4:	4413      	add	r3, r2
 80022f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80022f8:	7bfb      	ldrb	r3, [r7, #15]
 80022fa:	3301      	adds	r3, #1
 80022fc:	73fb      	strb	r3, [r7, #15]
 80022fe:	7bfa      	ldrb	r2, [r7, #15]
 8002300:	78fb      	ldrb	r3, [r7, #3]
 8002302:	3b01      	subs	r3, #1
 8002304:	429a      	cmp	r2, r3
 8002306:	d3ec      	bcc.n	80022e2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002308:	883b      	ldrh	r3, [r7, #0]
 800230a:	0418      	lsls	r0, r3, #16
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6819      	ldr	r1, [r3, #0]
 8002310:	78fb      	ldrb	r3, [r7, #3]
 8002312:	3b01      	subs	r3, #1
 8002314:	68ba      	ldr	r2, [r7, #8]
 8002316:	4302      	orrs	r2, r0
 8002318:	3340      	adds	r3, #64	; 0x40
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	440b      	add	r3, r1
 800231e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800232e:	b480      	push	{r7}
 8002330:	b083      	sub	sp, #12
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
 8002336:	460b      	mov	r3, r1
 8002338:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	887a      	ldrh	r2, [r7, #2]
 8002340:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	460b      	mov	r3, r1
 800235a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e267      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	2b00      	cmp	r3, #0
 8002384:	d075      	beq.n	8002472 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002386:	4b88      	ldr	r3, [pc, #544]	; (80025a8 <HAL_RCC_OscConfig+0x240>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f003 030c 	and.w	r3, r3, #12
 800238e:	2b04      	cmp	r3, #4
 8002390:	d00c      	beq.n	80023ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002392:	4b85      	ldr	r3, [pc, #532]	; (80025a8 <HAL_RCC_OscConfig+0x240>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800239a:	2b08      	cmp	r3, #8
 800239c:	d112      	bne.n	80023c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800239e:	4b82      	ldr	r3, [pc, #520]	; (80025a8 <HAL_RCC_OscConfig+0x240>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023aa:	d10b      	bne.n	80023c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ac:	4b7e      	ldr	r3, [pc, #504]	; (80025a8 <HAL_RCC_OscConfig+0x240>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d05b      	beq.n	8002470 <HAL_RCC_OscConfig+0x108>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d157      	bne.n	8002470 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e242      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023cc:	d106      	bne.n	80023dc <HAL_RCC_OscConfig+0x74>
 80023ce:	4b76      	ldr	r3, [pc, #472]	; (80025a8 <HAL_RCC_OscConfig+0x240>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a75      	ldr	r2, [pc, #468]	; (80025a8 <HAL_RCC_OscConfig+0x240>)
 80023d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d8:	6013      	str	r3, [r2, #0]
 80023da:	e01d      	b.n	8002418 <HAL_RCC_OscConfig+0xb0>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023e4:	d10c      	bne.n	8002400 <HAL_RCC_OscConfig+0x98>
 80023e6:	4b70      	ldr	r3, [pc, #448]	; (80025a8 <HAL_RCC_OscConfig+0x240>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a6f      	ldr	r2, [pc, #444]	; (80025a8 <HAL_RCC_OscConfig+0x240>)
 80023ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023f0:	6013      	str	r3, [r2, #0]
 80023f2:	4b6d      	ldr	r3, [pc, #436]	; (80025a8 <HAL_RCC_OscConfig+0x240>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a6c      	ldr	r2, [pc, #432]	; (80025a8 <HAL_RCC_OscConfig+0x240>)
 80023f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	e00b      	b.n	8002418 <HAL_RCC_OscConfig+0xb0>
 8002400:	4b69      	ldr	r3, [pc, #420]	; (80025a8 <HAL_RCC_OscConfig+0x240>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a68      	ldr	r2, [pc, #416]	; (80025a8 <HAL_RCC_OscConfig+0x240>)
 8002406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800240a:	6013      	str	r3, [r2, #0]
 800240c:	4b66      	ldr	r3, [pc, #408]	; (80025a8 <HAL_RCC_OscConfig+0x240>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a65      	ldr	r2, [pc, #404]	; (80025a8 <HAL_RCC_OscConfig+0x240>)
 8002412:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002416:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d013      	beq.n	8002448 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002420:	f7fe fa76 	bl	8000910 <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002428:	f7fe fa72 	bl	8000910 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b64      	cmp	r3, #100	; 0x64
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e207      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800243a:	4b5b      	ldr	r3, [pc, #364]	; (80025a8 <HAL_RCC_OscConfig+0x240>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d0f0      	beq.n	8002428 <HAL_RCC_OscConfig+0xc0>
 8002446:	e014      	b.n	8002472 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002448:	f7fe fa62 	bl	8000910 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002450:	f7fe fa5e 	bl	8000910 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b64      	cmp	r3, #100	; 0x64
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e1f3      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002462:	4b51      	ldr	r3, [pc, #324]	; (80025a8 <HAL_RCC_OscConfig+0x240>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f0      	bne.n	8002450 <HAL_RCC_OscConfig+0xe8>
 800246e:	e000      	b.n	8002472 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002470:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d063      	beq.n	8002546 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800247e:	4b4a      	ldr	r3, [pc, #296]	; (80025a8 <HAL_RCC_OscConfig+0x240>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 030c 	and.w	r3, r3, #12
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00b      	beq.n	80024a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800248a:	4b47      	ldr	r3, [pc, #284]	; (80025a8 <HAL_RCC_OscConfig+0x240>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002492:	2b08      	cmp	r3, #8
 8002494:	d11c      	bne.n	80024d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002496:	4b44      	ldr	r3, [pc, #272]	; (80025a8 <HAL_RCC_OscConfig+0x240>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d116      	bne.n	80024d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024a2:	4b41      	ldr	r3, [pc, #260]	; (80025a8 <HAL_RCC_OscConfig+0x240>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d005      	beq.n	80024ba <HAL_RCC_OscConfig+0x152>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d001      	beq.n	80024ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e1c7      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ba:	4b3b      	ldr	r3, [pc, #236]	; (80025a8 <HAL_RCC_OscConfig+0x240>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	4937      	ldr	r1, [pc, #220]	; (80025a8 <HAL_RCC_OscConfig+0x240>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ce:	e03a      	b.n	8002546 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d020      	beq.n	800251a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024d8:	4b34      	ldr	r3, [pc, #208]	; (80025ac <HAL_RCC_OscConfig+0x244>)
 80024da:	2201      	movs	r2, #1
 80024dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024de:	f7fe fa17 	bl	8000910 <HAL_GetTick>
 80024e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e4:	e008      	b.n	80024f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024e6:	f7fe fa13 	bl	8000910 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e1a8      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f8:	4b2b      	ldr	r3, [pc, #172]	; (80025a8 <HAL_RCC_OscConfig+0x240>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d0f0      	beq.n	80024e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002504:	4b28      	ldr	r3, [pc, #160]	; (80025a8 <HAL_RCC_OscConfig+0x240>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	4925      	ldr	r1, [pc, #148]	; (80025a8 <HAL_RCC_OscConfig+0x240>)
 8002514:	4313      	orrs	r3, r2
 8002516:	600b      	str	r3, [r1, #0]
 8002518:	e015      	b.n	8002546 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800251a:	4b24      	ldr	r3, [pc, #144]	; (80025ac <HAL_RCC_OscConfig+0x244>)
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002520:	f7fe f9f6 	bl	8000910 <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002528:	f7fe f9f2 	bl	8000910 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e187      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800253a:	4b1b      	ldr	r3, [pc, #108]	; (80025a8 <HAL_RCC_OscConfig+0x240>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1f0      	bne.n	8002528 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0308 	and.w	r3, r3, #8
 800254e:	2b00      	cmp	r3, #0
 8002550:	d036      	beq.n	80025c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d016      	beq.n	8002588 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800255a:	4b15      	ldr	r3, [pc, #84]	; (80025b0 <HAL_RCC_OscConfig+0x248>)
 800255c:	2201      	movs	r2, #1
 800255e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002560:	f7fe f9d6 	bl	8000910 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002568:	f7fe f9d2 	bl	8000910 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e167      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800257a:	4b0b      	ldr	r3, [pc, #44]	; (80025a8 <HAL_RCC_OscConfig+0x240>)
 800257c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0f0      	beq.n	8002568 <HAL_RCC_OscConfig+0x200>
 8002586:	e01b      	b.n	80025c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002588:	4b09      	ldr	r3, [pc, #36]	; (80025b0 <HAL_RCC_OscConfig+0x248>)
 800258a:	2200      	movs	r2, #0
 800258c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800258e:	f7fe f9bf 	bl	8000910 <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002594:	e00e      	b.n	80025b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002596:	f7fe f9bb 	bl	8000910 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d907      	bls.n	80025b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e150      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
 80025a8:	40023800 	.word	0x40023800
 80025ac:	42470000 	.word	0x42470000
 80025b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025b4:	4b88      	ldr	r3, [pc, #544]	; (80027d8 <HAL_RCC_OscConfig+0x470>)
 80025b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1ea      	bne.n	8002596 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 8097 	beq.w	80026fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ce:	2300      	movs	r3, #0
 80025d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025d2:	4b81      	ldr	r3, [pc, #516]	; (80027d8 <HAL_RCC_OscConfig+0x470>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10f      	bne.n	80025fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	60bb      	str	r3, [r7, #8]
 80025e2:	4b7d      	ldr	r3, [pc, #500]	; (80027d8 <HAL_RCC_OscConfig+0x470>)
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	4a7c      	ldr	r2, [pc, #496]	; (80027d8 <HAL_RCC_OscConfig+0x470>)
 80025e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ec:	6413      	str	r3, [r2, #64]	; 0x40
 80025ee:	4b7a      	ldr	r3, [pc, #488]	; (80027d8 <HAL_RCC_OscConfig+0x470>)
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f6:	60bb      	str	r3, [r7, #8]
 80025f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025fa:	2301      	movs	r3, #1
 80025fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025fe:	4b77      	ldr	r3, [pc, #476]	; (80027dc <HAL_RCC_OscConfig+0x474>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002606:	2b00      	cmp	r3, #0
 8002608:	d118      	bne.n	800263c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800260a:	4b74      	ldr	r3, [pc, #464]	; (80027dc <HAL_RCC_OscConfig+0x474>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a73      	ldr	r2, [pc, #460]	; (80027dc <HAL_RCC_OscConfig+0x474>)
 8002610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002614:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002616:	f7fe f97b 	bl	8000910 <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800261e:	f7fe f977 	bl	8000910 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e10c      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002630:	4b6a      	ldr	r3, [pc, #424]	; (80027dc <HAL_RCC_OscConfig+0x474>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002638:	2b00      	cmp	r3, #0
 800263a:	d0f0      	beq.n	800261e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d106      	bne.n	8002652 <HAL_RCC_OscConfig+0x2ea>
 8002644:	4b64      	ldr	r3, [pc, #400]	; (80027d8 <HAL_RCC_OscConfig+0x470>)
 8002646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002648:	4a63      	ldr	r2, [pc, #396]	; (80027d8 <HAL_RCC_OscConfig+0x470>)
 800264a:	f043 0301 	orr.w	r3, r3, #1
 800264e:	6713      	str	r3, [r2, #112]	; 0x70
 8002650:	e01c      	b.n	800268c <HAL_RCC_OscConfig+0x324>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	2b05      	cmp	r3, #5
 8002658:	d10c      	bne.n	8002674 <HAL_RCC_OscConfig+0x30c>
 800265a:	4b5f      	ldr	r3, [pc, #380]	; (80027d8 <HAL_RCC_OscConfig+0x470>)
 800265c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265e:	4a5e      	ldr	r2, [pc, #376]	; (80027d8 <HAL_RCC_OscConfig+0x470>)
 8002660:	f043 0304 	orr.w	r3, r3, #4
 8002664:	6713      	str	r3, [r2, #112]	; 0x70
 8002666:	4b5c      	ldr	r3, [pc, #368]	; (80027d8 <HAL_RCC_OscConfig+0x470>)
 8002668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800266a:	4a5b      	ldr	r2, [pc, #364]	; (80027d8 <HAL_RCC_OscConfig+0x470>)
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	6713      	str	r3, [r2, #112]	; 0x70
 8002672:	e00b      	b.n	800268c <HAL_RCC_OscConfig+0x324>
 8002674:	4b58      	ldr	r3, [pc, #352]	; (80027d8 <HAL_RCC_OscConfig+0x470>)
 8002676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002678:	4a57      	ldr	r2, [pc, #348]	; (80027d8 <HAL_RCC_OscConfig+0x470>)
 800267a:	f023 0301 	bic.w	r3, r3, #1
 800267e:	6713      	str	r3, [r2, #112]	; 0x70
 8002680:	4b55      	ldr	r3, [pc, #340]	; (80027d8 <HAL_RCC_OscConfig+0x470>)
 8002682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002684:	4a54      	ldr	r2, [pc, #336]	; (80027d8 <HAL_RCC_OscConfig+0x470>)
 8002686:	f023 0304 	bic.w	r3, r3, #4
 800268a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d015      	beq.n	80026c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002694:	f7fe f93c 	bl	8000910 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800269a:	e00a      	b.n	80026b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800269c:	f7fe f938 	bl	8000910 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e0cb      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026b2:	4b49      	ldr	r3, [pc, #292]	; (80027d8 <HAL_RCC_OscConfig+0x470>)
 80026b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d0ee      	beq.n	800269c <HAL_RCC_OscConfig+0x334>
 80026be:	e014      	b.n	80026ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026c0:	f7fe f926 	bl	8000910 <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026c6:	e00a      	b.n	80026de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026c8:	f7fe f922 	bl	8000910 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e0b5      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026de:	4b3e      	ldr	r3, [pc, #248]	; (80027d8 <HAL_RCC_OscConfig+0x470>)
 80026e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1ee      	bne.n	80026c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026ea:	7dfb      	ldrb	r3, [r7, #23]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d105      	bne.n	80026fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026f0:	4b39      	ldr	r3, [pc, #228]	; (80027d8 <HAL_RCC_OscConfig+0x470>)
 80026f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f4:	4a38      	ldr	r2, [pc, #224]	; (80027d8 <HAL_RCC_OscConfig+0x470>)
 80026f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	2b00      	cmp	r3, #0
 8002702:	f000 80a1 	beq.w	8002848 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002706:	4b34      	ldr	r3, [pc, #208]	; (80027d8 <HAL_RCC_OscConfig+0x470>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 030c 	and.w	r3, r3, #12
 800270e:	2b08      	cmp	r3, #8
 8002710:	d05c      	beq.n	80027cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	2b02      	cmp	r3, #2
 8002718:	d141      	bne.n	800279e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800271a:	4b31      	ldr	r3, [pc, #196]	; (80027e0 <HAL_RCC_OscConfig+0x478>)
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002720:	f7fe f8f6 	bl	8000910 <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002728:	f7fe f8f2 	bl	8000910 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e087      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800273a:	4b27      	ldr	r3, [pc, #156]	; (80027d8 <HAL_RCC_OscConfig+0x470>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1f0      	bne.n	8002728 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	69da      	ldr	r2, [r3, #28]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	431a      	orrs	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002754:	019b      	lsls	r3, r3, #6
 8002756:	431a      	orrs	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275c:	085b      	lsrs	r3, r3, #1
 800275e:	3b01      	subs	r3, #1
 8002760:	041b      	lsls	r3, r3, #16
 8002762:	431a      	orrs	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002768:	061b      	lsls	r3, r3, #24
 800276a:	491b      	ldr	r1, [pc, #108]	; (80027d8 <HAL_RCC_OscConfig+0x470>)
 800276c:	4313      	orrs	r3, r2
 800276e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002770:	4b1b      	ldr	r3, [pc, #108]	; (80027e0 <HAL_RCC_OscConfig+0x478>)
 8002772:	2201      	movs	r2, #1
 8002774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002776:	f7fe f8cb 	bl	8000910 <HAL_GetTick>
 800277a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800277c:	e008      	b.n	8002790 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800277e:	f7fe f8c7 	bl	8000910 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e05c      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002790:	4b11      	ldr	r3, [pc, #68]	; (80027d8 <HAL_RCC_OscConfig+0x470>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d0f0      	beq.n	800277e <HAL_RCC_OscConfig+0x416>
 800279c:	e054      	b.n	8002848 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800279e:	4b10      	ldr	r3, [pc, #64]	; (80027e0 <HAL_RCC_OscConfig+0x478>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a4:	f7fe f8b4 	bl	8000910 <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027ac:	f7fe f8b0 	bl	8000910 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e045      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027be:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <HAL_RCC_OscConfig+0x470>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1f0      	bne.n	80027ac <HAL_RCC_OscConfig+0x444>
 80027ca:	e03d      	b.n	8002848 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d107      	bne.n	80027e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e038      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
 80027d8:	40023800 	.word	0x40023800
 80027dc:	40007000 	.word	0x40007000
 80027e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027e4:	4b1b      	ldr	r3, [pc, #108]	; (8002854 <HAL_RCC_OscConfig+0x4ec>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d028      	beq.n	8002844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d121      	bne.n	8002844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800280a:	429a      	cmp	r2, r3
 800280c:	d11a      	bne.n	8002844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002814:	4013      	ands	r3, r2
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800281a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800281c:	4293      	cmp	r3, r2
 800281e:	d111      	bne.n	8002844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282a:	085b      	lsrs	r3, r3, #1
 800282c:	3b01      	subs	r3, #1
 800282e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002830:	429a      	cmp	r2, r3
 8002832:	d107      	bne.n	8002844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002840:	429a      	cmp	r2, r3
 8002842:	d001      	beq.n	8002848 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e000      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3718      	adds	r7, #24
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	40023800 	.word	0x40023800

08002858 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d101      	bne.n	800286c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e0cc      	b.n	8002a06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800286c:	4b68      	ldr	r3, [pc, #416]	; (8002a10 <HAL_RCC_ClockConfig+0x1b8>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	429a      	cmp	r2, r3
 8002878:	d90c      	bls.n	8002894 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800287a:	4b65      	ldr	r3, [pc, #404]	; (8002a10 <HAL_RCC_ClockConfig+0x1b8>)
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002882:	4b63      	ldr	r3, [pc, #396]	; (8002a10 <HAL_RCC_ClockConfig+0x1b8>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0307 	and.w	r3, r3, #7
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	429a      	cmp	r2, r3
 800288e:	d001      	beq.n	8002894 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e0b8      	b.n	8002a06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d020      	beq.n	80028e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0304 	and.w	r3, r3, #4
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d005      	beq.n	80028b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028ac:	4b59      	ldr	r3, [pc, #356]	; (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	4a58      	ldr	r2, [pc, #352]	; (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80028b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0308 	and.w	r3, r3, #8
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d005      	beq.n	80028d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028c4:	4b53      	ldr	r3, [pc, #332]	; (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	4a52      	ldr	r2, [pc, #328]	; (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80028ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028d0:	4b50      	ldr	r3, [pc, #320]	; (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	494d      	ldr	r1, [pc, #308]	; (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d044      	beq.n	8002978 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d107      	bne.n	8002906 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028f6:	4b47      	ldr	r3, [pc, #284]	; (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d119      	bne.n	8002936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e07f      	b.n	8002a06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	2b02      	cmp	r3, #2
 800290c:	d003      	beq.n	8002916 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002912:	2b03      	cmp	r3, #3
 8002914:	d107      	bne.n	8002926 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002916:	4b3f      	ldr	r3, [pc, #252]	; (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d109      	bne.n	8002936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e06f      	b.n	8002a06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002926:	4b3b      	ldr	r3, [pc, #236]	; (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e067      	b.n	8002a06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002936:	4b37      	ldr	r3, [pc, #220]	; (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f023 0203 	bic.w	r2, r3, #3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	4934      	ldr	r1, [pc, #208]	; (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 8002944:	4313      	orrs	r3, r2
 8002946:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002948:	f7fd ffe2 	bl	8000910 <HAL_GetTick>
 800294c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800294e:	e00a      	b.n	8002966 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002950:	f7fd ffde 	bl	8000910 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	f241 3288 	movw	r2, #5000	; 0x1388
 800295e:	4293      	cmp	r3, r2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e04f      	b.n	8002a06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002966:	4b2b      	ldr	r3, [pc, #172]	; (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f003 020c 	and.w	r2, r3, #12
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	429a      	cmp	r2, r3
 8002976:	d1eb      	bne.n	8002950 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002978:	4b25      	ldr	r3, [pc, #148]	; (8002a10 <HAL_RCC_ClockConfig+0x1b8>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	429a      	cmp	r2, r3
 8002984:	d20c      	bcs.n	80029a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002986:	4b22      	ldr	r3, [pc, #136]	; (8002a10 <HAL_RCC_ClockConfig+0x1b8>)
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800298e:	4b20      	ldr	r3, [pc, #128]	; (8002a10 <HAL_RCC_ClockConfig+0x1b8>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	429a      	cmp	r2, r3
 800299a:	d001      	beq.n	80029a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e032      	b.n	8002a06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0304 	and.w	r3, r3, #4
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d008      	beq.n	80029be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029ac:	4b19      	ldr	r3, [pc, #100]	; (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	4916      	ldr	r1, [pc, #88]	; (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0308 	and.w	r3, r3, #8
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d009      	beq.n	80029de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029ca:	4b12      	ldr	r3, [pc, #72]	; (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	490e      	ldr	r1, [pc, #56]	; (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029de:	f000 f821 	bl	8002a24 <HAL_RCC_GetSysClockFreq>
 80029e2:	4602      	mov	r2, r0
 80029e4:	4b0b      	ldr	r3, [pc, #44]	; (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	091b      	lsrs	r3, r3, #4
 80029ea:	f003 030f 	and.w	r3, r3, #15
 80029ee:	490a      	ldr	r1, [pc, #40]	; (8002a18 <HAL_RCC_ClockConfig+0x1c0>)
 80029f0:	5ccb      	ldrb	r3, [r1, r3]
 80029f2:	fa22 f303 	lsr.w	r3, r2, r3
 80029f6:	4a09      	ldr	r2, [pc, #36]	; (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 80029f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029fa:	4b09      	ldr	r3, [pc, #36]	; (8002a20 <HAL_RCC_ClockConfig+0x1c8>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7fd fe76 	bl	80006f0 <HAL_InitTick>

  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	40023c00 	.word	0x40023c00
 8002a14:	40023800 	.word	0x40023800
 8002a18:	0800b718 	.word	0x0800b718
 8002a1c:	20000000 	.word	0x20000000
 8002a20:	20000004 	.word	0x20000004

08002a24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a28:	b094      	sub	sp, #80	; 0x50
 8002a2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	647b      	str	r3, [r7, #68]	; 0x44
 8002a30:	2300      	movs	r3, #0
 8002a32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a34:	2300      	movs	r3, #0
 8002a36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a3c:	4b79      	ldr	r3, [pc, #484]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f003 030c 	and.w	r3, r3, #12
 8002a44:	2b08      	cmp	r3, #8
 8002a46:	d00d      	beq.n	8002a64 <HAL_RCC_GetSysClockFreq+0x40>
 8002a48:	2b08      	cmp	r3, #8
 8002a4a:	f200 80e1 	bhi.w	8002c10 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d002      	beq.n	8002a58 <HAL_RCC_GetSysClockFreq+0x34>
 8002a52:	2b04      	cmp	r3, #4
 8002a54:	d003      	beq.n	8002a5e <HAL_RCC_GetSysClockFreq+0x3a>
 8002a56:	e0db      	b.n	8002c10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a58:	4b73      	ldr	r3, [pc, #460]	; (8002c28 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a5a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002a5c:	e0db      	b.n	8002c16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a5e:	4b73      	ldr	r3, [pc, #460]	; (8002c2c <HAL_RCC_GetSysClockFreq+0x208>)
 8002a60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a62:	e0d8      	b.n	8002c16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a64:	4b6f      	ldr	r3, [pc, #444]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a6c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a6e:	4b6d      	ldr	r3, [pc, #436]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d063      	beq.n	8002b42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a7a:	4b6a      	ldr	r3, [pc, #424]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	099b      	lsrs	r3, r3, #6
 8002a80:	2200      	movs	r2, #0
 8002a82:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a84:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a8c:	633b      	str	r3, [r7, #48]	; 0x30
 8002a8e:	2300      	movs	r3, #0
 8002a90:	637b      	str	r3, [r7, #52]	; 0x34
 8002a92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002a96:	4622      	mov	r2, r4
 8002a98:	462b      	mov	r3, r5
 8002a9a:	f04f 0000 	mov.w	r0, #0
 8002a9e:	f04f 0100 	mov.w	r1, #0
 8002aa2:	0159      	lsls	r1, r3, #5
 8002aa4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002aa8:	0150      	lsls	r0, r2, #5
 8002aaa:	4602      	mov	r2, r0
 8002aac:	460b      	mov	r3, r1
 8002aae:	4621      	mov	r1, r4
 8002ab0:	1a51      	subs	r1, r2, r1
 8002ab2:	6139      	str	r1, [r7, #16]
 8002ab4:	4629      	mov	r1, r5
 8002ab6:	eb63 0301 	sbc.w	r3, r3, r1
 8002aba:	617b      	str	r3, [r7, #20]
 8002abc:	f04f 0200 	mov.w	r2, #0
 8002ac0:	f04f 0300 	mov.w	r3, #0
 8002ac4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ac8:	4659      	mov	r1, fp
 8002aca:	018b      	lsls	r3, r1, #6
 8002acc:	4651      	mov	r1, sl
 8002ace:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ad2:	4651      	mov	r1, sl
 8002ad4:	018a      	lsls	r2, r1, #6
 8002ad6:	4651      	mov	r1, sl
 8002ad8:	ebb2 0801 	subs.w	r8, r2, r1
 8002adc:	4659      	mov	r1, fp
 8002ade:	eb63 0901 	sbc.w	r9, r3, r1
 8002ae2:	f04f 0200 	mov.w	r2, #0
 8002ae6:	f04f 0300 	mov.w	r3, #0
 8002aea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002aee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002af2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002af6:	4690      	mov	r8, r2
 8002af8:	4699      	mov	r9, r3
 8002afa:	4623      	mov	r3, r4
 8002afc:	eb18 0303 	adds.w	r3, r8, r3
 8002b00:	60bb      	str	r3, [r7, #8]
 8002b02:	462b      	mov	r3, r5
 8002b04:	eb49 0303 	adc.w	r3, r9, r3
 8002b08:	60fb      	str	r3, [r7, #12]
 8002b0a:	f04f 0200 	mov.w	r2, #0
 8002b0e:	f04f 0300 	mov.w	r3, #0
 8002b12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b16:	4629      	mov	r1, r5
 8002b18:	024b      	lsls	r3, r1, #9
 8002b1a:	4621      	mov	r1, r4
 8002b1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b20:	4621      	mov	r1, r4
 8002b22:	024a      	lsls	r2, r1, #9
 8002b24:	4610      	mov	r0, r2
 8002b26:	4619      	mov	r1, r3
 8002b28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b34:	f7fd fb4c 	bl	80001d0 <__aeabi_uldivmod>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b40:	e058      	b.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b42:	4b38      	ldr	r3, [pc, #224]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	099b      	lsrs	r3, r3, #6
 8002b48:	2200      	movs	r2, #0
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	4611      	mov	r1, r2
 8002b4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b52:	623b      	str	r3, [r7, #32]
 8002b54:	2300      	movs	r3, #0
 8002b56:	627b      	str	r3, [r7, #36]	; 0x24
 8002b58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b5c:	4642      	mov	r2, r8
 8002b5e:	464b      	mov	r3, r9
 8002b60:	f04f 0000 	mov.w	r0, #0
 8002b64:	f04f 0100 	mov.w	r1, #0
 8002b68:	0159      	lsls	r1, r3, #5
 8002b6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b6e:	0150      	lsls	r0, r2, #5
 8002b70:	4602      	mov	r2, r0
 8002b72:	460b      	mov	r3, r1
 8002b74:	4641      	mov	r1, r8
 8002b76:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b7a:	4649      	mov	r1, r9
 8002b7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b80:	f04f 0200 	mov.w	r2, #0
 8002b84:	f04f 0300 	mov.w	r3, #0
 8002b88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b94:	ebb2 040a 	subs.w	r4, r2, sl
 8002b98:	eb63 050b 	sbc.w	r5, r3, fp
 8002b9c:	f04f 0200 	mov.w	r2, #0
 8002ba0:	f04f 0300 	mov.w	r3, #0
 8002ba4:	00eb      	lsls	r3, r5, #3
 8002ba6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002baa:	00e2      	lsls	r2, r4, #3
 8002bac:	4614      	mov	r4, r2
 8002bae:	461d      	mov	r5, r3
 8002bb0:	4643      	mov	r3, r8
 8002bb2:	18e3      	adds	r3, r4, r3
 8002bb4:	603b      	str	r3, [r7, #0]
 8002bb6:	464b      	mov	r3, r9
 8002bb8:	eb45 0303 	adc.w	r3, r5, r3
 8002bbc:	607b      	str	r3, [r7, #4]
 8002bbe:	f04f 0200 	mov.w	r2, #0
 8002bc2:	f04f 0300 	mov.w	r3, #0
 8002bc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bca:	4629      	mov	r1, r5
 8002bcc:	028b      	lsls	r3, r1, #10
 8002bce:	4621      	mov	r1, r4
 8002bd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bd4:	4621      	mov	r1, r4
 8002bd6:	028a      	lsls	r2, r1, #10
 8002bd8:	4610      	mov	r0, r2
 8002bda:	4619      	mov	r1, r3
 8002bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bde:	2200      	movs	r2, #0
 8002be0:	61bb      	str	r3, [r7, #24]
 8002be2:	61fa      	str	r2, [r7, #28]
 8002be4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002be8:	f7fd faf2 	bl	80001d0 <__aeabi_uldivmod>
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002bf4:	4b0b      	ldr	r3, [pc, #44]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	0c1b      	lsrs	r3, r3, #16
 8002bfa:	f003 0303 	and.w	r3, r3, #3
 8002bfe:	3301      	adds	r3, #1
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002c04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c0e:	e002      	b.n	8002c16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c10:	4b05      	ldr	r3, [pc, #20]	; (8002c28 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c12:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3750      	adds	r7, #80	; 0x50
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c22:	bf00      	nop
 8002c24:	40023800 	.word	0x40023800
 8002c28:	00f42400 	.word	0x00f42400
 8002c2c:	007a1200 	.word	0x007a1200

08002c30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c34:	4b03      	ldr	r3, [pc, #12]	; (8002c44 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c36:	681b      	ldr	r3, [r3, #0]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	20000000 	.word	0x20000000

08002c48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c4c:	f7ff fff0 	bl	8002c30 <HAL_RCC_GetHCLKFreq>
 8002c50:	4602      	mov	r2, r0
 8002c52:	4b05      	ldr	r3, [pc, #20]	; (8002c68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	0b5b      	lsrs	r3, r3, #13
 8002c58:	f003 0307 	and.w	r3, r3, #7
 8002c5c:	4903      	ldr	r1, [pc, #12]	; (8002c6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c5e:	5ccb      	ldrb	r3, [r1, r3]
 8002c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	0800b728 	.word	0x0800b728

08002c70 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	220f      	movs	r2, #15
 8002c7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002c80:	4b12      	ldr	r3, [pc, #72]	; (8002ccc <HAL_RCC_GetClockConfig+0x5c>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f003 0203 	and.w	r2, r3, #3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002c8c:	4b0f      	ldr	r3, [pc, #60]	; (8002ccc <HAL_RCC_GetClockConfig+0x5c>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002c98:	4b0c      	ldr	r3, [pc, #48]	; (8002ccc <HAL_RCC_GetClockConfig+0x5c>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002ca4:	4b09      	ldr	r3, [pc, #36]	; (8002ccc <HAL_RCC_GetClockConfig+0x5c>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	08db      	lsrs	r3, r3, #3
 8002caa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002cb2:	4b07      	ldr	r3, [pc, #28]	; (8002cd0 <HAL_RCC_GetClockConfig+0x60>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0207 	and.w	r2, r3, #7
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	601a      	str	r2, [r3, #0]
}
 8002cbe:	bf00      	nop
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	40023c00 	.word	0x40023c00

08002cd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e041      	b.n	8002d6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d106      	bne.n	8002d00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f839 	bl	8002d72 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2202      	movs	r2, #2
 8002d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3304      	adds	r3, #4
 8002d10:	4619      	mov	r1, r3
 8002d12:	4610      	mov	r0, r2
 8002d14:	f000 f9d8 	bl	80030c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b083      	sub	sp, #12
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
	...

08002d88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d001      	beq.n	8002da0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e04e      	b.n	8002e3e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2202      	movs	r2, #2
 8002da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68da      	ldr	r2, [r3, #12]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f042 0201 	orr.w	r2, r2, #1
 8002db6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a23      	ldr	r2, [pc, #140]	; (8002e4c <HAL_TIM_Base_Start_IT+0xc4>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d022      	beq.n	8002e08 <HAL_TIM_Base_Start_IT+0x80>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dca:	d01d      	beq.n	8002e08 <HAL_TIM_Base_Start_IT+0x80>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a1f      	ldr	r2, [pc, #124]	; (8002e50 <HAL_TIM_Base_Start_IT+0xc8>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d018      	beq.n	8002e08 <HAL_TIM_Base_Start_IT+0x80>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a1e      	ldr	r2, [pc, #120]	; (8002e54 <HAL_TIM_Base_Start_IT+0xcc>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d013      	beq.n	8002e08 <HAL_TIM_Base_Start_IT+0x80>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a1c      	ldr	r2, [pc, #112]	; (8002e58 <HAL_TIM_Base_Start_IT+0xd0>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d00e      	beq.n	8002e08 <HAL_TIM_Base_Start_IT+0x80>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a1b      	ldr	r2, [pc, #108]	; (8002e5c <HAL_TIM_Base_Start_IT+0xd4>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d009      	beq.n	8002e08 <HAL_TIM_Base_Start_IT+0x80>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a19      	ldr	r2, [pc, #100]	; (8002e60 <HAL_TIM_Base_Start_IT+0xd8>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d004      	beq.n	8002e08 <HAL_TIM_Base_Start_IT+0x80>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a18      	ldr	r2, [pc, #96]	; (8002e64 <HAL_TIM_Base_Start_IT+0xdc>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d111      	bne.n	8002e2c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 0307 	and.w	r3, r3, #7
 8002e12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2b06      	cmp	r3, #6
 8002e18:	d010      	beq.n	8002e3c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f042 0201 	orr.w	r2, r2, #1
 8002e28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e2a:	e007      	b.n	8002e3c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f042 0201 	orr.w	r2, r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3714      	adds	r7, #20
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	40010000 	.word	0x40010000
 8002e50:	40000400 	.word	0x40000400
 8002e54:	40000800 	.word	0x40000800
 8002e58:	40000c00 	.word	0x40000c00
 8002e5c:	40010400 	.word	0x40010400
 8002e60:	40014000 	.word	0x40014000
 8002e64:	40001800 	.word	0x40001800

08002e68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d122      	bne.n	8002ec4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d11b      	bne.n	8002ec4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f06f 0202 	mvn.w	r2, #2
 8002e94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	f003 0303 	and.w	r3, r3, #3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 f8ee 	bl	800308c <HAL_TIM_IC_CaptureCallback>
 8002eb0:	e005      	b.n	8002ebe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 f8e0 	bl	8003078 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 f8f1 	bl	80030a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	f003 0304 	and.w	r3, r3, #4
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	d122      	bne.n	8002f18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	f003 0304 	and.w	r3, r3, #4
 8002edc:	2b04      	cmp	r3, #4
 8002ede:	d11b      	bne.n	8002f18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f06f 0204 	mvn.w	r2, #4
 8002ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2202      	movs	r2, #2
 8002eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 f8c4 	bl	800308c <HAL_TIM_IC_CaptureCallback>
 8002f04:	e005      	b.n	8002f12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 f8b6 	bl	8003078 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 f8c7 	bl	80030a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	f003 0308 	and.w	r3, r3, #8
 8002f22:	2b08      	cmp	r3, #8
 8002f24:	d122      	bne.n	8002f6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	f003 0308 	and.w	r3, r3, #8
 8002f30:	2b08      	cmp	r3, #8
 8002f32:	d11b      	bne.n	8002f6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f06f 0208 	mvn.w	r2, #8
 8002f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2204      	movs	r2, #4
 8002f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	f003 0303 	and.w	r3, r3, #3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f89a 	bl	800308c <HAL_TIM_IC_CaptureCallback>
 8002f58:	e005      	b.n	8002f66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f88c 	bl	8003078 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 f89d 	bl	80030a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	f003 0310 	and.w	r3, r3, #16
 8002f76:	2b10      	cmp	r3, #16
 8002f78:	d122      	bne.n	8002fc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	f003 0310 	and.w	r3, r3, #16
 8002f84:	2b10      	cmp	r3, #16
 8002f86:	d11b      	bne.n	8002fc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f06f 0210 	mvn.w	r2, #16
 8002f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2208      	movs	r2, #8
 8002f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d003      	beq.n	8002fae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f870 	bl	800308c <HAL_TIM_IC_CaptureCallback>
 8002fac:	e005      	b.n	8002fba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 f862 	bl	8003078 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 f873 	bl	80030a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d10e      	bne.n	8002fec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d107      	bne.n	8002fec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f06f 0201 	mvn.w	r2, #1
 8002fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f7fd fb3e 	bl	8000668 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff6:	2b80      	cmp	r3, #128	; 0x80
 8002ff8:	d10e      	bne.n	8003018 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003004:	2b80      	cmp	r3, #128	; 0x80
 8003006:	d107      	bne.n	8003018 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f902 	bl	800321c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003022:	2b40      	cmp	r3, #64	; 0x40
 8003024:	d10e      	bne.n	8003044 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003030:	2b40      	cmp	r3, #64	; 0x40
 8003032:	d107      	bne.n	8003044 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800303c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 f838 	bl	80030b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	f003 0320 	and.w	r3, r3, #32
 800304e:	2b20      	cmp	r3, #32
 8003050:	d10e      	bne.n	8003070 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	f003 0320 	and.w	r3, r3, #32
 800305c:	2b20      	cmp	r3, #32
 800305e:	d107      	bne.n	8003070 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f06f 0220 	mvn.w	r2, #32
 8003068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 f8cc 	bl	8003208 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003070:	bf00      	nop
 8003072:	3708      	adds	r7, #8
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a40      	ldr	r2, [pc, #256]	; (80031dc <TIM_Base_SetConfig+0x114>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d013      	beq.n	8003108 <TIM_Base_SetConfig+0x40>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030e6:	d00f      	beq.n	8003108 <TIM_Base_SetConfig+0x40>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a3d      	ldr	r2, [pc, #244]	; (80031e0 <TIM_Base_SetConfig+0x118>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d00b      	beq.n	8003108 <TIM_Base_SetConfig+0x40>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a3c      	ldr	r2, [pc, #240]	; (80031e4 <TIM_Base_SetConfig+0x11c>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d007      	beq.n	8003108 <TIM_Base_SetConfig+0x40>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a3b      	ldr	r2, [pc, #236]	; (80031e8 <TIM_Base_SetConfig+0x120>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d003      	beq.n	8003108 <TIM_Base_SetConfig+0x40>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a3a      	ldr	r2, [pc, #232]	; (80031ec <TIM_Base_SetConfig+0x124>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d108      	bne.n	800311a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800310e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	4313      	orrs	r3, r2
 8003118:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a2f      	ldr	r2, [pc, #188]	; (80031dc <TIM_Base_SetConfig+0x114>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d02b      	beq.n	800317a <TIM_Base_SetConfig+0xb2>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003128:	d027      	beq.n	800317a <TIM_Base_SetConfig+0xb2>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a2c      	ldr	r2, [pc, #176]	; (80031e0 <TIM_Base_SetConfig+0x118>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d023      	beq.n	800317a <TIM_Base_SetConfig+0xb2>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a2b      	ldr	r2, [pc, #172]	; (80031e4 <TIM_Base_SetConfig+0x11c>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d01f      	beq.n	800317a <TIM_Base_SetConfig+0xb2>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a2a      	ldr	r2, [pc, #168]	; (80031e8 <TIM_Base_SetConfig+0x120>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d01b      	beq.n	800317a <TIM_Base_SetConfig+0xb2>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a29      	ldr	r2, [pc, #164]	; (80031ec <TIM_Base_SetConfig+0x124>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d017      	beq.n	800317a <TIM_Base_SetConfig+0xb2>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a28      	ldr	r2, [pc, #160]	; (80031f0 <TIM_Base_SetConfig+0x128>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d013      	beq.n	800317a <TIM_Base_SetConfig+0xb2>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a27      	ldr	r2, [pc, #156]	; (80031f4 <TIM_Base_SetConfig+0x12c>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d00f      	beq.n	800317a <TIM_Base_SetConfig+0xb2>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a26      	ldr	r2, [pc, #152]	; (80031f8 <TIM_Base_SetConfig+0x130>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d00b      	beq.n	800317a <TIM_Base_SetConfig+0xb2>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a25      	ldr	r2, [pc, #148]	; (80031fc <TIM_Base_SetConfig+0x134>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d007      	beq.n	800317a <TIM_Base_SetConfig+0xb2>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a24      	ldr	r2, [pc, #144]	; (8003200 <TIM_Base_SetConfig+0x138>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d003      	beq.n	800317a <TIM_Base_SetConfig+0xb2>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a23      	ldr	r2, [pc, #140]	; (8003204 <TIM_Base_SetConfig+0x13c>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d108      	bne.n	800318c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003180:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	4313      	orrs	r3, r2
 800318a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	4313      	orrs	r3, r2
 8003198:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	689a      	ldr	r2, [r3, #8]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a0a      	ldr	r2, [pc, #40]	; (80031dc <TIM_Base_SetConfig+0x114>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d003      	beq.n	80031c0 <TIM_Base_SetConfig+0xf8>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a0c      	ldr	r2, [pc, #48]	; (80031ec <TIM_Base_SetConfig+0x124>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d103      	bne.n	80031c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	691a      	ldr	r2, [r3, #16]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	615a      	str	r2, [r3, #20]
}
 80031ce:	bf00      	nop
 80031d0:	3714      	adds	r7, #20
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	40010000 	.word	0x40010000
 80031e0:	40000400 	.word	0x40000400
 80031e4:	40000800 	.word	0x40000800
 80031e8:	40000c00 	.word	0x40000c00
 80031ec:	40010400 	.word	0x40010400
 80031f0:	40014000 	.word	0x40014000
 80031f4:	40014400 	.word	0x40014400
 80031f8:	40014800 	.word	0x40014800
 80031fc:	40001800 	.word	0x40001800
 8003200:	40001c00 	.word	0x40001c00
 8003204:	40002000 	.word	0x40002000

08003208 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003230:	b084      	sub	sp, #16
 8003232:	b580      	push	{r7, lr}
 8003234:	b084      	sub	sp, #16
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
 800323a:	f107 001c 	add.w	r0, r7, #28
 800323e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003244:	2b01      	cmp	r3, #1
 8003246:	d122      	bne.n	800328e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800325c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003272:	2b01      	cmp	r3, #1
 8003274:	d105      	bne.n	8003282 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f001 fbee 	bl	8004a64 <USB_CoreReset>
 8003288:	4603      	mov	r3, r0
 800328a:	73fb      	strb	r3, [r7, #15]
 800328c:	e01a      	b.n	80032c4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f001 fbe2 	bl	8004a64 <USB_CoreReset>
 80032a0:	4603      	mov	r3, r0
 80032a2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80032a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d106      	bne.n	80032b8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	639a      	str	r2, [r3, #56]	; 0x38
 80032b6:	e005      	b.n	80032c4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80032c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d10b      	bne.n	80032e2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f043 0206 	orr.w	r2, r3, #6
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f043 0220 	orr.w	r2, r3, #32
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80032e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80032ee:	b004      	add	sp, #16
 80032f0:	4770      	bx	lr
	...

080032f4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b087      	sub	sp, #28
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	4613      	mov	r3, r2
 8003300:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003302:	79fb      	ldrb	r3, [r7, #7]
 8003304:	2b02      	cmp	r3, #2
 8003306:	d165      	bne.n	80033d4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	4a41      	ldr	r2, [pc, #260]	; (8003410 <USB_SetTurnaroundTime+0x11c>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d906      	bls.n	800331e <USB_SetTurnaroundTime+0x2a>
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	4a40      	ldr	r2, [pc, #256]	; (8003414 <USB_SetTurnaroundTime+0x120>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d202      	bcs.n	800331e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003318:	230f      	movs	r3, #15
 800331a:	617b      	str	r3, [r7, #20]
 800331c:	e062      	b.n	80033e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	4a3c      	ldr	r2, [pc, #240]	; (8003414 <USB_SetTurnaroundTime+0x120>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d306      	bcc.n	8003334 <USB_SetTurnaroundTime+0x40>
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	4a3b      	ldr	r2, [pc, #236]	; (8003418 <USB_SetTurnaroundTime+0x124>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d202      	bcs.n	8003334 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800332e:	230e      	movs	r3, #14
 8003330:	617b      	str	r3, [r7, #20]
 8003332:	e057      	b.n	80033e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	4a38      	ldr	r2, [pc, #224]	; (8003418 <USB_SetTurnaroundTime+0x124>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d306      	bcc.n	800334a <USB_SetTurnaroundTime+0x56>
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	4a37      	ldr	r2, [pc, #220]	; (800341c <USB_SetTurnaroundTime+0x128>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d202      	bcs.n	800334a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003344:	230d      	movs	r3, #13
 8003346:	617b      	str	r3, [r7, #20]
 8003348:	e04c      	b.n	80033e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	4a33      	ldr	r2, [pc, #204]	; (800341c <USB_SetTurnaroundTime+0x128>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d306      	bcc.n	8003360 <USB_SetTurnaroundTime+0x6c>
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	4a32      	ldr	r2, [pc, #200]	; (8003420 <USB_SetTurnaroundTime+0x12c>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d802      	bhi.n	8003360 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800335a:	230c      	movs	r3, #12
 800335c:	617b      	str	r3, [r7, #20]
 800335e:	e041      	b.n	80033e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	4a2f      	ldr	r2, [pc, #188]	; (8003420 <USB_SetTurnaroundTime+0x12c>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d906      	bls.n	8003376 <USB_SetTurnaroundTime+0x82>
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	4a2e      	ldr	r2, [pc, #184]	; (8003424 <USB_SetTurnaroundTime+0x130>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d802      	bhi.n	8003376 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003370:	230b      	movs	r3, #11
 8003372:	617b      	str	r3, [r7, #20]
 8003374:	e036      	b.n	80033e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	4a2a      	ldr	r2, [pc, #168]	; (8003424 <USB_SetTurnaroundTime+0x130>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d906      	bls.n	800338c <USB_SetTurnaroundTime+0x98>
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	4a29      	ldr	r2, [pc, #164]	; (8003428 <USB_SetTurnaroundTime+0x134>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d802      	bhi.n	800338c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003386:	230a      	movs	r3, #10
 8003388:	617b      	str	r3, [r7, #20]
 800338a:	e02b      	b.n	80033e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	4a26      	ldr	r2, [pc, #152]	; (8003428 <USB_SetTurnaroundTime+0x134>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d906      	bls.n	80033a2 <USB_SetTurnaroundTime+0xae>
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	4a25      	ldr	r2, [pc, #148]	; (800342c <USB_SetTurnaroundTime+0x138>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d202      	bcs.n	80033a2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800339c:	2309      	movs	r3, #9
 800339e:	617b      	str	r3, [r7, #20]
 80033a0:	e020      	b.n	80033e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	4a21      	ldr	r2, [pc, #132]	; (800342c <USB_SetTurnaroundTime+0x138>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d306      	bcc.n	80033b8 <USB_SetTurnaroundTime+0xc4>
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	4a20      	ldr	r2, [pc, #128]	; (8003430 <USB_SetTurnaroundTime+0x13c>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d802      	bhi.n	80033b8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80033b2:	2308      	movs	r3, #8
 80033b4:	617b      	str	r3, [r7, #20]
 80033b6:	e015      	b.n	80033e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	4a1d      	ldr	r2, [pc, #116]	; (8003430 <USB_SetTurnaroundTime+0x13c>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d906      	bls.n	80033ce <USB_SetTurnaroundTime+0xda>
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	4a1c      	ldr	r2, [pc, #112]	; (8003434 <USB_SetTurnaroundTime+0x140>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d202      	bcs.n	80033ce <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80033c8:	2307      	movs	r3, #7
 80033ca:	617b      	str	r3, [r7, #20]
 80033cc:	e00a      	b.n	80033e4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80033ce:	2306      	movs	r3, #6
 80033d0:	617b      	str	r3, [r7, #20]
 80033d2:	e007      	b.n	80033e4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80033d4:	79fb      	ldrb	r3, [r7, #7]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d102      	bne.n	80033e0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80033da:	2309      	movs	r3, #9
 80033dc:	617b      	str	r3, [r7, #20]
 80033de:	e001      	b.n	80033e4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80033e0:	2309      	movs	r3, #9
 80033e2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	68da      	ldr	r2, [r3, #12]
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	029b      	lsls	r3, r3, #10
 80033f8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80033fc:	431a      	orrs	r2, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	371c      	adds	r7, #28
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	00d8acbf 	.word	0x00d8acbf
 8003414:	00e4e1c0 	.word	0x00e4e1c0
 8003418:	00f42400 	.word	0x00f42400
 800341c:	01067380 	.word	0x01067380
 8003420:	011a499f 	.word	0x011a499f
 8003424:	01312cff 	.word	0x01312cff
 8003428:	014ca43f 	.word	0x014ca43f
 800342c:	016e3600 	.word	0x016e3600
 8003430:	01a6ab1f 	.word	0x01a6ab1f
 8003434:	01e84800 	.word	0x01e84800

08003438 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f043 0201 	orr.w	r2, r3, #1
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800345a:	b480      	push	{r7}
 800345c:	b083      	sub	sp, #12
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f023 0201 	bic.w	r2, r3, #1
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	460b      	mov	r3, r1
 8003486:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003488:	2300      	movs	r3, #0
 800348a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003498:	78fb      	ldrb	r3, [r7, #3]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d115      	bne.n	80034ca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80034aa:	2001      	movs	r0, #1
 80034ac:	f7fd fa3c 	bl	8000928 <HAL_Delay>
      ms++;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	3301      	adds	r3, #1
 80034b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f001 fa45 	bl	8004946 <USB_GetMode>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d01e      	beq.n	8003500 <USB_SetCurrentMode+0x84>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2b31      	cmp	r3, #49	; 0x31
 80034c6:	d9f0      	bls.n	80034aa <USB_SetCurrentMode+0x2e>
 80034c8:	e01a      	b.n	8003500 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80034ca:	78fb      	ldrb	r3, [r7, #3]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d115      	bne.n	80034fc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80034dc:	2001      	movs	r0, #1
 80034de:	f7fd fa23 	bl	8000928 <HAL_Delay>
      ms++;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	3301      	adds	r3, #1
 80034e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f001 fa2c 	bl	8004946 <USB_GetMode>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d005      	beq.n	8003500 <USB_SetCurrentMode+0x84>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2b31      	cmp	r3, #49	; 0x31
 80034f8:	d9f0      	bls.n	80034dc <USB_SetCurrentMode+0x60>
 80034fa:	e001      	b.n	8003500 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e005      	b.n	800350c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2b32      	cmp	r3, #50	; 0x32
 8003504:	d101      	bne.n	800350a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e000      	b.n	800350c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003514:	b084      	sub	sp, #16
 8003516:	b580      	push	{r7, lr}
 8003518:	b086      	sub	sp, #24
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
 800351e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003522:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003526:	2300      	movs	r3, #0
 8003528:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800352e:	2300      	movs	r3, #0
 8003530:	613b      	str	r3, [r7, #16]
 8003532:	e009      	b.n	8003548 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	3340      	adds	r3, #64	; 0x40
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4413      	add	r3, r2
 800353e:	2200      	movs	r2, #0
 8003540:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	3301      	adds	r3, #1
 8003546:	613b      	str	r3, [r7, #16]
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	2b0e      	cmp	r3, #14
 800354c:	d9f2      	bls.n	8003534 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800354e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003550:	2b00      	cmp	r3, #0
 8003552:	d11c      	bne.n	800358e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003562:	f043 0302 	orr.w	r3, r3, #2
 8003566:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003578:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003584:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	639a      	str	r2, [r3, #56]	; 0x38
 800358c:	e00b      	b.n	80035a6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003592:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80035ac:	461a      	mov	r2, r3
 80035ae:	2300      	movs	r3, #0
 80035b0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035b8:	4619      	mov	r1, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035c0:	461a      	mov	r2, r3
 80035c2:	680b      	ldr	r3, [r1, #0]
 80035c4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80035c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d10c      	bne.n	80035e6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80035cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d104      	bne.n	80035dc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80035d2:	2100      	movs	r1, #0
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 f965 	bl	80038a4 <USB_SetDevSpeed>
 80035da:	e008      	b.n	80035ee <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80035dc:	2101      	movs	r1, #1
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f960 	bl	80038a4 <USB_SetDevSpeed>
 80035e4:	e003      	b.n	80035ee <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80035e6:	2103      	movs	r1, #3
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 f95b 	bl	80038a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80035ee:	2110      	movs	r1, #16
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 f8f3 	bl	80037dc <USB_FlushTxFifo>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d001      	beq.n	8003600 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 f91f 	bl	8003844 <USB_FlushRxFifo>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d001      	beq.n	8003610 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003616:	461a      	mov	r2, r3
 8003618:	2300      	movs	r3, #0
 800361a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003622:	461a      	mov	r2, r3
 8003624:	2300      	movs	r3, #0
 8003626:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800362e:	461a      	mov	r2, r3
 8003630:	2300      	movs	r3, #0
 8003632:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003634:	2300      	movs	r3, #0
 8003636:	613b      	str	r3, [r7, #16]
 8003638:	e043      	b.n	80036c2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	015a      	lsls	r2, r3, #5
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	4413      	add	r3, r2
 8003642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800364c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003650:	d118      	bne.n	8003684 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d10a      	bne.n	800366e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	015a      	lsls	r2, r3, #5
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	4413      	add	r3, r2
 8003660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003664:	461a      	mov	r2, r3
 8003666:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800366a:	6013      	str	r3, [r2, #0]
 800366c:	e013      	b.n	8003696 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	015a      	lsls	r2, r3, #5
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	4413      	add	r3, r2
 8003676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800367a:	461a      	mov	r2, r3
 800367c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003680:	6013      	str	r3, [r2, #0]
 8003682:	e008      	b.n	8003696 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	015a      	lsls	r2, r3, #5
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	4413      	add	r3, r2
 800368c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003690:	461a      	mov	r2, r3
 8003692:	2300      	movs	r3, #0
 8003694:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	015a      	lsls	r2, r3, #5
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	4413      	add	r3, r2
 800369e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036a2:	461a      	mov	r2, r3
 80036a4:	2300      	movs	r3, #0
 80036a6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	015a      	lsls	r2, r3, #5
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	4413      	add	r3, r2
 80036b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036b4:	461a      	mov	r2, r3
 80036b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80036ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	3301      	adds	r3, #1
 80036c0:	613b      	str	r3, [r7, #16]
 80036c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d3b7      	bcc.n	800363a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80036ca:	2300      	movs	r3, #0
 80036cc:	613b      	str	r3, [r7, #16]
 80036ce:	e043      	b.n	8003758 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	015a      	lsls	r2, r3, #5
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	4413      	add	r3, r2
 80036d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80036e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036e6:	d118      	bne.n	800371a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10a      	bne.n	8003704 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	015a      	lsls	r2, r3, #5
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	4413      	add	r3, r2
 80036f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036fa:	461a      	mov	r2, r3
 80036fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003700:	6013      	str	r3, [r2, #0]
 8003702:	e013      	b.n	800372c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	015a      	lsls	r2, r3, #5
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4413      	add	r3, r2
 800370c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003710:	461a      	mov	r2, r3
 8003712:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003716:	6013      	str	r3, [r2, #0]
 8003718:	e008      	b.n	800372c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	015a      	lsls	r2, r3, #5
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	4413      	add	r3, r2
 8003722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003726:	461a      	mov	r2, r3
 8003728:	2300      	movs	r3, #0
 800372a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	015a      	lsls	r2, r3, #5
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	4413      	add	r3, r2
 8003734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003738:	461a      	mov	r2, r3
 800373a:	2300      	movs	r3, #0
 800373c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	015a      	lsls	r2, r3, #5
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	4413      	add	r3, r2
 8003746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800374a:	461a      	mov	r2, r3
 800374c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003750:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	3301      	adds	r3, #1
 8003756:	613b      	str	r3, [r7, #16]
 8003758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	429a      	cmp	r2, r3
 800375e:	d3b7      	bcc.n	80036d0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800376e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003772:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003780:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003784:	2b00      	cmp	r3, #0
 8003786:	d105      	bne.n	8003794 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	f043 0210 	orr.w	r2, r3, #16
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	699a      	ldr	r2, [r3, #24]
 8003798:	4b0f      	ldr	r3, [pc, #60]	; (80037d8 <USB_DevInit+0x2c4>)
 800379a:	4313      	orrs	r3, r2
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80037a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d005      	beq.n	80037b2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	f043 0208 	orr.w	r2, r3, #8
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80037b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d107      	bne.n	80037c8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80037c0:	f043 0304 	orr.w	r3, r3, #4
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80037c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3718      	adds	r7, #24
 80037ce:	46bd      	mov	sp, r7
 80037d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80037d4:	b004      	add	sp, #16
 80037d6:	4770      	bx	lr
 80037d8:	803c3800 	.word	0x803c3800

080037dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80037e6:	2300      	movs	r3, #0
 80037e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	3301      	adds	r3, #1
 80037ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4a13      	ldr	r2, [pc, #76]	; (8003840 <USB_FlushTxFifo+0x64>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d901      	bls.n	80037fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e01b      	b.n	8003834 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	2b00      	cmp	r3, #0
 8003802:	daf2      	bge.n	80037ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003804:	2300      	movs	r3, #0
 8003806:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	019b      	lsls	r3, r3, #6
 800380c:	f043 0220 	orr.w	r2, r3, #32
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	3301      	adds	r3, #1
 8003818:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	4a08      	ldr	r2, [pc, #32]	; (8003840 <USB_FlushTxFifo+0x64>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d901      	bls.n	8003826 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e006      	b.n	8003834 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	f003 0320 	and.w	r3, r3, #32
 800382e:	2b20      	cmp	r3, #32
 8003830:	d0f0      	beq.n	8003814 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3714      	adds	r7, #20
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr
 8003840:	00030d40 	.word	0x00030d40

08003844 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800384c:	2300      	movs	r3, #0
 800384e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	3301      	adds	r3, #1
 8003854:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	4a11      	ldr	r2, [pc, #68]	; (80038a0 <USB_FlushRxFifo+0x5c>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d901      	bls.n	8003862 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e018      	b.n	8003894 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	2b00      	cmp	r3, #0
 8003868:	daf2      	bge.n	8003850 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800386a:	2300      	movs	r3, #0
 800386c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2210      	movs	r2, #16
 8003872:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	3301      	adds	r3, #1
 8003878:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	4a08      	ldr	r2, [pc, #32]	; (80038a0 <USB_FlushRxFifo+0x5c>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d901      	bls.n	8003886 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e006      	b.n	8003894 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	f003 0310 	and.w	r3, r3, #16
 800388e:	2b10      	cmp	r3, #16
 8003890:	d0f0      	beq.n	8003874 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3714      	adds	r7, #20
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr
 80038a0:	00030d40 	.word	0x00030d40

080038a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	460b      	mov	r3, r1
 80038ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	78fb      	ldrb	r3, [r7, #3]
 80038be:	68f9      	ldr	r1, [r7, #12]
 80038c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038c4:	4313      	orrs	r3, r2
 80038c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3714      	adds	r7, #20
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr

080038d6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80038d6:	b480      	push	{r7}
 80038d8:	b087      	sub	sp, #28
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f003 0306 	and.w	r3, r3, #6
 80038ee:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d102      	bne.n	80038fc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80038f6:	2300      	movs	r3, #0
 80038f8:	75fb      	strb	r3, [r7, #23]
 80038fa:	e00a      	b.n	8003912 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d002      	beq.n	8003908 <USB_GetDevSpeed+0x32>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2b06      	cmp	r3, #6
 8003906:	d102      	bne.n	800390e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003908:	2302      	movs	r3, #2
 800390a:	75fb      	strb	r3, [r7, #23]
 800390c:	e001      	b.n	8003912 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800390e:	230f      	movs	r3, #15
 8003910:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003912:	7dfb      	ldrb	r3, [r7, #23]
}
 8003914:	4618      	mov	r0, r3
 8003916:	371c      	adds	r7, #28
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	785b      	ldrb	r3, [r3, #1]
 8003938:	2b01      	cmp	r3, #1
 800393a:	d13a      	bne.n	80039b2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003942:	69da      	ldr	r2, [r3, #28]
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	f003 030f 	and.w	r3, r3, #15
 800394c:	2101      	movs	r1, #1
 800394e:	fa01 f303 	lsl.w	r3, r1, r3
 8003952:	b29b      	uxth	r3, r3
 8003954:	68f9      	ldr	r1, [r7, #12]
 8003956:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800395a:	4313      	orrs	r3, r2
 800395c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	015a      	lsls	r2, r3, #5
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	4413      	add	r3, r2
 8003966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d155      	bne.n	8003a20 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	015a      	lsls	r2, r3, #5
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	4413      	add	r3, r2
 800397c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	791b      	ldrb	r3, [r3, #4]
 800398e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003990:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	059b      	lsls	r3, r3, #22
 8003996:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003998:	4313      	orrs	r3, r2
 800399a:	68ba      	ldr	r2, [r7, #8]
 800399c:	0151      	lsls	r1, r2, #5
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	440a      	add	r2, r1
 80039a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039ae:	6013      	str	r3, [r2, #0]
 80039b0:	e036      	b.n	8003a20 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039b8:	69da      	ldr	r2, [r3, #28]
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	f003 030f 	and.w	r3, r3, #15
 80039c2:	2101      	movs	r1, #1
 80039c4:	fa01 f303 	lsl.w	r3, r1, r3
 80039c8:	041b      	lsls	r3, r3, #16
 80039ca:	68f9      	ldr	r1, [r7, #12]
 80039cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039d0:	4313      	orrs	r3, r2
 80039d2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	015a      	lsls	r2, r3, #5
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	4413      	add	r3, r2
 80039dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d11a      	bne.n	8003a20 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	015a      	lsls	r2, r3, #5
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	4413      	add	r3, r2
 80039f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	791b      	ldrb	r3, [r3, #4]
 8003a04:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003a06:	430b      	orrs	r3, r1
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	68ba      	ldr	r2, [r7, #8]
 8003a0c:	0151      	lsls	r1, r2, #5
 8003a0e:	68fa      	ldr	r2, [r7, #12]
 8003a10:	440a      	add	r2, r1
 8003a12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a1e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3714      	adds	r7, #20
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
	...

08003a30 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	785b      	ldrb	r3, [r3, #1]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d161      	bne.n	8003b10 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	015a      	lsls	r2, r3, #5
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	4413      	add	r3, r2
 8003a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a62:	d11f      	bne.n	8003aa4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	015a      	lsls	r2, r3, #5
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	0151      	lsls	r1, r2, #5
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	440a      	add	r2, r1
 8003a7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003a82:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	015a      	lsls	r2, r3, #5
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68ba      	ldr	r2, [r7, #8]
 8003a94:	0151      	lsls	r1, r2, #5
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	440a      	add	r2, r1
 8003a9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003aa2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	f003 030f 	and.w	r3, r3, #15
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	43db      	mvns	r3, r3
 8003abe:	68f9      	ldr	r1, [r7, #12]
 8003ac0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ace:	69da      	ldr	r2, [r3, #28]
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	f003 030f 	and.w	r3, r3, #15
 8003ad8:	2101      	movs	r1, #1
 8003ada:	fa01 f303 	lsl.w	r3, r1, r3
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	68f9      	ldr	r1, [r7, #12]
 8003ae4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ae8:	4013      	ands	r3, r2
 8003aea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	015a      	lsls	r2, r3, #5
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	4413      	add	r3, r2
 8003af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	0159      	lsls	r1, r3, #5
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	440b      	add	r3, r1
 8003b02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b06:	4619      	mov	r1, r3
 8003b08:	4b35      	ldr	r3, [pc, #212]	; (8003be0 <USB_DeactivateEndpoint+0x1b0>)
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	600b      	str	r3, [r1, #0]
 8003b0e:	e060      	b.n	8003bd2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	015a      	lsls	r2, r3, #5
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	4413      	add	r3, r2
 8003b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b26:	d11f      	bne.n	8003b68 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	015a      	lsls	r2, r3, #5
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	4413      	add	r3, r2
 8003b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68ba      	ldr	r2, [r7, #8]
 8003b38:	0151      	lsls	r1, r2, #5
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	440a      	add	r2, r1
 8003b3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b42:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003b46:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	015a      	lsls	r2, r3, #5
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	4413      	add	r3, r2
 8003b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68ba      	ldr	r2, [r7, #8]
 8003b58:	0151      	lsls	r1, r2, #5
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	440a      	add	r2, r1
 8003b5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b66:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	f003 030f 	and.w	r3, r3, #15
 8003b78:	2101      	movs	r1, #1
 8003b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b7e:	041b      	lsls	r3, r3, #16
 8003b80:	43db      	mvns	r3, r3
 8003b82:	68f9      	ldr	r1, [r7, #12]
 8003b84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b88:	4013      	ands	r3, r2
 8003b8a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b92:	69da      	ldr	r2, [r3, #28]
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	f003 030f 	and.w	r3, r3, #15
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba2:	041b      	lsls	r3, r3, #16
 8003ba4:	43db      	mvns	r3, r3
 8003ba6:	68f9      	ldr	r1, [r7, #12]
 8003ba8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bac:	4013      	ands	r3, r2
 8003bae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	015a      	lsls	r2, r3, #5
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	0159      	lsls	r1, r3, #5
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	440b      	add	r3, r1
 8003bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bca:	4619      	mov	r1, r3
 8003bcc:	4b05      	ldr	r3, [pc, #20]	; (8003be4 <USB_DeactivateEndpoint+0x1b4>)
 8003bce:	4013      	ands	r3, r2
 8003bd0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3714      	adds	r7, #20
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr
 8003be0:	ec337800 	.word	0xec337800
 8003be4:	eff37800 	.word	0xeff37800

08003be8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b08a      	sub	sp, #40	; 0x28
 8003bec:	af02      	add	r7, sp, #8
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	785b      	ldrb	r3, [r3, #1]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	f040 815c 	bne.w	8003ec2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d132      	bne.n	8003c78 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	015a      	lsls	r2, r3, #5
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	4413      	add	r3, r2
 8003c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	0151      	lsls	r1, r2, #5
 8003c24:	69fa      	ldr	r2, [r7, #28]
 8003c26:	440a      	add	r2, r1
 8003c28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c2c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003c30:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003c34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	015a      	lsls	r2, r3, #5
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	69ba      	ldr	r2, [r7, #24]
 8003c46:	0151      	lsls	r1, r2, #5
 8003c48:	69fa      	ldr	r2, [r7, #28]
 8003c4a:	440a      	add	r2, r1
 8003c4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c54:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	015a      	lsls	r2, r3, #5
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	69ba      	ldr	r2, [r7, #24]
 8003c66:	0151      	lsls	r1, r2, #5
 8003c68:	69fa      	ldr	r2, [r7, #28]
 8003c6a:	440a      	add	r2, r1
 8003c6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c70:	0cdb      	lsrs	r3, r3, #19
 8003c72:	04db      	lsls	r3, r3, #19
 8003c74:	6113      	str	r3, [r2, #16]
 8003c76:	e074      	b.n	8003d62 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	015a      	lsls	r2, r3, #5
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	4413      	add	r3, r2
 8003c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	69ba      	ldr	r2, [r7, #24]
 8003c88:	0151      	lsls	r1, r2, #5
 8003c8a:	69fa      	ldr	r2, [r7, #28]
 8003c8c:	440a      	add	r2, r1
 8003c8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c92:	0cdb      	lsrs	r3, r3, #19
 8003c94:	04db      	lsls	r3, r3, #19
 8003c96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	015a      	lsls	r2, r3, #5
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	69ba      	ldr	r2, [r7, #24]
 8003ca8:	0151      	lsls	r1, r2, #5
 8003caa:	69fa      	ldr	r2, [r7, #28]
 8003cac:	440a      	add	r2, r1
 8003cae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cb2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003cb6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003cba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	015a      	lsls	r2, r3, #5
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cc8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	6999      	ldr	r1, [r3, #24]
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	440b      	add	r3, r1
 8003cd4:	1e59      	subs	r1, r3, #1
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cde:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003ce0:	4b9d      	ldr	r3, [pc, #628]	; (8003f58 <USB_EPStartXfer+0x370>)
 8003ce2:	400b      	ands	r3, r1
 8003ce4:	69b9      	ldr	r1, [r7, #24]
 8003ce6:	0148      	lsls	r0, r1, #5
 8003ce8:	69f9      	ldr	r1, [r7, #28]
 8003cea:	4401      	add	r1, r0
 8003cec:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	015a      	lsls	r2, r3, #5
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d00:	691a      	ldr	r2, [r3, #16]
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d0a:	69b9      	ldr	r1, [r7, #24]
 8003d0c:	0148      	lsls	r0, r1, #5
 8003d0e:	69f9      	ldr	r1, [r7, #28]
 8003d10:	4401      	add	r1, r0
 8003d12:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003d16:	4313      	orrs	r3, r2
 8003d18:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	791b      	ldrb	r3, [r3, #4]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d11f      	bne.n	8003d62 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	015a      	lsls	r2, r3, #5
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	4413      	add	r3, r2
 8003d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	0151      	lsls	r1, r2, #5
 8003d34:	69fa      	ldr	r2, [r7, #28]
 8003d36:	440a      	add	r2, r1
 8003d38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d3c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003d40:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	015a      	lsls	r2, r3, #5
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	4413      	add	r3, r2
 8003d4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	0151      	lsls	r1, r2, #5
 8003d54:	69fa      	ldr	r2, [r7, #28]
 8003d56:	440a      	add	r2, r1
 8003d58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003d60:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003d62:	79fb      	ldrb	r3, [r7, #7]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d14b      	bne.n	8003e00 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d009      	beq.n	8003d84 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	015a      	lsls	r2, r3, #5
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	4413      	add	r3, r2
 8003d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	791b      	ldrb	r3, [r3, #4]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d128      	bne.n	8003dde <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d110      	bne.n	8003dbe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	015a      	lsls	r2, r3, #5
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	4413      	add	r3, r2
 8003da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	69ba      	ldr	r2, [r7, #24]
 8003dac:	0151      	lsls	r1, r2, #5
 8003dae:	69fa      	ldr	r2, [r7, #28]
 8003db0:	440a      	add	r2, r1
 8003db2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003db6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003dba:	6013      	str	r3, [r2, #0]
 8003dbc:	e00f      	b.n	8003dde <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	015a      	lsls	r2, r3, #5
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	0151      	lsls	r1, r2, #5
 8003dd0:	69fa      	ldr	r2, [r7, #28]
 8003dd2:	440a      	add	r2, r1
 8003dd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ddc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	015a      	lsls	r2, r3, #5
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	4413      	add	r3, r2
 8003de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	0151      	lsls	r1, r2, #5
 8003df0:	69fa      	ldr	r2, [r7, #28]
 8003df2:	440a      	add	r2, r1
 8003df4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003df8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003dfc:	6013      	str	r3, [r2, #0]
 8003dfe:	e133      	b.n	8004068 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	015a      	lsls	r2, r3, #5
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	4413      	add	r3, r2
 8003e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	0151      	lsls	r1, r2, #5
 8003e12:	69fa      	ldr	r2, [r7, #28]
 8003e14:	440a      	add	r2, r1
 8003e16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003e1e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	791b      	ldrb	r3, [r3, #4]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d015      	beq.n	8003e54 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 811b 	beq.w	8004068 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	f003 030f 	and.w	r3, r3, #15
 8003e42:	2101      	movs	r1, #1
 8003e44:	fa01 f303 	lsl.w	r3, r1, r3
 8003e48:	69f9      	ldr	r1, [r7, #28]
 8003e4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	634b      	str	r3, [r1, #52]	; 0x34
 8003e52:	e109      	b.n	8004068 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d110      	bne.n	8003e86 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	015a      	lsls	r2, r3, #5
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	69ba      	ldr	r2, [r7, #24]
 8003e74:	0151      	lsls	r1, r2, #5
 8003e76:	69fa      	ldr	r2, [r7, #28]
 8003e78:	440a      	add	r2, r1
 8003e7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e82:	6013      	str	r3, [r2, #0]
 8003e84:	e00f      	b.n	8003ea6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	015a      	lsls	r2, r3, #5
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	0151      	lsls	r1, r2, #5
 8003e98:	69fa      	ldr	r2, [r7, #28]
 8003e9a:	440a      	add	r2, r1
 8003e9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ea4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	6919      	ldr	r1, [r3, #16]
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	781a      	ldrb	r2, [r3, #0]
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	b298      	uxth	r0, r3
 8003eb4:	79fb      	ldrb	r3, [r7, #7]
 8003eb6:	9300      	str	r3, [sp, #0]
 8003eb8:	4603      	mov	r3, r0
 8003eba:	68f8      	ldr	r0, [r7, #12]
 8003ebc:	f000 fade 	bl	800447c <USB_WritePacket>
 8003ec0:	e0d2      	b.n	8004068 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	015a      	lsls	r2, r3, #5
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	4413      	add	r3, r2
 8003eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	0151      	lsls	r1, r2, #5
 8003ed4:	69fa      	ldr	r2, [r7, #28]
 8003ed6:	440a      	add	r2, r1
 8003ed8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003edc:	0cdb      	lsrs	r3, r3, #19
 8003ede:	04db      	lsls	r3, r3, #19
 8003ee0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	015a      	lsls	r2, r3, #5
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	4413      	add	r3, r2
 8003eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	0151      	lsls	r1, r2, #5
 8003ef4:	69fa      	ldr	r2, [r7, #28]
 8003ef6:	440a      	add	r2, r1
 8003ef8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003efc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003f00:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003f04:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d126      	bne.n	8003f5c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	015a      	lsls	r2, r3, #5
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	4413      	add	r3, r2
 8003f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f1a:	691a      	ldr	r2, [r3, #16]
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f24:	69b9      	ldr	r1, [r7, #24]
 8003f26:	0148      	lsls	r0, r1, #5
 8003f28:	69f9      	ldr	r1, [r7, #28]
 8003f2a:	4401      	add	r1, r0
 8003f2c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003f30:	4313      	orrs	r3, r2
 8003f32:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	015a      	lsls	r2, r3, #5
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	69ba      	ldr	r2, [r7, #24]
 8003f44:	0151      	lsls	r1, r2, #5
 8003f46:	69fa      	ldr	r2, [r7, #28]
 8003f48:	440a      	add	r2, r1
 8003f4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f52:	6113      	str	r3, [r2, #16]
 8003f54:	e03a      	b.n	8003fcc <USB_EPStartXfer+0x3e4>
 8003f56:	bf00      	nop
 8003f58:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	699a      	ldr	r2, [r3, #24]
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	4413      	add	r3, r2
 8003f66:	1e5a      	subs	r2, r3, #1
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f70:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	8afa      	ldrh	r2, [r7, #22]
 8003f78:	fb03 f202 	mul.w	r2, r3, r2
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	015a      	lsls	r2, r3, #5
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	4413      	add	r3, r2
 8003f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f8c:	691a      	ldr	r2, [r3, #16]
 8003f8e:	8afb      	ldrh	r3, [r7, #22]
 8003f90:	04d9      	lsls	r1, r3, #19
 8003f92:	4b38      	ldr	r3, [pc, #224]	; (8004074 <USB_EPStartXfer+0x48c>)
 8003f94:	400b      	ands	r3, r1
 8003f96:	69b9      	ldr	r1, [r7, #24]
 8003f98:	0148      	lsls	r0, r1, #5
 8003f9a:	69f9      	ldr	r1, [r7, #28]
 8003f9c:	4401      	add	r1, r0
 8003f9e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	015a      	lsls	r2, r3, #5
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	4413      	add	r3, r2
 8003fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fb2:	691a      	ldr	r2, [r3, #16]
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	69db      	ldr	r3, [r3, #28]
 8003fb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fbc:	69b9      	ldr	r1, [r7, #24]
 8003fbe:	0148      	lsls	r0, r1, #5
 8003fc0:	69f9      	ldr	r1, [r7, #28]
 8003fc2:	4401      	add	r1, r0
 8003fc4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003fcc:	79fb      	ldrb	r3, [r7, #7]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d10d      	bne.n	8003fee <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d009      	beq.n	8003fee <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	6919      	ldr	r1, [r3, #16]
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	015a      	lsls	r2, r3, #5
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fea:	460a      	mov	r2, r1
 8003fec:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	791b      	ldrb	r3, [r3, #4]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d128      	bne.n	8004048 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004002:	2b00      	cmp	r3, #0
 8004004:	d110      	bne.n	8004028 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	015a      	lsls	r2, r3, #5
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	4413      	add	r3, r2
 800400e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	0151      	lsls	r1, r2, #5
 8004018:	69fa      	ldr	r2, [r7, #28]
 800401a:	440a      	add	r2, r1
 800401c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004020:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004024:	6013      	str	r3, [r2, #0]
 8004026:	e00f      	b.n	8004048 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	015a      	lsls	r2, r3, #5
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	4413      	add	r3, r2
 8004030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	69ba      	ldr	r2, [r7, #24]
 8004038:	0151      	lsls	r1, r2, #5
 800403a:	69fa      	ldr	r2, [r7, #28]
 800403c:	440a      	add	r2, r1
 800403e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004042:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004046:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	015a      	lsls	r2, r3, #5
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	4413      	add	r3, r2
 8004050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	0151      	lsls	r1, r2, #5
 800405a:	69fa      	ldr	r2, [r7, #28]
 800405c:	440a      	add	r2, r1
 800405e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004062:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004066:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3720      	adds	r7, #32
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	1ff80000 	.word	0x1ff80000

08004078 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004078:	b480      	push	{r7}
 800407a:	b087      	sub	sp, #28
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	4613      	mov	r3, r2
 8004084:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	785b      	ldrb	r3, [r3, #1]
 8004094:	2b01      	cmp	r3, #1
 8004096:	f040 80ce 	bne.w	8004236 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d132      	bne.n	8004108 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	015a      	lsls	r2, r3, #5
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	4413      	add	r3, r2
 80040aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	0151      	lsls	r1, r2, #5
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	440a      	add	r2, r1
 80040b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80040c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80040c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	015a      	lsls	r2, r3, #5
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	4413      	add	r3, r2
 80040ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	0151      	lsls	r1, r2, #5
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	440a      	add	r2, r1
 80040dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80040e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	015a      	lsls	r2, r3, #5
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	4413      	add	r3, r2
 80040ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	0151      	lsls	r1, r2, #5
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	440a      	add	r2, r1
 80040fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004100:	0cdb      	lsrs	r3, r3, #19
 8004102:	04db      	lsls	r3, r3, #19
 8004104:	6113      	str	r3, [r2, #16]
 8004106:	e04e      	b.n	80041a6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	015a      	lsls	r2, r3, #5
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	4413      	add	r3, r2
 8004110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	0151      	lsls	r1, r2, #5
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	440a      	add	r2, r1
 800411e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004122:	0cdb      	lsrs	r3, r3, #19
 8004124:	04db      	lsls	r3, r3, #19
 8004126:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	015a      	lsls	r2, r3, #5
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	4413      	add	r3, r2
 8004130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	0151      	lsls	r1, r2, #5
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	440a      	add	r2, r1
 800413e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004142:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004146:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800414a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	699a      	ldr	r2, [r3, #24]
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	429a      	cmp	r2, r3
 8004156:	d903      	bls.n	8004160 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	68da      	ldr	r2, [r3, #12]
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	015a      	lsls	r2, r3, #5
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	4413      	add	r3, r2
 8004168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	693a      	ldr	r2, [r7, #16]
 8004170:	0151      	lsls	r1, r2, #5
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	440a      	add	r2, r1
 8004176:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800417a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800417e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	015a      	lsls	r2, r3, #5
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	4413      	add	r3, r2
 8004188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800418c:	691a      	ldr	r2, [r3, #16]
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004196:	6939      	ldr	r1, [r7, #16]
 8004198:	0148      	lsls	r0, r1, #5
 800419a:	6979      	ldr	r1, [r7, #20]
 800419c:	4401      	add	r1, r0
 800419e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80041a2:	4313      	orrs	r3, r2
 80041a4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80041a6:	79fb      	ldrb	r3, [r7, #7]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d11e      	bne.n	80041ea <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	695b      	ldr	r3, [r3, #20]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d009      	beq.n	80041c8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	015a      	lsls	r2, r3, #5
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	4413      	add	r3, r2
 80041bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041c0:	461a      	mov	r2, r3
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	015a      	lsls	r2, r3, #5
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	4413      	add	r3, r2
 80041d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	0151      	lsls	r1, r2, #5
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	440a      	add	r2, r1
 80041de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80041e6:	6013      	str	r3, [r2, #0]
 80041e8:	e097      	b.n	800431a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	015a      	lsls	r2, r3, #5
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	4413      	add	r3, r2
 80041f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	0151      	lsls	r1, r2, #5
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	440a      	add	r2, r1
 8004200:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004204:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004208:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	2b00      	cmp	r3, #0
 8004210:	f000 8083 	beq.w	800431a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800421a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	f003 030f 	and.w	r3, r3, #15
 8004224:	2101      	movs	r1, #1
 8004226:	fa01 f303 	lsl.w	r3, r1, r3
 800422a:	6979      	ldr	r1, [r7, #20]
 800422c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004230:	4313      	orrs	r3, r2
 8004232:	634b      	str	r3, [r1, #52]	; 0x34
 8004234:	e071      	b.n	800431a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	015a      	lsls	r2, r3, #5
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	4413      	add	r3, r2
 800423e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	0151      	lsls	r1, r2, #5
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	440a      	add	r2, r1
 800424c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004250:	0cdb      	lsrs	r3, r3, #19
 8004252:	04db      	lsls	r3, r3, #19
 8004254:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	015a      	lsls	r2, r3, #5
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	4413      	add	r3, r2
 800425e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	0151      	lsls	r1, r2, #5
 8004268:	697a      	ldr	r2, [r7, #20]
 800426a:	440a      	add	r2, r1
 800426c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004270:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004274:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004278:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d003      	beq.n	800428a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	68da      	ldr	r2, [r3, #12]
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	68da      	ldr	r2, [r3, #12]
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	015a      	lsls	r2, r3, #5
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	4413      	add	r3, r2
 800429a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	0151      	lsls	r1, r2, #5
 80042a4:	697a      	ldr	r2, [r7, #20]
 80042a6:	440a      	add	r2, r1
 80042a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	015a      	lsls	r2, r3, #5
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	4413      	add	r3, r2
 80042ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042be:	691a      	ldr	r2, [r3, #16]
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	69db      	ldr	r3, [r3, #28]
 80042c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042c8:	6939      	ldr	r1, [r7, #16]
 80042ca:	0148      	lsls	r0, r1, #5
 80042cc:	6979      	ldr	r1, [r7, #20]
 80042ce:	4401      	add	r1, r0
 80042d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80042d4:	4313      	orrs	r3, r2
 80042d6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80042d8:	79fb      	ldrb	r3, [r7, #7]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d10d      	bne.n	80042fa <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d009      	beq.n	80042fa <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	6919      	ldr	r1, [r3, #16]
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	015a      	lsls	r2, r3, #5
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	4413      	add	r3, r2
 80042f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042f6:	460a      	mov	r2, r1
 80042f8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	015a      	lsls	r2, r3, #5
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	4413      	add	r3, r2
 8004302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	0151      	lsls	r1, r2, #5
 800430c:	697a      	ldr	r2, [r7, #20]
 800430e:	440a      	add	r2, r1
 8004310:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004314:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004318:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	371c      	adds	r7, #28
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004328:	b480      	push	{r7}
 800432a:	b087      	sub	sp, #28
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004332:	2300      	movs	r3, #0
 8004334:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004336:	2300      	movs	r3, #0
 8004338:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	785b      	ldrb	r3, [r3, #1]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d14a      	bne.n	80043dc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	015a      	lsls	r2, r3, #5
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	4413      	add	r3, r2
 8004350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800435a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800435e:	f040 8086 	bne.w	800446e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	015a      	lsls	r2, r3, #5
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	4413      	add	r3, r2
 800436c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	683a      	ldr	r2, [r7, #0]
 8004374:	7812      	ldrb	r2, [r2, #0]
 8004376:	0151      	lsls	r1, r2, #5
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	440a      	add	r2, r1
 800437c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004380:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004384:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	015a      	lsls	r2, r3, #5
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	4413      	add	r3, r2
 8004390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	683a      	ldr	r2, [r7, #0]
 8004398:	7812      	ldrb	r2, [r2, #0]
 800439a:	0151      	lsls	r1, r2, #5
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	440a      	add	r2, r1
 80043a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80043a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	3301      	adds	r3, #1
 80043ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f242 7210 	movw	r2, #10000	; 0x2710
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d902      	bls.n	80043c0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	75fb      	strb	r3, [r7, #23]
          break;
 80043be:	e056      	b.n	800446e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	015a      	lsls	r2, r3, #5
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	4413      	add	r3, r2
 80043ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043d8:	d0e7      	beq.n	80043aa <USB_EPStopXfer+0x82>
 80043da:	e048      	b.n	800446e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	015a      	lsls	r2, r3, #5
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	4413      	add	r3, r2
 80043e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043f4:	d13b      	bne.n	800446e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	015a      	lsls	r2, r3, #5
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	4413      	add	r3, r2
 8004400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	7812      	ldrb	r2, [r2, #0]
 800440a:	0151      	lsls	r1, r2, #5
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	440a      	add	r2, r1
 8004410:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004414:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004418:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	015a      	lsls	r2, r3, #5
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	4413      	add	r3, r2
 8004424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	683a      	ldr	r2, [r7, #0]
 800442c:	7812      	ldrb	r2, [r2, #0]
 800442e:	0151      	lsls	r1, r2, #5
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	440a      	add	r2, r1
 8004434:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004438:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800443c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	3301      	adds	r3, #1
 8004442:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f242 7210 	movw	r2, #10000	; 0x2710
 800444a:	4293      	cmp	r3, r2
 800444c:	d902      	bls.n	8004454 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	75fb      	strb	r3, [r7, #23]
          break;
 8004452:	e00c      	b.n	800446e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	015a      	lsls	r2, r3, #5
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	4413      	add	r3, r2
 800445e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004468:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800446c:	d0e7      	beq.n	800443e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800446e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004470:	4618      	mov	r0, r3
 8004472:	371c      	adds	r7, #28
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800447c:	b480      	push	{r7}
 800447e:	b089      	sub	sp, #36	; 0x24
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	4611      	mov	r1, r2
 8004488:	461a      	mov	r2, r3
 800448a:	460b      	mov	r3, r1
 800448c:	71fb      	strb	r3, [r7, #7]
 800448e:	4613      	mov	r3, r2
 8004490:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800449a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d123      	bne.n	80044ea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80044a2:	88bb      	ldrh	r3, [r7, #4]
 80044a4:	3303      	adds	r3, #3
 80044a6:	089b      	lsrs	r3, r3, #2
 80044a8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80044aa:	2300      	movs	r3, #0
 80044ac:	61bb      	str	r3, [r7, #24]
 80044ae:	e018      	b.n	80044e2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80044b0:	79fb      	ldrb	r3, [r7, #7]
 80044b2:	031a      	lsls	r2, r3, #12
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	4413      	add	r3, r2
 80044b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044bc:	461a      	mov	r2, r3
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	3301      	adds	r3, #1
 80044c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	3301      	adds	r3, #1
 80044ce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	3301      	adds	r3, #1
 80044d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	3301      	adds	r3, #1
 80044da:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	3301      	adds	r3, #1
 80044e0:	61bb      	str	r3, [r7, #24]
 80044e2:	69ba      	ldr	r2, [r7, #24]
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d3e2      	bcc.n	80044b0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3724      	adds	r7, #36	; 0x24
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b08b      	sub	sp, #44	; 0x2c
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	4613      	mov	r3, r2
 8004504:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800450e:	88fb      	ldrh	r3, [r7, #6]
 8004510:	089b      	lsrs	r3, r3, #2
 8004512:	b29b      	uxth	r3, r3
 8004514:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004516:	88fb      	ldrh	r3, [r7, #6]
 8004518:	f003 0303 	and.w	r3, r3, #3
 800451c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800451e:	2300      	movs	r3, #0
 8004520:	623b      	str	r3, [r7, #32]
 8004522:	e014      	b.n	800454e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452e:	601a      	str	r2, [r3, #0]
    pDest++;
 8004530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004532:	3301      	adds	r3, #1
 8004534:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004538:	3301      	adds	r3, #1
 800453a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800453c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453e:	3301      	adds	r3, #1
 8004540:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004544:	3301      	adds	r3, #1
 8004546:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004548:	6a3b      	ldr	r3, [r7, #32]
 800454a:	3301      	adds	r3, #1
 800454c:	623b      	str	r3, [r7, #32]
 800454e:	6a3a      	ldr	r2, [r7, #32]
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	429a      	cmp	r2, r3
 8004554:	d3e6      	bcc.n	8004524 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004556:	8bfb      	ldrh	r3, [r7, #30]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d01e      	beq.n	800459a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800455c:	2300      	movs	r3, #0
 800455e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004566:	461a      	mov	r2, r3
 8004568:	f107 0310 	add.w	r3, r7, #16
 800456c:	6812      	ldr	r2, [r2, #0]
 800456e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	6a3b      	ldr	r3, [r7, #32]
 8004574:	b2db      	uxtb	r3, r3
 8004576:	00db      	lsls	r3, r3, #3
 8004578:	fa22 f303 	lsr.w	r3, r2, r3
 800457c:	b2da      	uxtb	r2, r3
 800457e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004580:	701a      	strb	r2, [r3, #0]
      i++;
 8004582:	6a3b      	ldr	r3, [r7, #32]
 8004584:	3301      	adds	r3, #1
 8004586:	623b      	str	r3, [r7, #32]
      pDest++;
 8004588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458a:	3301      	adds	r3, #1
 800458c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800458e:	8bfb      	ldrh	r3, [r7, #30]
 8004590:	3b01      	subs	r3, #1
 8004592:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004594:	8bfb      	ldrh	r3, [r7, #30]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1ea      	bne.n	8004570 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800459a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800459c:	4618      	mov	r0, r3
 800459e:	372c      	adds	r7, #44	; 0x2c
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	785b      	ldrb	r3, [r3, #1]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d12c      	bne.n	800461e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	015a      	lsls	r2, r3, #5
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	4413      	add	r3, r2
 80045cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	db12      	blt.n	80045fc <USB_EPSetStall+0x54>
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00f      	beq.n	80045fc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	015a      	lsls	r2, r3, #5
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	4413      	add	r3, r2
 80045e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68ba      	ldr	r2, [r7, #8]
 80045ec:	0151      	lsls	r1, r2, #5
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	440a      	add	r2, r1
 80045f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045fa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	015a      	lsls	r2, r3, #5
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	4413      	add	r3, r2
 8004604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	0151      	lsls	r1, r2, #5
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	440a      	add	r2, r1
 8004612:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004616:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800461a:	6013      	str	r3, [r2, #0]
 800461c:	e02b      	b.n	8004676 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	015a      	lsls	r2, r3, #5
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	4413      	add	r3, r2
 8004626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	db12      	blt.n	8004656 <USB_EPSetStall+0xae>
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00f      	beq.n	8004656 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	015a      	lsls	r2, r3, #5
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	4413      	add	r3, r2
 800463e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68ba      	ldr	r2, [r7, #8]
 8004646:	0151      	lsls	r1, r2, #5
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	440a      	add	r2, r1
 800464c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004650:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004654:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	015a      	lsls	r2, r3, #5
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	4413      	add	r3, r2
 800465e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68ba      	ldr	r2, [r7, #8]
 8004666:	0151      	lsls	r1, r2, #5
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	440a      	add	r2, r1
 800466c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004670:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004674:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	3714      	adds	r7, #20
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	785b      	ldrb	r3, [r3, #1]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d128      	bne.n	80046f2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	015a      	lsls	r2, r3, #5
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	4413      	add	r3, r2
 80046a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	0151      	lsls	r1, r2, #5
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	440a      	add	r2, r1
 80046b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80046be:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	791b      	ldrb	r3, [r3, #4]
 80046c4:	2b03      	cmp	r3, #3
 80046c6:	d003      	beq.n	80046d0 <USB_EPClearStall+0x4c>
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	791b      	ldrb	r3, [r3, #4]
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d138      	bne.n	8004742 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	015a      	lsls	r2, r3, #5
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	4413      	add	r3, r2
 80046d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68ba      	ldr	r2, [r7, #8]
 80046e0:	0151      	lsls	r1, r2, #5
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	440a      	add	r2, r1
 80046e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ee:	6013      	str	r3, [r2, #0]
 80046f0:	e027      	b.n	8004742 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	015a      	lsls	r2, r3, #5
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	4413      	add	r3, r2
 80046fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68ba      	ldr	r2, [r7, #8]
 8004702:	0151      	lsls	r1, r2, #5
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	440a      	add	r2, r1
 8004708:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800470c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004710:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	791b      	ldrb	r3, [r3, #4]
 8004716:	2b03      	cmp	r3, #3
 8004718:	d003      	beq.n	8004722 <USB_EPClearStall+0x9e>
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	791b      	ldrb	r3, [r3, #4]
 800471e:	2b02      	cmp	r3, #2
 8004720:	d10f      	bne.n	8004742 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	015a      	lsls	r2, r3, #5
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	4413      	add	r3, r2
 800472a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68ba      	ldr	r2, [r7, #8]
 8004732:	0151      	lsls	r1, r2, #5
 8004734:	68fa      	ldr	r2, [r7, #12]
 8004736:	440a      	add	r2, r1
 8004738:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800473c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004740:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3714      	adds	r7, #20
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	460b      	mov	r3, r1
 800475a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800476e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004772:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	78fb      	ldrb	r3, [r7, #3]
 800477e:	011b      	lsls	r3, r3, #4
 8004780:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004784:	68f9      	ldr	r1, [r7, #12]
 8004786:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800478a:	4313      	orrs	r3, r2
 800478c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3714      	adds	r7, #20
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80047b6:	f023 0303 	bic.w	r3, r3, #3
 80047ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047ca:	f023 0302 	bic.w	r3, r3, #2
 80047ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3714      	adds	r7, #20
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr

080047de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80047de:	b480      	push	{r7}
 80047e0:	b085      	sub	sp, #20
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80047f8:	f023 0303 	bic.w	r3, r3, #3
 80047fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800480c:	f043 0302 	orr.w	r3, r3, #2
 8004810:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3714      	adds	r7, #20
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	695b      	ldr	r3, [r3, #20]
 800482c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	4013      	ands	r3, r2
 8004836:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004838:	68fb      	ldr	r3, [r7, #12]
}
 800483a:	4618      	mov	r0, r3
 800483c:	3714      	adds	r7, #20
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr

08004846 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004846:	b480      	push	{r7}
 8004848:	b085      	sub	sp, #20
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004862:	69db      	ldr	r3, [r3, #28]
 8004864:	68ba      	ldr	r2, [r7, #8]
 8004866:	4013      	ands	r3, r2
 8004868:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	0c1b      	lsrs	r3, r3, #16
}
 800486e:	4618      	mov	r0, r3
 8004870:	3714      	adds	r7, #20
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr

0800487a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800487a:	b480      	push	{r7}
 800487c:	b085      	sub	sp, #20
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004896:	69db      	ldr	r3, [r3, #28]
 8004898:	68ba      	ldr	r2, [r7, #8]
 800489a:	4013      	ands	r3, r2
 800489c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	b29b      	uxth	r3, r3
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3714      	adds	r7, #20
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr

080048ae <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80048ae:	b480      	push	{r7}
 80048b0:	b085      	sub	sp, #20
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
 80048b6:	460b      	mov	r3, r1
 80048b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80048be:	78fb      	ldrb	r3, [r7, #3]
 80048c0:	015a      	lsls	r2, r3, #5
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	4413      	add	r3, r2
 80048c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	4013      	ands	r3, r2
 80048da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80048dc:	68bb      	ldr	r3, [r7, #8]
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3714      	adds	r7, #20
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr

080048ea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80048ea:	b480      	push	{r7}
 80048ec:	b087      	sub	sp, #28
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
 80048f2:	460b      	mov	r3, r1
 80048f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800490a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800490c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800490e:	78fb      	ldrb	r3, [r7, #3]
 8004910:	f003 030f 	and.w	r3, r3, #15
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	fa22 f303 	lsr.w	r3, r2, r3
 800491a:	01db      	lsls	r3, r3, #7
 800491c:	b2db      	uxtb	r3, r3
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	4313      	orrs	r3, r2
 8004922:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004924:	78fb      	ldrb	r3, [r7, #3]
 8004926:	015a      	lsls	r2, r3, #5
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	4413      	add	r3, r2
 800492c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	4013      	ands	r3, r2
 8004936:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004938:	68bb      	ldr	r3, [r7, #8]
}
 800493a:	4618      	mov	r0, r3
 800493c:	371c      	adds	r7, #28
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr

08004946 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004946:	b480      	push	{r7}
 8004948:	b083      	sub	sp, #12
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	f003 0301 	and.w	r3, r3, #1
}
 8004956:	4618      	mov	r0, r3
 8004958:	370c      	adds	r7, #12
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr

08004962 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004962:	b480      	push	{r7}
 8004964:	b085      	sub	sp, #20
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800497c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004980:	f023 0307 	bic.w	r3, r3, #7
 8004984:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004994:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004998:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3714      	adds	r7, #20
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b087      	sub	sp, #28
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	460b      	mov	r3, r1
 80049b2:	607a      	str	r2, [r7, #4]
 80049b4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	333c      	adds	r3, #60	; 0x3c
 80049be:	3304      	adds	r3, #4
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	4a26      	ldr	r2, [pc, #152]	; (8004a60 <USB_EP0_OutStart+0xb8>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d90a      	bls.n	80049e2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049dc:	d101      	bne.n	80049e2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80049de:	2300      	movs	r3, #0
 80049e0:	e037      	b.n	8004a52 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049e8:	461a      	mov	r2, r3
 80049ea:	2300      	movs	r3, #0
 80049ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a10:	f043 0318 	orr.w	r3, r3, #24
 8004a14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a24:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004a28:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004a2a:	7afb      	ldrb	r3, [r7, #11]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d10f      	bne.n	8004a50 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a36:	461a      	mov	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a4a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004a4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	371c      	adds	r7, #28
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	4f54300a 	.word	0x4f54300a

08004a64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	3301      	adds	r3, #1
 8004a74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	4a13      	ldr	r2, [pc, #76]	; (8004ac8 <USB_CoreReset+0x64>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d901      	bls.n	8004a82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e01b      	b.n	8004aba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	daf2      	bge.n	8004a70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	f043 0201 	orr.w	r2, r3, #1
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	4a09      	ldr	r2, [pc, #36]	; (8004ac8 <USB_CoreReset+0x64>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d901      	bls.n	8004aac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e006      	b.n	8004aba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	f003 0301 	and.w	r3, r3, #1
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d0f0      	beq.n	8004a9a <USB_CoreReset+0x36>

  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3714      	adds	r7, #20
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	00030d40 	.word	0x00030d40

08004acc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004ad8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004adc:	f006 fc78 	bl	800b3d0 <USBD_static_malloc>
 8004ae0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d109      	bne.n	8004afc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	32b0      	adds	r2, #176	; 0xb0
 8004af2:	2100      	movs	r1, #0
 8004af4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004af8:	2302      	movs	r3, #2
 8004afa:	e0d4      	b.n	8004ca6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004afc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004b00:	2100      	movs	r1, #0
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f006 fcdc 	bl	800b4c0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	32b0      	adds	r2, #176	; 0xb0
 8004b12:	68f9      	ldr	r1, [r7, #12]
 8004b14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	32b0      	adds	r2, #176	; 0xb0
 8004b22:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	7c1b      	ldrb	r3, [r3, #16]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d138      	bne.n	8004ba6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004b34:	4b5e      	ldr	r3, [pc, #376]	; (8004cb0 <USBD_CDC_Init+0x1e4>)
 8004b36:	7819      	ldrb	r1, [r3, #0]
 8004b38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b3c:	2202      	movs	r2, #2
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f006 fb23 	bl	800b18a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004b44:	4b5a      	ldr	r3, [pc, #360]	; (8004cb0 <USBD_CDC_Init+0x1e4>)
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	f003 020f 	and.w	r2, r3, #15
 8004b4c:	6879      	ldr	r1, [r7, #4]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	4413      	add	r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	440b      	add	r3, r1
 8004b58:	3324      	adds	r3, #36	; 0x24
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004b5e:	4b55      	ldr	r3, [pc, #340]	; (8004cb4 <USBD_CDC_Init+0x1e8>)
 8004b60:	7819      	ldrb	r1, [r3, #0]
 8004b62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b66:	2202      	movs	r2, #2
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f006 fb0e 	bl	800b18a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004b6e:	4b51      	ldr	r3, [pc, #324]	; (8004cb4 <USBD_CDC_Init+0x1e8>)
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	f003 020f 	and.w	r2, r3, #15
 8004b76:	6879      	ldr	r1, [r7, #4]
 8004b78:	4613      	mov	r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	4413      	add	r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	440b      	add	r3, r1
 8004b82:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004b86:	2201      	movs	r2, #1
 8004b88:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004b8a:	4b4b      	ldr	r3, [pc, #300]	; (8004cb8 <USBD_CDC_Init+0x1ec>)
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	f003 020f 	and.w	r2, r3, #15
 8004b92:	6879      	ldr	r1, [r7, #4]
 8004b94:	4613      	mov	r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	4413      	add	r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	440b      	add	r3, r1
 8004b9e:	3326      	adds	r3, #38	; 0x26
 8004ba0:	2210      	movs	r2, #16
 8004ba2:	801a      	strh	r2, [r3, #0]
 8004ba4:	e035      	b.n	8004c12 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004ba6:	4b42      	ldr	r3, [pc, #264]	; (8004cb0 <USBD_CDC_Init+0x1e4>)
 8004ba8:	7819      	ldrb	r1, [r3, #0]
 8004baa:	2340      	movs	r3, #64	; 0x40
 8004bac:	2202      	movs	r2, #2
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f006 faeb 	bl	800b18a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004bb4:	4b3e      	ldr	r3, [pc, #248]	; (8004cb0 <USBD_CDC_Init+0x1e4>)
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	f003 020f 	and.w	r2, r3, #15
 8004bbc:	6879      	ldr	r1, [r7, #4]
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	4413      	add	r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	440b      	add	r3, r1
 8004bc8:	3324      	adds	r3, #36	; 0x24
 8004bca:	2201      	movs	r2, #1
 8004bcc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004bce:	4b39      	ldr	r3, [pc, #228]	; (8004cb4 <USBD_CDC_Init+0x1e8>)
 8004bd0:	7819      	ldrb	r1, [r3, #0]
 8004bd2:	2340      	movs	r3, #64	; 0x40
 8004bd4:	2202      	movs	r2, #2
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f006 fad7 	bl	800b18a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004bdc:	4b35      	ldr	r3, [pc, #212]	; (8004cb4 <USBD_CDC_Init+0x1e8>)
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	f003 020f 	and.w	r2, r3, #15
 8004be4:	6879      	ldr	r1, [r7, #4]
 8004be6:	4613      	mov	r3, r2
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	4413      	add	r3, r2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	440b      	add	r3, r1
 8004bf0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004bf8:	4b2f      	ldr	r3, [pc, #188]	; (8004cb8 <USBD_CDC_Init+0x1ec>)
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	f003 020f 	and.w	r2, r3, #15
 8004c00:	6879      	ldr	r1, [r7, #4]
 8004c02:	4613      	mov	r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	4413      	add	r3, r2
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	440b      	add	r3, r1
 8004c0c:	3326      	adds	r3, #38	; 0x26
 8004c0e:	2210      	movs	r2, #16
 8004c10:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004c12:	4b29      	ldr	r3, [pc, #164]	; (8004cb8 <USBD_CDC_Init+0x1ec>)
 8004c14:	7819      	ldrb	r1, [r3, #0]
 8004c16:	2308      	movs	r3, #8
 8004c18:	2203      	movs	r2, #3
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f006 fab5 	bl	800b18a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004c20:	4b25      	ldr	r3, [pc, #148]	; (8004cb8 <USBD_CDC_Init+0x1ec>)
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	f003 020f 	and.w	r2, r3, #15
 8004c28:	6879      	ldr	r1, [r7, #4]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	4413      	add	r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	440b      	add	r3, r1
 8004c34:	3324      	adds	r3, #36	; 0x24
 8004c36:	2201      	movs	r2, #1
 8004c38:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	33b0      	adds	r3, #176	; 0xb0
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	4413      	add	r3, r2
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d101      	bne.n	8004c74 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004c70:	2302      	movs	r3, #2
 8004c72:	e018      	b.n	8004ca6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	7c1b      	ldrb	r3, [r3, #16]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d10a      	bne.n	8004c92 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004c7c:	4b0d      	ldr	r3, [pc, #52]	; (8004cb4 <USBD_CDC_Init+0x1e8>)
 8004c7e:	7819      	ldrb	r1, [r3, #0]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004c86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f006 fb6c 	bl	800b368 <USBD_LL_PrepareReceive>
 8004c90:	e008      	b.n	8004ca4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004c92:	4b08      	ldr	r3, [pc, #32]	; (8004cb4 <USBD_CDC_Init+0x1e8>)
 8004c94:	7819      	ldrb	r1, [r3, #0]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004c9c:	2340      	movs	r3, #64	; 0x40
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f006 fb62 	bl	800b368 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3710      	adds	r7, #16
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	20000093 	.word	0x20000093
 8004cb4:	20000094 	.word	0x20000094
 8004cb8:	20000095 	.word	0x20000095

08004cbc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004cc8:	4b3a      	ldr	r3, [pc, #232]	; (8004db4 <USBD_CDC_DeInit+0xf8>)
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	4619      	mov	r1, r3
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f006 fa81 	bl	800b1d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004cd4:	4b37      	ldr	r3, [pc, #220]	; (8004db4 <USBD_CDC_DeInit+0xf8>)
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	f003 020f 	and.w	r2, r3, #15
 8004cdc:	6879      	ldr	r1, [r7, #4]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	4413      	add	r3, r2
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	440b      	add	r3, r1
 8004ce8:	3324      	adds	r3, #36	; 0x24
 8004cea:	2200      	movs	r2, #0
 8004cec:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004cee:	4b32      	ldr	r3, [pc, #200]	; (8004db8 <USBD_CDC_DeInit+0xfc>)
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f006 fa6e 	bl	800b1d6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004cfa:	4b2f      	ldr	r3, [pc, #188]	; (8004db8 <USBD_CDC_DeInit+0xfc>)
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	f003 020f 	and.w	r2, r3, #15
 8004d02:	6879      	ldr	r1, [r7, #4]
 8004d04:	4613      	mov	r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	4413      	add	r3, r2
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	440b      	add	r3, r1
 8004d0e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004d12:	2200      	movs	r2, #0
 8004d14:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004d16:	4b29      	ldr	r3, [pc, #164]	; (8004dbc <USBD_CDC_DeInit+0x100>)
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f006 fa5a 	bl	800b1d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004d22:	4b26      	ldr	r3, [pc, #152]	; (8004dbc <USBD_CDC_DeInit+0x100>)
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	f003 020f 	and.w	r2, r3, #15
 8004d2a:	6879      	ldr	r1, [r7, #4]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	4413      	add	r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	440b      	add	r3, r1
 8004d36:	3324      	adds	r3, #36	; 0x24
 8004d38:	2200      	movs	r2, #0
 8004d3a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004d3c:	4b1f      	ldr	r3, [pc, #124]	; (8004dbc <USBD_CDC_DeInit+0x100>)
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	f003 020f 	and.w	r2, r3, #15
 8004d44:	6879      	ldr	r1, [r7, #4]
 8004d46:	4613      	mov	r3, r2
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	4413      	add	r3, r2
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	440b      	add	r3, r1
 8004d50:	3326      	adds	r3, #38	; 0x26
 8004d52:	2200      	movs	r2, #0
 8004d54:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	32b0      	adds	r2, #176	; 0xb0
 8004d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d01f      	beq.n	8004da8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	33b0      	adds	r3, #176	; 0xb0
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	4413      	add	r3, r2
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	32b0      	adds	r2, #176	; 0xb0
 8004d86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f006 fb2e 	bl	800b3ec <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	32b0      	adds	r2, #176	; 0xb0
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3708      	adds	r7, #8
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	20000093 	.word	0x20000093
 8004db8:	20000094 	.word	0x20000094
 8004dbc:	20000095 	.word	0x20000095

08004dc0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b086      	sub	sp, #24
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	32b0      	adds	r2, #176	; 0xb0
 8004dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dd8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004dde:	2300      	movs	r3, #0
 8004de0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004de2:	2300      	movs	r3, #0
 8004de4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d101      	bne.n	8004df0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e0bf      	b.n	8004f70 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d050      	beq.n	8004e9e <USBD_CDC_Setup+0xde>
 8004dfc:	2b20      	cmp	r3, #32
 8004dfe:	f040 80af 	bne.w	8004f60 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	88db      	ldrh	r3, [r3, #6]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d03a      	beq.n	8004e80 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	b25b      	sxtb	r3, r3
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	da1b      	bge.n	8004e4c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	33b0      	adds	r3, #176	; 0xb0
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	683a      	ldr	r2, [r7, #0]
 8004e28:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8004e2a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004e2c:	683a      	ldr	r2, [r7, #0]
 8004e2e:	88d2      	ldrh	r2, [r2, #6]
 8004e30:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	88db      	ldrh	r3, [r3, #6]
 8004e36:	2b07      	cmp	r3, #7
 8004e38:	bf28      	it	cs
 8004e3a:	2307      	movcs	r3, #7
 8004e3c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	89fa      	ldrh	r2, [r7, #14]
 8004e42:	4619      	mov	r1, r3
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f001 fd89 	bl	800695c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8004e4a:	e090      	b.n	8004f6e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	785a      	ldrb	r2, [r3, #1]
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	88db      	ldrh	r3, [r3, #6]
 8004e5a:	2b3f      	cmp	r3, #63	; 0x3f
 8004e5c:	d803      	bhi.n	8004e66 <USBD_CDC_Setup+0xa6>
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	88db      	ldrh	r3, [r3, #6]
 8004e62:	b2da      	uxtb	r2, r3
 8004e64:	e000      	b.n	8004e68 <USBD_CDC_Setup+0xa8>
 8004e66:	2240      	movs	r2, #64	; 0x40
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8004e6e:	6939      	ldr	r1, [r7, #16]
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8004e76:	461a      	mov	r2, r3
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f001 fd9b 	bl	80069b4 <USBD_CtlPrepareRx>
      break;
 8004e7e:	e076      	b.n	8004f6e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	33b0      	adds	r3, #176	; 0xb0
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	4413      	add	r3, r2
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	683a      	ldr	r2, [r7, #0]
 8004e94:	7850      	ldrb	r0, [r2, #1]
 8004e96:	2200      	movs	r2, #0
 8004e98:	6839      	ldr	r1, [r7, #0]
 8004e9a:	4798      	blx	r3
      break;
 8004e9c:	e067      	b.n	8004f6e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	785b      	ldrb	r3, [r3, #1]
 8004ea2:	2b0b      	cmp	r3, #11
 8004ea4:	d851      	bhi.n	8004f4a <USBD_CDC_Setup+0x18a>
 8004ea6:	a201      	add	r2, pc, #4	; (adr r2, 8004eac <USBD_CDC_Setup+0xec>)
 8004ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eac:	08004edd 	.word	0x08004edd
 8004eb0:	08004f59 	.word	0x08004f59
 8004eb4:	08004f4b 	.word	0x08004f4b
 8004eb8:	08004f4b 	.word	0x08004f4b
 8004ebc:	08004f4b 	.word	0x08004f4b
 8004ec0:	08004f4b 	.word	0x08004f4b
 8004ec4:	08004f4b 	.word	0x08004f4b
 8004ec8:	08004f4b 	.word	0x08004f4b
 8004ecc:	08004f4b 	.word	0x08004f4b
 8004ed0:	08004f4b 	.word	0x08004f4b
 8004ed4:	08004f07 	.word	0x08004f07
 8004ed8:	08004f31 	.word	0x08004f31
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b03      	cmp	r3, #3
 8004ee6:	d107      	bne.n	8004ef8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004ee8:	f107 030a 	add.w	r3, r7, #10
 8004eec:	2202      	movs	r2, #2
 8004eee:	4619      	mov	r1, r3
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f001 fd33 	bl	800695c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004ef6:	e032      	b.n	8004f5e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004ef8:	6839      	ldr	r1, [r7, #0]
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f001 fcbd 	bl	800687a <USBD_CtlError>
            ret = USBD_FAIL;
 8004f00:	2303      	movs	r3, #3
 8004f02:	75fb      	strb	r3, [r7, #23]
          break;
 8004f04:	e02b      	b.n	8004f5e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	2b03      	cmp	r3, #3
 8004f10:	d107      	bne.n	8004f22 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004f12:	f107 030d 	add.w	r3, r7, #13
 8004f16:	2201      	movs	r2, #1
 8004f18:	4619      	mov	r1, r3
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f001 fd1e 	bl	800695c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004f20:	e01d      	b.n	8004f5e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004f22:	6839      	ldr	r1, [r7, #0]
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f001 fca8 	bl	800687a <USBD_CtlError>
            ret = USBD_FAIL;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	75fb      	strb	r3, [r7, #23]
          break;
 8004f2e:	e016      	b.n	8004f5e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	2b03      	cmp	r3, #3
 8004f3a:	d00f      	beq.n	8004f5c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8004f3c:	6839      	ldr	r1, [r7, #0]
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f001 fc9b 	bl	800687a <USBD_CtlError>
            ret = USBD_FAIL;
 8004f44:	2303      	movs	r3, #3
 8004f46:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004f48:	e008      	b.n	8004f5c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004f4a:	6839      	ldr	r1, [r7, #0]
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f001 fc94 	bl	800687a <USBD_CtlError>
          ret = USBD_FAIL;
 8004f52:	2303      	movs	r3, #3
 8004f54:	75fb      	strb	r3, [r7, #23]
          break;
 8004f56:	e002      	b.n	8004f5e <USBD_CDC_Setup+0x19e>
          break;
 8004f58:	bf00      	nop
 8004f5a:	e008      	b.n	8004f6e <USBD_CDC_Setup+0x1ae>
          break;
 8004f5c:	bf00      	nop
      }
      break;
 8004f5e:	e006      	b.n	8004f6e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8004f60:	6839      	ldr	r1, [r7, #0]
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f001 fc89 	bl	800687a <USBD_CtlError>
      ret = USBD_FAIL;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	75fb      	strb	r3, [r7, #23]
      break;
 8004f6c:	bf00      	nop
  }

  return (uint8_t)ret;
 8004f6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3718      	adds	r7, #24
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	460b      	mov	r3, r1
 8004f82:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8004f8a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	32b0      	adds	r2, #176	; 0xb0
 8004f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d101      	bne.n	8004fa2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e065      	b.n	800506e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	32b0      	adds	r2, #176	; 0xb0
 8004fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fb0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004fb2:	78fb      	ldrb	r3, [r7, #3]
 8004fb4:	f003 020f 	and.w	r2, r3, #15
 8004fb8:	6879      	ldr	r1, [r7, #4]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	4413      	add	r3, r2
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	440b      	add	r3, r1
 8004fc4:	3318      	adds	r3, #24
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d02f      	beq.n	800502c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8004fcc:	78fb      	ldrb	r3, [r7, #3]
 8004fce:	f003 020f 	and.w	r2, r3, #15
 8004fd2:	6879      	ldr	r1, [r7, #4]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	4413      	add	r3, r2
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	440b      	add	r3, r1
 8004fde:	3318      	adds	r3, #24
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	78fb      	ldrb	r3, [r7, #3]
 8004fe4:	f003 010f 	and.w	r1, r3, #15
 8004fe8:	68f8      	ldr	r0, [r7, #12]
 8004fea:	460b      	mov	r3, r1
 8004fec:	00db      	lsls	r3, r3, #3
 8004fee:	440b      	add	r3, r1
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	4403      	add	r3, r0
 8004ff4:	3348      	adds	r3, #72	; 0x48
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	fbb2 f1f3 	udiv	r1, r2, r3
 8004ffc:	fb01 f303 	mul.w	r3, r1, r3
 8005000:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005002:	2b00      	cmp	r3, #0
 8005004:	d112      	bne.n	800502c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005006:	78fb      	ldrb	r3, [r7, #3]
 8005008:	f003 020f 	and.w	r2, r3, #15
 800500c:	6879      	ldr	r1, [r7, #4]
 800500e:	4613      	mov	r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	4413      	add	r3, r2
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	440b      	add	r3, r1
 8005018:	3318      	adds	r3, #24
 800501a:	2200      	movs	r2, #0
 800501c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800501e:	78f9      	ldrb	r1, [r7, #3]
 8005020:	2300      	movs	r3, #0
 8005022:	2200      	movs	r2, #0
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f006 f97e 	bl	800b326 <USBD_LL_Transmit>
 800502a:	e01f      	b.n	800506c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	2200      	movs	r2, #0
 8005030:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	33b0      	adds	r3, #176	; 0xb0
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	4413      	add	r3, r2
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d010      	beq.n	800506c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	33b0      	adds	r3, #176	; 0xb0
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	4413      	add	r3, r2
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	68ba      	ldr	r2, [r7, #8]
 800505e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005068:	78fa      	ldrb	r2, [r7, #3]
 800506a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3710      	adds	r7, #16
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}

08005076 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005076:	b580      	push	{r7, lr}
 8005078:	b084      	sub	sp, #16
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
 800507e:	460b      	mov	r3, r1
 8005080:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	32b0      	adds	r2, #176	; 0xb0
 800508c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005090:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	32b0      	adds	r2, #176	; 0xb0
 800509c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d101      	bne.n	80050a8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e01a      	b.n	80050de <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80050a8:	78fb      	ldrb	r3, [r7, #3]
 80050aa:	4619      	mov	r1, r3
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f006 f97c 	bl	800b3aa <USBD_LL_GetRxDataSize>
 80050b2:	4602      	mov	r2, r0
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	33b0      	adds	r3, #176	; 0xb0
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	4413      	add	r3, r2
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80050d8:	4611      	mov	r1, r2
 80050da:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b084      	sub	sp, #16
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	32b0      	adds	r2, #176	; 0xb0
 80050f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050fc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d101      	bne.n	8005108 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005104:	2303      	movs	r3, #3
 8005106:	e025      	b.n	8005154 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	33b0      	adds	r3, #176	; 0xb0
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	4413      	add	r3, r2
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d01a      	beq.n	8005152 <USBD_CDC_EP0_RxReady+0x6c>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005122:	2bff      	cmp	r3, #255	; 0xff
 8005124:	d015      	beq.n	8005152 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	33b0      	adds	r3, #176	; 0xb0
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	4413      	add	r3, r2
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800513e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005146:	b292      	uxth	r2, r2
 8005148:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	22ff      	movs	r2, #255	; 0xff
 800514e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	3710      	adds	r7, #16
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b086      	sub	sp, #24
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005164:	2182      	movs	r1, #130	; 0x82
 8005166:	4818      	ldr	r0, [pc, #96]	; (80051c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005168:	f000 fd4f 	bl	8005c0a <USBD_GetEpDesc>
 800516c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800516e:	2101      	movs	r1, #1
 8005170:	4815      	ldr	r0, [pc, #84]	; (80051c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005172:	f000 fd4a 	bl	8005c0a <USBD_GetEpDesc>
 8005176:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005178:	2181      	movs	r1, #129	; 0x81
 800517a:	4813      	ldr	r0, [pc, #76]	; (80051c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800517c:	f000 fd45 	bl	8005c0a <USBD_GetEpDesc>
 8005180:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d002      	beq.n	800518e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	2210      	movs	r2, #16
 800518c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d006      	beq.n	80051a2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	2200      	movs	r2, #0
 8005198:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800519c:	711a      	strb	r2, [r3, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d006      	beq.n	80051b6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051b0:	711a      	strb	r2, [r3, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2243      	movs	r2, #67	; 0x43
 80051ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80051bc:	4b02      	ldr	r3, [pc, #8]	; (80051c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3718      	adds	r7, #24
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	20000050 	.word	0x20000050

080051cc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b086      	sub	sp, #24
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80051d4:	2182      	movs	r1, #130	; 0x82
 80051d6:	4818      	ldr	r0, [pc, #96]	; (8005238 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80051d8:	f000 fd17 	bl	8005c0a <USBD_GetEpDesc>
 80051dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80051de:	2101      	movs	r1, #1
 80051e0:	4815      	ldr	r0, [pc, #84]	; (8005238 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80051e2:	f000 fd12 	bl	8005c0a <USBD_GetEpDesc>
 80051e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80051e8:	2181      	movs	r1, #129	; 0x81
 80051ea:	4813      	ldr	r0, [pc, #76]	; (8005238 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80051ec:	f000 fd0d 	bl	8005c0a <USBD_GetEpDesc>
 80051f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d002      	beq.n	80051fe <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	2210      	movs	r2, #16
 80051fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d006      	beq.n	8005212 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	2200      	movs	r2, #0
 8005208:	711a      	strb	r2, [r3, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	f042 0202 	orr.w	r2, r2, #2
 8005210:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d006      	beq.n	8005226 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2200      	movs	r2, #0
 800521c:	711a      	strb	r2, [r3, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f042 0202 	orr.w	r2, r2, #2
 8005224:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2243      	movs	r2, #67	; 0x43
 800522a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800522c:	4b02      	ldr	r3, [pc, #8]	; (8005238 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800522e:	4618      	mov	r0, r3
 8005230:	3718      	adds	r7, #24
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	20000050 	.word	0x20000050

0800523c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b086      	sub	sp, #24
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005244:	2182      	movs	r1, #130	; 0x82
 8005246:	4818      	ldr	r0, [pc, #96]	; (80052a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005248:	f000 fcdf 	bl	8005c0a <USBD_GetEpDesc>
 800524c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800524e:	2101      	movs	r1, #1
 8005250:	4815      	ldr	r0, [pc, #84]	; (80052a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005252:	f000 fcda 	bl	8005c0a <USBD_GetEpDesc>
 8005256:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005258:	2181      	movs	r1, #129	; 0x81
 800525a:	4813      	ldr	r0, [pc, #76]	; (80052a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800525c:	f000 fcd5 	bl	8005c0a <USBD_GetEpDesc>
 8005260:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d002      	beq.n	800526e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	2210      	movs	r2, #16
 800526c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d006      	beq.n	8005282 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	2200      	movs	r2, #0
 8005278:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800527c:	711a      	strb	r2, [r3, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d006      	beq.n	8005296 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2200      	movs	r2, #0
 800528c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005290:	711a      	strb	r2, [r3, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2243      	movs	r2, #67	; 0x43
 800529a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800529c:	4b02      	ldr	r3, [pc, #8]	; (80052a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3718      	adds	r7, #24
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	20000050 	.word	0x20000050

080052ac <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	220a      	movs	r2, #10
 80052b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80052ba:	4b03      	ldr	r3, [pc, #12]	; (80052c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80052bc:	4618      	mov	r0, r3
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr
 80052c8:	2000000c 	.word	0x2000000c

080052cc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d101      	bne.n	80052e0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80052dc:	2303      	movs	r3, #3
 80052de:	e009      	b.n	80052f4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	33b0      	adds	r3, #176	; 0xb0
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	4413      	add	r3, r2
 80052ee:	683a      	ldr	r2, [r7, #0]
 80052f0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005300:	b480      	push	{r7}
 8005302:	b087      	sub	sp, #28
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	32b0      	adds	r2, #176	; 0xb0
 8005316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800531a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005322:	2303      	movs	r3, #3
 8005324:	e008      	b.n	8005338 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	68ba      	ldr	r2, [r7, #8]
 800532a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	371c      	adds	r7, #28
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	32b0      	adds	r2, #176	; 0xb0
 8005358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800535c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d101      	bne.n	8005368 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005364:	2303      	movs	r3, #3
 8005366:	e004      	b.n	8005372 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	683a      	ldr	r2, [r7, #0]
 800536c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3714      	adds	r7, #20
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
	...

08005380 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	32b0      	adds	r2, #176	; 0xb0
 8005392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005396:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005398:	2301      	movs	r3, #1
 800539a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	32b0      	adds	r2, #176	; 0xb0
 80053a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d101      	bne.n	80053b2 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e025      	b.n	80053fe <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d11f      	bne.n	80053fc <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	2201      	movs	r2, #1
 80053c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80053c4:	4b10      	ldr	r3, [pc, #64]	; (8005408 <USBD_CDC_TransmitPacket+0x88>)
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	f003 020f 	and.w	r2, r3, #15
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	4613      	mov	r3, r2
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	4413      	add	r3, r2
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	4403      	add	r3, r0
 80053de:	3318      	adds	r3, #24
 80053e0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80053e2:	4b09      	ldr	r3, [pc, #36]	; (8005408 <USBD_CDC_TransmitPacket+0x88>)
 80053e4:	7819      	ldrb	r1, [r3, #0]
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f005 ff97 	bl	800b326 <USBD_LL_Transmit>

    ret = USBD_OK;
 80053f8:	2300      	movs	r3, #0
 80053fa:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80053fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	20000093 	.word	0x20000093

0800540c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	32b0      	adds	r2, #176	; 0xb0
 800541e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005422:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	32b0      	adds	r2, #176	; 0xb0
 800542e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d101      	bne.n	800543a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005436:	2303      	movs	r3, #3
 8005438:	e018      	b.n	800546c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	7c1b      	ldrb	r3, [r3, #16]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d10a      	bne.n	8005458 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005442:	4b0c      	ldr	r3, [pc, #48]	; (8005474 <USBD_CDC_ReceivePacket+0x68>)
 8005444:	7819      	ldrb	r1, [r3, #0]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800544c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f005 ff89 	bl	800b368 <USBD_LL_PrepareReceive>
 8005456:	e008      	b.n	800546a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005458:	4b06      	ldr	r3, [pc, #24]	; (8005474 <USBD_CDC_ReceivePacket+0x68>)
 800545a:	7819      	ldrb	r1, [r3, #0]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005462:	2340      	movs	r3, #64	; 0x40
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f005 ff7f 	bl	800b368 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3710      	adds	r7, #16
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	20000094 	.word	0x20000094

08005478 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b086      	sub	sp, #24
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	4613      	mov	r3, r2
 8005484:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d101      	bne.n	8005490 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800548c:	2303      	movs	r3, #3
 800548e:	e01f      	b.n	80054d0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d003      	beq.n	80054b6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2201      	movs	r2, #1
 80054ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	79fa      	ldrb	r2, [r7, #7]
 80054c2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80054c4:	68f8      	ldr	r0, [r7, #12]
 80054c6:	f005 fdf9 	bl	800b0bc <USBD_LL_Init>
 80054ca:	4603      	mov	r3, r0
 80054cc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80054ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3718      	adds	r7, #24
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80054e2:	2300      	movs	r3, #0
 80054e4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d101      	bne.n	80054f0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e025      	b.n	800553c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	683a      	ldr	r2, [r7, #0]
 80054f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	32ae      	adds	r2, #174	; 0xae
 8005502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005508:	2b00      	cmp	r3, #0
 800550a:	d00f      	beq.n	800552c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	32ae      	adds	r2, #174	; 0xae
 8005516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800551a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800551c:	f107 020e 	add.w	r2, r7, #14
 8005520:	4610      	mov	r0, r2
 8005522:	4798      	blx	r3
 8005524:	4602      	mov	r2, r0
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005532:	1c5a      	adds	r2, r3, #1
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	3710      	adds	r7, #16
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f005 fe01 	bl	800b154 <USBD_LL_Start>
 8005552:	4603      	mov	r3, r0
}
 8005554:	4618      	mov	r0, r3
 8005556:	3708      	adds	r7, #8
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005564:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005566:	4618      	mov	r0, r3
 8005568:	370c      	adds	r7, #12
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr

08005572 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005572:	b580      	push	{r7, lr}
 8005574:	b084      	sub	sp, #16
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
 800557a:	460b      	mov	r3, r1
 800557c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800557e:	2300      	movs	r3, #0
 8005580:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005588:	2b00      	cmp	r3, #0
 800558a:	d009      	beq.n	80055a0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	78fa      	ldrb	r2, [r7, #3]
 8005596:	4611      	mov	r1, r2
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	4798      	blx	r3
 800559c:	4603      	mov	r3, r0
 800559e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80055a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3710      	adds	r7, #16
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}

080055aa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b084      	sub	sp, #16
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
 80055b2:	460b      	mov	r3, r1
 80055b4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80055b6:	2300      	movs	r3, #0
 80055b8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	78fa      	ldrb	r2, [r7, #3]
 80055c4:	4611      	mov	r1, r2
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	4798      	blx	r3
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d001      	beq.n	80055d4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80055d0:	2303      	movs	r3, #3
 80055d2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80055d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3710      	adds	r7, #16
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}

080055de <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80055de:	b580      	push	{r7, lr}
 80055e0:	b084      	sub	sp, #16
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
 80055e6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80055ee:	6839      	ldr	r1, [r7, #0]
 80055f0:	4618      	mov	r0, r3
 80055f2:	f001 f908 	bl	8006806 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2201      	movs	r2, #1
 80055fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005604:	461a      	mov	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005612:	f003 031f 	and.w	r3, r3, #31
 8005616:	2b02      	cmp	r3, #2
 8005618:	d01a      	beq.n	8005650 <USBD_LL_SetupStage+0x72>
 800561a:	2b02      	cmp	r3, #2
 800561c:	d822      	bhi.n	8005664 <USBD_LL_SetupStage+0x86>
 800561e:	2b00      	cmp	r3, #0
 8005620:	d002      	beq.n	8005628 <USBD_LL_SetupStage+0x4a>
 8005622:	2b01      	cmp	r3, #1
 8005624:	d00a      	beq.n	800563c <USBD_LL_SetupStage+0x5e>
 8005626:	e01d      	b.n	8005664 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800562e:	4619      	mov	r1, r3
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 fb5f 	bl	8005cf4 <USBD_StdDevReq>
 8005636:	4603      	mov	r3, r0
 8005638:	73fb      	strb	r3, [r7, #15]
      break;
 800563a:	e020      	b.n	800567e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005642:	4619      	mov	r1, r3
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 fbc7 	bl	8005dd8 <USBD_StdItfReq>
 800564a:	4603      	mov	r3, r0
 800564c:	73fb      	strb	r3, [r7, #15]
      break;
 800564e:	e016      	b.n	800567e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005656:	4619      	mov	r1, r3
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 fc29 	bl	8005eb0 <USBD_StdEPReq>
 800565e:	4603      	mov	r3, r0
 8005660:	73fb      	strb	r3, [r7, #15]
      break;
 8005662:	e00c      	b.n	800567e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800566a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800566e:	b2db      	uxtb	r3, r3
 8005670:	4619      	mov	r1, r3
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f005 fdce 	bl	800b214 <USBD_LL_StallEP>
 8005678:	4603      	mov	r3, r0
 800567a:	73fb      	strb	r3, [r7, #15]
      break;
 800567c:	bf00      	nop
  }

  return ret;
 800567e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005680:	4618      	mov	r0, r3
 8005682:	3710      	adds	r7, #16
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b086      	sub	sp, #24
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	460b      	mov	r3, r1
 8005692:	607a      	str	r2, [r7, #4]
 8005694:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005696:	2300      	movs	r3, #0
 8005698:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800569a:	7afb      	ldrb	r3, [r7, #11]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d16e      	bne.n	800577e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80056a6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80056ae:	2b03      	cmp	r3, #3
 80056b0:	f040 8098 	bne.w	80057e4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	689a      	ldr	r2, [r3, #8]
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	429a      	cmp	r2, r3
 80056be:	d913      	bls.n	80056e8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	689a      	ldr	r2, [r3, #8]
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	1ad2      	subs	r2, r2, r3
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	68da      	ldr	r2, [r3, #12]
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	4293      	cmp	r3, r2
 80056d8:	bf28      	it	cs
 80056da:	4613      	movcs	r3, r2
 80056dc:	461a      	mov	r2, r3
 80056de:	6879      	ldr	r1, [r7, #4]
 80056e0:	68f8      	ldr	r0, [r7, #12]
 80056e2:	f001 f984 	bl	80069ee <USBD_CtlContinueRx>
 80056e6:	e07d      	b.n	80057e4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80056ee:	f003 031f 	and.w	r3, r3, #31
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d014      	beq.n	8005720 <USBD_LL_DataOutStage+0x98>
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	d81d      	bhi.n	8005736 <USBD_LL_DataOutStage+0xae>
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d002      	beq.n	8005704 <USBD_LL_DataOutStage+0x7c>
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d003      	beq.n	800570a <USBD_LL_DataOutStage+0x82>
 8005702:	e018      	b.n	8005736 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005704:	2300      	movs	r3, #0
 8005706:	75bb      	strb	r3, [r7, #22]
            break;
 8005708:	e018      	b.n	800573c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005710:	b2db      	uxtb	r3, r3
 8005712:	4619      	mov	r1, r3
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f000 fa5e 	bl	8005bd6 <USBD_CoreFindIF>
 800571a:	4603      	mov	r3, r0
 800571c:	75bb      	strb	r3, [r7, #22]
            break;
 800571e:	e00d      	b.n	800573c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005726:	b2db      	uxtb	r3, r3
 8005728:	4619      	mov	r1, r3
 800572a:	68f8      	ldr	r0, [r7, #12]
 800572c:	f000 fa60 	bl	8005bf0 <USBD_CoreFindEP>
 8005730:	4603      	mov	r3, r0
 8005732:	75bb      	strb	r3, [r7, #22]
            break;
 8005734:	e002      	b.n	800573c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005736:	2300      	movs	r3, #0
 8005738:	75bb      	strb	r3, [r7, #22]
            break;
 800573a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800573c:	7dbb      	ldrb	r3, [r7, #22]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d119      	bne.n	8005776 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b03      	cmp	r3, #3
 800574c:	d113      	bne.n	8005776 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800574e:	7dba      	ldrb	r2, [r7, #22]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	32ae      	adds	r2, #174	; 0xae
 8005754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00b      	beq.n	8005776 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800575e:	7dba      	ldrb	r2, [r7, #22]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005766:	7dba      	ldrb	r2, [r7, #22]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	32ae      	adds	r2, #174	; 0xae
 800576c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	f001 f94a 	bl	8006a10 <USBD_CtlSendStatus>
 800577c:	e032      	b.n	80057e4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800577e:	7afb      	ldrb	r3, [r7, #11]
 8005780:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005784:	b2db      	uxtb	r3, r3
 8005786:	4619      	mov	r1, r3
 8005788:	68f8      	ldr	r0, [r7, #12]
 800578a:	f000 fa31 	bl	8005bf0 <USBD_CoreFindEP>
 800578e:	4603      	mov	r3, r0
 8005790:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005792:	7dbb      	ldrb	r3, [r7, #22]
 8005794:	2bff      	cmp	r3, #255	; 0xff
 8005796:	d025      	beq.n	80057e4 <USBD_LL_DataOutStage+0x15c>
 8005798:	7dbb      	ldrb	r3, [r7, #22]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d122      	bne.n	80057e4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	2b03      	cmp	r3, #3
 80057a8:	d117      	bne.n	80057da <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80057aa:	7dba      	ldrb	r2, [r7, #22]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	32ae      	adds	r2, #174	; 0xae
 80057b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00f      	beq.n	80057da <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80057ba:	7dba      	ldrb	r2, [r7, #22]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80057c2:	7dba      	ldrb	r2, [r7, #22]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	32ae      	adds	r2, #174	; 0xae
 80057c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	7afa      	ldrb	r2, [r7, #11]
 80057d0:	4611      	mov	r1, r2
 80057d2:	68f8      	ldr	r0, [r7, #12]
 80057d4:	4798      	blx	r3
 80057d6:	4603      	mov	r3, r0
 80057d8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80057da:	7dfb      	ldrb	r3, [r7, #23]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d001      	beq.n	80057e4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80057e0:	7dfb      	ldrb	r3, [r7, #23]
 80057e2:	e000      	b.n	80057e6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3718      	adds	r7, #24
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}

080057ee <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80057ee:	b580      	push	{r7, lr}
 80057f0:	b086      	sub	sp, #24
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	60f8      	str	r0, [r7, #12]
 80057f6:	460b      	mov	r3, r1
 80057f8:	607a      	str	r2, [r7, #4]
 80057fa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80057fc:	7afb      	ldrb	r3, [r7, #11]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d16f      	bne.n	80058e2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	3314      	adds	r3, #20
 8005806:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800580e:	2b02      	cmp	r3, #2
 8005810:	d15a      	bne.n	80058c8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	689a      	ldr	r2, [r3, #8]
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	429a      	cmp	r2, r3
 800581c:	d914      	bls.n	8005848 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	689a      	ldr	r2, [r3, #8]
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	1ad2      	subs	r2, r2, r3
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	461a      	mov	r2, r3
 8005832:	6879      	ldr	r1, [r7, #4]
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f001 f8ac 	bl	8006992 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800583a:	2300      	movs	r3, #0
 800583c:	2200      	movs	r2, #0
 800583e:	2100      	movs	r1, #0
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	f005 fd91 	bl	800b368 <USBD_LL_PrepareReceive>
 8005846:	e03f      	b.n	80058c8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	68da      	ldr	r2, [r3, #12]
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	429a      	cmp	r2, r3
 8005852:	d11c      	bne.n	800588e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	685a      	ldr	r2, [r3, #4]
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800585c:	429a      	cmp	r2, r3
 800585e:	d316      	bcc.n	800588e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	685a      	ldr	r2, [r3, #4]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800586a:	429a      	cmp	r2, r3
 800586c:	d20f      	bcs.n	800588e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800586e:	2200      	movs	r2, #0
 8005870:	2100      	movs	r1, #0
 8005872:	68f8      	ldr	r0, [r7, #12]
 8005874:	f001 f88d 	bl	8006992 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005880:	2300      	movs	r3, #0
 8005882:	2200      	movs	r2, #0
 8005884:	2100      	movs	r1, #0
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f005 fd6e 	bl	800b368 <USBD_LL_PrepareReceive>
 800588c:	e01c      	b.n	80058c8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b03      	cmp	r3, #3
 8005898:	d10f      	bne.n	80058ba <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d009      	beq.n	80058ba <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	68f8      	ldr	r0, [r7, #12]
 80058b8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80058ba:	2180      	movs	r1, #128	; 0x80
 80058bc:	68f8      	ldr	r0, [r7, #12]
 80058be:	f005 fca9 	bl	800b214 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80058c2:	68f8      	ldr	r0, [r7, #12]
 80058c4:	f001 f8b7 	bl	8006a36 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d03a      	beq.n	8005948 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80058d2:	68f8      	ldr	r0, [r7, #12]
 80058d4:	f7ff fe42 	bl	800555c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80058e0:	e032      	b.n	8005948 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80058e2:	7afb      	ldrb	r3, [r7, #11]
 80058e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	4619      	mov	r1, r3
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f000 f97f 	bl	8005bf0 <USBD_CoreFindEP>
 80058f2:	4603      	mov	r3, r0
 80058f4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80058f6:	7dfb      	ldrb	r3, [r7, #23]
 80058f8:	2bff      	cmp	r3, #255	; 0xff
 80058fa:	d025      	beq.n	8005948 <USBD_LL_DataInStage+0x15a>
 80058fc:	7dfb      	ldrb	r3, [r7, #23]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d122      	bne.n	8005948 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2b03      	cmp	r3, #3
 800590c:	d11c      	bne.n	8005948 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800590e:	7dfa      	ldrb	r2, [r7, #23]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	32ae      	adds	r2, #174	; 0xae
 8005914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d014      	beq.n	8005948 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800591e:	7dfa      	ldrb	r2, [r7, #23]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005926:	7dfa      	ldrb	r2, [r7, #23]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	32ae      	adds	r2, #174	; 0xae
 800592c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005930:	695b      	ldr	r3, [r3, #20]
 8005932:	7afa      	ldrb	r2, [r7, #11]
 8005934:	4611      	mov	r1, r2
 8005936:	68f8      	ldr	r0, [r7, #12]
 8005938:	4798      	blx	r3
 800593a:	4603      	mov	r3, r0
 800593c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800593e:	7dbb      	ldrb	r3, [r7, #22]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d001      	beq.n	8005948 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005944:	7dbb      	ldrb	r3, [r7, #22]
 8005946:	e000      	b.n	800594a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3718      	adds	r7, #24
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}

08005952 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005952:	b580      	push	{r7, lr}
 8005954:	b084      	sub	sp, #16
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800595a:	2300      	movs	r3, #0
 800595c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2201      	movs	r2, #1
 8005962:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800598a:	2b00      	cmp	r3, #0
 800598c:	d014      	beq.n	80059b8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00e      	beq.n	80059b8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	6852      	ldr	r2, [r2, #4]
 80059a6:	b2d2      	uxtb	r2, r2
 80059a8:	4611      	mov	r1, r2
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	4798      	blx	r3
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d001      	beq.n	80059b8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80059b4:	2303      	movs	r3, #3
 80059b6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80059b8:	2340      	movs	r3, #64	; 0x40
 80059ba:	2200      	movs	r2, #0
 80059bc:	2100      	movs	r1, #0
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f005 fbe3 	bl	800b18a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2240      	movs	r2, #64	; 0x40
 80059d0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80059d4:	2340      	movs	r3, #64	; 0x40
 80059d6:	2200      	movs	r2, #0
 80059d8:	2180      	movs	r1, #128	; 0x80
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f005 fbd5 	bl	800b18a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2240      	movs	r2, #64	; 0x40
 80059ea:	621a      	str	r2, [r3, #32]

  return ret;
 80059ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80059f6:	b480      	push	{r7}
 80059f8:	b083      	sub	sp, #12
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
 80059fe:	460b      	mov	r3, r1
 8005a00:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	78fa      	ldrb	r2, [r7, #3]
 8005a06:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	370c      	adds	r7, #12
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr

08005a16 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005a16:	b480      	push	{r7}
 8005a18:	b083      	sub	sp, #12
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a24:	b2da      	uxtb	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2204      	movs	r2, #4
 8005a30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	370c      	adds	r7, #12
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr

08005a42 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005a42:	b480      	push	{r7}
 8005a44:	b083      	sub	sp, #12
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	2b04      	cmp	r3, #4
 8005a54:	d106      	bne.n	8005a64 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005a5c:	b2da      	uxtb	r2, r3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	370c      	adds	r7, #12
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr

08005a72 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005a72:	b580      	push	{r7, lr}
 8005a74:	b082      	sub	sp, #8
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2b03      	cmp	r3, #3
 8005a84:	d110      	bne.n	8005aa8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00b      	beq.n	8005aa8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a96:	69db      	ldr	r3, [r3, #28]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d005      	beq.n	8005aa8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005aa2:	69db      	ldr	r3, [r3, #28]
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3708      	adds	r7, #8
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}

08005ab2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005ab2:	b580      	push	{r7, lr}
 8005ab4:	b082      	sub	sp, #8
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
 8005aba:	460b      	mov	r3, r1
 8005abc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	32ae      	adds	r2, #174	; 0xae
 8005ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d101      	bne.n	8005ad4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e01c      	b.n	8005b0e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	2b03      	cmp	r3, #3
 8005ade:	d115      	bne.n	8005b0c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	32ae      	adds	r2, #174	; 0xae
 8005aea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aee:	6a1b      	ldr	r3, [r3, #32]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d00b      	beq.n	8005b0c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	32ae      	adds	r2, #174	; 0xae
 8005afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b02:	6a1b      	ldr	r3, [r3, #32]
 8005b04:	78fa      	ldrb	r2, [r7, #3]
 8005b06:	4611      	mov	r1, r2
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3708      	adds	r7, #8
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}

08005b16 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005b16:	b580      	push	{r7, lr}
 8005b18:	b082      	sub	sp, #8
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
 8005b1e:	460b      	mov	r3, r1
 8005b20:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	32ae      	adds	r2, #174	; 0xae
 8005b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d101      	bne.n	8005b38 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005b34:	2303      	movs	r3, #3
 8005b36:	e01c      	b.n	8005b72 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	2b03      	cmp	r3, #3
 8005b42:	d115      	bne.n	8005b70 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	32ae      	adds	r2, #174	; 0xae
 8005b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d00b      	beq.n	8005b70 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	32ae      	adds	r2, #174	; 0xae
 8005b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b68:	78fa      	ldrb	r2, [r7, #3]
 8005b6a:	4611      	mov	r1, r2
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3708      	adds	r7, #8
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}

08005b7a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005b7a:	b480      	push	{r7}
 8005b7c:	b083      	sub	sp, #12
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00e      	beq.n	8005bcc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	6852      	ldr	r2, [r2, #4]
 8005bba:	b2d2      	uxtb	r2, r2
 8005bbc:	4611      	mov	r1, r2
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	4798      	blx	r3
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d001      	beq.n	8005bcc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3710      	adds	r7, #16
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	b083      	sub	sp, #12
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
 8005bde:	460b      	mov	r3, r1
 8005be0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005be2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005bfc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	370c      	adds	r7, #12
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr

08005c0a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005c0a:	b580      	push	{r7, lr}
 8005c0c:	b086      	sub	sp, #24
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
 8005c12:	460b      	mov	r3, r1
 8005c14:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	885b      	ldrh	r3, [r3, #2]
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d920      	bls.n	8005c74 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005c3a:	e013      	b.n	8005c64 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005c3c:	f107 030a 	add.w	r3, r7, #10
 8005c40:	4619      	mov	r1, r3
 8005c42:	6978      	ldr	r0, [r7, #20]
 8005c44:	f000 f81b 	bl	8005c7e <USBD_GetNextDesc>
 8005c48:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	785b      	ldrb	r3, [r3, #1]
 8005c4e:	2b05      	cmp	r3, #5
 8005c50:	d108      	bne.n	8005c64 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	789b      	ldrb	r3, [r3, #2]
 8005c5a:	78fa      	ldrb	r2, [r7, #3]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d008      	beq.n	8005c72 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005c60:	2300      	movs	r3, #0
 8005c62:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	885b      	ldrh	r3, [r3, #2]
 8005c68:	b29a      	uxth	r2, r3
 8005c6a:	897b      	ldrh	r3, [r7, #10]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d8e5      	bhi.n	8005c3c <USBD_GetEpDesc+0x32>
 8005c70:	e000      	b.n	8005c74 <USBD_GetEpDesc+0x6a>
          break;
 8005c72:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005c74:	693b      	ldr	r3, [r7, #16]
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3718      	adds	r7, #24
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}

08005c7e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005c7e:	b480      	push	{r7}
 8005c80:	b085      	sub	sp, #20
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
 8005c86:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	881a      	ldrh	r2, [r3, #0]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	4413      	add	r3, r2
 8005c98:	b29a      	uxth	r2, r3
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005caa:	68fb      	ldr	r3, [r7, #12]
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3714      	adds	r7, #20
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b087      	sub	sp, #28
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	3301      	adds	r3, #1
 8005cce:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005cd6:	8a3b      	ldrh	r3, [r7, #16]
 8005cd8:	021b      	lsls	r3, r3, #8
 8005cda:	b21a      	sxth	r2, r3
 8005cdc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	b21b      	sxth	r3, r3
 8005ce4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005ce6:	89fb      	ldrh	r3, [r7, #14]
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	371c      	adds	r7, #28
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d0a:	2b40      	cmp	r3, #64	; 0x40
 8005d0c:	d005      	beq.n	8005d1a <USBD_StdDevReq+0x26>
 8005d0e:	2b40      	cmp	r3, #64	; 0x40
 8005d10:	d857      	bhi.n	8005dc2 <USBD_StdDevReq+0xce>
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d00f      	beq.n	8005d36 <USBD_StdDevReq+0x42>
 8005d16:	2b20      	cmp	r3, #32
 8005d18:	d153      	bne.n	8005dc2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	32ae      	adds	r2, #174	; 0xae
 8005d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	6839      	ldr	r1, [r7, #0]
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	4798      	blx	r3
 8005d30:	4603      	mov	r3, r0
 8005d32:	73fb      	strb	r3, [r7, #15]
      break;
 8005d34:	e04a      	b.n	8005dcc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	785b      	ldrb	r3, [r3, #1]
 8005d3a:	2b09      	cmp	r3, #9
 8005d3c:	d83b      	bhi.n	8005db6 <USBD_StdDevReq+0xc2>
 8005d3e:	a201      	add	r2, pc, #4	; (adr r2, 8005d44 <USBD_StdDevReq+0x50>)
 8005d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d44:	08005d99 	.word	0x08005d99
 8005d48:	08005dad 	.word	0x08005dad
 8005d4c:	08005db7 	.word	0x08005db7
 8005d50:	08005da3 	.word	0x08005da3
 8005d54:	08005db7 	.word	0x08005db7
 8005d58:	08005d77 	.word	0x08005d77
 8005d5c:	08005d6d 	.word	0x08005d6d
 8005d60:	08005db7 	.word	0x08005db7
 8005d64:	08005d8f 	.word	0x08005d8f
 8005d68:	08005d81 	.word	0x08005d81
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005d6c:	6839      	ldr	r1, [r7, #0]
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 fa3c 	bl	80061ec <USBD_GetDescriptor>
          break;
 8005d74:	e024      	b.n	8005dc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005d76:	6839      	ldr	r1, [r7, #0]
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 fba1 	bl	80064c0 <USBD_SetAddress>
          break;
 8005d7e:	e01f      	b.n	8005dc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005d80:	6839      	ldr	r1, [r7, #0]
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 fbe0 	bl	8006548 <USBD_SetConfig>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	73fb      	strb	r3, [r7, #15]
          break;
 8005d8c:	e018      	b.n	8005dc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005d8e:	6839      	ldr	r1, [r7, #0]
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 fc83 	bl	800669c <USBD_GetConfig>
          break;
 8005d96:	e013      	b.n	8005dc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005d98:	6839      	ldr	r1, [r7, #0]
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 fcb4 	bl	8006708 <USBD_GetStatus>
          break;
 8005da0:	e00e      	b.n	8005dc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005da2:	6839      	ldr	r1, [r7, #0]
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 fce3 	bl	8006770 <USBD_SetFeature>
          break;
 8005daa:	e009      	b.n	8005dc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005dac:	6839      	ldr	r1, [r7, #0]
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 fd07 	bl	80067c2 <USBD_ClrFeature>
          break;
 8005db4:	e004      	b.n	8005dc0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005db6:	6839      	ldr	r1, [r7, #0]
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 fd5e 	bl	800687a <USBD_CtlError>
          break;
 8005dbe:	bf00      	nop
      }
      break;
 8005dc0:	e004      	b.n	8005dcc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005dc2:	6839      	ldr	r1, [r7, #0]
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 fd58 	bl	800687a <USBD_CtlError>
      break;
 8005dca:	bf00      	nop
  }

  return ret;
 8005dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3710      	adds	r7, #16
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop

08005dd8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005de2:	2300      	movs	r3, #0
 8005de4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005dee:	2b40      	cmp	r3, #64	; 0x40
 8005df0:	d005      	beq.n	8005dfe <USBD_StdItfReq+0x26>
 8005df2:	2b40      	cmp	r3, #64	; 0x40
 8005df4:	d852      	bhi.n	8005e9c <USBD_StdItfReq+0xc4>
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d001      	beq.n	8005dfe <USBD_StdItfReq+0x26>
 8005dfa:	2b20      	cmp	r3, #32
 8005dfc:	d14e      	bne.n	8005e9c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	3b01      	subs	r3, #1
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	d840      	bhi.n	8005e8e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	889b      	ldrh	r3, [r3, #4]
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d836      	bhi.n	8005e84 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	889b      	ldrh	r3, [r3, #4]
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f7ff fed9 	bl	8005bd6 <USBD_CoreFindIF>
 8005e24:	4603      	mov	r3, r0
 8005e26:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005e28:	7bbb      	ldrb	r3, [r7, #14]
 8005e2a:	2bff      	cmp	r3, #255	; 0xff
 8005e2c:	d01d      	beq.n	8005e6a <USBD_StdItfReq+0x92>
 8005e2e:	7bbb      	ldrb	r3, [r7, #14]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d11a      	bne.n	8005e6a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005e34:	7bba      	ldrb	r2, [r7, #14]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	32ae      	adds	r2, #174	; 0xae
 8005e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00f      	beq.n	8005e64 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005e44:	7bba      	ldrb	r2, [r7, #14]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005e4c:	7bba      	ldrb	r2, [r7, #14]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	32ae      	adds	r2, #174	; 0xae
 8005e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	6839      	ldr	r1, [r7, #0]
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	4798      	blx	r3
 8005e5e:	4603      	mov	r3, r0
 8005e60:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005e62:	e004      	b.n	8005e6e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005e64:	2303      	movs	r3, #3
 8005e66:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005e68:	e001      	b.n	8005e6e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	88db      	ldrh	r3, [r3, #6]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d110      	bne.n	8005e98 <USBD_StdItfReq+0xc0>
 8005e76:	7bfb      	ldrb	r3, [r7, #15]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d10d      	bne.n	8005e98 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 fdc7 	bl	8006a10 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005e82:	e009      	b.n	8005e98 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005e84:	6839      	ldr	r1, [r7, #0]
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 fcf7 	bl	800687a <USBD_CtlError>
          break;
 8005e8c:	e004      	b.n	8005e98 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005e8e:	6839      	ldr	r1, [r7, #0]
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 fcf2 	bl	800687a <USBD_CtlError>
          break;
 8005e96:	e000      	b.n	8005e9a <USBD_StdItfReq+0xc2>
          break;
 8005e98:	bf00      	nop
      }
      break;
 8005e9a:	e004      	b.n	8005ea6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005e9c:	6839      	ldr	r1, [r7, #0]
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 fceb 	bl	800687a <USBD_CtlError>
      break;
 8005ea4:	bf00      	nop
  }

  return ret;
 8005ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3710      	adds	r7, #16
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	889b      	ldrh	r3, [r3, #4]
 8005ec2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ecc:	2b40      	cmp	r3, #64	; 0x40
 8005ece:	d007      	beq.n	8005ee0 <USBD_StdEPReq+0x30>
 8005ed0:	2b40      	cmp	r3, #64	; 0x40
 8005ed2:	f200 817f 	bhi.w	80061d4 <USBD_StdEPReq+0x324>
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d02a      	beq.n	8005f30 <USBD_StdEPReq+0x80>
 8005eda:	2b20      	cmp	r3, #32
 8005edc:	f040 817a 	bne.w	80061d4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005ee0:	7bbb      	ldrb	r3, [r7, #14]
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f7ff fe83 	bl	8005bf0 <USBD_CoreFindEP>
 8005eea:	4603      	mov	r3, r0
 8005eec:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005eee:	7b7b      	ldrb	r3, [r7, #13]
 8005ef0:	2bff      	cmp	r3, #255	; 0xff
 8005ef2:	f000 8174 	beq.w	80061de <USBD_StdEPReq+0x32e>
 8005ef6:	7b7b      	ldrb	r3, [r7, #13]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	f040 8170 	bne.w	80061de <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005efe:	7b7a      	ldrb	r2, [r7, #13]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005f06:	7b7a      	ldrb	r2, [r7, #13]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	32ae      	adds	r2, #174	; 0xae
 8005f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	f000 8163 	beq.w	80061de <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005f18:	7b7a      	ldrb	r2, [r7, #13]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	32ae      	adds	r2, #174	; 0xae
 8005f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	6839      	ldr	r1, [r7, #0]
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	4798      	blx	r3
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005f2e:	e156      	b.n	80061de <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	785b      	ldrb	r3, [r3, #1]
 8005f34:	2b03      	cmp	r3, #3
 8005f36:	d008      	beq.n	8005f4a <USBD_StdEPReq+0x9a>
 8005f38:	2b03      	cmp	r3, #3
 8005f3a:	f300 8145 	bgt.w	80061c8 <USBD_StdEPReq+0x318>
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	f000 809b 	beq.w	800607a <USBD_StdEPReq+0x1ca>
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d03c      	beq.n	8005fc2 <USBD_StdEPReq+0x112>
 8005f48:	e13e      	b.n	80061c8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d002      	beq.n	8005f5c <USBD_StdEPReq+0xac>
 8005f56:	2b03      	cmp	r3, #3
 8005f58:	d016      	beq.n	8005f88 <USBD_StdEPReq+0xd8>
 8005f5a:	e02c      	b.n	8005fb6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f5c:	7bbb      	ldrb	r3, [r7, #14]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00d      	beq.n	8005f7e <USBD_StdEPReq+0xce>
 8005f62:	7bbb      	ldrb	r3, [r7, #14]
 8005f64:	2b80      	cmp	r3, #128	; 0x80
 8005f66:	d00a      	beq.n	8005f7e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005f68:	7bbb      	ldrb	r3, [r7, #14]
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f005 f951 	bl	800b214 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f72:	2180      	movs	r1, #128	; 0x80
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f005 f94d 	bl	800b214 <USBD_LL_StallEP>
 8005f7a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005f7c:	e020      	b.n	8005fc0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005f7e:	6839      	ldr	r1, [r7, #0]
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 fc7a 	bl	800687a <USBD_CtlError>
              break;
 8005f86:	e01b      	b.n	8005fc0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	885b      	ldrh	r3, [r3, #2]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d10e      	bne.n	8005fae <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005f90:	7bbb      	ldrb	r3, [r7, #14]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d00b      	beq.n	8005fae <USBD_StdEPReq+0xfe>
 8005f96:	7bbb      	ldrb	r3, [r7, #14]
 8005f98:	2b80      	cmp	r3, #128	; 0x80
 8005f9a:	d008      	beq.n	8005fae <USBD_StdEPReq+0xfe>
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	88db      	ldrh	r3, [r3, #6]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d104      	bne.n	8005fae <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005fa4:	7bbb      	ldrb	r3, [r7, #14]
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f005 f933 	bl	800b214 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 fd2e 	bl	8006a10 <USBD_CtlSendStatus>

              break;
 8005fb4:	e004      	b.n	8005fc0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005fb6:	6839      	ldr	r1, [r7, #0]
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 fc5e 	bl	800687a <USBD_CtlError>
              break;
 8005fbe:	bf00      	nop
          }
          break;
 8005fc0:	e107      	b.n	80061d2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	d002      	beq.n	8005fd4 <USBD_StdEPReq+0x124>
 8005fce:	2b03      	cmp	r3, #3
 8005fd0:	d016      	beq.n	8006000 <USBD_StdEPReq+0x150>
 8005fd2:	e04b      	b.n	800606c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005fd4:	7bbb      	ldrb	r3, [r7, #14]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d00d      	beq.n	8005ff6 <USBD_StdEPReq+0x146>
 8005fda:	7bbb      	ldrb	r3, [r7, #14]
 8005fdc:	2b80      	cmp	r3, #128	; 0x80
 8005fde:	d00a      	beq.n	8005ff6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005fe0:	7bbb      	ldrb	r3, [r7, #14]
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f005 f915 	bl	800b214 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005fea:	2180      	movs	r1, #128	; 0x80
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f005 f911 	bl	800b214 <USBD_LL_StallEP>
 8005ff2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005ff4:	e040      	b.n	8006078 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005ff6:	6839      	ldr	r1, [r7, #0]
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 fc3e 	bl	800687a <USBD_CtlError>
              break;
 8005ffe:	e03b      	b.n	8006078 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	885b      	ldrh	r3, [r3, #2]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d136      	bne.n	8006076 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006008:	7bbb      	ldrb	r3, [r7, #14]
 800600a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800600e:	2b00      	cmp	r3, #0
 8006010:	d004      	beq.n	800601c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006012:	7bbb      	ldrb	r3, [r7, #14]
 8006014:	4619      	mov	r1, r3
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f005 f91b 	bl	800b252 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 fcf7 	bl	8006a10 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006022:	7bbb      	ldrb	r3, [r7, #14]
 8006024:	4619      	mov	r1, r3
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f7ff fde2 	bl	8005bf0 <USBD_CoreFindEP>
 800602c:	4603      	mov	r3, r0
 800602e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006030:	7b7b      	ldrb	r3, [r7, #13]
 8006032:	2bff      	cmp	r3, #255	; 0xff
 8006034:	d01f      	beq.n	8006076 <USBD_StdEPReq+0x1c6>
 8006036:	7b7b      	ldrb	r3, [r7, #13]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d11c      	bne.n	8006076 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800603c:	7b7a      	ldrb	r2, [r7, #13]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006044:	7b7a      	ldrb	r2, [r7, #13]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	32ae      	adds	r2, #174	; 0xae
 800604a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d010      	beq.n	8006076 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006054:	7b7a      	ldrb	r2, [r7, #13]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	32ae      	adds	r2, #174	; 0xae
 800605a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	6839      	ldr	r1, [r7, #0]
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	4798      	blx	r3
 8006066:	4603      	mov	r3, r0
 8006068:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800606a:	e004      	b.n	8006076 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800606c:	6839      	ldr	r1, [r7, #0]
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 fc03 	bl	800687a <USBD_CtlError>
              break;
 8006074:	e000      	b.n	8006078 <USBD_StdEPReq+0x1c8>
              break;
 8006076:	bf00      	nop
          }
          break;
 8006078:	e0ab      	b.n	80061d2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006080:	b2db      	uxtb	r3, r3
 8006082:	2b02      	cmp	r3, #2
 8006084:	d002      	beq.n	800608c <USBD_StdEPReq+0x1dc>
 8006086:	2b03      	cmp	r3, #3
 8006088:	d032      	beq.n	80060f0 <USBD_StdEPReq+0x240>
 800608a:	e097      	b.n	80061bc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800608c:	7bbb      	ldrb	r3, [r7, #14]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d007      	beq.n	80060a2 <USBD_StdEPReq+0x1f2>
 8006092:	7bbb      	ldrb	r3, [r7, #14]
 8006094:	2b80      	cmp	r3, #128	; 0x80
 8006096:	d004      	beq.n	80060a2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006098:	6839      	ldr	r1, [r7, #0]
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 fbed 	bl	800687a <USBD_CtlError>
                break;
 80060a0:	e091      	b.n	80061c6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80060a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	da0b      	bge.n	80060c2 <USBD_StdEPReq+0x212>
 80060aa:	7bbb      	ldrb	r3, [r7, #14]
 80060ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80060b0:	4613      	mov	r3, r2
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	4413      	add	r3, r2
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	3310      	adds	r3, #16
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	4413      	add	r3, r2
 80060be:	3304      	adds	r3, #4
 80060c0:	e00b      	b.n	80060da <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80060c2:	7bbb      	ldrb	r3, [r7, #14]
 80060c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80060c8:	4613      	mov	r3, r2
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	4413      	add	r3, r2
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	4413      	add	r3, r2
 80060d8:	3304      	adds	r3, #4
 80060da:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	2200      	movs	r2, #0
 80060e0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	2202      	movs	r2, #2
 80060e6:	4619      	mov	r1, r3
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 fc37 	bl	800695c <USBD_CtlSendData>
              break;
 80060ee:	e06a      	b.n	80061c6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80060f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	da11      	bge.n	800611c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80060f8:	7bbb      	ldrb	r3, [r7, #14]
 80060fa:	f003 020f 	and.w	r2, r3, #15
 80060fe:	6879      	ldr	r1, [r7, #4]
 8006100:	4613      	mov	r3, r2
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	4413      	add	r3, r2
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	440b      	add	r3, r1
 800610a:	3324      	adds	r3, #36	; 0x24
 800610c:	881b      	ldrh	r3, [r3, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d117      	bne.n	8006142 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006112:	6839      	ldr	r1, [r7, #0]
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 fbb0 	bl	800687a <USBD_CtlError>
                  break;
 800611a:	e054      	b.n	80061c6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800611c:	7bbb      	ldrb	r3, [r7, #14]
 800611e:	f003 020f 	and.w	r2, r3, #15
 8006122:	6879      	ldr	r1, [r7, #4]
 8006124:	4613      	mov	r3, r2
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	4413      	add	r3, r2
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	440b      	add	r3, r1
 800612e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006132:	881b      	ldrh	r3, [r3, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d104      	bne.n	8006142 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006138:	6839      	ldr	r1, [r7, #0]
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 fb9d 	bl	800687a <USBD_CtlError>
                  break;
 8006140:	e041      	b.n	80061c6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006142:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006146:	2b00      	cmp	r3, #0
 8006148:	da0b      	bge.n	8006162 <USBD_StdEPReq+0x2b2>
 800614a:	7bbb      	ldrb	r3, [r7, #14]
 800614c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006150:	4613      	mov	r3, r2
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	4413      	add	r3, r2
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	3310      	adds	r3, #16
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	4413      	add	r3, r2
 800615e:	3304      	adds	r3, #4
 8006160:	e00b      	b.n	800617a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006162:	7bbb      	ldrb	r3, [r7, #14]
 8006164:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006168:	4613      	mov	r3, r2
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	4413      	add	r3, r2
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	4413      	add	r3, r2
 8006178:	3304      	adds	r3, #4
 800617a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800617c:	7bbb      	ldrb	r3, [r7, #14]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d002      	beq.n	8006188 <USBD_StdEPReq+0x2d8>
 8006182:	7bbb      	ldrb	r3, [r7, #14]
 8006184:	2b80      	cmp	r3, #128	; 0x80
 8006186:	d103      	bne.n	8006190 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	2200      	movs	r2, #0
 800618c:	601a      	str	r2, [r3, #0]
 800618e:	e00e      	b.n	80061ae <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006190:	7bbb      	ldrb	r3, [r7, #14]
 8006192:	4619      	mov	r1, r3
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f005 f87b 	bl	800b290 <USBD_LL_IsStallEP>
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d003      	beq.n	80061a8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	2201      	movs	r2, #1
 80061a4:	601a      	str	r2, [r3, #0]
 80061a6:	e002      	b.n	80061ae <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	2200      	movs	r2, #0
 80061ac:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	2202      	movs	r2, #2
 80061b2:	4619      	mov	r1, r3
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 fbd1 	bl	800695c <USBD_CtlSendData>
              break;
 80061ba:	e004      	b.n	80061c6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80061bc:	6839      	ldr	r1, [r7, #0]
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 fb5b 	bl	800687a <USBD_CtlError>
              break;
 80061c4:	bf00      	nop
          }
          break;
 80061c6:	e004      	b.n	80061d2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80061c8:	6839      	ldr	r1, [r7, #0]
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 fb55 	bl	800687a <USBD_CtlError>
          break;
 80061d0:	bf00      	nop
      }
      break;
 80061d2:	e005      	b.n	80061e0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80061d4:	6839      	ldr	r1, [r7, #0]
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 fb4f 	bl	800687a <USBD_CtlError>
      break;
 80061dc:	e000      	b.n	80061e0 <USBD_StdEPReq+0x330>
      break;
 80061de:	bf00      	nop
  }

  return ret;
 80061e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
	...

080061ec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80061f6:	2300      	movs	r3, #0
 80061f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80061fa:	2300      	movs	r3, #0
 80061fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80061fe:	2300      	movs	r3, #0
 8006200:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	885b      	ldrh	r3, [r3, #2]
 8006206:	0a1b      	lsrs	r3, r3, #8
 8006208:	b29b      	uxth	r3, r3
 800620a:	3b01      	subs	r3, #1
 800620c:	2b06      	cmp	r3, #6
 800620e:	f200 8128 	bhi.w	8006462 <USBD_GetDescriptor+0x276>
 8006212:	a201      	add	r2, pc, #4	; (adr r2, 8006218 <USBD_GetDescriptor+0x2c>)
 8006214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006218:	08006235 	.word	0x08006235
 800621c:	0800624d 	.word	0x0800624d
 8006220:	0800628d 	.word	0x0800628d
 8006224:	08006463 	.word	0x08006463
 8006228:	08006463 	.word	0x08006463
 800622c:	08006403 	.word	0x08006403
 8006230:	0800642f 	.word	0x0800642f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	7c12      	ldrb	r2, [r2, #16]
 8006240:	f107 0108 	add.w	r1, r7, #8
 8006244:	4610      	mov	r0, r2
 8006246:	4798      	blx	r3
 8006248:	60f8      	str	r0, [r7, #12]
      break;
 800624a:	e112      	b.n	8006472 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	7c1b      	ldrb	r3, [r3, #16]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d10d      	bne.n	8006270 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800625a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800625c:	f107 0208 	add.w	r2, r7, #8
 8006260:	4610      	mov	r0, r2
 8006262:	4798      	blx	r3
 8006264:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	3301      	adds	r3, #1
 800626a:	2202      	movs	r2, #2
 800626c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800626e:	e100      	b.n	8006472 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006278:	f107 0208 	add.w	r2, r7, #8
 800627c:	4610      	mov	r0, r2
 800627e:	4798      	blx	r3
 8006280:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	3301      	adds	r3, #1
 8006286:	2202      	movs	r2, #2
 8006288:	701a      	strb	r2, [r3, #0]
      break;
 800628a:	e0f2      	b.n	8006472 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	885b      	ldrh	r3, [r3, #2]
 8006290:	b2db      	uxtb	r3, r3
 8006292:	2b05      	cmp	r3, #5
 8006294:	f200 80ac 	bhi.w	80063f0 <USBD_GetDescriptor+0x204>
 8006298:	a201      	add	r2, pc, #4	; (adr r2, 80062a0 <USBD_GetDescriptor+0xb4>)
 800629a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800629e:	bf00      	nop
 80062a0:	080062b9 	.word	0x080062b9
 80062a4:	080062ed 	.word	0x080062ed
 80062a8:	08006321 	.word	0x08006321
 80062ac:	08006355 	.word	0x08006355
 80062b0:	08006389 	.word	0x08006389
 80062b4:	080063bd 	.word	0x080063bd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d00b      	beq.n	80062dc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	7c12      	ldrb	r2, [r2, #16]
 80062d0:	f107 0108 	add.w	r1, r7, #8
 80062d4:	4610      	mov	r0, r2
 80062d6:	4798      	blx	r3
 80062d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062da:	e091      	b.n	8006400 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80062dc:	6839      	ldr	r1, [r7, #0]
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 facb 	bl	800687a <USBD_CtlError>
            err++;
 80062e4:	7afb      	ldrb	r3, [r7, #11]
 80062e6:	3301      	adds	r3, #1
 80062e8:	72fb      	strb	r3, [r7, #11]
          break;
 80062ea:	e089      	b.n	8006400 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00b      	beq.n	8006310 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	7c12      	ldrb	r2, [r2, #16]
 8006304:	f107 0108 	add.w	r1, r7, #8
 8006308:	4610      	mov	r0, r2
 800630a:	4798      	blx	r3
 800630c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800630e:	e077      	b.n	8006400 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006310:	6839      	ldr	r1, [r7, #0]
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 fab1 	bl	800687a <USBD_CtlError>
            err++;
 8006318:	7afb      	ldrb	r3, [r7, #11]
 800631a:	3301      	adds	r3, #1
 800631c:	72fb      	strb	r3, [r7, #11]
          break;
 800631e:	e06f      	b.n	8006400 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00b      	beq.n	8006344 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	7c12      	ldrb	r2, [r2, #16]
 8006338:	f107 0108 	add.w	r1, r7, #8
 800633c:	4610      	mov	r0, r2
 800633e:	4798      	blx	r3
 8006340:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006342:	e05d      	b.n	8006400 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006344:	6839      	ldr	r1, [r7, #0]
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 fa97 	bl	800687a <USBD_CtlError>
            err++;
 800634c:	7afb      	ldrb	r3, [r7, #11]
 800634e:	3301      	adds	r3, #1
 8006350:	72fb      	strb	r3, [r7, #11]
          break;
 8006352:	e055      	b.n	8006400 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800635a:	691b      	ldr	r3, [r3, #16]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d00b      	beq.n	8006378 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	7c12      	ldrb	r2, [r2, #16]
 800636c:	f107 0108 	add.w	r1, r7, #8
 8006370:	4610      	mov	r0, r2
 8006372:	4798      	blx	r3
 8006374:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006376:	e043      	b.n	8006400 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006378:	6839      	ldr	r1, [r7, #0]
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 fa7d 	bl	800687a <USBD_CtlError>
            err++;
 8006380:	7afb      	ldrb	r3, [r7, #11]
 8006382:	3301      	adds	r3, #1
 8006384:	72fb      	strb	r3, [r7, #11]
          break;
 8006386:	e03b      	b.n	8006400 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800638e:	695b      	ldr	r3, [r3, #20]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d00b      	beq.n	80063ac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800639a:	695b      	ldr	r3, [r3, #20]
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	7c12      	ldrb	r2, [r2, #16]
 80063a0:	f107 0108 	add.w	r1, r7, #8
 80063a4:	4610      	mov	r0, r2
 80063a6:	4798      	blx	r3
 80063a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063aa:	e029      	b.n	8006400 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80063ac:	6839      	ldr	r1, [r7, #0]
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 fa63 	bl	800687a <USBD_CtlError>
            err++;
 80063b4:	7afb      	ldrb	r3, [r7, #11]
 80063b6:	3301      	adds	r3, #1
 80063b8:	72fb      	strb	r3, [r7, #11]
          break;
 80063ba:	e021      	b.n	8006400 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063c2:	699b      	ldr	r3, [r3, #24]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d00b      	beq.n	80063e0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063ce:	699b      	ldr	r3, [r3, #24]
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	7c12      	ldrb	r2, [r2, #16]
 80063d4:	f107 0108 	add.w	r1, r7, #8
 80063d8:	4610      	mov	r0, r2
 80063da:	4798      	blx	r3
 80063dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063de:	e00f      	b.n	8006400 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80063e0:	6839      	ldr	r1, [r7, #0]
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 fa49 	bl	800687a <USBD_CtlError>
            err++;
 80063e8:	7afb      	ldrb	r3, [r7, #11]
 80063ea:	3301      	adds	r3, #1
 80063ec:	72fb      	strb	r3, [r7, #11]
          break;
 80063ee:	e007      	b.n	8006400 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80063f0:	6839      	ldr	r1, [r7, #0]
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 fa41 	bl	800687a <USBD_CtlError>
          err++;
 80063f8:	7afb      	ldrb	r3, [r7, #11]
 80063fa:	3301      	adds	r3, #1
 80063fc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80063fe:	bf00      	nop
      }
      break;
 8006400:	e037      	b.n	8006472 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	7c1b      	ldrb	r3, [r3, #16]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d109      	bne.n	800641e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006412:	f107 0208 	add.w	r2, r7, #8
 8006416:	4610      	mov	r0, r2
 8006418:	4798      	blx	r3
 800641a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800641c:	e029      	b.n	8006472 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800641e:	6839      	ldr	r1, [r7, #0]
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f000 fa2a 	bl	800687a <USBD_CtlError>
        err++;
 8006426:	7afb      	ldrb	r3, [r7, #11]
 8006428:	3301      	adds	r3, #1
 800642a:	72fb      	strb	r3, [r7, #11]
      break;
 800642c:	e021      	b.n	8006472 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	7c1b      	ldrb	r3, [r3, #16]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d10d      	bne.n	8006452 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800643c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643e:	f107 0208 	add.w	r2, r7, #8
 8006442:	4610      	mov	r0, r2
 8006444:	4798      	blx	r3
 8006446:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	3301      	adds	r3, #1
 800644c:	2207      	movs	r2, #7
 800644e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006450:	e00f      	b.n	8006472 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006452:	6839      	ldr	r1, [r7, #0]
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 fa10 	bl	800687a <USBD_CtlError>
        err++;
 800645a:	7afb      	ldrb	r3, [r7, #11]
 800645c:	3301      	adds	r3, #1
 800645e:	72fb      	strb	r3, [r7, #11]
      break;
 8006460:	e007      	b.n	8006472 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006462:	6839      	ldr	r1, [r7, #0]
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 fa08 	bl	800687a <USBD_CtlError>
      err++;
 800646a:	7afb      	ldrb	r3, [r7, #11]
 800646c:	3301      	adds	r3, #1
 800646e:	72fb      	strb	r3, [r7, #11]
      break;
 8006470:	bf00      	nop
  }

  if (err != 0U)
 8006472:	7afb      	ldrb	r3, [r7, #11]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d11e      	bne.n	80064b6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	88db      	ldrh	r3, [r3, #6]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d016      	beq.n	80064ae <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006480:	893b      	ldrh	r3, [r7, #8]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00e      	beq.n	80064a4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	88da      	ldrh	r2, [r3, #6]
 800648a:	893b      	ldrh	r3, [r7, #8]
 800648c:	4293      	cmp	r3, r2
 800648e:	bf28      	it	cs
 8006490:	4613      	movcs	r3, r2
 8006492:	b29b      	uxth	r3, r3
 8006494:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006496:	893b      	ldrh	r3, [r7, #8]
 8006498:	461a      	mov	r2, r3
 800649a:	68f9      	ldr	r1, [r7, #12]
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 fa5d 	bl	800695c <USBD_CtlSendData>
 80064a2:	e009      	b.n	80064b8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80064a4:	6839      	ldr	r1, [r7, #0]
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 f9e7 	bl	800687a <USBD_CtlError>
 80064ac:	e004      	b.n	80064b8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 faae 	bl	8006a10 <USBD_CtlSendStatus>
 80064b4:	e000      	b.n	80064b8 <USBD_GetDescriptor+0x2cc>
    return;
 80064b6:	bf00      	nop
  }
}
 80064b8:	3710      	adds	r7, #16
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop

080064c0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	889b      	ldrh	r3, [r3, #4]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d131      	bne.n	8006536 <USBD_SetAddress+0x76>
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	88db      	ldrh	r3, [r3, #6]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d12d      	bne.n	8006536 <USBD_SetAddress+0x76>
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	885b      	ldrh	r3, [r3, #2]
 80064de:	2b7f      	cmp	r3, #127	; 0x7f
 80064e0:	d829      	bhi.n	8006536 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	885b      	ldrh	r3, [r3, #2]
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	2b03      	cmp	r3, #3
 80064f8:	d104      	bne.n	8006504 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80064fa:	6839      	ldr	r1, [r7, #0]
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 f9bc 	bl	800687a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006502:	e01d      	b.n	8006540 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	7bfa      	ldrb	r2, [r7, #15]
 8006508:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800650c:	7bfb      	ldrb	r3, [r7, #15]
 800650e:	4619      	mov	r1, r3
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f004 fee9 	bl	800b2e8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 fa7a 	bl	8006a10 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800651c:	7bfb      	ldrb	r3, [r7, #15]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d004      	beq.n	800652c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2202      	movs	r2, #2
 8006526:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800652a:	e009      	b.n	8006540 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006534:	e004      	b.n	8006540 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006536:	6839      	ldr	r1, [r7, #0]
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 f99e 	bl	800687a <USBD_CtlError>
  }
}
 800653e:	bf00      	nop
 8006540:	bf00      	nop
 8006542:	3710      	adds	r7, #16
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006552:	2300      	movs	r3, #0
 8006554:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	885b      	ldrh	r3, [r3, #2]
 800655a:	b2da      	uxtb	r2, r3
 800655c:	4b4e      	ldr	r3, [pc, #312]	; (8006698 <USBD_SetConfig+0x150>)
 800655e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006560:	4b4d      	ldr	r3, [pc, #308]	; (8006698 <USBD_SetConfig+0x150>)
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	2b01      	cmp	r3, #1
 8006566:	d905      	bls.n	8006574 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006568:	6839      	ldr	r1, [r7, #0]
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f985 	bl	800687a <USBD_CtlError>
    return USBD_FAIL;
 8006570:	2303      	movs	r3, #3
 8006572:	e08c      	b.n	800668e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800657a:	b2db      	uxtb	r3, r3
 800657c:	2b02      	cmp	r3, #2
 800657e:	d002      	beq.n	8006586 <USBD_SetConfig+0x3e>
 8006580:	2b03      	cmp	r3, #3
 8006582:	d029      	beq.n	80065d8 <USBD_SetConfig+0x90>
 8006584:	e075      	b.n	8006672 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006586:	4b44      	ldr	r3, [pc, #272]	; (8006698 <USBD_SetConfig+0x150>)
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d020      	beq.n	80065d0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800658e:	4b42      	ldr	r3, [pc, #264]	; (8006698 <USBD_SetConfig+0x150>)
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	461a      	mov	r2, r3
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006598:	4b3f      	ldr	r3, [pc, #252]	; (8006698 <USBD_SetConfig+0x150>)
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	4619      	mov	r1, r3
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f7fe ffe7 	bl	8005572 <USBD_SetClassConfig>
 80065a4:	4603      	mov	r3, r0
 80065a6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80065a8:	7bfb      	ldrb	r3, [r7, #15]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d008      	beq.n	80065c0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80065ae:	6839      	ldr	r1, [r7, #0]
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 f962 	bl	800687a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2202      	movs	r2, #2
 80065ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80065be:	e065      	b.n	800668c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 fa25 	bl	8006a10 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2203      	movs	r2, #3
 80065ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80065ce:	e05d      	b.n	800668c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 fa1d 	bl	8006a10 <USBD_CtlSendStatus>
      break;
 80065d6:	e059      	b.n	800668c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80065d8:	4b2f      	ldr	r3, [pc, #188]	; (8006698 <USBD_SetConfig+0x150>)
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d112      	bne.n	8006606 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2202      	movs	r2, #2
 80065e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80065e8:	4b2b      	ldr	r3, [pc, #172]	; (8006698 <USBD_SetConfig+0x150>)
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	461a      	mov	r2, r3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80065f2:	4b29      	ldr	r3, [pc, #164]	; (8006698 <USBD_SetConfig+0x150>)
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	4619      	mov	r1, r3
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f7fe ffd6 	bl	80055aa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 fa06 	bl	8006a10 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006604:	e042      	b.n	800668c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006606:	4b24      	ldr	r3, [pc, #144]	; (8006698 <USBD_SetConfig+0x150>)
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	461a      	mov	r2, r3
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	429a      	cmp	r2, r3
 8006612:	d02a      	beq.n	800666a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	b2db      	uxtb	r3, r3
 800661a:	4619      	mov	r1, r3
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f7fe ffc4 	bl	80055aa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006622:	4b1d      	ldr	r3, [pc, #116]	; (8006698 <USBD_SetConfig+0x150>)
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	461a      	mov	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800662c:	4b1a      	ldr	r3, [pc, #104]	; (8006698 <USBD_SetConfig+0x150>)
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	4619      	mov	r1, r3
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f7fe ff9d 	bl	8005572 <USBD_SetClassConfig>
 8006638:	4603      	mov	r3, r0
 800663a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800663c:	7bfb      	ldrb	r3, [r7, #15]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00f      	beq.n	8006662 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006642:	6839      	ldr	r1, [r7, #0]
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 f918 	bl	800687a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	b2db      	uxtb	r3, r3
 8006650:	4619      	mov	r1, r3
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f7fe ffa9 	bl	80055aa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2202      	movs	r2, #2
 800665c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006660:	e014      	b.n	800668c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 f9d4 	bl	8006a10 <USBD_CtlSendStatus>
      break;
 8006668:	e010      	b.n	800668c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 f9d0 	bl	8006a10 <USBD_CtlSendStatus>
      break;
 8006670:	e00c      	b.n	800668c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006672:	6839      	ldr	r1, [r7, #0]
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f000 f900 	bl	800687a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800667a:	4b07      	ldr	r3, [pc, #28]	; (8006698 <USBD_SetConfig+0x150>)
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	4619      	mov	r1, r3
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f7fe ff92 	bl	80055aa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006686:	2303      	movs	r3, #3
 8006688:	73fb      	strb	r3, [r7, #15]
      break;
 800668a:	bf00      	nop
  }

  return ret;
 800668c:	7bfb      	ldrb	r3, [r7, #15]
}
 800668e:	4618      	mov	r0, r3
 8006690:	3710      	adds	r7, #16
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	200001d0 	.word	0x200001d0

0800669c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b082      	sub	sp, #8
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	88db      	ldrh	r3, [r3, #6]
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d004      	beq.n	80066b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80066ae:	6839      	ldr	r1, [r7, #0]
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 f8e2 	bl	800687a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80066b6:	e023      	b.n	8006700 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	2b02      	cmp	r3, #2
 80066c2:	dc02      	bgt.n	80066ca <USBD_GetConfig+0x2e>
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	dc03      	bgt.n	80066d0 <USBD_GetConfig+0x34>
 80066c8:	e015      	b.n	80066f6 <USBD_GetConfig+0x5a>
 80066ca:	2b03      	cmp	r3, #3
 80066cc:	d00b      	beq.n	80066e6 <USBD_GetConfig+0x4a>
 80066ce:	e012      	b.n	80066f6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	3308      	adds	r3, #8
 80066da:	2201      	movs	r2, #1
 80066dc:	4619      	mov	r1, r3
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 f93c 	bl	800695c <USBD_CtlSendData>
        break;
 80066e4:	e00c      	b.n	8006700 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	3304      	adds	r3, #4
 80066ea:	2201      	movs	r2, #1
 80066ec:	4619      	mov	r1, r3
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 f934 	bl	800695c <USBD_CtlSendData>
        break;
 80066f4:	e004      	b.n	8006700 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80066f6:	6839      	ldr	r1, [r7, #0]
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 f8be 	bl	800687a <USBD_CtlError>
        break;
 80066fe:	bf00      	nop
}
 8006700:	bf00      	nop
 8006702:	3708      	adds	r7, #8
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}

08006708 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006718:	b2db      	uxtb	r3, r3
 800671a:	3b01      	subs	r3, #1
 800671c:	2b02      	cmp	r3, #2
 800671e:	d81e      	bhi.n	800675e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	88db      	ldrh	r3, [r3, #6]
 8006724:	2b02      	cmp	r3, #2
 8006726:	d004      	beq.n	8006732 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006728:	6839      	ldr	r1, [r7, #0]
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 f8a5 	bl	800687a <USBD_CtlError>
        break;
 8006730:	e01a      	b.n	8006768 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2201      	movs	r2, #1
 8006736:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800673e:	2b00      	cmp	r3, #0
 8006740:	d005      	beq.n	800674e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	f043 0202 	orr.w	r2, r3, #2
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	330c      	adds	r3, #12
 8006752:	2202      	movs	r2, #2
 8006754:	4619      	mov	r1, r3
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 f900 	bl	800695c <USBD_CtlSendData>
      break;
 800675c:	e004      	b.n	8006768 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800675e:	6839      	ldr	r1, [r7, #0]
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 f88a 	bl	800687a <USBD_CtlError>
      break;
 8006766:	bf00      	nop
  }
}
 8006768:	bf00      	nop
 800676a:	3708      	adds	r7, #8
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	885b      	ldrh	r3, [r3, #2]
 800677e:	2b01      	cmp	r3, #1
 8006780:	d107      	bne.n	8006792 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2201      	movs	r2, #1
 8006786:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 f940 	bl	8006a10 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006790:	e013      	b.n	80067ba <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	885b      	ldrh	r3, [r3, #2]
 8006796:	2b02      	cmp	r3, #2
 8006798:	d10b      	bne.n	80067b2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	889b      	ldrh	r3, [r3, #4]
 800679e:	0a1b      	lsrs	r3, r3, #8
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	b2da      	uxtb	r2, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 f930 	bl	8006a10 <USBD_CtlSendStatus>
}
 80067b0:	e003      	b.n	80067ba <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80067b2:	6839      	ldr	r1, [r7, #0]
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 f860 	bl	800687a <USBD_CtlError>
}
 80067ba:	bf00      	nop
 80067bc:	3708      	adds	r7, #8
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b082      	sub	sp, #8
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
 80067ca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	3b01      	subs	r3, #1
 80067d6:	2b02      	cmp	r3, #2
 80067d8:	d80b      	bhi.n	80067f2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	885b      	ldrh	r3, [r3, #2]
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d10c      	bne.n	80067fc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 f910 	bl	8006a10 <USBD_CtlSendStatus>
      }
      break;
 80067f0:	e004      	b.n	80067fc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80067f2:	6839      	ldr	r1, [r7, #0]
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 f840 	bl	800687a <USBD_CtlError>
      break;
 80067fa:	e000      	b.n	80067fe <USBD_ClrFeature+0x3c>
      break;
 80067fc:	bf00      	nop
  }
}
 80067fe:	bf00      	nop
 8006800:	3708      	adds	r7, #8
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}

08006806 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006806:	b580      	push	{r7, lr}
 8006808:	b084      	sub	sp, #16
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
 800680e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	781a      	ldrb	r2, [r3, #0]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	3301      	adds	r3, #1
 8006820:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	781a      	ldrb	r2, [r3, #0]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	3301      	adds	r3, #1
 800682e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006830:	68f8      	ldr	r0, [r7, #12]
 8006832:	f7ff fa41 	bl	8005cb8 <SWAPBYTE>
 8006836:	4603      	mov	r3, r0
 8006838:	461a      	mov	r2, r3
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	3301      	adds	r3, #1
 8006842:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	3301      	adds	r3, #1
 8006848:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	f7ff fa34 	bl	8005cb8 <SWAPBYTE>
 8006850:	4603      	mov	r3, r0
 8006852:	461a      	mov	r2, r3
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	3301      	adds	r3, #1
 800685c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	3301      	adds	r3, #1
 8006862:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006864:	68f8      	ldr	r0, [r7, #12]
 8006866:	f7ff fa27 	bl	8005cb8 <SWAPBYTE>
 800686a:	4603      	mov	r3, r0
 800686c:	461a      	mov	r2, r3
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	80da      	strh	r2, [r3, #6]
}
 8006872:	bf00      	nop
 8006874:	3710      	adds	r7, #16
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}

0800687a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800687a:	b580      	push	{r7, lr}
 800687c:	b082      	sub	sp, #8
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
 8006882:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006884:	2180      	movs	r1, #128	; 0x80
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f004 fcc4 	bl	800b214 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800688c:	2100      	movs	r1, #0
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f004 fcc0 	bl	800b214 <USBD_LL_StallEP>
}
 8006894:	bf00      	nop
 8006896:	3708      	adds	r7, #8
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b086      	sub	sp, #24
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	60f8      	str	r0, [r7, #12]
 80068a4:	60b9      	str	r1, [r7, #8]
 80068a6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80068a8:	2300      	movs	r3, #0
 80068aa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d036      	beq.n	8006920 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80068b6:	6938      	ldr	r0, [r7, #16]
 80068b8:	f000 f836 	bl	8006928 <USBD_GetLen>
 80068bc:	4603      	mov	r3, r0
 80068be:	3301      	adds	r3, #1
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	005b      	lsls	r3, r3, #1
 80068c4:	b29a      	uxth	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80068ca:	7dfb      	ldrb	r3, [r7, #23]
 80068cc:	68ba      	ldr	r2, [r7, #8]
 80068ce:	4413      	add	r3, r2
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	7812      	ldrb	r2, [r2, #0]
 80068d4:	701a      	strb	r2, [r3, #0]
  idx++;
 80068d6:	7dfb      	ldrb	r3, [r7, #23]
 80068d8:	3301      	adds	r3, #1
 80068da:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80068dc:	7dfb      	ldrb	r3, [r7, #23]
 80068de:	68ba      	ldr	r2, [r7, #8]
 80068e0:	4413      	add	r3, r2
 80068e2:	2203      	movs	r2, #3
 80068e4:	701a      	strb	r2, [r3, #0]
  idx++;
 80068e6:	7dfb      	ldrb	r3, [r7, #23]
 80068e8:	3301      	adds	r3, #1
 80068ea:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80068ec:	e013      	b.n	8006916 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80068ee:	7dfb      	ldrb	r3, [r7, #23]
 80068f0:	68ba      	ldr	r2, [r7, #8]
 80068f2:	4413      	add	r3, r2
 80068f4:	693a      	ldr	r2, [r7, #16]
 80068f6:	7812      	ldrb	r2, [r2, #0]
 80068f8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	3301      	adds	r3, #1
 80068fe:	613b      	str	r3, [r7, #16]
    idx++;
 8006900:	7dfb      	ldrb	r3, [r7, #23]
 8006902:	3301      	adds	r3, #1
 8006904:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006906:	7dfb      	ldrb	r3, [r7, #23]
 8006908:	68ba      	ldr	r2, [r7, #8]
 800690a:	4413      	add	r3, r2
 800690c:	2200      	movs	r2, #0
 800690e:	701a      	strb	r2, [r3, #0]
    idx++;
 8006910:	7dfb      	ldrb	r3, [r7, #23]
 8006912:	3301      	adds	r3, #1
 8006914:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d1e7      	bne.n	80068ee <USBD_GetString+0x52>
 800691e:	e000      	b.n	8006922 <USBD_GetString+0x86>
    return;
 8006920:	bf00      	nop
  }
}
 8006922:	3718      	adds	r7, #24
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006930:	2300      	movs	r3, #0
 8006932:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006938:	e005      	b.n	8006946 <USBD_GetLen+0x1e>
  {
    len++;
 800693a:	7bfb      	ldrb	r3, [r7, #15]
 800693c:	3301      	adds	r3, #1
 800693e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	3301      	adds	r3, #1
 8006944:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d1f5      	bne.n	800693a <USBD_GetLen+0x12>
  }

  return len;
 800694e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006950:	4618      	mov	r0, r3
 8006952:	3714      	adds	r7, #20
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2202      	movs	r2, #2
 800696c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	68ba      	ldr	r2, [r7, #8]
 8006980:	2100      	movs	r1, #0
 8006982:	68f8      	ldr	r0, [r7, #12]
 8006984:	f004 fccf 	bl	800b326 <USBD_LL_Transmit>

  return USBD_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	3710      	adds	r7, #16
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}

08006992 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006992:	b580      	push	{r7, lr}
 8006994:	b084      	sub	sp, #16
 8006996:	af00      	add	r7, sp, #0
 8006998:	60f8      	str	r0, [r7, #12]
 800699a:	60b9      	str	r1, [r7, #8]
 800699c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	68ba      	ldr	r2, [r7, #8]
 80069a2:	2100      	movs	r1, #0
 80069a4:	68f8      	ldr	r0, [r7, #12]
 80069a6:	f004 fcbe 	bl	800b326 <USBD_LL_Transmit>

  return USBD_OK;
 80069aa:	2300      	movs	r3, #0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3710      	adds	r7, #16
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	60b9      	str	r1, [r7, #8]
 80069be:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2203      	movs	r2, #3
 80069c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	68ba      	ldr	r2, [r7, #8]
 80069dc:	2100      	movs	r1, #0
 80069de:	68f8      	ldr	r0, [r7, #12]
 80069e0:	f004 fcc2 	bl	800b368 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3710      	adds	r7, #16
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}

080069ee <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80069ee:	b580      	push	{r7, lr}
 80069f0:	b084      	sub	sp, #16
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	60f8      	str	r0, [r7, #12]
 80069f6:	60b9      	str	r1, [r7, #8]
 80069f8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	68ba      	ldr	r2, [r7, #8]
 80069fe:	2100      	movs	r1, #0
 8006a00:	68f8      	ldr	r0, [r7, #12]
 8006a02:	f004 fcb1 	bl	800b368 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006a06:	2300      	movs	r3, #0
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3710      	adds	r7, #16
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b082      	sub	sp, #8
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2204      	movs	r2, #4
 8006a1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006a20:	2300      	movs	r3, #0
 8006a22:	2200      	movs	r2, #0
 8006a24:	2100      	movs	r1, #0
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f004 fc7d 	bl	800b326 <USBD_LL_Transmit>

  return USBD_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3708      	adds	r7, #8
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b082      	sub	sp, #8
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2205      	movs	r2, #5
 8006a42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a46:	2300      	movs	r3, #0
 8006a48:	2200      	movs	r2, #0
 8006a4a:	2100      	movs	r1, #0
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f004 fc8b 	bl	800b368 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3708      	adds	r7, #8
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <__NVIC_SetPriority>:
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	4603      	mov	r3, r0
 8006a64:	6039      	str	r1, [r7, #0]
 8006a66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	db0a      	blt.n	8006a86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	b2da      	uxtb	r2, r3
 8006a74:	490c      	ldr	r1, [pc, #48]	; (8006aa8 <__NVIC_SetPriority+0x4c>)
 8006a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a7a:	0112      	lsls	r2, r2, #4
 8006a7c:	b2d2      	uxtb	r2, r2
 8006a7e:	440b      	add	r3, r1
 8006a80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006a84:	e00a      	b.n	8006a9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	b2da      	uxtb	r2, r3
 8006a8a:	4908      	ldr	r1, [pc, #32]	; (8006aac <__NVIC_SetPriority+0x50>)
 8006a8c:	79fb      	ldrb	r3, [r7, #7]
 8006a8e:	f003 030f 	and.w	r3, r3, #15
 8006a92:	3b04      	subs	r3, #4
 8006a94:	0112      	lsls	r2, r2, #4
 8006a96:	b2d2      	uxtb	r2, r2
 8006a98:	440b      	add	r3, r1
 8006a9a:	761a      	strb	r2, [r3, #24]
}
 8006a9c:	bf00      	nop
 8006a9e:	370c      	adds	r7, #12
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr
 8006aa8:	e000e100 	.word	0xe000e100
 8006aac:	e000ed00 	.word	0xe000ed00

08006ab0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006ab4:	4b05      	ldr	r3, [pc, #20]	; (8006acc <SysTick_Handler+0x1c>)
 8006ab6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006ab8:	f002 fb22 	bl	8009100 <xTaskGetSchedulerState>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d001      	beq.n	8006ac6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006ac2:	f003 fc31 	bl	800a328 <xPortSysTickHandler>
  }
}
 8006ac6:	bf00      	nop
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	e000e010 	.word	0xe000e010

08006ad0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006ad4:	2100      	movs	r1, #0
 8006ad6:	f06f 0004 	mvn.w	r0, #4
 8006ada:	f7ff ffbf 	bl	8006a5c <__NVIC_SetPriority>
#endif
}
 8006ade:	bf00      	nop
 8006ae0:	bd80      	pop	{r7, pc}
	...

08006ae4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006aea:	f3ef 8305 	mrs	r3, IPSR
 8006aee:	603b      	str	r3, [r7, #0]
  return(result);
 8006af0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d003      	beq.n	8006afe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006af6:	f06f 0305 	mvn.w	r3, #5
 8006afa:	607b      	str	r3, [r7, #4]
 8006afc:	e00c      	b.n	8006b18 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006afe:	4b0a      	ldr	r3, [pc, #40]	; (8006b28 <osKernelInitialize+0x44>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d105      	bne.n	8006b12 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006b06:	4b08      	ldr	r3, [pc, #32]	; (8006b28 <osKernelInitialize+0x44>)
 8006b08:	2201      	movs	r2, #1
 8006b0a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	607b      	str	r3, [r7, #4]
 8006b10:	e002      	b.n	8006b18 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006b12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b16:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006b18:	687b      	ldr	r3, [r7, #4]
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	370c      	adds	r7, #12
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr
 8006b26:	bf00      	nop
 8006b28:	200001d4 	.word	0x200001d4

08006b2c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b32:	f3ef 8305 	mrs	r3, IPSR
 8006b36:	603b      	str	r3, [r7, #0]
  return(result);
 8006b38:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d003      	beq.n	8006b46 <osKernelStart+0x1a>
    stat = osErrorISR;
 8006b3e:	f06f 0305 	mvn.w	r3, #5
 8006b42:	607b      	str	r3, [r7, #4]
 8006b44:	e010      	b.n	8006b68 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006b46:	4b0b      	ldr	r3, [pc, #44]	; (8006b74 <osKernelStart+0x48>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d109      	bne.n	8006b62 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006b4e:	f7ff ffbf 	bl	8006ad0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006b52:	4b08      	ldr	r3, [pc, #32]	; (8006b74 <osKernelStart+0x48>)
 8006b54:	2202      	movs	r2, #2
 8006b56:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006b58:	f001 fe40 	bl	80087dc <vTaskStartScheduler>
      stat = osOK;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	607b      	str	r3, [r7, #4]
 8006b60:	e002      	b.n	8006b68 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006b62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b66:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006b68:	687b      	ldr	r3, [r7, #4]
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3708      	adds	r7, #8
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
 8006b72:	bf00      	nop
 8006b74:	200001d4 	.word	0x200001d4

08006b78 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b08e      	sub	sp, #56	; 0x38
 8006b7c:	af04      	add	r7, sp, #16
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006b84:	2300      	movs	r3, #0
 8006b86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b88:	f3ef 8305 	mrs	r3, IPSR
 8006b8c:	617b      	str	r3, [r7, #20]
  return(result);
 8006b8e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d17e      	bne.n	8006c92 <osThreadNew+0x11a>
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d07b      	beq.n	8006c92 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006b9a:	2380      	movs	r3, #128	; 0x80
 8006b9c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006b9e:	2318      	movs	r3, #24
 8006ba0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006ba6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006baa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d045      	beq.n	8006c3e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d002      	beq.n	8006bc0 <osThreadNew+0x48>
        name = attr->name;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	699b      	ldr	r3, [r3, #24]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d002      	beq.n	8006bce <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	699b      	ldr	r3, [r3, #24]
 8006bcc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d008      	beq.n	8006be6 <osThreadNew+0x6e>
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	2b38      	cmp	r3, #56	; 0x38
 8006bd8:	d805      	bhi.n	8006be6 <osThreadNew+0x6e>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	f003 0301 	and.w	r3, r3, #1
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d001      	beq.n	8006bea <osThreadNew+0x72>
        return (NULL);
 8006be6:	2300      	movs	r3, #0
 8006be8:	e054      	b.n	8006c94 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	695b      	ldr	r3, [r3, #20]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d003      	beq.n	8006bfa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	695b      	ldr	r3, [r3, #20]
 8006bf6:	089b      	lsrs	r3, r3, #2
 8006bf8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d00e      	beq.n	8006c20 <osThreadNew+0xa8>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	2bbb      	cmp	r3, #187	; 0xbb
 8006c08:	d90a      	bls.n	8006c20 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d006      	beq.n	8006c20 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	695b      	ldr	r3, [r3, #20]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d002      	beq.n	8006c20 <osThreadNew+0xa8>
        mem = 1;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	61bb      	str	r3, [r7, #24]
 8006c1e:	e010      	b.n	8006c42 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d10c      	bne.n	8006c42 <osThreadNew+0xca>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d108      	bne.n	8006c42 <osThreadNew+0xca>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	691b      	ldr	r3, [r3, #16]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d104      	bne.n	8006c42 <osThreadNew+0xca>
          mem = 0;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	61bb      	str	r3, [r7, #24]
 8006c3c:	e001      	b.n	8006c42 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d110      	bne.n	8006c6a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006c50:	9202      	str	r2, [sp, #8]
 8006c52:	9301      	str	r3, [sp, #4]
 8006c54:	69fb      	ldr	r3, [r7, #28]
 8006c56:	9300      	str	r3, [sp, #0]
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	6a3a      	ldr	r2, [r7, #32]
 8006c5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c5e:	68f8      	ldr	r0, [r7, #12]
 8006c60:	f001 fc03 	bl	800846a <xTaskCreateStatic>
 8006c64:	4603      	mov	r3, r0
 8006c66:	613b      	str	r3, [r7, #16]
 8006c68:	e013      	b.n	8006c92 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006c6a:	69bb      	ldr	r3, [r7, #24]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d110      	bne.n	8006c92 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006c70:	6a3b      	ldr	r3, [r7, #32]
 8006c72:	b29a      	uxth	r2, r3
 8006c74:	f107 0310 	add.w	r3, r7, #16
 8006c78:	9301      	str	r3, [sp, #4]
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	9300      	str	r3, [sp, #0]
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c82:	68f8      	ldr	r0, [r7, #12]
 8006c84:	f001 fc4e 	bl	8008524 <xTaskCreate>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d001      	beq.n	8006c92 <osThreadNew+0x11a>
            hTask = NULL;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006c92:	693b      	ldr	r3, [r7, #16]
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3728      	adds	r7, #40	; 0x28
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006c9c:	b480      	push	{r7}
 8006c9e:	b085      	sub	sp, #20
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	4a07      	ldr	r2, [pc, #28]	; (8006cc8 <vApplicationGetIdleTaskMemory+0x2c>)
 8006cac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	4a06      	ldr	r2, [pc, #24]	; (8006ccc <vApplicationGetIdleTaskMemory+0x30>)
 8006cb2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2280      	movs	r2, #128	; 0x80
 8006cb8:	601a      	str	r2, [r3, #0]
}
 8006cba:	bf00      	nop
 8006cbc:	3714      	adds	r7, #20
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr
 8006cc6:	bf00      	nop
 8006cc8:	200001d8 	.word	0x200001d8
 8006ccc:	20000294 	.word	0x20000294

08006cd0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006cd0:	b480      	push	{r7}
 8006cd2:	b085      	sub	sp, #20
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	4a07      	ldr	r2, [pc, #28]	; (8006cfc <vApplicationGetTimerTaskMemory+0x2c>)
 8006ce0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	4a06      	ldr	r2, [pc, #24]	; (8006d00 <vApplicationGetTimerTaskMemory+0x30>)
 8006ce6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006cee:	601a      	str	r2, [r3, #0]
}
 8006cf0:	bf00      	nop
 8006cf2:	3714      	adds	r7, #20
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr
 8006cfc:	20000494 	.word	0x20000494
 8006d00:	20000550 	.word	0x20000550

08006d04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f103 0208 	add.w	r2, r3, #8
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f103 0208 	add.w	r2, r3, #8
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f103 0208 	add.w	r2, r3, #8
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006d38:	bf00      	nop
 8006d3a:	370c      	adds	r7, #12
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr

08006d44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006d52:	bf00      	nop
 8006d54:	370c      	adds	r7, #12
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr

08006d5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d5e:	b480      	push	{r7}
 8006d60:	b085      	sub	sp, #20
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
 8006d66:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	68fa      	ldr	r2, [r7, #12]
 8006d72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	689a      	ldr	r2, [r3, #8]
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	683a      	ldr	r2, [r7, #0]
 8006d82:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	683a      	ldr	r2, [r7, #0]
 8006d88:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	1c5a      	adds	r2, r3, #1
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	601a      	str	r2, [r3, #0]
}
 8006d9a:	bf00      	nop
 8006d9c:	3714      	adds	r7, #20
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr

08006da6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006da6:	b480      	push	{r7}
 8006da8:	b085      	sub	sp, #20
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
 8006dae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006dbc:	d103      	bne.n	8006dc6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	60fb      	str	r3, [r7, #12]
 8006dc4:	e00c      	b.n	8006de0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	3308      	adds	r3, #8
 8006dca:	60fb      	str	r3, [r7, #12]
 8006dcc:	e002      	b.n	8006dd4 <vListInsert+0x2e>
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	60fb      	str	r3, [r7, #12]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	68ba      	ldr	r2, [r7, #8]
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d2f6      	bcs.n	8006dce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	685a      	ldr	r2, [r3, #4]
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	683a      	ldr	r2, [r7, #0]
 8006dee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	68fa      	ldr	r2, [r7, #12]
 8006df4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	683a      	ldr	r2, [r7, #0]
 8006dfa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	1c5a      	adds	r2, r3, #1
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	601a      	str	r2, [r3, #0]
}
 8006e0c:	bf00      	nop
 8006e0e:	3714      	adds	r7, #20
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b085      	sub	sp, #20
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	691b      	ldr	r3, [r3, #16]
 8006e24:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	6892      	ldr	r2, [r2, #8]
 8006e2e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	6852      	ldr	r2, [r2, #4]
 8006e38:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d103      	bne.n	8006e4c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	689a      	ldr	r2, [r3, #8]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	1e5a      	subs	r2, r3, #1
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3714      	adds	r7, #20
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d10a      	bne.n	8006e96 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e84:	f383 8811 	msr	BASEPRI, r3
 8006e88:	f3bf 8f6f 	isb	sy
 8006e8c:	f3bf 8f4f 	dsb	sy
 8006e90:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006e92:	bf00      	nop
 8006e94:	e7fe      	b.n	8006e94 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006e96:	f003 f9b5 	bl	800a204 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ea2:	68f9      	ldr	r1, [r7, #12]
 8006ea4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006ea6:	fb01 f303 	mul.w	r3, r1, r3
 8006eaa:	441a      	add	r2, r3
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	68f9      	ldr	r1, [r7, #12]
 8006eca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006ecc:	fb01 f303 	mul.w	r3, r1, r3
 8006ed0:	441a      	add	r2, r3
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	22ff      	movs	r2, #255	; 0xff
 8006eda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	22ff      	movs	r2, #255	; 0xff
 8006ee2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d114      	bne.n	8006f16 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	691b      	ldr	r3, [r3, #16]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d01a      	beq.n	8006f2a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	3310      	adds	r3, #16
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f001 ff09 	bl	8008d10 <xTaskRemoveFromEventList>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d012      	beq.n	8006f2a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006f04:	4b0c      	ldr	r3, [pc, #48]	; (8006f38 <xQueueGenericReset+0xcc>)
 8006f06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f0a:	601a      	str	r2, [r3, #0]
 8006f0c:	f3bf 8f4f 	dsb	sy
 8006f10:	f3bf 8f6f 	isb	sy
 8006f14:	e009      	b.n	8006f2a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	3310      	adds	r3, #16
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f7ff fef2 	bl	8006d04 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	3324      	adds	r3, #36	; 0x24
 8006f24:	4618      	mov	r0, r3
 8006f26:	f7ff feed 	bl	8006d04 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006f2a:	f003 f99b 	bl	800a264 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006f2e:	2301      	movs	r3, #1
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3710      	adds	r7, #16
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}
 8006f38:	e000ed04 	.word	0xe000ed04

08006f3c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b08e      	sub	sp, #56	; 0x38
 8006f40:	af02      	add	r7, sp, #8
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	60b9      	str	r1, [r7, #8]
 8006f46:	607a      	str	r2, [r7, #4]
 8006f48:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d10a      	bne.n	8006f66 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f54:	f383 8811 	msr	BASEPRI, r3
 8006f58:	f3bf 8f6f 	isb	sy
 8006f5c:	f3bf 8f4f 	dsb	sy
 8006f60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006f62:	bf00      	nop
 8006f64:	e7fe      	b.n	8006f64 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d10a      	bne.n	8006f82 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f70:	f383 8811 	msr	BASEPRI, r3
 8006f74:	f3bf 8f6f 	isb	sy
 8006f78:	f3bf 8f4f 	dsb	sy
 8006f7c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006f7e:	bf00      	nop
 8006f80:	e7fe      	b.n	8006f80 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d002      	beq.n	8006f8e <xQueueGenericCreateStatic+0x52>
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d001      	beq.n	8006f92 <xQueueGenericCreateStatic+0x56>
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e000      	b.n	8006f94 <xQueueGenericCreateStatic+0x58>
 8006f92:	2300      	movs	r3, #0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d10a      	bne.n	8006fae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f9c:	f383 8811 	msr	BASEPRI, r3
 8006fa0:	f3bf 8f6f 	isb	sy
 8006fa4:	f3bf 8f4f 	dsb	sy
 8006fa8:	623b      	str	r3, [r7, #32]
}
 8006faa:	bf00      	nop
 8006fac:	e7fe      	b.n	8006fac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d102      	bne.n	8006fba <xQueueGenericCreateStatic+0x7e>
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d101      	bne.n	8006fbe <xQueueGenericCreateStatic+0x82>
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e000      	b.n	8006fc0 <xQueueGenericCreateStatic+0x84>
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d10a      	bne.n	8006fda <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc8:	f383 8811 	msr	BASEPRI, r3
 8006fcc:	f3bf 8f6f 	isb	sy
 8006fd0:	f3bf 8f4f 	dsb	sy
 8006fd4:	61fb      	str	r3, [r7, #28]
}
 8006fd6:	bf00      	nop
 8006fd8:	e7fe      	b.n	8006fd8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006fda:	2350      	movs	r3, #80	; 0x50
 8006fdc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	2b50      	cmp	r3, #80	; 0x50
 8006fe2:	d00a      	beq.n	8006ffa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe8:	f383 8811 	msr	BASEPRI, r3
 8006fec:	f3bf 8f6f 	isb	sy
 8006ff0:	f3bf 8f4f 	dsb	sy
 8006ff4:	61bb      	str	r3, [r7, #24]
}
 8006ff6:	bf00      	nop
 8006ff8:	e7fe      	b.n	8006ff8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006ffa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007002:	2b00      	cmp	r3, #0
 8007004:	d00d      	beq.n	8007022 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007008:	2201      	movs	r2, #1
 800700a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800700e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007014:	9300      	str	r3, [sp, #0]
 8007016:	4613      	mov	r3, r2
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	68b9      	ldr	r1, [r7, #8]
 800701c:	68f8      	ldr	r0, [r7, #12]
 800701e:	f000 f83f 	bl	80070a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007024:	4618      	mov	r0, r3
 8007026:	3730      	adds	r7, #48	; 0x30
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800702c:	b580      	push	{r7, lr}
 800702e:	b08a      	sub	sp, #40	; 0x28
 8007030:	af02      	add	r7, sp, #8
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	60b9      	str	r1, [r7, #8]
 8007036:	4613      	mov	r3, r2
 8007038:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d10a      	bne.n	8007056 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007044:	f383 8811 	msr	BASEPRI, r3
 8007048:	f3bf 8f6f 	isb	sy
 800704c:	f3bf 8f4f 	dsb	sy
 8007050:	613b      	str	r3, [r7, #16]
}
 8007052:	bf00      	nop
 8007054:	e7fe      	b.n	8007054 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	68ba      	ldr	r2, [r7, #8]
 800705a:	fb02 f303 	mul.w	r3, r2, r3
 800705e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007060:	69fb      	ldr	r3, [r7, #28]
 8007062:	3350      	adds	r3, #80	; 0x50
 8007064:	4618      	mov	r0, r3
 8007066:	f003 f9ef 	bl	800a448 <pvPortMalloc>
 800706a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d011      	beq.n	8007096 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007072:	69bb      	ldr	r3, [r7, #24]
 8007074:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	3350      	adds	r3, #80	; 0x50
 800707a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	2200      	movs	r2, #0
 8007080:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007084:	79fa      	ldrb	r2, [r7, #7]
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	9300      	str	r3, [sp, #0]
 800708a:	4613      	mov	r3, r2
 800708c:	697a      	ldr	r2, [r7, #20]
 800708e:	68b9      	ldr	r1, [r7, #8]
 8007090:	68f8      	ldr	r0, [r7, #12]
 8007092:	f000 f805 	bl	80070a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007096:	69bb      	ldr	r3, [r7, #24]
	}
 8007098:	4618      	mov	r0, r3
 800709a:	3720      	adds	r7, #32
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	607a      	str	r2, [r7, #4]
 80070ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d103      	bne.n	80070bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	69ba      	ldr	r2, [r7, #24]
 80070b8:	601a      	str	r2, [r3, #0]
 80070ba:	e002      	b.n	80070c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80070bc:	69bb      	ldr	r3, [r7, #24]
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	68fa      	ldr	r2, [r7, #12]
 80070c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80070c8:	69bb      	ldr	r3, [r7, #24]
 80070ca:	68ba      	ldr	r2, [r7, #8]
 80070cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80070ce:	2101      	movs	r1, #1
 80070d0:	69b8      	ldr	r0, [r7, #24]
 80070d2:	f7ff fecb 	bl	8006e6c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	78fa      	ldrb	r2, [r7, #3]
 80070da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80070de:	bf00      	nop
 80070e0:	3710      	adds	r7, #16
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}

080070e6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80070e6:	b580      	push	{r7, lr}
 80070e8:	b082      	sub	sp, #8
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d00e      	beq.n	8007112 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007106:	2300      	movs	r3, #0
 8007108:	2200      	movs	r2, #0
 800710a:	2100      	movs	r1, #0
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 f81d 	bl	800714c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007112:	bf00      	nop
 8007114:	3708      	adds	r7, #8
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}

0800711a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800711a:	b580      	push	{r7, lr}
 800711c:	b086      	sub	sp, #24
 800711e:	af00      	add	r7, sp, #0
 8007120:	4603      	mov	r3, r0
 8007122:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007124:	2301      	movs	r3, #1
 8007126:	617b      	str	r3, [r7, #20]
 8007128:	2300      	movs	r3, #0
 800712a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800712c:	79fb      	ldrb	r3, [r7, #7]
 800712e:	461a      	mov	r2, r3
 8007130:	6939      	ldr	r1, [r7, #16]
 8007132:	6978      	ldr	r0, [r7, #20]
 8007134:	f7ff ff7a 	bl	800702c <xQueueGenericCreate>
 8007138:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800713a:	68f8      	ldr	r0, [r7, #12]
 800713c:	f7ff ffd3 	bl	80070e6 <prvInitialiseMutex>

		return xNewQueue;
 8007140:	68fb      	ldr	r3, [r7, #12]
	}
 8007142:	4618      	mov	r0, r3
 8007144:	3718      	adds	r7, #24
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
	...

0800714c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b08e      	sub	sp, #56	; 0x38
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	607a      	str	r2, [r7, #4]
 8007158:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800715a:	2300      	movs	r3, #0
 800715c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007164:	2b00      	cmp	r3, #0
 8007166:	d10a      	bne.n	800717e <xQueueGenericSend+0x32>
	__asm volatile
 8007168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800716c:	f383 8811 	msr	BASEPRI, r3
 8007170:	f3bf 8f6f 	isb	sy
 8007174:	f3bf 8f4f 	dsb	sy
 8007178:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800717a:	bf00      	nop
 800717c:	e7fe      	b.n	800717c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d103      	bne.n	800718c <xQueueGenericSend+0x40>
 8007184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007188:	2b00      	cmp	r3, #0
 800718a:	d101      	bne.n	8007190 <xQueueGenericSend+0x44>
 800718c:	2301      	movs	r3, #1
 800718e:	e000      	b.n	8007192 <xQueueGenericSend+0x46>
 8007190:	2300      	movs	r3, #0
 8007192:	2b00      	cmp	r3, #0
 8007194:	d10a      	bne.n	80071ac <xQueueGenericSend+0x60>
	__asm volatile
 8007196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800719a:	f383 8811 	msr	BASEPRI, r3
 800719e:	f3bf 8f6f 	isb	sy
 80071a2:	f3bf 8f4f 	dsb	sy
 80071a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80071a8:	bf00      	nop
 80071aa:	e7fe      	b.n	80071aa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	2b02      	cmp	r3, #2
 80071b0:	d103      	bne.n	80071ba <xQueueGenericSend+0x6e>
 80071b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d101      	bne.n	80071be <xQueueGenericSend+0x72>
 80071ba:	2301      	movs	r3, #1
 80071bc:	e000      	b.n	80071c0 <xQueueGenericSend+0x74>
 80071be:	2300      	movs	r3, #0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d10a      	bne.n	80071da <xQueueGenericSend+0x8e>
	__asm volatile
 80071c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c8:	f383 8811 	msr	BASEPRI, r3
 80071cc:	f3bf 8f6f 	isb	sy
 80071d0:	f3bf 8f4f 	dsb	sy
 80071d4:	623b      	str	r3, [r7, #32]
}
 80071d6:	bf00      	nop
 80071d8:	e7fe      	b.n	80071d8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80071da:	f001 ff91 	bl	8009100 <xTaskGetSchedulerState>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d102      	bne.n	80071ea <xQueueGenericSend+0x9e>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d101      	bne.n	80071ee <xQueueGenericSend+0xa2>
 80071ea:	2301      	movs	r3, #1
 80071ec:	e000      	b.n	80071f0 <xQueueGenericSend+0xa4>
 80071ee:	2300      	movs	r3, #0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d10a      	bne.n	800720a <xQueueGenericSend+0xbe>
	__asm volatile
 80071f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f8:	f383 8811 	msr	BASEPRI, r3
 80071fc:	f3bf 8f6f 	isb	sy
 8007200:	f3bf 8f4f 	dsb	sy
 8007204:	61fb      	str	r3, [r7, #28]
}
 8007206:	bf00      	nop
 8007208:	e7fe      	b.n	8007208 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800720a:	f002 fffb 	bl	800a204 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800720e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007210:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007216:	429a      	cmp	r2, r3
 8007218:	d302      	bcc.n	8007220 <xQueueGenericSend+0xd4>
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	2b02      	cmp	r3, #2
 800721e:	d129      	bne.n	8007274 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007220:	683a      	ldr	r2, [r7, #0]
 8007222:	68b9      	ldr	r1, [r7, #8]
 8007224:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007226:	f000 fbbb 	bl	80079a0 <prvCopyDataToQueue>
 800722a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800722c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007230:	2b00      	cmp	r3, #0
 8007232:	d010      	beq.n	8007256 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007236:	3324      	adds	r3, #36	; 0x24
 8007238:	4618      	mov	r0, r3
 800723a:	f001 fd69 	bl	8008d10 <xTaskRemoveFromEventList>
 800723e:	4603      	mov	r3, r0
 8007240:	2b00      	cmp	r3, #0
 8007242:	d013      	beq.n	800726c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007244:	4b3f      	ldr	r3, [pc, #252]	; (8007344 <xQueueGenericSend+0x1f8>)
 8007246:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800724a:	601a      	str	r2, [r3, #0]
 800724c:	f3bf 8f4f 	dsb	sy
 8007250:	f3bf 8f6f 	isb	sy
 8007254:	e00a      	b.n	800726c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007258:	2b00      	cmp	r3, #0
 800725a:	d007      	beq.n	800726c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800725c:	4b39      	ldr	r3, [pc, #228]	; (8007344 <xQueueGenericSend+0x1f8>)
 800725e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007262:	601a      	str	r2, [r3, #0]
 8007264:	f3bf 8f4f 	dsb	sy
 8007268:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800726c:	f002 fffa 	bl	800a264 <vPortExitCritical>
				return pdPASS;
 8007270:	2301      	movs	r3, #1
 8007272:	e063      	b.n	800733c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d103      	bne.n	8007282 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800727a:	f002 fff3 	bl	800a264 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800727e:	2300      	movs	r3, #0
 8007280:	e05c      	b.n	800733c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007284:	2b00      	cmp	r3, #0
 8007286:	d106      	bne.n	8007296 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007288:	f107 0314 	add.w	r3, r7, #20
 800728c:	4618      	mov	r0, r3
 800728e:	f001 fdc9 	bl	8008e24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007292:	2301      	movs	r3, #1
 8007294:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007296:	f002 ffe5 	bl	800a264 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800729a:	f001 fb0f 	bl	80088bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800729e:	f002 ffb1 	bl	800a204 <vPortEnterCritical>
 80072a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80072a8:	b25b      	sxtb	r3, r3
 80072aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072ae:	d103      	bne.n	80072b8 <xQueueGenericSend+0x16c>
 80072b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b2:	2200      	movs	r2, #0
 80072b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072be:	b25b      	sxtb	r3, r3
 80072c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072c4:	d103      	bne.n	80072ce <xQueueGenericSend+0x182>
 80072c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c8:	2200      	movs	r2, #0
 80072ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072ce:	f002 ffc9 	bl	800a264 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80072d2:	1d3a      	adds	r2, r7, #4
 80072d4:	f107 0314 	add.w	r3, r7, #20
 80072d8:	4611      	mov	r1, r2
 80072da:	4618      	mov	r0, r3
 80072dc:	f001 fdb8 	bl	8008e50 <xTaskCheckForTimeOut>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d124      	bne.n	8007330 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80072e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072e8:	f000 fc52 	bl	8007b90 <prvIsQueueFull>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d018      	beq.n	8007324 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80072f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f4:	3310      	adds	r3, #16
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	4611      	mov	r1, r2
 80072fa:	4618      	mov	r0, r3
 80072fc:	f001 fcb8 	bl	8008c70 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007300:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007302:	f000 fbdd 	bl	8007ac0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007306:	f001 fae7 	bl	80088d8 <xTaskResumeAll>
 800730a:	4603      	mov	r3, r0
 800730c:	2b00      	cmp	r3, #0
 800730e:	f47f af7c 	bne.w	800720a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007312:	4b0c      	ldr	r3, [pc, #48]	; (8007344 <xQueueGenericSend+0x1f8>)
 8007314:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007318:	601a      	str	r2, [r3, #0]
 800731a:	f3bf 8f4f 	dsb	sy
 800731e:	f3bf 8f6f 	isb	sy
 8007322:	e772      	b.n	800720a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007324:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007326:	f000 fbcb 	bl	8007ac0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800732a:	f001 fad5 	bl	80088d8 <xTaskResumeAll>
 800732e:	e76c      	b.n	800720a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007330:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007332:	f000 fbc5 	bl	8007ac0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007336:	f001 facf 	bl	80088d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800733a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800733c:	4618      	mov	r0, r3
 800733e:	3738      	adds	r7, #56	; 0x38
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}
 8007344:	e000ed04 	.word	0xe000ed04

08007348 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b090      	sub	sp, #64	; 0x40
 800734c:	af00      	add	r7, sp, #0
 800734e:	60f8      	str	r0, [r7, #12]
 8007350:	60b9      	str	r1, [r7, #8]
 8007352:	607a      	str	r2, [r7, #4]
 8007354:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800735a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800735c:	2b00      	cmp	r3, #0
 800735e:	d10a      	bne.n	8007376 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007364:	f383 8811 	msr	BASEPRI, r3
 8007368:	f3bf 8f6f 	isb	sy
 800736c:	f3bf 8f4f 	dsb	sy
 8007370:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007372:	bf00      	nop
 8007374:	e7fe      	b.n	8007374 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d103      	bne.n	8007384 <xQueueGenericSendFromISR+0x3c>
 800737c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800737e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007380:	2b00      	cmp	r3, #0
 8007382:	d101      	bne.n	8007388 <xQueueGenericSendFromISR+0x40>
 8007384:	2301      	movs	r3, #1
 8007386:	e000      	b.n	800738a <xQueueGenericSendFromISR+0x42>
 8007388:	2300      	movs	r3, #0
 800738a:	2b00      	cmp	r3, #0
 800738c:	d10a      	bne.n	80073a4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800738e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007392:	f383 8811 	msr	BASEPRI, r3
 8007396:	f3bf 8f6f 	isb	sy
 800739a:	f3bf 8f4f 	dsb	sy
 800739e:	627b      	str	r3, [r7, #36]	; 0x24
}
 80073a0:	bf00      	nop
 80073a2:	e7fe      	b.n	80073a2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	2b02      	cmp	r3, #2
 80073a8:	d103      	bne.n	80073b2 <xQueueGenericSendFromISR+0x6a>
 80073aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d101      	bne.n	80073b6 <xQueueGenericSendFromISR+0x6e>
 80073b2:	2301      	movs	r3, #1
 80073b4:	e000      	b.n	80073b8 <xQueueGenericSendFromISR+0x70>
 80073b6:	2300      	movs	r3, #0
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d10a      	bne.n	80073d2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80073bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c0:	f383 8811 	msr	BASEPRI, r3
 80073c4:	f3bf 8f6f 	isb	sy
 80073c8:	f3bf 8f4f 	dsb	sy
 80073cc:	623b      	str	r3, [r7, #32]
}
 80073ce:	bf00      	nop
 80073d0:	e7fe      	b.n	80073d0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80073d2:	f002 fff9 	bl	800a3c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80073d6:	f3ef 8211 	mrs	r2, BASEPRI
 80073da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073de:	f383 8811 	msr	BASEPRI, r3
 80073e2:	f3bf 8f6f 	isb	sy
 80073e6:	f3bf 8f4f 	dsb	sy
 80073ea:	61fa      	str	r2, [r7, #28]
 80073ec:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80073ee:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80073f0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80073f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d302      	bcc.n	8007404 <xQueueGenericSendFromISR+0xbc>
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	2b02      	cmp	r3, #2
 8007402:	d12f      	bne.n	8007464 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007406:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800740a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800740e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007412:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007414:	683a      	ldr	r2, [r7, #0]
 8007416:	68b9      	ldr	r1, [r7, #8]
 8007418:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800741a:	f000 fac1 	bl	80079a0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800741e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007422:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007426:	d112      	bne.n	800744e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800742a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742c:	2b00      	cmp	r3, #0
 800742e:	d016      	beq.n	800745e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007432:	3324      	adds	r3, #36	; 0x24
 8007434:	4618      	mov	r0, r3
 8007436:	f001 fc6b 	bl	8008d10 <xTaskRemoveFromEventList>
 800743a:	4603      	mov	r3, r0
 800743c:	2b00      	cmp	r3, #0
 800743e:	d00e      	beq.n	800745e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d00b      	beq.n	800745e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2201      	movs	r2, #1
 800744a:	601a      	str	r2, [r3, #0]
 800744c:	e007      	b.n	800745e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800744e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007452:	3301      	adds	r3, #1
 8007454:	b2db      	uxtb	r3, r3
 8007456:	b25a      	sxtb	r2, r3
 8007458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800745a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800745e:	2301      	movs	r3, #1
 8007460:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007462:	e001      	b.n	8007468 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007464:	2300      	movs	r3, #0
 8007466:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800746a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007472:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007476:	4618      	mov	r0, r3
 8007478:	3740      	adds	r7, #64	; 0x40
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}

0800747e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800747e:	b580      	push	{r7, lr}
 8007480:	b08e      	sub	sp, #56	; 0x38
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
 8007486:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800748c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800748e:	2b00      	cmp	r3, #0
 8007490:	d10a      	bne.n	80074a8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8007492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007496:	f383 8811 	msr	BASEPRI, r3
 800749a:	f3bf 8f6f 	isb	sy
 800749e:	f3bf 8f4f 	dsb	sy
 80074a2:	623b      	str	r3, [r7, #32]
}
 80074a4:	bf00      	nop
 80074a6:	e7fe      	b.n	80074a6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80074a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00a      	beq.n	80074c6 <xQueueGiveFromISR+0x48>
	__asm volatile
 80074b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b4:	f383 8811 	msr	BASEPRI, r3
 80074b8:	f3bf 8f6f 	isb	sy
 80074bc:	f3bf 8f4f 	dsb	sy
 80074c0:	61fb      	str	r3, [r7, #28]
}
 80074c2:	bf00      	nop
 80074c4:	e7fe      	b.n	80074c4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80074c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d103      	bne.n	80074d6 <xQueueGiveFromISR+0x58>
 80074ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d101      	bne.n	80074da <xQueueGiveFromISR+0x5c>
 80074d6:	2301      	movs	r3, #1
 80074d8:	e000      	b.n	80074dc <xQueueGiveFromISR+0x5e>
 80074da:	2300      	movs	r3, #0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d10a      	bne.n	80074f6 <xQueueGiveFromISR+0x78>
	__asm volatile
 80074e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e4:	f383 8811 	msr	BASEPRI, r3
 80074e8:	f3bf 8f6f 	isb	sy
 80074ec:	f3bf 8f4f 	dsb	sy
 80074f0:	61bb      	str	r3, [r7, #24]
}
 80074f2:	bf00      	nop
 80074f4:	e7fe      	b.n	80074f4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80074f6:	f002 ff67 	bl	800a3c8 <vPortValidateInterruptPriority>
	__asm volatile
 80074fa:	f3ef 8211 	mrs	r2, BASEPRI
 80074fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007502:	f383 8811 	msr	BASEPRI, r3
 8007506:	f3bf 8f6f 	isb	sy
 800750a:	f3bf 8f4f 	dsb	sy
 800750e:	617a      	str	r2, [r7, #20]
 8007510:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007512:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007514:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800751a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800751c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007520:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007522:	429a      	cmp	r2, r3
 8007524:	d22b      	bcs.n	800757e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007528:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800752c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007532:	1c5a      	adds	r2, r3, #1
 8007534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007536:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007538:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800753c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007540:	d112      	bne.n	8007568 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007546:	2b00      	cmp	r3, #0
 8007548:	d016      	beq.n	8007578 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800754a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754c:	3324      	adds	r3, #36	; 0x24
 800754e:	4618      	mov	r0, r3
 8007550:	f001 fbde 	bl	8008d10 <xTaskRemoveFromEventList>
 8007554:	4603      	mov	r3, r0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d00e      	beq.n	8007578 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d00b      	beq.n	8007578 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	2201      	movs	r2, #1
 8007564:	601a      	str	r2, [r3, #0]
 8007566:	e007      	b.n	8007578 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007568:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800756c:	3301      	adds	r3, #1
 800756e:	b2db      	uxtb	r3, r3
 8007570:	b25a      	sxtb	r2, r3
 8007572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007578:	2301      	movs	r3, #1
 800757a:	637b      	str	r3, [r7, #52]	; 0x34
 800757c:	e001      	b.n	8007582 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800757e:	2300      	movs	r3, #0
 8007580:	637b      	str	r3, [r7, #52]	; 0x34
 8007582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007584:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	f383 8811 	msr	BASEPRI, r3
}
 800758c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800758e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007590:	4618      	mov	r0, r3
 8007592:	3738      	adds	r7, #56	; 0x38
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b08c      	sub	sp, #48	; 0x30
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80075a4:	2300      	movs	r3, #0
 80075a6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80075ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d10a      	bne.n	80075c8 <xQueueReceive+0x30>
	__asm volatile
 80075b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b6:	f383 8811 	msr	BASEPRI, r3
 80075ba:	f3bf 8f6f 	isb	sy
 80075be:	f3bf 8f4f 	dsb	sy
 80075c2:	623b      	str	r3, [r7, #32]
}
 80075c4:	bf00      	nop
 80075c6:	e7fe      	b.n	80075c6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d103      	bne.n	80075d6 <xQueueReceive+0x3e>
 80075ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d101      	bne.n	80075da <xQueueReceive+0x42>
 80075d6:	2301      	movs	r3, #1
 80075d8:	e000      	b.n	80075dc <xQueueReceive+0x44>
 80075da:	2300      	movs	r3, #0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d10a      	bne.n	80075f6 <xQueueReceive+0x5e>
	__asm volatile
 80075e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e4:	f383 8811 	msr	BASEPRI, r3
 80075e8:	f3bf 8f6f 	isb	sy
 80075ec:	f3bf 8f4f 	dsb	sy
 80075f0:	61fb      	str	r3, [r7, #28]
}
 80075f2:	bf00      	nop
 80075f4:	e7fe      	b.n	80075f4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80075f6:	f001 fd83 	bl	8009100 <xTaskGetSchedulerState>
 80075fa:	4603      	mov	r3, r0
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d102      	bne.n	8007606 <xQueueReceive+0x6e>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d101      	bne.n	800760a <xQueueReceive+0x72>
 8007606:	2301      	movs	r3, #1
 8007608:	e000      	b.n	800760c <xQueueReceive+0x74>
 800760a:	2300      	movs	r3, #0
 800760c:	2b00      	cmp	r3, #0
 800760e:	d10a      	bne.n	8007626 <xQueueReceive+0x8e>
	__asm volatile
 8007610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007614:	f383 8811 	msr	BASEPRI, r3
 8007618:	f3bf 8f6f 	isb	sy
 800761c:	f3bf 8f4f 	dsb	sy
 8007620:	61bb      	str	r3, [r7, #24]
}
 8007622:	bf00      	nop
 8007624:	e7fe      	b.n	8007624 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007626:	f002 fded 	bl	800a204 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800762a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800762c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800762e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007632:	2b00      	cmp	r3, #0
 8007634:	d01f      	beq.n	8007676 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007636:	68b9      	ldr	r1, [r7, #8]
 8007638:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800763a:	f000 fa1b 	bl	8007a74 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800763e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007640:	1e5a      	subs	r2, r3, #1
 8007642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007644:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007648:	691b      	ldr	r3, [r3, #16]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d00f      	beq.n	800766e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800764e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007650:	3310      	adds	r3, #16
 8007652:	4618      	mov	r0, r3
 8007654:	f001 fb5c 	bl	8008d10 <xTaskRemoveFromEventList>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d007      	beq.n	800766e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800765e:	4b3d      	ldr	r3, [pc, #244]	; (8007754 <xQueueReceive+0x1bc>)
 8007660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007664:	601a      	str	r2, [r3, #0]
 8007666:	f3bf 8f4f 	dsb	sy
 800766a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800766e:	f002 fdf9 	bl	800a264 <vPortExitCritical>
				return pdPASS;
 8007672:	2301      	movs	r3, #1
 8007674:	e069      	b.n	800774a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d103      	bne.n	8007684 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800767c:	f002 fdf2 	bl	800a264 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007680:	2300      	movs	r3, #0
 8007682:	e062      	b.n	800774a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007686:	2b00      	cmp	r3, #0
 8007688:	d106      	bne.n	8007698 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800768a:	f107 0310 	add.w	r3, r7, #16
 800768e:	4618      	mov	r0, r3
 8007690:	f001 fbc8 	bl	8008e24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007694:	2301      	movs	r3, #1
 8007696:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007698:	f002 fde4 	bl	800a264 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800769c:	f001 f90e 	bl	80088bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80076a0:	f002 fdb0 	bl	800a204 <vPortEnterCritical>
 80076a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80076aa:	b25b      	sxtb	r3, r3
 80076ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076b0:	d103      	bne.n	80076ba <xQueueReceive+0x122>
 80076b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b4:	2200      	movs	r2, #0
 80076b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076c0:	b25b      	sxtb	r3, r3
 80076c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076c6:	d103      	bne.n	80076d0 <xQueueReceive+0x138>
 80076c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ca:	2200      	movs	r2, #0
 80076cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80076d0:	f002 fdc8 	bl	800a264 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80076d4:	1d3a      	adds	r2, r7, #4
 80076d6:	f107 0310 	add.w	r3, r7, #16
 80076da:	4611      	mov	r1, r2
 80076dc:	4618      	mov	r0, r3
 80076de:	f001 fbb7 	bl	8008e50 <xTaskCheckForTimeOut>
 80076e2:	4603      	mov	r3, r0
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d123      	bne.n	8007730 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80076e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076ea:	f000 fa3b 	bl	8007b64 <prvIsQueueEmpty>
 80076ee:	4603      	mov	r3, r0
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d017      	beq.n	8007724 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80076f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f6:	3324      	adds	r3, #36	; 0x24
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	4611      	mov	r1, r2
 80076fc:	4618      	mov	r0, r3
 80076fe:	f001 fab7 	bl	8008c70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007702:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007704:	f000 f9dc 	bl	8007ac0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007708:	f001 f8e6 	bl	80088d8 <xTaskResumeAll>
 800770c:	4603      	mov	r3, r0
 800770e:	2b00      	cmp	r3, #0
 8007710:	d189      	bne.n	8007626 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007712:	4b10      	ldr	r3, [pc, #64]	; (8007754 <xQueueReceive+0x1bc>)
 8007714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007718:	601a      	str	r2, [r3, #0]
 800771a:	f3bf 8f4f 	dsb	sy
 800771e:	f3bf 8f6f 	isb	sy
 8007722:	e780      	b.n	8007626 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007724:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007726:	f000 f9cb 	bl	8007ac0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800772a:	f001 f8d5 	bl	80088d8 <xTaskResumeAll>
 800772e:	e77a      	b.n	8007626 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007730:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007732:	f000 f9c5 	bl	8007ac0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007736:	f001 f8cf 	bl	80088d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800773a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800773c:	f000 fa12 	bl	8007b64 <prvIsQueueEmpty>
 8007740:	4603      	mov	r3, r0
 8007742:	2b00      	cmp	r3, #0
 8007744:	f43f af6f 	beq.w	8007626 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007748:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800774a:	4618      	mov	r0, r3
 800774c:	3730      	adds	r7, #48	; 0x30
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
 8007752:	bf00      	nop
 8007754:	e000ed04 	.word	0xe000ed04

08007758 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b08e      	sub	sp, #56	; 0x38
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007762:	2300      	movs	r3, #0
 8007764:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800776a:	2300      	movs	r3, #0
 800776c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800776e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007770:	2b00      	cmp	r3, #0
 8007772:	d10a      	bne.n	800778a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007778:	f383 8811 	msr	BASEPRI, r3
 800777c:	f3bf 8f6f 	isb	sy
 8007780:	f3bf 8f4f 	dsb	sy
 8007784:	623b      	str	r3, [r7, #32]
}
 8007786:	bf00      	nop
 8007788:	e7fe      	b.n	8007788 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800778a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800778c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800778e:	2b00      	cmp	r3, #0
 8007790:	d00a      	beq.n	80077a8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007796:	f383 8811 	msr	BASEPRI, r3
 800779a:	f3bf 8f6f 	isb	sy
 800779e:	f3bf 8f4f 	dsb	sy
 80077a2:	61fb      	str	r3, [r7, #28]
}
 80077a4:	bf00      	nop
 80077a6:	e7fe      	b.n	80077a6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80077a8:	f001 fcaa 	bl	8009100 <xTaskGetSchedulerState>
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d102      	bne.n	80077b8 <xQueueSemaphoreTake+0x60>
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d101      	bne.n	80077bc <xQueueSemaphoreTake+0x64>
 80077b8:	2301      	movs	r3, #1
 80077ba:	e000      	b.n	80077be <xQueueSemaphoreTake+0x66>
 80077bc:	2300      	movs	r3, #0
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d10a      	bne.n	80077d8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80077c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c6:	f383 8811 	msr	BASEPRI, r3
 80077ca:	f3bf 8f6f 	isb	sy
 80077ce:	f3bf 8f4f 	dsb	sy
 80077d2:	61bb      	str	r3, [r7, #24]
}
 80077d4:	bf00      	nop
 80077d6:	e7fe      	b.n	80077d6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80077d8:	f002 fd14 	bl	800a204 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80077dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80077e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d024      	beq.n	8007832 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80077e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ea:	1e5a      	subs	r2, r3, #1
 80077ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ee:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80077f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d104      	bne.n	8007802 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80077f8:	f001 fdf8 	bl	80093ec <pvTaskIncrementMutexHeldCount>
 80077fc:	4602      	mov	r2, r0
 80077fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007800:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007804:	691b      	ldr	r3, [r3, #16]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d00f      	beq.n	800782a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800780a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800780c:	3310      	adds	r3, #16
 800780e:	4618      	mov	r0, r3
 8007810:	f001 fa7e 	bl	8008d10 <xTaskRemoveFromEventList>
 8007814:	4603      	mov	r3, r0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d007      	beq.n	800782a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800781a:	4b54      	ldr	r3, [pc, #336]	; (800796c <xQueueSemaphoreTake+0x214>)
 800781c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007820:	601a      	str	r2, [r3, #0]
 8007822:	f3bf 8f4f 	dsb	sy
 8007826:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800782a:	f002 fd1b 	bl	800a264 <vPortExitCritical>
				return pdPASS;
 800782e:	2301      	movs	r3, #1
 8007830:	e097      	b.n	8007962 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d111      	bne.n	800785c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783a:	2b00      	cmp	r3, #0
 800783c:	d00a      	beq.n	8007854 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800783e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007842:	f383 8811 	msr	BASEPRI, r3
 8007846:	f3bf 8f6f 	isb	sy
 800784a:	f3bf 8f4f 	dsb	sy
 800784e:	617b      	str	r3, [r7, #20]
}
 8007850:	bf00      	nop
 8007852:	e7fe      	b.n	8007852 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007854:	f002 fd06 	bl	800a264 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007858:	2300      	movs	r3, #0
 800785a:	e082      	b.n	8007962 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800785c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800785e:	2b00      	cmp	r3, #0
 8007860:	d106      	bne.n	8007870 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007862:	f107 030c 	add.w	r3, r7, #12
 8007866:	4618      	mov	r0, r3
 8007868:	f001 fadc 	bl	8008e24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800786c:	2301      	movs	r3, #1
 800786e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007870:	f002 fcf8 	bl	800a264 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007874:	f001 f822 	bl	80088bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007878:	f002 fcc4 	bl	800a204 <vPortEnterCritical>
 800787c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800787e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007882:	b25b      	sxtb	r3, r3
 8007884:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007888:	d103      	bne.n	8007892 <xQueueSemaphoreTake+0x13a>
 800788a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800788c:	2200      	movs	r2, #0
 800788e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007894:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007898:	b25b      	sxtb	r3, r3
 800789a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800789e:	d103      	bne.n	80078a8 <xQueueSemaphoreTake+0x150>
 80078a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a2:	2200      	movs	r2, #0
 80078a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078a8:	f002 fcdc 	bl	800a264 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80078ac:	463a      	mov	r2, r7
 80078ae:	f107 030c 	add.w	r3, r7, #12
 80078b2:	4611      	mov	r1, r2
 80078b4:	4618      	mov	r0, r3
 80078b6:	f001 facb 	bl	8008e50 <xTaskCheckForTimeOut>
 80078ba:	4603      	mov	r3, r0
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d132      	bne.n	8007926 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80078c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80078c2:	f000 f94f 	bl	8007b64 <prvIsQueueEmpty>
 80078c6:	4603      	mov	r3, r0
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d026      	beq.n	800791a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80078cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d109      	bne.n	80078e8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80078d4:	f002 fc96 	bl	800a204 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80078d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	4618      	mov	r0, r3
 80078de:	f001 fc2d 	bl	800913c <xTaskPriorityInherit>
 80078e2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80078e4:	f002 fcbe 	bl	800a264 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80078e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ea:	3324      	adds	r3, #36	; 0x24
 80078ec:	683a      	ldr	r2, [r7, #0]
 80078ee:	4611      	mov	r1, r2
 80078f0:	4618      	mov	r0, r3
 80078f2:	f001 f9bd 	bl	8008c70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80078f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80078f8:	f000 f8e2 	bl	8007ac0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80078fc:	f000 ffec 	bl	80088d8 <xTaskResumeAll>
 8007900:	4603      	mov	r3, r0
 8007902:	2b00      	cmp	r3, #0
 8007904:	f47f af68 	bne.w	80077d8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007908:	4b18      	ldr	r3, [pc, #96]	; (800796c <xQueueSemaphoreTake+0x214>)
 800790a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800790e:	601a      	str	r2, [r3, #0]
 8007910:	f3bf 8f4f 	dsb	sy
 8007914:	f3bf 8f6f 	isb	sy
 8007918:	e75e      	b.n	80077d8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800791a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800791c:	f000 f8d0 	bl	8007ac0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007920:	f000 ffda 	bl	80088d8 <xTaskResumeAll>
 8007924:	e758      	b.n	80077d8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007926:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007928:	f000 f8ca 	bl	8007ac0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800792c:	f000 ffd4 	bl	80088d8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007930:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007932:	f000 f917 	bl	8007b64 <prvIsQueueEmpty>
 8007936:	4603      	mov	r3, r0
 8007938:	2b00      	cmp	r3, #0
 800793a:	f43f af4d 	beq.w	80077d8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800793e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007940:	2b00      	cmp	r3, #0
 8007942:	d00d      	beq.n	8007960 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007944:	f002 fc5e 	bl	800a204 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007948:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800794a:	f000 f811 	bl	8007970 <prvGetDisinheritPriorityAfterTimeout>
 800794e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007956:	4618      	mov	r0, r3
 8007958:	f001 fcc6 	bl	80092e8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800795c:	f002 fc82 	bl	800a264 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007960:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007962:	4618      	mov	r0, r3
 8007964:	3738      	adds	r7, #56	; 0x38
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	e000ed04 	.word	0xe000ed04

08007970 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007970:	b480      	push	{r7}
 8007972:	b085      	sub	sp, #20
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797c:	2b00      	cmp	r3, #0
 800797e:	d006      	beq.n	800798e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800798a:	60fb      	str	r3, [r7, #12]
 800798c:	e001      	b.n	8007992 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800798e:	2300      	movs	r3, #0
 8007990:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007992:	68fb      	ldr	r3, [r7, #12]
	}
 8007994:	4618      	mov	r0, r3
 8007996:	3714      	adds	r7, #20
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr

080079a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b086      	sub	sp, #24
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	60b9      	str	r1, [r7, #8]
 80079aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80079ac:	2300      	movs	r3, #0
 80079ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d10d      	bne.n	80079da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d14d      	bne.n	8007a62 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	4618      	mov	r0, r3
 80079cc:	f001 fc1e 	bl	800920c <xTaskPriorityDisinherit>
 80079d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2200      	movs	r2, #0
 80079d6:	609a      	str	r2, [r3, #8]
 80079d8:	e043      	b.n	8007a62 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d119      	bne.n	8007a14 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	6858      	ldr	r0, [r3, #4]
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e8:	461a      	mov	r2, r3
 80079ea:	68b9      	ldr	r1, [r7, #8]
 80079ec:	f003 fd5a 	bl	800b4a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	685a      	ldr	r2, [r3, #4]
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f8:	441a      	add	r2, r3
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	685a      	ldr	r2, [r3, #4]
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d32b      	bcc.n	8007a62 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	605a      	str	r2, [r3, #4]
 8007a12:	e026      	b.n	8007a62 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	68d8      	ldr	r0, [r3, #12]
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	68b9      	ldr	r1, [r7, #8]
 8007a20:	f003 fd40 	bl	800b4a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	68da      	ldr	r2, [r3, #12]
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a2c:	425b      	negs	r3, r3
 8007a2e:	441a      	add	r2, r3
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	68da      	ldr	r2, [r3, #12]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d207      	bcs.n	8007a50 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	689a      	ldr	r2, [r3, #8]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a48:	425b      	negs	r3, r3
 8007a4a:	441a      	add	r2, r3
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2b02      	cmp	r3, #2
 8007a54:	d105      	bne.n	8007a62 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d002      	beq.n	8007a62 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	3b01      	subs	r3, #1
 8007a60:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	1c5a      	adds	r2, r3, #1
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007a6a:	697b      	ldr	r3, [r7, #20]
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3718      	adds	r7, #24
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b082      	sub	sp, #8
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d018      	beq.n	8007ab8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	68da      	ldr	r2, [r3, #12]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a8e:	441a      	add	r2, r3
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	68da      	ldr	r2, [r3, #12]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d303      	bcc.n	8007aa8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	68d9      	ldr	r1, [r3, #12]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	6838      	ldr	r0, [r7, #0]
 8007ab4:	f003 fcf6 	bl	800b4a4 <memcpy>
	}
}
 8007ab8:	bf00      	nop
 8007aba:	3708      	adds	r7, #8
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b084      	sub	sp, #16
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007ac8:	f002 fb9c 	bl	800a204 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ad2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ad4:	e011      	b.n	8007afa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d012      	beq.n	8007b04 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	3324      	adds	r3, #36	; 0x24
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f001 f914 	bl	8008d10 <xTaskRemoveFromEventList>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d001      	beq.n	8007af2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007aee:	f001 fa11 	bl	8008f14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007af2:	7bfb      	ldrb	r3, [r7, #15]
 8007af4:	3b01      	subs	r3, #1
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	dce9      	bgt.n	8007ad6 <prvUnlockQueue+0x16>
 8007b02:	e000      	b.n	8007b06 <prvUnlockQueue+0x46>
					break;
 8007b04:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	22ff      	movs	r2, #255	; 0xff
 8007b0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007b0e:	f002 fba9 	bl	800a264 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007b12:	f002 fb77 	bl	800a204 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b1c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b1e:	e011      	b.n	8007b44 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	691b      	ldr	r3, [r3, #16]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d012      	beq.n	8007b4e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	3310      	adds	r3, #16
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f001 f8ef 	bl	8008d10 <xTaskRemoveFromEventList>
 8007b32:	4603      	mov	r3, r0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d001      	beq.n	8007b3c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007b38:	f001 f9ec 	bl	8008f14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007b3c:	7bbb      	ldrb	r3, [r7, #14]
 8007b3e:	3b01      	subs	r3, #1
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	dce9      	bgt.n	8007b20 <prvUnlockQueue+0x60>
 8007b4c:	e000      	b.n	8007b50 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007b4e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	22ff      	movs	r2, #255	; 0xff
 8007b54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007b58:	f002 fb84 	bl	800a264 <vPortExitCritical>
}
 8007b5c:	bf00      	nop
 8007b5e:	3710      	adds	r7, #16
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007b6c:	f002 fb4a 	bl	800a204 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d102      	bne.n	8007b7e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	60fb      	str	r3, [r7, #12]
 8007b7c:	e001      	b.n	8007b82 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007b82:	f002 fb6f 	bl	800a264 <vPortExitCritical>

	return xReturn;
 8007b86:	68fb      	ldr	r3, [r7, #12]
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3710      	adds	r7, #16
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b084      	sub	sp, #16
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007b98:	f002 fb34 	bl	800a204 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d102      	bne.n	8007bae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	60fb      	str	r3, [r7, #12]
 8007bac:	e001      	b.n	8007bb2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007bb2:	f002 fb57 	bl	800a264 <vPortExitCritical>

	return xReturn;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3710      	adds	r7, #16
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b085      	sub	sp, #20
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007bca:	2300      	movs	r3, #0
 8007bcc:	60fb      	str	r3, [r7, #12]
 8007bce:	e014      	b.n	8007bfa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007bd0:	4a0f      	ldr	r2, [pc, #60]	; (8007c10 <vQueueAddToRegistry+0x50>)
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d10b      	bne.n	8007bf4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007bdc:	490c      	ldr	r1, [pc, #48]	; (8007c10 <vQueueAddToRegistry+0x50>)
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	683a      	ldr	r2, [r7, #0]
 8007be2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007be6:	4a0a      	ldr	r2, [pc, #40]	; (8007c10 <vQueueAddToRegistry+0x50>)
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	00db      	lsls	r3, r3, #3
 8007bec:	4413      	add	r3, r2
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007bf2:	e006      	b.n	8007c02 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	60fb      	str	r3, [r7, #12]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2b07      	cmp	r3, #7
 8007bfe:	d9e7      	bls.n	8007bd0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007c00:	bf00      	nop
 8007c02:	bf00      	nop
 8007c04:	3714      	adds	r7, #20
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr
 8007c0e:	bf00      	nop
 8007c10:	20000950 	.word	0x20000950

08007c14 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b086      	sub	sp, #24
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007c24:	f002 faee 	bl	800a204 <vPortEnterCritical>
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c2e:	b25b      	sxtb	r3, r3
 8007c30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c34:	d103      	bne.n	8007c3e <vQueueWaitForMessageRestricted+0x2a>
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c44:	b25b      	sxtb	r3, r3
 8007c46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c4a:	d103      	bne.n	8007c54 <vQueueWaitForMessageRestricted+0x40>
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c54:	f002 fb06 	bl	800a264 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d106      	bne.n	8007c6e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	3324      	adds	r3, #36	; 0x24
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	68b9      	ldr	r1, [r7, #8]
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f001 f825 	bl	8008cb8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007c6e:	6978      	ldr	r0, [r7, #20]
 8007c70:	f7ff ff26 	bl	8007ac0 <prvUnlockQueue>
	}
 8007c74:	bf00      	nop
 8007c76:	3718      	adds	r7, #24
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b08c      	sub	sp, #48	; 0x30
 8007c80:	af02      	add	r7, sp, #8
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	60b9      	str	r1, [r7, #8]
 8007c86:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d110      	bne.n	8007cb0 <xStreamBufferGenericCreate+0x34>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2b04      	cmp	r3, #4
 8007c98:	d81b      	bhi.n	8007cd2 <xStreamBufferGenericCreate+0x56>
	__asm volatile
 8007c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9e:	f383 8811 	msr	BASEPRI, r3
 8007ca2:	f3bf 8f6f 	isb	sy
 8007ca6:	f3bf 8f4f 	dsb	sy
 8007caa:	61fb      	str	r3, [r7, #28]
}
 8007cac:	bf00      	nop
 8007cae:	e7fe      	b.n	8007cae <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > 0 );
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d10a      	bne.n	8007cd2 <xStreamBufferGenericCreate+0x56>
	__asm volatile
 8007cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc0:	f383 8811 	msr	BASEPRI, r3
 8007cc4:	f3bf 8f6f 	isb	sy
 8007cc8:	f3bf 8f4f 	dsb	sy
 8007ccc:	61bb      	str	r3, [r7, #24]
}
 8007cce:	bf00      	nop
 8007cd0:	e7fe      	b.n	8007cd0 <xStreamBufferGenericCreate+0x54>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8007cd2:	68ba      	ldr	r2, [r7, #8]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d90a      	bls.n	8007cf0 <xStreamBufferGenericCreate+0x74>
	__asm volatile
 8007cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cde:	f383 8811 	msr	BASEPRI, r3
 8007ce2:	f3bf 8f6f 	isb	sy
 8007ce6:	f3bf 8f4f 	dsb	sy
 8007cea:	617b      	str	r3, [r7, #20]
}
 8007cec:	bf00      	nop
 8007cee:	e7fe      	b.n	8007cee <xStreamBufferGenericCreate+0x72>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d101      	bne.n	8007cfa <xStreamBufferGenericCreate+0x7e>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	3324      	adds	r3, #36	; 0x24
 8007d04:	4618      	mov	r0, r3
 8007d06:	f002 fb9f 	bl	800a448 <pvPortMalloc>
 8007d0a:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 8007d0c:	6a3b      	ldr	r3, [r7, #32]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d00a      	beq.n	8007d28 <xStreamBufferGenericCreate+0xac>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 8007d12:	6a3b      	ldr	r3, [r7, #32]
 8007d14:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8007d18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d1c:	9300      	str	r3, [sp, #0]
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	68fa      	ldr	r2, [r7, #12]
 8007d22:	6a38      	ldr	r0, [r7, #32]
 8007d24:	f000 fb6e 	bl	8008404 <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 8007d28:	6a3b      	ldr	r3, [r7, #32]
	}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3728      	adds	r7, #40	; 0x28
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}

08007d32 <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 8007d32:	b480      	push	{r7}
 8007d34:	b087      	sub	sp, #28
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d10a      	bne.n	8007d5a <xStreamBufferSpacesAvailable+0x28>
	__asm volatile
 8007d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d48:	f383 8811 	msr	BASEPRI, r3
 8007d4c:	f3bf 8f6f 	isb	sy
 8007d50:	f3bf 8f4f 	dsb	sy
 8007d54:	60fb      	str	r3, [r7, #12]
}
 8007d56:	bf00      	nop
 8007d58:	e7fe      	b.n	8007d58 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	689a      	ldr	r2, [r3, #8]
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4413      	add	r3, r2
 8007d64:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	697a      	ldr	r2, [r7, #20]
 8007d6c:	1ad3      	subs	r3, r2, r3
 8007d6e:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	3b01      	subs	r3, #1
 8007d74:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	697a      	ldr	r2, [r7, #20]
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d304      	bcc.n	8007d8a <xStreamBufferSpacesAvailable+0x58>
	{
		xSpace -= pxStreamBuffer->xLength;
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	689b      	ldr	r3, [r3, #8]
 8007d84:	697a      	ldr	r2, [r7, #20]
 8007d86:	1ad3      	subs	r3, r2, r3
 8007d88:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 8007d8a:	697b      	ldr	r3, [r7, #20]
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	371c      	adds	r7, #28
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b090      	sub	sp, #64	; 0x40
 8007d9c:	af02      	add	r7, sp, #8
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	60b9      	str	r1, [r7, #8]
 8007da2:	607a      	str	r2, [r7, #4]
 8007da4:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xReturn, xSpace = 0;
 8007daa:	2300      	movs	r3, #0
 8007dac:	637b      	str	r3, [r7, #52]	; 0x34
size_t xRequiredSpace = xDataLengthBytes;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	633b      	str	r3, [r7, #48]	; 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d10a      	bne.n	8007dce <xStreamBufferSend+0x36>
	__asm volatile
 8007db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dbc:	f383 8811 	msr	BASEPRI, r3
 8007dc0:	f3bf 8f6f 	isb	sy
 8007dc4:	f3bf 8f4f 	dsb	sy
 8007dc8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007dca:	bf00      	nop
 8007dcc:	e7fe      	b.n	8007dcc <xStreamBufferSend+0x34>
	configASSERT( pxStreamBuffer );
 8007dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d10a      	bne.n	8007dea <xStreamBufferSend+0x52>
	__asm volatile
 8007dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd8:	f383 8811 	msr	BASEPRI, r3
 8007ddc:	f3bf 8f6f 	isb	sy
 8007de0:	f3bf 8f4f 	dsb	sy
 8007de4:	623b      	str	r3, [r7, #32]
}
 8007de6:	bf00      	nop
 8007de8:	e7fe      	b.n	8007de8 <xStreamBufferSend+0x50>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8007dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dec:	7f1b      	ldrb	r3, [r3, #28]
 8007dee:	f003 0301 	and.w	r3, r3, #1
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d011      	beq.n	8007e1a <xStreamBufferSend+0x82>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8007df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df8:	3304      	adds	r3, #4
 8007dfa:	633b      	str	r3, [r7, #48]	; 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 8007dfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d80a      	bhi.n	8007e1a <xStreamBufferSend+0x82>
	__asm volatile
 8007e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e08:	f383 8811 	msr	BASEPRI, r3
 8007e0c:	f3bf 8f6f 	isb	sy
 8007e10:	f3bf 8f4f 	dsb	sy
 8007e14:	61fb      	str	r3, [r7, #28]
}
 8007e16:	bf00      	nop
 8007e18:	e7fe      	b.n	8007e18 <xStreamBufferSend+0x80>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d03e      	beq.n	8007e9e <xStreamBufferSend+0x106>
	{
		vTaskSetTimeOutState( &xTimeOut );
 8007e20:	f107 0310 	add.w	r3, r7, #16
 8007e24:	4618      	mov	r0, r3
 8007e26:	f000 ffd7 	bl	8008dd8 <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 8007e2a:	f002 f9eb 	bl	800a204 <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8007e2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007e30:	f7ff ff7f 	bl	8007d32 <xStreamBufferSpacesAvailable>
 8007e34:	6378      	str	r0, [r7, #52]	; 0x34

				if( xSpace < xRequiredSpace )
 8007e36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	d217      	bcs.n	8007e6e <xStreamBufferSend+0xd6>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 8007e3e:	2000      	movs	r0, #0
 8007e40:	f001 fcea 	bl	8009818 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 8007e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e46:	695b      	ldr	r3, [r3, #20]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d00a      	beq.n	8007e62 <xStreamBufferSend+0xca>
	__asm volatile
 8007e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e50:	f383 8811 	msr	BASEPRI, r3
 8007e54:	f3bf 8f6f 	isb	sy
 8007e58:	f3bf 8f4f 	dsb	sy
 8007e5c:	61bb      	str	r3, [r7, #24]
}
 8007e5e:	bf00      	nop
 8007e60:	e7fe      	b.n	8007e60 <xStreamBufferSend+0xc8>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 8007e62:	f001 f93d 	bl	80090e0 <xTaskGetCurrentTaskHandle>
 8007e66:	4602      	mov	r2, r0
 8007e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e6a:	615a      	str	r2, [r3, #20]
 8007e6c:	e002      	b.n	8007e74 <xStreamBufferSend+0xdc>
				}
				else
				{
					taskEXIT_CRITICAL();
 8007e6e:	f002 f9f9 	bl	800a264 <vPortExitCritical>
					break;
 8007e72:	e014      	b.n	8007e9e <xStreamBufferSend+0x106>
				}
			}
			taskEXIT_CRITICAL();
 8007e74:	f002 f9f6 	bl	800a264 <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	2100      	movs	r1, #0
 8007e7e:	2000      	movs	r0, #0
 8007e80:	f001 fac8 	bl	8009414 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 8007e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e86:	2200      	movs	r2, #0
 8007e88:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 8007e8a:	463a      	mov	r2, r7
 8007e8c:	f107 0310 	add.w	r3, r7, #16
 8007e90:	4611      	mov	r1, r2
 8007e92:	4618      	mov	r0, r3
 8007e94:	f000 ffdc 	bl	8008e50 <xTaskCheckForTimeOut>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d0c5      	beq.n	8007e2a <xStreamBufferSend+0x92>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 8007e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d103      	bne.n	8007eac <xStreamBufferSend+0x114>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8007ea4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ea6:	f7ff ff44 	bl	8007d32 <xStreamBufferSpacesAvailable>
 8007eaa:	6378      	str	r0, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8007eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eae:	9300      	str	r3, [sp, #0]
 8007eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	68b9      	ldr	r1, [r7, #8]
 8007eb6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007eb8:	f000 f894 	bl	8007fe4 <prvWriteMessageToBuffer>
 8007ebc:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 8007ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d019      	beq.n	8007ef8 <xStreamBufferSend+0x160>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8007ec4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ec6:	f000 fa7d 	bl	80083c4 <prvBytesInBuffer>
 8007eca:	4602      	mov	r2, r0
 8007ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ece:	68db      	ldr	r3, [r3, #12]
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d311      	bcc.n	8007ef8 <xStreamBufferSend+0x160>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 8007ed4:	f000 fcf2 	bl	80088bc <vTaskSuspendAll>
 8007ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eda:	691b      	ldr	r3, [r3, #16]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d009      	beq.n	8007ef4 <xStreamBufferSend+0x15c>
 8007ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ee2:	6918      	ldr	r0, [r3, #16]
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	2100      	movs	r1, #0
 8007eea:	f001 faf3 	bl	80094d4 <xTaskGenericNotify>
 8007eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	611a      	str	r2, [r3, #16]
 8007ef4:	f000 fcf0 	bl	80088d8 <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 8007ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3738      	adds	r7, #56	; 0x38
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}

08007f02 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007f02:	b580      	push	{r7, lr}
 8007f04:	b090      	sub	sp, #64	; 0x40
 8007f06:	af02      	add	r7, sp, #8
 8007f08:	60f8      	str	r0, [r7, #12]
 8007f0a:	60b9      	str	r1, [r7, #8]
 8007f0c:	607a      	str	r2, [r7, #4]
 8007f0e:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	633b      	str	r3, [r7, #48]	; 0x30
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	637b      	str	r3, [r7, #52]	; 0x34

	configASSERT( pvTxData );
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d10a      	bne.n	8007f34 <xStreamBufferSendFromISR+0x32>
	__asm volatile
 8007f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f22:	f383 8811 	msr	BASEPRI, r3
 8007f26:	f3bf 8f6f 	isb	sy
 8007f2a:	f3bf 8f4f 	dsb	sy
 8007f2e:	623b      	str	r3, [r7, #32]
}
 8007f30:	bf00      	nop
 8007f32:	e7fe      	b.n	8007f32 <xStreamBufferSendFromISR+0x30>
	configASSERT( pxStreamBuffer );
 8007f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d10a      	bne.n	8007f50 <xStreamBufferSendFromISR+0x4e>
	__asm volatile
 8007f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f3e:	f383 8811 	msr	BASEPRI, r3
 8007f42:	f3bf 8f6f 	isb	sy
 8007f46:	f3bf 8f4f 	dsb	sy
 8007f4a:	61fb      	str	r3, [r7, #28]
}
 8007f4c:	bf00      	nop
 8007f4e:	e7fe      	b.n	8007f4e <xStreamBufferSendFromISR+0x4c>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8007f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f52:	7f1b      	ldrb	r3, [r3, #28]
 8007f54:	f003 0301 	and.w	r3, r3, #1
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d002      	beq.n	8007f62 <xStreamBufferSendFromISR+0x60>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8007f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f5e:	3304      	adds	r3, #4
 8007f60:	637b      	str	r3, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8007f62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f64:	f7ff fee5 	bl	8007d32 <xStreamBufferSpacesAvailable>
 8007f68:	62f8      	str	r0, [r7, #44]	; 0x2c
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8007f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f6c:	9300      	str	r3, [sp, #0]
 8007f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	68b9      	ldr	r1, [r7, #8]
 8007f74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f76:	f000 f835 	bl	8007fe4 <prvWriteMessageToBuffer>
 8007f7a:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 8007f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d02b      	beq.n	8007fda <xStreamBufferSendFromISR+0xd8>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8007f82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f84:	f000 fa1e 	bl	80083c4 <prvBytesInBuffer>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8c:	68db      	ldr	r3, [r3, #12]
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d323      	bcc.n	8007fda <xStreamBufferSendFromISR+0xd8>
	__asm volatile
 8007f92:	f3ef 8211 	mrs	r2, BASEPRI
 8007f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f9a:	f383 8811 	msr	BASEPRI, r3
 8007f9e:	f3bf 8f6f 	isb	sy
 8007fa2:	f3bf 8f4f 	dsb	sy
 8007fa6:	61ba      	str	r2, [r7, #24]
 8007fa8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007faa:	69bb      	ldr	r3, [r7, #24]
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 8007fac:	627b      	str	r3, [r7, #36]	; 0x24
 8007fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb0:	691b      	ldr	r3, [r3, #16]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d00b      	beq.n	8007fce <xStreamBufferSendFromISR+0xcc>
 8007fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb8:	6918      	ldr	r0, [r3, #16]
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	9300      	str	r3, [sp, #0]
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	2100      	movs	r1, #0
 8007fc4:	f001 fb44 	bl	8009650 <xTaskGenericNotifyFromISR>
 8007fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fca:	2200      	movs	r2, #0
 8007fcc:	611a      	str	r2, [r3, #16]
 8007fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	f383 8811 	msr	BASEPRI, r3
}
 8007fd8:	bf00      	nop
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
 8007fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3738      	adds	r7, #56	; 0x38
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b086      	sub	sp, #24
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	607a      	str	r2, [r7, #4]
 8007ff0:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d102      	bne.n	8007ffe <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	617b      	str	r3, [r7, #20]
 8007ffc:	e01d      	b.n	800803a <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	7f1b      	ldrb	r3, [r3, #28]
 8008002:	f003 0301 	and.w	r3, r3, #1
 8008006:	2b00      	cmp	r3, #0
 8008008:	d108      	bne.n	800801c <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 800800a:	2301      	movs	r3, #1
 800800c:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	4293      	cmp	r3, r2
 8008014:	bf28      	it	cs
 8008016:	4613      	movcs	r3, r2
 8008018:	607b      	str	r3, [r7, #4]
 800801a:	e00e      	b.n	800803a <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 800801c:	683a      	ldr	r2, [r7, #0]
 800801e:	6a3b      	ldr	r3, [r7, #32]
 8008020:	429a      	cmp	r2, r3
 8008022:	d308      	bcc.n	8008036 <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 8008024:	2301      	movs	r3, #1
 8008026:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8008028:	1d3b      	adds	r3, r7, #4
 800802a:	2204      	movs	r2, #4
 800802c:	4619      	mov	r1, r3
 800802e:	68f8      	ldr	r0, [r7, #12]
 8008030:	f000 f8dc 	bl	80081ec <prvWriteBytesToBuffer>
 8008034:	e001      	b.n	800803a <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 8008036:	2300      	movs	r3, #0
 8008038:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d007      	beq.n	8008050 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	461a      	mov	r2, r3
 8008044:	68b9      	ldr	r1, [r7, #8]
 8008046:	68f8      	ldr	r0, [r7, #12]
 8008048:	f000 f8d0 	bl	80081ec <prvWriteBytesToBuffer>
 800804c:	6138      	str	r0, [r7, #16]
 800804e:	e001      	b.n	8008054 <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 8008050:	2300      	movs	r3, #0
 8008052:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 8008054:	693b      	ldr	r3, [r7, #16]
}
 8008056:	4618      	mov	r0, r3
 8008058:	3718      	adds	r7, #24
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}

0800805e <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 800805e:	b580      	push	{r7, lr}
 8008060:	b08e      	sub	sp, #56	; 0x38
 8008062:	af02      	add	r7, sp, #8
 8008064:	60f8      	str	r0, [r7, #12]
 8008066:	60b9      	str	r1, [r7, #8]
 8008068:	607a      	str	r2, [r7, #4]
 800806a:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8008070:	2300      	movs	r3, #0
 8008072:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d10a      	bne.n	8008090 <xStreamBufferReceive+0x32>
	__asm volatile
 800807a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800807e:	f383 8811 	msr	BASEPRI, r3
 8008082:	f3bf 8f6f 	isb	sy
 8008086:	f3bf 8f4f 	dsb	sy
 800808a:	61fb      	str	r3, [r7, #28]
}
 800808c:	bf00      	nop
 800808e:	e7fe      	b.n	800808e <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 8008090:	6a3b      	ldr	r3, [r7, #32]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d10a      	bne.n	80080ac <xStreamBufferReceive+0x4e>
	__asm volatile
 8008096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800809a:	f383 8811 	msr	BASEPRI, r3
 800809e:	f3bf 8f6f 	isb	sy
 80080a2:	f3bf 8f4f 	dsb	sy
 80080a6:	61bb      	str	r3, [r7, #24]
}
 80080a8:	bf00      	nop
 80080aa:	e7fe      	b.n	80080aa <xStreamBufferReceive+0x4c>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 80080ac:	6a3b      	ldr	r3, [r7, #32]
 80080ae:	7f1b      	ldrb	r3, [r3, #28]
 80080b0:	f003 0301 	and.w	r3, r3, #1
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d002      	beq.n	80080be <xStreamBufferReceive+0x60>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80080b8:	2304      	movs	r3, #4
 80080ba:	627b      	str	r3, [r7, #36]	; 0x24
 80080bc:	e001      	b.n	80080c2 <xStreamBufferReceive+0x64>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 80080be:	2300      	movs	r3, #0
 80080c0:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d034      	beq.n	8008132 <xStreamBufferReceive+0xd4>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 80080c8:	f002 f89c 	bl	800a204 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80080cc:	6a38      	ldr	r0, [r7, #32]
 80080ce:	f000 f979 	bl	80083c4 <prvBytesInBuffer>
 80080d2:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 80080d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d8:	429a      	cmp	r2, r3
 80080da:	d816      	bhi.n	800810a <xStreamBufferReceive+0xac>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 80080dc:	2000      	movs	r0, #0
 80080de:	f001 fb9b 	bl	8009818 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 80080e2:	6a3b      	ldr	r3, [r7, #32]
 80080e4:	691b      	ldr	r3, [r3, #16]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d00a      	beq.n	8008100 <xStreamBufferReceive+0xa2>
	__asm volatile
 80080ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ee:	f383 8811 	msr	BASEPRI, r3
 80080f2:	f3bf 8f6f 	isb	sy
 80080f6:	f3bf 8f4f 	dsb	sy
 80080fa:	617b      	str	r3, [r7, #20]
}
 80080fc:	bf00      	nop
 80080fe:	e7fe      	b.n	80080fe <xStreamBufferReceive+0xa0>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8008100:	f000 ffee 	bl	80090e0 <xTaskGetCurrentTaskHandle>
 8008104:	4602      	mov	r2, r0
 8008106:	6a3b      	ldr	r3, [r7, #32]
 8008108:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800810a:	f002 f8ab 	bl	800a264 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 800810e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008112:	429a      	cmp	r2, r3
 8008114:	d811      	bhi.n	800813a <xStreamBufferReceive+0xdc>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	2200      	movs	r2, #0
 800811a:	2100      	movs	r1, #0
 800811c:	2000      	movs	r0, #0
 800811e:	f001 f979 	bl	8009414 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8008122:	6a3b      	ldr	r3, [r7, #32]
 8008124:	2200      	movs	r2, #0
 8008126:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8008128:	6a38      	ldr	r0, [r7, #32]
 800812a:	f000 f94b 	bl	80083c4 <prvBytesInBuffer>
 800812e:	62b8      	str	r0, [r7, #40]	; 0x28
 8008130:	e003      	b.n	800813a <xStreamBufferReceive+0xdc>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8008132:	6a38      	ldr	r0, [r7, #32]
 8008134:	f000 f946 	bl	80083c4 <prvBytesInBuffer>
 8008138:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 800813a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800813c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813e:	429a      	cmp	r2, r3
 8008140:	d91d      	bls.n	800817e <xStreamBufferReceive+0x120>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8008142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008144:	9300      	str	r3, [sp, #0]
 8008146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008148:	687a      	ldr	r2, [r7, #4]
 800814a:	68b9      	ldr	r1, [r7, #8]
 800814c:	6a38      	ldr	r0, [r7, #32]
 800814e:	f000 f81b 	bl	8008188 <prvReadMessageFromBuffer>
 8008152:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 8008154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008156:	2b00      	cmp	r3, #0
 8008158:	d011      	beq.n	800817e <xStreamBufferReceive+0x120>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 800815a:	f000 fbaf 	bl	80088bc <vTaskSuspendAll>
 800815e:	6a3b      	ldr	r3, [r7, #32]
 8008160:	695b      	ldr	r3, [r3, #20]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d009      	beq.n	800817a <xStreamBufferReceive+0x11c>
 8008166:	6a3b      	ldr	r3, [r7, #32]
 8008168:	6958      	ldr	r0, [r3, #20]
 800816a:	2300      	movs	r3, #0
 800816c:	2200      	movs	r2, #0
 800816e:	2100      	movs	r1, #0
 8008170:	f001 f9b0 	bl	80094d4 <xTaskGenericNotify>
 8008174:	6a3b      	ldr	r3, [r7, #32]
 8008176:	2200      	movs	r2, #0
 8008178:	615a      	str	r2, [r3, #20]
 800817a:	f000 fbad 	bl	80088d8 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 800817e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008180:	4618      	mov	r0, r3
 8008182:	3730      	adds	r7, #48	; 0x30
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b088      	sub	sp, #32
 800818c:	af00      	add	r7, sp, #0
 800818e:	60f8      	str	r0, [r7, #12]
 8008190:	60b9      	str	r1, [r7, #8]
 8008192:	607a      	str	r2, [r7, #4]
 8008194:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 8008196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008198:	2b00      	cmp	r3, #0
 800819a:	d019      	beq.n	80081d0 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 80081a2:	f107 0110 	add.w	r1, r7, #16
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081aa:	68f8      	ldr	r0, [r7, #12]
 80081ac:	f000 f890 	bl	80082d0 <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 80081b4:	683a      	ldr	r2, [r7, #0]
 80081b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b8:	1ad3      	subs	r3, r2, r3
 80081ba:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 80081bc:	69fa      	ldr	r2, [r7, #28]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d907      	bls.n	80081d4 <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	69ba      	ldr	r2, [r7, #24]
 80081c8:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 80081ca:	2300      	movs	r3, #0
 80081cc:	61fb      	str	r3, [r7, #28]
 80081ce:	e001      	b.n	80081d4 <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	69fa      	ldr	r2, [r7, #28]
 80081d8:	68b9      	ldr	r1, [r7, #8]
 80081da:	68f8      	ldr	r0, [r7, #12]
 80081dc:	f000 f878 	bl	80082d0 <prvReadBytesFromBuffer>
 80081e0:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 80081e2:	697b      	ldr	r3, [r7, #20]
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3720      	adds	r7, #32
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b08a      	sub	sp, #40	; 0x28
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	60f8      	str	r0, [r7, #12]
 80081f4:	60b9      	str	r1, [r7, #8]
 80081f6:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d10a      	bne.n	8008214 <prvWriteBytesToBuffer+0x28>
	__asm volatile
 80081fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008202:	f383 8811 	msr	BASEPRI, r3
 8008206:	f3bf 8f6f 	isb	sy
 800820a:	f3bf 8f4f 	dsb	sy
 800820e:	61fb      	str	r3, [r7, #28]
}
 8008210:	bf00      	nop
 8008212:	e7fe      	b.n	8008212 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	689a      	ldr	r2, [r3, #8]
 800821e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008220:	1ad3      	subs	r3, r2, r3
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	4293      	cmp	r3, r2
 8008226:	bf28      	it	cs
 8008228:	4613      	movcs	r3, r2
 800822a:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 800822c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800822e:	6a3b      	ldr	r3, [r7, #32]
 8008230:	441a      	add	r2, r3
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	689b      	ldr	r3, [r3, #8]
 8008236:	429a      	cmp	r2, r3
 8008238:	d90a      	bls.n	8008250 <prvWriteBytesToBuffer+0x64>
	__asm volatile
 800823a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800823e:	f383 8811 	msr	BASEPRI, r3
 8008242:	f3bf 8f6f 	isb	sy
 8008246:	f3bf 8f4f 	dsb	sy
 800824a:	61bb      	str	r3, [r7, #24]
}
 800824c:	bf00      	nop
 800824e:	e7fe      	b.n	800824e <prvWriteBytesToBuffer+0x62>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	699a      	ldr	r2, [r3, #24]
 8008254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008256:	4413      	add	r3, r2
 8008258:	6a3a      	ldr	r2, [r7, #32]
 800825a:	68b9      	ldr	r1, [r7, #8]
 800825c:	4618      	mov	r0, r3
 800825e:	f003 f921 	bl	800b4a4 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	6a3b      	ldr	r3, [r7, #32]
 8008266:	429a      	cmp	r2, r3
 8008268:	d91c      	bls.n	80082a4 <prvWriteBytesToBuffer+0xb8>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	6a3b      	ldr	r3, [r7, #32]
 800826e:	1ad2      	subs	r2, r2, r3
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	429a      	cmp	r2, r3
 8008276:	d90a      	bls.n	800828e <prvWriteBytesToBuffer+0xa2>
	__asm volatile
 8008278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800827c:	f383 8811 	msr	BASEPRI, r3
 8008280:	f3bf 8f6f 	isb	sy
 8008284:	f3bf 8f4f 	dsb	sy
 8008288:	617b      	str	r3, [r7, #20]
}
 800828a:	bf00      	nop
 800828c:	e7fe      	b.n	800828c <prvWriteBytesToBuffer+0xa0>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	6998      	ldr	r0, [r3, #24]
 8008292:	68ba      	ldr	r2, [r7, #8]
 8008294:	6a3b      	ldr	r3, [r7, #32]
 8008296:	18d1      	adds	r1, r2, r3
 8008298:	687a      	ldr	r2, [r7, #4]
 800829a:	6a3b      	ldr	r3, [r7, #32]
 800829c:	1ad3      	subs	r3, r2, r3
 800829e:	461a      	mov	r2, r3
 80082a0:	f003 f900 	bl	800b4a4 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 80082a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	4413      	add	r3, r2
 80082aa:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d304      	bcc.n	80082c0 <prvWriteBytesToBuffer+0xd4>
	{
		xNextHead -= pxStreamBuffer->xLength;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082bc:	1ad3      	subs	r3, r2, r3
 80082be:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082c4:	605a      	str	r2, [r3, #4]

	return xCount;
 80082c6:	687b      	ldr	r3, [r7, #4]
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3728      	adds	r7, #40	; 0x28
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b08a      	sub	sp, #40	; 0x28
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	60b9      	str	r1, [r7, #8]
 80082da:	607a      	str	r2, [r7, #4]
 80082dc:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	4293      	cmp	r3, r2
 80082e4:	bf28      	it	cs
 80082e6:	4613      	movcs	r3, r2
 80082e8:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 80082ea:	6a3b      	ldr	r3, [r7, #32]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d064      	beq.n	80083ba <prvReadBytesFromBuffer+0xea>
	{
		xNextTail = pxStreamBuffer->xTail;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	689a      	ldr	r2, [r3, #8]
 80082fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fc:	1ad3      	subs	r3, r2, r3
 80082fe:	6a3a      	ldr	r2, [r7, #32]
 8008300:	4293      	cmp	r3, r2
 8008302:	bf28      	it	cs
 8008304:	4613      	movcs	r3, r2
 8008306:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 8008308:	69fa      	ldr	r2, [r7, #28]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	429a      	cmp	r2, r3
 800830e:	d90a      	bls.n	8008326 <prvReadBytesFromBuffer+0x56>
	__asm volatile
 8008310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008314:	f383 8811 	msr	BASEPRI, r3
 8008318:	f3bf 8f6f 	isb	sy
 800831c:	f3bf 8f4f 	dsb	sy
 8008320:	61bb      	str	r3, [r7, #24]
}
 8008322:	bf00      	nop
 8008324:	e7fe      	b.n	8008324 <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 8008326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008328:	69fb      	ldr	r3, [r7, #28]
 800832a:	441a      	add	r2, r3
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	429a      	cmp	r2, r3
 8008332:	d90a      	bls.n	800834a <prvReadBytesFromBuffer+0x7a>
	__asm volatile
 8008334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008338:	f383 8811 	msr	BASEPRI, r3
 800833c:	f3bf 8f6f 	isb	sy
 8008340:	f3bf 8f4f 	dsb	sy
 8008344:	617b      	str	r3, [r7, #20]
}
 8008346:	bf00      	nop
 8008348:	e7fe      	b.n	8008348 <prvReadBytesFromBuffer+0x78>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	699a      	ldr	r2, [r3, #24]
 800834e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008350:	4413      	add	r3, r2
 8008352:	69fa      	ldr	r2, [r7, #28]
 8008354:	4619      	mov	r1, r3
 8008356:	68b8      	ldr	r0, [r7, #8]
 8008358:	f003 f8a4 	bl	800b4a4 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 800835c:	6a3a      	ldr	r2, [r7, #32]
 800835e:	69fb      	ldr	r3, [r7, #28]
 8008360:	429a      	cmp	r2, r3
 8008362:	d919      	bls.n	8008398 <prvReadBytesFromBuffer+0xc8>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 8008364:	6a3a      	ldr	r2, [r7, #32]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	429a      	cmp	r2, r3
 800836a:	d90a      	bls.n	8008382 <prvReadBytesFromBuffer+0xb2>
	__asm volatile
 800836c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008370:	f383 8811 	msr	BASEPRI, r3
 8008374:	f3bf 8f6f 	isb	sy
 8008378:	f3bf 8f4f 	dsb	sy
 800837c:	613b      	str	r3, [r7, #16]
}
 800837e:	bf00      	nop
 8008380:	e7fe      	b.n	8008380 <prvReadBytesFromBuffer+0xb0>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8008382:	68ba      	ldr	r2, [r7, #8]
 8008384:	69fb      	ldr	r3, [r7, #28]
 8008386:	18d0      	adds	r0, r2, r3
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	6999      	ldr	r1, [r3, #24]
 800838c:	6a3a      	ldr	r2, [r7, #32]
 800838e:	69fb      	ldr	r3, [r7, #28]
 8008390:	1ad3      	subs	r3, r2, r3
 8008392:	461a      	mov	r2, r3
 8008394:	f003 f886 	bl	800b4a4 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 8008398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800839a:	6a3b      	ldr	r3, [r7, #32]
 800839c:	4413      	add	r3, r2
 800839e:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d304      	bcc.n	80083b4 <prvReadBytesFromBuffer+0xe4>
		{
			xNextTail -= pxStreamBuffer->xLength;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	689b      	ldr	r3, [r3, #8]
 80083ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083b0:	1ad3      	subs	r3, r2, r3
 80083b2:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083b8:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 80083ba:	6a3b      	ldr	r3, [r7, #32]
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3728      	adds	r7, #40	; 0x28
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}

080083c4 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 80083c4:	b480      	push	{r7}
 80083c6:	b085      	sub	sp, #20
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	689a      	ldr	r2, [r3, #8]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	4413      	add	r3, r2
 80083d6:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	68fa      	ldr	r2, [r7, #12]
 80083de:	1ad3      	subs	r3, r2, r3
 80083e0:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	689b      	ldr	r3, [r3, #8]
 80083e6:	68fa      	ldr	r2, [r7, #12]
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d304      	bcc.n	80083f6 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	68fa      	ldr	r2, [r7, #12]
 80083f2:	1ad3      	subs	r3, r2, r3
 80083f4:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 80083f6:	68fb      	ldr	r3, [r7, #12]
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3714      	adds	r7, #20
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr

08008404 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b086      	sub	sp, #24
 8008408:	af00      	add	r7, sp, #0
 800840a:	60f8      	str	r0, [r7, #12]
 800840c:	60b9      	str	r1, [r7, #8]
 800840e:	607a      	str	r2, [r7, #4]
 8008410:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 8008412:	2355      	movs	r3, #85	; 0x55
 8008414:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	6979      	ldr	r1, [r7, #20]
 800841a:	68b8      	ldr	r0, [r7, #8]
 800841c:	f003 f850 	bl	800b4c0 <memset>
 8008420:	4602      	mov	r2, r0
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	4293      	cmp	r3, r2
 8008426:	d00a      	beq.n	800843e <prvInitialiseNewStreamBuffer+0x3a>
	__asm volatile
 8008428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800842c:	f383 8811 	msr	BASEPRI, r3
 8008430:	f3bf 8f6f 	isb	sy
 8008434:	f3bf 8f4f 	dsb	sy
 8008438:	613b      	str	r3, [r7, #16]
}
 800843a:	bf00      	nop
 800843c:	e7fe      	b.n	800843c <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 800843e:	2224      	movs	r2, #36	; 0x24
 8008440:	2100      	movs	r1, #0
 8008442:	68f8      	ldr	r0, [r7, #12]
 8008444:	f003 f83c 	bl	800b4c0 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	68ba      	ldr	r2, [r7, #8]
 800844c:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	683a      	ldr	r2, [r7, #0]
 8008458:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8008460:	771a      	strb	r2, [r3, #28]
}
 8008462:	bf00      	nop
 8008464:	3718      	adds	r7, #24
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}

0800846a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800846a:	b580      	push	{r7, lr}
 800846c:	b08e      	sub	sp, #56	; 0x38
 800846e:	af04      	add	r7, sp, #16
 8008470:	60f8      	str	r0, [r7, #12]
 8008472:	60b9      	str	r1, [r7, #8]
 8008474:	607a      	str	r2, [r7, #4]
 8008476:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800847a:	2b00      	cmp	r3, #0
 800847c:	d10a      	bne.n	8008494 <xTaskCreateStatic+0x2a>
	__asm volatile
 800847e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008482:	f383 8811 	msr	BASEPRI, r3
 8008486:	f3bf 8f6f 	isb	sy
 800848a:	f3bf 8f4f 	dsb	sy
 800848e:	623b      	str	r3, [r7, #32]
}
 8008490:	bf00      	nop
 8008492:	e7fe      	b.n	8008492 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008496:	2b00      	cmp	r3, #0
 8008498:	d10a      	bne.n	80084b0 <xTaskCreateStatic+0x46>
	__asm volatile
 800849a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800849e:	f383 8811 	msr	BASEPRI, r3
 80084a2:	f3bf 8f6f 	isb	sy
 80084a6:	f3bf 8f4f 	dsb	sy
 80084aa:	61fb      	str	r3, [r7, #28]
}
 80084ac:	bf00      	nop
 80084ae:	e7fe      	b.n	80084ae <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80084b0:	23bc      	movs	r3, #188	; 0xbc
 80084b2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	2bbc      	cmp	r3, #188	; 0xbc
 80084b8:	d00a      	beq.n	80084d0 <xTaskCreateStatic+0x66>
	__asm volatile
 80084ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084be:	f383 8811 	msr	BASEPRI, r3
 80084c2:	f3bf 8f6f 	isb	sy
 80084c6:	f3bf 8f4f 	dsb	sy
 80084ca:	61bb      	str	r3, [r7, #24]
}
 80084cc:	bf00      	nop
 80084ce:	e7fe      	b.n	80084ce <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80084d0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80084d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d01e      	beq.n	8008516 <xTaskCreateStatic+0xac>
 80084d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d01b      	beq.n	8008516 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80084de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80084e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084e6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80084e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ea:	2202      	movs	r2, #2
 80084ec:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80084f0:	2300      	movs	r3, #0
 80084f2:	9303      	str	r3, [sp, #12]
 80084f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f6:	9302      	str	r3, [sp, #8]
 80084f8:	f107 0314 	add.w	r3, r7, #20
 80084fc:	9301      	str	r3, [sp, #4]
 80084fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008500:	9300      	str	r3, [sp, #0]
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	68b9      	ldr	r1, [r7, #8]
 8008508:	68f8      	ldr	r0, [r7, #12]
 800850a:	f000 f851 	bl	80085b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800850e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008510:	f000 f8f4 	bl	80086fc <prvAddNewTaskToReadyList>
 8008514:	e001      	b.n	800851a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008516:	2300      	movs	r3, #0
 8008518:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800851a:	697b      	ldr	r3, [r7, #20]
	}
 800851c:	4618      	mov	r0, r3
 800851e:	3728      	adds	r7, #40	; 0x28
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008524:	b580      	push	{r7, lr}
 8008526:	b08c      	sub	sp, #48	; 0x30
 8008528:	af04      	add	r7, sp, #16
 800852a:	60f8      	str	r0, [r7, #12]
 800852c:	60b9      	str	r1, [r7, #8]
 800852e:	603b      	str	r3, [r7, #0]
 8008530:	4613      	mov	r3, r2
 8008532:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008534:	88fb      	ldrh	r3, [r7, #6]
 8008536:	009b      	lsls	r3, r3, #2
 8008538:	4618      	mov	r0, r3
 800853a:	f001 ff85 	bl	800a448 <pvPortMalloc>
 800853e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d00e      	beq.n	8008564 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008546:	20bc      	movs	r0, #188	; 0xbc
 8008548:	f001 ff7e 	bl	800a448 <pvPortMalloc>
 800854c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800854e:	69fb      	ldr	r3, [r7, #28]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d003      	beq.n	800855c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008554:	69fb      	ldr	r3, [r7, #28]
 8008556:	697a      	ldr	r2, [r7, #20]
 8008558:	631a      	str	r2, [r3, #48]	; 0x30
 800855a:	e005      	b.n	8008568 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800855c:	6978      	ldr	r0, [r7, #20]
 800855e:	f002 f83f 	bl	800a5e0 <vPortFree>
 8008562:	e001      	b.n	8008568 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008564:	2300      	movs	r3, #0
 8008566:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008568:	69fb      	ldr	r3, [r7, #28]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d017      	beq.n	800859e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800856e:	69fb      	ldr	r3, [r7, #28]
 8008570:	2200      	movs	r2, #0
 8008572:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008576:	88fa      	ldrh	r2, [r7, #6]
 8008578:	2300      	movs	r3, #0
 800857a:	9303      	str	r3, [sp, #12]
 800857c:	69fb      	ldr	r3, [r7, #28]
 800857e:	9302      	str	r3, [sp, #8]
 8008580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008582:	9301      	str	r3, [sp, #4]
 8008584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008586:	9300      	str	r3, [sp, #0]
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	68b9      	ldr	r1, [r7, #8]
 800858c:	68f8      	ldr	r0, [r7, #12]
 800858e:	f000 f80f 	bl	80085b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008592:	69f8      	ldr	r0, [r7, #28]
 8008594:	f000 f8b2 	bl	80086fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008598:	2301      	movs	r3, #1
 800859a:	61bb      	str	r3, [r7, #24]
 800859c:	e002      	b.n	80085a4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800859e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80085a2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80085a4:	69bb      	ldr	r3, [r7, #24]
	}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3720      	adds	r7, #32
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}
	...

080085b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b088      	sub	sp, #32
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	607a      	str	r2, [r7, #4]
 80085bc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80085be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	461a      	mov	r2, r3
 80085c8:	21a5      	movs	r1, #165	; 0xa5
 80085ca:	f002 ff79 	bl	800b4c0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80085ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80085d8:	3b01      	subs	r3, #1
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	4413      	add	r3, r2
 80085de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80085e0:	69bb      	ldr	r3, [r7, #24]
 80085e2:	f023 0307 	bic.w	r3, r3, #7
 80085e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80085e8:	69bb      	ldr	r3, [r7, #24]
 80085ea:	f003 0307 	and.w	r3, r3, #7
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d00a      	beq.n	8008608 <prvInitialiseNewTask+0x58>
	__asm volatile
 80085f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f6:	f383 8811 	msr	BASEPRI, r3
 80085fa:	f3bf 8f6f 	isb	sy
 80085fe:	f3bf 8f4f 	dsb	sy
 8008602:	617b      	str	r3, [r7, #20]
}
 8008604:	bf00      	nop
 8008606:	e7fe      	b.n	8008606 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d01f      	beq.n	800864e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800860e:	2300      	movs	r3, #0
 8008610:	61fb      	str	r3, [r7, #28]
 8008612:	e012      	b.n	800863a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008614:	68ba      	ldr	r2, [r7, #8]
 8008616:	69fb      	ldr	r3, [r7, #28]
 8008618:	4413      	add	r3, r2
 800861a:	7819      	ldrb	r1, [r3, #0]
 800861c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800861e:	69fb      	ldr	r3, [r7, #28]
 8008620:	4413      	add	r3, r2
 8008622:	3334      	adds	r3, #52	; 0x34
 8008624:	460a      	mov	r2, r1
 8008626:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008628:	68ba      	ldr	r2, [r7, #8]
 800862a:	69fb      	ldr	r3, [r7, #28]
 800862c:	4413      	add	r3, r2
 800862e:	781b      	ldrb	r3, [r3, #0]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d006      	beq.n	8008642 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008634:	69fb      	ldr	r3, [r7, #28]
 8008636:	3301      	adds	r3, #1
 8008638:	61fb      	str	r3, [r7, #28]
 800863a:	69fb      	ldr	r3, [r7, #28]
 800863c:	2b0f      	cmp	r3, #15
 800863e:	d9e9      	bls.n	8008614 <prvInitialiseNewTask+0x64>
 8008640:	e000      	b.n	8008644 <prvInitialiseNewTask+0x94>
			{
				break;
 8008642:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008646:	2200      	movs	r2, #0
 8008648:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800864c:	e003      	b.n	8008656 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800864e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008650:	2200      	movs	r2, #0
 8008652:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008658:	2b37      	cmp	r3, #55	; 0x37
 800865a:	d901      	bls.n	8008660 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800865c:	2337      	movs	r3, #55	; 0x37
 800865e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008662:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008664:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008668:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800866a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800866c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866e:	2200      	movs	r2, #0
 8008670:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008674:	3304      	adds	r3, #4
 8008676:	4618      	mov	r0, r3
 8008678:	f7fe fb64 	bl	8006d44 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800867c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800867e:	3318      	adds	r3, #24
 8008680:	4618      	mov	r0, r3
 8008682:	f7fe fb5f 	bl	8006d44 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800868a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800868c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800868e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008694:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008698:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800869a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800869c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800869e:	2200      	movs	r2, #0
 80086a0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80086a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a6:	2200      	movs	r2, #0
 80086a8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80086ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ae:	3354      	adds	r3, #84	; 0x54
 80086b0:	2260      	movs	r2, #96	; 0x60
 80086b2:	2100      	movs	r1, #0
 80086b4:	4618      	mov	r0, r3
 80086b6:	f002 ff03 	bl	800b4c0 <memset>
 80086ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086bc:	4a0c      	ldr	r2, [pc, #48]	; (80086f0 <prvInitialiseNewTask+0x140>)
 80086be:	659a      	str	r2, [r3, #88]	; 0x58
 80086c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c2:	4a0c      	ldr	r2, [pc, #48]	; (80086f4 <prvInitialiseNewTask+0x144>)
 80086c4:	65da      	str	r2, [r3, #92]	; 0x5c
 80086c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c8:	4a0b      	ldr	r2, [pc, #44]	; (80086f8 <prvInitialiseNewTask+0x148>)
 80086ca:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80086cc:	683a      	ldr	r2, [r7, #0]
 80086ce:	68f9      	ldr	r1, [r7, #12]
 80086d0:	69b8      	ldr	r0, [r7, #24]
 80086d2:	f001 fc69 	bl	8009fa8 <pxPortInitialiseStack>
 80086d6:	4602      	mov	r2, r0
 80086d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086da:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80086dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d002      	beq.n	80086e8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80086e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086e6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086e8:	bf00      	nop
 80086ea:	3720      	adds	r7, #32
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}
 80086f0:	0800b750 	.word	0x0800b750
 80086f4:	0800b770 	.word	0x0800b770
 80086f8:	0800b730 	.word	0x0800b730

080086fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b082      	sub	sp, #8
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008704:	f001 fd7e 	bl	800a204 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008708:	4b2d      	ldr	r3, [pc, #180]	; (80087c0 <prvAddNewTaskToReadyList+0xc4>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	3301      	adds	r3, #1
 800870e:	4a2c      	ldr	r2, [pc, #176]	; (80087c0 <prvAddNewTaskToReadyList+0xc4>)
 8008710:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008712:	4b2c      	ldr	r3, [pc, #176]	; (80087c4 <prvAddNewTaskToReadyList+0xc8>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d109      	bne.n	800872e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800871a:	4a2a      	ldr	r2, [pc, #168]	; (80087c4 <prvAddNewTaskToReadyList+0xc8>)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008720:	4b27      	ldr	r3, [pc, #156]	; (80087c0 <prvAddNewTaskToReadyList+0xc4>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	2b01      	cmp	r3, #1
 8008726:	d110      	bne.n	800874a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008728:	f000 fc18 	bl	8008f5c <prvInitialiseTaskLists>
 800872c:	e00d      	b.n	800874a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800872e:	4b26      	ldr	r3, [pc, #152]	; (80087c8 <prvAddNewTaskToReadyList+0xcc>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d109      	bne.n	800874a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008736:	4b23      	ldr	r3, [pc, #140]	; (80087c4 <prvAddNewTaskToReadyList+0xc8>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008740:	429a      	cmp	r2, r3
 8008742:	d802      	bhi.n	800874a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008744:	4a1f      	ldr	r2, [pc, #124]	; (80087c4 <prvAddNewTaskToReadyList+0xc8>)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800874a:	4b20      	ldr	r3, [pc, #128]	; (80087cc <prvAddNewTaskToReadyList+0xd0>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	3301      	adds	r3, #1
 8008750:	4a1e      	ldr	r2, [pc, #120]	; (80087cc <prvAddNewTaskToReadyList+0xd0>)
 8008752:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008754:	4b1d      	ldr	r3, [pc, #116]	; (80087cc <prvAddNewTaskToReadyList+0xd0>)
 8008756:	681a      	ldr	r2, [r3, #0]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008760:	4b1b      	ldr	r3, [pc, #108]	; (80087d0 <prvAddNewTaskToReadyList+0xd4>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	429a      	cmp	r2, r3
 8008766:	d903      	bls.n	8008770 <prvAddNewTaskToReadyList+0x74>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800876c:	4a18      	ldr	r2, [pc, #96]	; (80087d0 <prvAddNewTaskToReadyList+0xd4>)
 800876e:	6013      	str	r3, [r2, #0]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008774:	4613      	mov	r3, r2
 8008776:	009b      	lsls	r3, r3, #2
 8008778:	4413      	add	r3, r2
 800877a:	009b      	lsls	r3, r3, #2
 800877c:	4a15      	ldr	r2, [pc, #84]	; (80087d4 <prvAddNewTaskToReadyList+0xd8>)
 800877e:	441a      	add	r2, r3
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	3304      	adds	r3, #4
 8008784:	4619      	mov	r1, r3
 8008786:	4610      	mov	r0, r2
 8008788:	f7fe fae9 	bl	8006d5e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800878c:	f001 fd6a 	bl	800a264 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008790:	4b0d      	ldr	r3, [pc, #52]	; (80087c8 <prvAddNewTaskToReadyList+0xcc>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d00e      	beq.n	80087b6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008798:	4b0a      	ldr	r3, [pc, #40]	; (80087c4 <prvAddNewTaskToReadyList+0xc8>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d207      	bcs.n	80087b6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80087a6:	4b0c      	ldr	r3, [pc, #48]	; (80087d8 <prvAddNewTaskToReadyList+0xdc>)
 80087a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087ac:	601a      	str	r2, [r3, #0]
 80087ae:	f3bf 8f4f 	dsb	sy
 80087b2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087b6:	bf00      	nop
 80087b8:	3708      	adds	r7, #8
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop
 80087c0:	20000e64 	.word	0x20000e64
 80087c4:	20000990 	.word	0x20000990
 80087c8:	20000e70 	.word	0x20000e70
 80087cc:	20000e80 	.word	0x20000e80
 80087d0:	20000e6c 	.word	0x20000e6c
 80087d4:	20000994 	.word	0x20000994
 80087d8:	e000ed04 	.word	0xe000ed04

080087dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b08a      	sub	sp, #40	; 0x28
 80087e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80087e2:	2300      	movs	r3, #0
 80087e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80087e6:	2300      	movs	r3, #0
 80087e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80087ea:	463a      	mov	r2, r7
 80087ec:	1d39      	adds	r1, r7, #4
 80087ee:	f107 0308 	add.w	r3, r7, #8
 80087f2:	4618      	mov	r0, r3
 80087f4:	f7fe fa52 	bl	8006c9c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80087f8:	6839      	ldr	r1, [r7, #0]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	68ba      	ldr	r2, [r7, #8]
 80087fe:	9202      	str	r2, [sp, #8]
 8008800:	9301      	str	r3, [sp, #4]
 8008802:	2300      	movs	r3, #0
 8008804:	9300      	str	r3, [sp, #0]
 8008806:	2300      	movs	r3, #0
 8008808:	460a      	mov	r2, r1
 800880a:	4924      	ldr	r1, [pc, #144]	; (800889c <vTaskStartScheduler+0xc0>)
 800880c:	4824      	ldr	r0, [pc, #144]	; (80088a0 <vTaskStartScheduler+0xc4>)
 800880e:	f7ff fe2c 	bl	800846a <xTaskCreateStatic>
 8008812:	4603      	mov	r3, r0
 8008814:	4a23      	ldr	r2, [pc, #140]	; (80088a4 <vTaskStartScheduler+0xc8>)
 8008816:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008818:	4b22      	ldr	r3, [pc, #136]	; (80088a4 <vTaskStartScheduler+0xc8>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d002      	beq.n	8008826 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008820:	2301      	movs	r3, #1
 8008822:	617b      	str	r3, [r7, #20]
 8008824:	e001      	b.n	800882a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008826:	2300      	movs	r3, #0
 8008828:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	2b01      	cmp	r3, #1
 800882e:	d102      	bne.n	8008836 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008830:	f001 f86c 	bl	800990c <xTimerCreateTimerTask>
 8008834:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	2b01      	cmp	r3, #1
 800883a:	d11b      	bne.n	8008874 <vTaskStartScheduler+0x98>
	__asm volatile
 800883c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008840:	f383 8811 	msr	BASEPRI, r3
 8008844:	f3bf 8f6f 	isb	sy
 8008848:	f3bf 8f4f 	dsb	sy
 800884c:	613b      	str	r3, [r7, #16]
}
 800884e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008850:	4b15      	ldr	r3, [pc, #84]	; (80088a8 <vTaskStartScheduler+0xcc>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	3354      	adds	r3, #84	; 0x54
 8008856:	4a15      	ldr	r2, [pc, #84]	; (80088ac <vTaskStartScheduler+0xd0>)
 8008858:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800885a:	4b15      	ldr	r3, [pc, #84]	; (80088b0 <vTaskStartScheduler+0xd4>)
 800885c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008860:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008862:	4b14      	ldr	r3, [pc, #80]	; (80088b4 <vTaskStartScheduler+0xd8>)
 8008864:	2201      	movs	r2, #1
 8008866:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008868:	4b13      	ldr	r3, [pc, #76]	; (80088b8 <vTaskStartScheduler+0xdc>)
 800886a:	2200      	movs	r2, #0
 800886c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800886e:	f001 fc27 	bl	800a0c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008872:	e00e      	b.n	8008892 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800887a:	d10a      	bne.n	8008892 <vTaskStartScheduler+0xb6>
	__asm volatile
 800887c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008880:	f383 8811 	msr	BASEPRI, r3
 8008884:	f3bf 8f6f 	isb	sy
 8008888:	f3bf 8f4f 	dsb	sy
 800888c:	60fb      	str	r3, [r7, #12]
}
 800888e:	bf00      	nop
 8008890:	e7fe      	b.n	8008890 <vTaskStartScheduler+0xb4>
}
 8008892:	bf00      	nop
 8008894:	3718      	adds	r7, #24
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}
 800889a:	bf00      	nop
 800889c:	0800b678 	.word	0x0800b678
 80088a0:	08008f2d 	.word	0x08008f2d
 80088a4:	20000e88 	.word	0x20000e88
 80088a8:	20000990 	.word	0x20000990
 80088ac:	20000100 	.word	0x20000100
 80088b0:	20000e84 	.word	0x20000e84
 80088b4:	20000e70 	.word	0x20000e70
 80088b8:	20000e68 	.word	0x20000e68

080088bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80088bc:	b480      	push	{r7}
 80088be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80088c0:	4b04      	ldr	r3, [pc, #16]	; (80088d4 <vTaskSuspendAll+0x18>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	3301      	adds	r3, #1
 80088c6:	4a03      	ldr	r2, [pc, #12]	; (80088d4 <vTaskSuspendAll+0x18>)
 80088c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80088ca:	bf00      	nop
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr
 80088d4:	20000e8c 	.word	0x20000e8c

080088d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b084      	sub	sp, #16
 80088dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80088de:	2300      	movs	r3, #0
 80088e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80088e2:	2300      	movs	r3, #0
 80088e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80088e6:	4b42      	ldr	r3, [pc, #264]	; (80089f0 <xTaskResumeAll+0x118>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d10a      	bne.n	8008904 <xTaskResumeAll+0x2c>
	__asm volatile
 80088ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f2:	f383 8811 	msr	BASEPRI, r3
 80088f6:	f3bf 8f6f 	isb	sy
 80088fa:	f3bf 8f4f 	dsb	sy
 80088fe:	603b      	str	r3, [r7, #0]
}
 8008900:	bf00      	nop
 8008902:	e7fe      	b.n	8008902 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008904:	f001 fc7e 	bl	800a204 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008908:	4b39      	ldr	r3, [pc, #228]	; (80089f0 <xTaskResumeAll+0x118>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	3b01      	subs	r3, #1
 800890e:	4a38      	ldr	r2, [pc, #224]	; (80089f0 <xTaskResumeAll+0x118>)
 8008910:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008912:	4b37      	ldr	r3, [pc, #220]	; (80089f0 <xTaskResumeAll+0x118>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d162      	bne.n	80089e0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800891a:	4b36      	ldr	r3, [pc, #216]	; (80089f4 <xTaskResumeAll+0x11c>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d05e      	beq.n	80089e0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008922:	e02f      	b.n	8008984 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008924:	4b34      	ldr	r3, [pc, #208]	; (80089f8 <xTaskResumeAll+0x120>)
 8008926:	68db      	ldr	r3, [r3, #12]
 8008928:	68db      	ldr	r3, [r3, #12]
 800892a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	3318      	adds	r3, #24
 8008930:	4618      	mov	r0, r3
 8008932:	f7fe fa71 	bl	8006e18 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	3304      	adds	r3, #4
 800893a:	4618      	mov	r0, r3
 800893c:	f7fe fa6c 	bl	8006e18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008944:	4b2d      	ldr	r3, [pc, #180]	; (80089fc <xTaskResumeAll+0x124>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	429a      	cmp	r2, r3
 800894a:	d903      	bls.n	8008954 <xTaskResumeAll+0x7c>
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008950:	4a2a      	ldr	r2, [pc, #168]	; (80089fc <xTaskResumeAll+0x124>)
 8008952:	6013      	str	r3, [r2, #0]
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008958:	4613      	mov	r3, r2
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	4413      	add	r3, r2
 800895e:	009b      	lsls	r3, r3, #2
 8008960:	4a27      	ldr	r2, [pc, #156]	; (8008a00 <xTaskResumeAll+0x128>)
 8008962:	441a      	add	r2, r3
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	3304      	adds	r3, #4
 8008968:	4619      	mov	r1, r3
 800896a:	4610      	mov	r0, r2
 800896c:	f7fe f9f7 	bl	8006d5e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008974:	4b23      	ldr	r3, [pc, #140]	; (8008a04 <xTaskResumeAll+0x12c>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800897a:	429a      	cmp	r2, r3
 800897c:	d302      	bcc.n	8008984 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800897e:	4b22      	ldr	r3, [pc, #136]	; (8008a08 <xTaskResumeAll+0x130>)
 8008980:	2201      	movs	r2, #1
 8008982:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008984:	4b1c      	ldr	r3, [pc, #112]	; (80089f8 <xTaskResumeAll+0x120>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d1cb      	bne.n	8008924 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d001      	beq.n	8008996 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008992:	f000 fb85 	bl	80090a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008996:	4b1d      	ldr	r3, [pc, #116]	; (8008a0c <xTaskResumeAll+0x134>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d010      	beq.n	80089c4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80089a2:	f000 f847 	bl	8008a34 <xTaskIncrementTick>
 80089a6:	4603      	mov	r3, r0
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d002      	beq.n	80089b2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80089ac:	4b16      	ldr	r3, [pc, #88]	; (8008a08 <xTaskResumeAll+0x130>)
 80089ae:	2201      	movs	r2, #1
 80089b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	3b01      	subs	r3, #1
 80089b6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d1f1      	bne.n	80089a2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80089be:	4b13      	ldr	r3, [pc, #76]	; (8008a0c <xTaskResumeAll+0x134>)
 80089c0:	2200      	movs	r2, #0
 80089c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80089c4:	4b10      	ldr	r3, [pc, #64]	; (8008a08 <xTaskResumeAll+0x130>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d009      	beq.n	80089e0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80089cc:	2301      	movs	r3, #1
 80089ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80089d0:	4b0f      	ldr	r3, [pc, #60]	; (8008a10 <xTaskResumeAll+0x138>)
 80089d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089d6:	601a      	str	r2, [r3, #0]
 80089d8:	f3bf 8f4f 	dsb	sy
 80089dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80089e0:	f001 fc40 	bl	800a264 <vPortExitCritical>

	return xAlreadyYielded;
 80089e4:	68bb      	ldr	r3, [r7, #8]
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3710      	adds	r7, #16
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop
 80089f0:	20000e8c 	.word	0x20000e8c
 80089f4:	20000e64 	.word	0x20000e64
 80089f8:	20000e24 	.word	0x20000e24
 80089fc:	20000e6c 	.word	0x20000e6c
 8008a00:	20000994 	.word	0x20000994
 8008a04:	20000990 	.word	0x20000990
 8008a08:	20000e78 	.word	0x20000e78
 8008a0c:	20000e74 	.word	0x20000e74
 8008a10:	e000ed04 	.word	0xe000ed04

08008a14 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008a14:	b480      	push	{r7}
 8008a16:	b083      	sub	sp, #12
 8008a18:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008a1a:	4b05      	ldr	r3, [pc, #20]	; (8008a30 <xTaskGetTickCount+0x1c>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008a20:	687b      	ldr	r3, [r7, #4]
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	370c      	adds	r7, #12
 8008a26:	46bd      	mov	sp, r7
 8008a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2c:	4770      	bx	lr
 8008a2e:	bf00      	nop
 8008a30:	20000e68 	.word	0x20000e68

08008a34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b086      	sub	sp, #24
 8008a38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a3e:	4b4f      	ldr	r3, [pc, #316]	; (8008b7c <xTaskIncrementTick+0x148>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	f040 808f 	bne.w	8008b66 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008a48:	4b4d      	ldr	r3, [pc, #308]	; (8008b80 <xTaskIncrementTick+0x14c>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	3301      	adds	r3, #1
 8008a4e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008a50:	4a4b      	ldr	r2, [pc, #300]	; (8008b80 <xTaskIncrementTick+0x14c>)
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d120      	bne.n	8008a9e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008a5c:	4b49      	ldr	r3, [pc, #292]	; (8008b84 <xTaskIncrementTick+0x150>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d00a      	beq.n	8008a7c <xTaskIncrementTick+0x48>
	__asm volatile
 8008a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a6a:	f383 8811 	msr	BASEPRI, r3
 8008a6e:	f3bf 8f6f 	isb	sy
 8008a72:	f3bf 8f4f 	dsb	sy
 8008a76:	603b      	str	r3, [r7, #0]
}
 8008a78:	bf00      	nop
 8008a7a:	e7fe      	b.n	8008a7a <xTaskIncrementTick+0x46>
 8008a7c:	4b41      	ldr	r3, [pc, #260]	; (8008b84 <xTaskIncrementTick+0x150>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	60fb      	str	r3, [r7, #12]
 8008a82:	4b41      	ldr	r3, [pc, #260]	; (8008b88 <xTaskIncrementTick+0x154>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a3f      	ldr	r2, [pc, #252]	; (8008b84 <xTaskIncrementTick+0x150>)
 8008a88:	6013      	str	r3, [r2, #0]
 8008a8a:	4a3f      	ldr	r2, [pc, #252]	; (8008b88 <xTaskIncrementTick+0x154>)
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	6013      	str	r3, [r2, #0]
 8008a90:	4b3e      	ldr	r3, [pc, #248]	; (8008b8c <xTaskIncrementTick+0x158>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	3301      	adds	r3, #1
 8008a96:	4a3d      	ldr	r2, [pc, #244]	; (8008b8c <xTaskIncrementTick+0x158>)
 8008a98:	6013      	str	r3, [r2, #0]
 8008a9a:	f000 fb01 	bl	80090a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008a9e:	4b3c      	ldr	r3, [pc, #240]	; (8008b90 <xTaskIncrementTick+0x15c>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	693a      	ldr	r2, [r7, #16]
 8008aa4:	429a      	cmp	r2, r3
 8008aa6:	d349      	bcc.n	8008b3c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008aa8:	4b36      	ldr	r3, [pc, #216]	; (8008b84 <xTaskIncrementTick+0x150>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d104      	bne.n	8008abc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ab2:	4b37      	ldr	r3, [pc, #220]	; (8008b90 <xTaskIncrementTick+0x15c>)
 8008ab4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ab8:	601a      	str	r2, [r3, #0]
					break;
 8008aba:	e03f      	b.n	8008b3c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008abc:	4b31      	ldr	r3, [pc, #196]	; (8008b84 <xTaskIncrementTick+0x150>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	68db      	ldr	r3, [r3, #12]
 8008ac2:	68db      	ldr	r3, [r3, #12]
 8008ac4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008acc:	693a      	ldr	r2, [r7, #16]
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d203      	bcs.n	8008adc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008ad4:	4a2e      	ldr	r2, [pc, #184]	; (8008b90 <xTaskIncrementTick+0x15c>)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008ada:	e02f      	b.n	8008b3c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	3304      	adds	r3, #4
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f7fe f999 	bl	8006e18 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d004      	beq.n	8008af8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	3318      	adds	r3, #24
 8008af2:	4618      	mov	r0, r3
 8008af4:	f7fe f990 	bl	8006e18 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008afc:	4b25      	ldr	r3, [pc, #148]	; (8008b94 <xTaskIncrementTick+0x160>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d903      	bls.n	8008b0c <xTaskIncrementTick+0xd8>
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b08:	4a22      	ldr	r2, [pc, #136]	; (8008b94 <xTaskIncrementTick+0x160>)
 8008b0a:	6013      	str	r3, [r2, #0]
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b10:	4613      	mov	r3, r2
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	4413      	add	r3, r2
 8008b16:	009b      	lsls	r3, r3, #2
 8008b18:	4a1f      	ldr	r2, [pc, #124]	; (8008b98 <xTaskIncrementTick+0x164>)
 8008b1a:	441a      	add	r2, r3
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	3304      	adds	r3, #4
 8008b20:	4619      	mov	r1, r3
 8008b22:	4610      	mov	r0, r2
 8008b24:	f7fe f91b 	bl	8006d5e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b2c:	4b1b      	ldr	r3, [pc, #108]	; (8008b9c <xTaskIncrementTick+0x168>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d3b8      	bcc.n	8008aa8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008b36:	2301      	movs	r3, #1
 8008b38:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b3a:	e7b5      	b.n	8008aa8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008b3c:	4b17      	ldr	r3, [pc, #92]	; (8008b9c <xTaskIncrementTick+0x168>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b42:	4915      	ldr	r1, [pc, #84]	; (8008b98 <xTaskIncrementTick+0x164>)
 8008b44:	4613      	mov	r3, r2
 8008b46:	009b      	lsls	r3, r3, #2
 8008b48:	4413      	add	r3, r2
 8008b4a:	009b      	lsls	r3, r3, #2
 8008b4c:	440b      	add	r3, r1
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d901      	bls.n	8008b58 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008b54:	2301      	movs	r3, #1
 8008b56:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008b58:	4b11      	ldr	r3, [pc, #68]	; (8008ba0 <xTaskIncrementTick+0x16c>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d007      	beq.n	8008b70 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008b60:	2301      	movs	r3, #1
 8008b62:	617b      	str	r3, [r7, #20]
 8008b64:	e004      	b.n	8008b70 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008b66:	4b0f      	ldr	r3, [pc, #60]	; (8008ba4 <xTaskIncrementTick+0x170>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	3301      	adds	r3, #1
 8008b6c:	4a0d      	ldr	r2, [pc, #52]	; (8008ba4 <xTaskIncrementTick+0x170>)
 8008b6e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008b70:	697b      	ldr	r3, [r7, #20]
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3718      	adds	r7, #24
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop
 8008b7c:	20000e8c 	.word	0x20000e8c
 8008b80:	20000e68 	.word	0x20000e68
 8008b84:	20000e1c 	.word	0x20000e1c
 8008b88:	20000e20 	.word	0x20000e20
 8008b8c:	20000e7c 	.word	0x20000e7c
 8008b90:	20000e84 	.word	0x20000e84
 8008b94:	20000e6c 	.word	0x20000e6c
 8008b98:	20000994 	.word	0x20000994
 8008b9c:	20000990 	.word	0x20000990
 8008ba0:	20000e78 	.word	0x20000e78
 8008ba4:	20000e74 	.word	0x20000e74

08008ba8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b085      	sub	sp, #20
 8008bac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008bae:	4b2a      	ldr	r3, [pc, #168]	; (8008c58 <vTaskSwitchContext+0xb0>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d003      	beq.n	8008bbe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008bb6:	4b29      	ldr	r3, [pc, #164]	; (8008c5c <vTaskSwitchContext+0xb4>)
 8008bb8:	2201      	movs	r2, #1
 8008bba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008bbc:	e046      	b.n	8008c4c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008bbe:	4b27      	ldr	r3, [pc, #156]	; (8008c5c <vTaskSwitchContext+0xb4>)
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bc4:	4b26      	ldr	r3, [pc, #152]	; (8008c60 <vTaskSwitchContext+0xb8>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	60fb      	str	r3, [r7, #12]
 8008bca:	e010      	b.n	8008bee <vTaskSwitchContext+0x46>
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d10a      	bne.n	8008be8 <vTaskSwitchContext+0x40>
	__asm volatile
 8008bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd6:	f383 8811 	msr	BASEPRI, r3
 8008bda:	f3bf 8f6f 	isb	sy
 8008bde:	f3bf 8f4f 	dsb	sy
 8008be2:	607b      	str	r3, [r7, #4]
}
 8008be4:	bf00      	nop
 8008be6:	e7fe      	b.n	8008be6 <vTaskSwitchContext+0x3e>
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	3b01      	subs	r3, #1
 8008bec:	60fb      	str	r3, [r7, #12]
 8008bee:	491d      	ldr	r1, [pc, #116]	; (8008c64 <vTaskSwitchContext+0xbc>)
 8008bf0:	68fa      	ldr	r2, [r7, #12]
 8008bf2:	4613      	mov	r3, r2
 8008bf4:	009b      	lsls	r3, r3, #2
 8008bf6:	4413      	add	r3, r2
 8008bf8:	009b      	lsls	r3, r3, #2
 8008bfa:	440b      	add	r3, r1
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d0e4      	beq.n	8008bcc <vTaskSwitchContext+0x24>
 8008c02:	68fa      	ldr	r2, [r7, #12]
 8008c04:	4613      	mov	r3, r2
 8008c06:	009b      	lsls	r3, r3, #2
 8008c08:	4413      	add	r3, r2
 8008c0a:	009b      	lsls	r3, r3, #2
 8008c0c:	4a15      	ldr	r2, [pc, #84]	; (8008c64 <vTaskSwitchContext+0xbc>)
 8008c0e:	4413      	add	r3, r2
 8008c10:	60bb      	str	r3, [r7, #8]
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	685a      	ldr	r2, [r3, #4]
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	605a      	str	r2, [r3, #4]
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	685a      	ldr	r2, [r3, #4]
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	3308      	adds	r3, #8
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d104      	bne.n	8008c32 <vTaskSwitchContext+0x8a>
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	685a      	ldr	r2, [r3, #4]
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	605a      	str	r2, [r3, #4]
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	68db      	ldr	r3, [r3, #12]
 8008c38:	4a0b      	ldr	r2, [pc, #44]	; (8008c68 <vTaskSwitchContext+0xc0>)
 8008c3a:	6013      	str	r3, [r2, #0]
 8008c3c:	4a08      	ldr	r2, [pc, #32]	; (8008c60 <vTaskSwitchContext+0xb8>)
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008c42:	4b09      	ldr	r3, [pc, #36]	; (8008c68 <vTaskSwitchContext+0xc0>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	3354      	adds	r3, #84	; 0x54
 8008c48:	4a08      	ldr	r2, [pc, #32]	; (8008c6c <vTaskSwitchContext+0xc4>)
 8008c4a:	6013      	str	r3, [r2, #0]
}
 8008c4c:	bf00      	nop
 8008c4e:	3714      	adds	r7, #20
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr
 8008c58:	20000e8c 	.word	0x20000e8c
 8008c5c:	20000e78 	.word	0x20000e78
 8008c60:	20000e6c 	.word	0x20000e6c
 8008c64:	20000994 	.word	0x20000994
 8008c68:	20000990 	.word	0x20000990
 8008c6c:	20000100 	.word	0x20000100

08008c70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b084      	sub	sp, #16
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d10a      	bne.n	8008c96 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c84:	f383 8811 	msr	BASEPRI, r3
 8008c88:	f3bf 8f6f 	isb	sy
 8008c8c:	f3bf 8f4f 	dsb	sy
 8008c90:	60fb      	str	r3, [r7, #12]
}
 8008c92:	bf00      	nop
 8008c94:	e7fe      	b.n	8008c94 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c96:	4b07      	ldr	r3, [pc, #28]	; (8008cb4 <vTaskPlaceOnEventList+0x44>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	3318      	adds	r3, #24
 8008c9c:	4619      	mov	r1, r3
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f7fe f881 	bl	8006da6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008ca4:	2101      	movs	r1, #1
 8008ca6:	6838      	ldr	r0, [r7, #0]
 8008ca8:	f000 fddc 	bl	8009864 <prvAddCurrentTaskToDelayedList>
}
 8008cac:	bf00      	nop
 8008cae:	3710      	adds	r7, #16
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}
 8008cb4:	20000990 	.word	0x20000990

08008cb8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b086      	sub	sp, #24
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	60f8      	str	r0, [r7, #12]
 8008cc0:	60b9      	str	r1, [r7, #8]
 8008cc2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d10a      	bne.n	8008ce0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cce:	f383 8811 	msr	BASEPRI, r3
 8008cd2:	f3bf 8f6f 	isb	sy
 8008cd6:	f3bf 8f4f 	dsb	sy
 8008cda:	617b      	str	r3, [r7, #20]
}
 8008cdc:	bf00      	nop
 8008cde:	e7fe      	b.n	8008cde <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008ce0:	4b0a      	ldr	r3, [pc, #40]	; (8008d0c <vTaskPlaceOnEventListRestricted+0x54>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	3318      	adds	r3, #24
 8008ce6:	4619      	mov	r1, r3
 8008ce8:	68f8      	ldr	r0, [r7, #12]
 8008cea:	f7fe f838 	bl	8006d5e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d002      	beq.n	8008cfa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008cf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008cf8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008cfa:	6879      	ldr	r1, [r7, #4]
 8008cfc:	68b8      	ldr	r0, [r7, #8]
 8008cfe:	f000 fdb1 	bl	8009864 <prvAddCurrentTaskToDelayedList>
	}
 8008d02:	bf00      	nop
 8008d04:	3718      	adds	r7, #24
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
 8008d0a:	bf00      	nop
 8008d0c:	20000990 	.word	0x20000990

08008d10 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b086      	sub	sp, #24
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	68db      	ldr	r3, [r3, #12]
 8008d1c:	68db      	ldr	r3, [r3, #12]
 8008d1e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d10a      	bne.n	8008d3c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d2a:	f383 8811 	msr	BASEPRI, r3
 8008d2e:	f3bf 8f6f 	isb	sy
 8008d32:	f3bf 8f4f 	dsb	sy
 8008d36:	60fb      	str	r3, [r7, #12]
}
 8008d38:	bf00      	nop
 8008d3a:	e7fe      	b.n	8008d3a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	3318      	adds	r3, #24
 8008d40:	4618      	mov	r0, r3
 8008d42:	f7fe f869 	bl	8006e18 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d46:	4b1e      	ldr	r3, [pc, #120]	; (8008dc0 <xTaskRemoveFromEventList+0xb0>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d11d      	bne.n	8008d8a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	3304      	adds	r3, #4
 8008d52:	4618      	mov	r0, r3
 8008d54:	f7fe f860 	bl	8006e18 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d5c:	4b19      	ldr	r3, [pc, #100]	; (8008dc4 <xTaskRemoveFromEventList+0xb4>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d903      	bls.n	8008d6c <xTaskRemoveFromEventList+0x5c>
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d68:	4a16      	ldr	r2, [pc, #88]	; (8008dc4 <xTaskRemoveFromEventList+0xb4>)
 8008d6a:	6013      	str	r3, [r2, #0]
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d70:	4613      	mov	r3, r2
 8008d72:	009b      	lsls	r3, r3, #2
 8008d74:	4413      	add	r3, r2
 8008d76:	009b      	lsls	r3, r3, #2
 8008d78:	4a13      	ldr	r2, [pc, #76]	; (8008dc8 <xTaskRemoveFromEventList+0xb8>)
 8008d7a:	441a      	add	r2, r3
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	3304      	adds	r3, #4
 8008d80:	4619      	mov	r1, r3
 8008d82:	4610      	mov	r0, r2
 8008d84:	f7fd ffeb 	bl	8006d5e <vListInsertEnd>
 8008d88:	e005      	b.n	8008d96 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	3318      	adds	r3, #24
 8008d8e:	4619      	mov	r1, r3
 8008d90:	480e      	ldr	r0, [pc, #56]	; (8008dcc <xTaskRemoveFromEventList+0xbc>)
 8008d92:	f7fd ffe4 	bl	8006d5e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d9a:	4b0d      	ldr	r3, [pc, #52]	; (8008dd0 <xTaskRemoveFromEventList+0xc0>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d905      	bls.n	8008db0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008da4:	2301      	movs	r3, #1
 8008da6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008da8:	4b0a      	ldr	r3, [pc, #40]	; (8008dd4 <xTaskRemoveFromEventList+0xc4>)
 8008daa:	2201      	movs	r2, #1
 8008dac:	601a      	str	r2, [r3, #0]
 8008dae:	e001      	b.n	8008db4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008db0:	2300      	movs	r3, #0
 8008db2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008db4:	697b      	ldr	r3, [r7, #20]
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3718      	adds	r7, #24
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}
 8008dbe:	bf00      	nop
 8008dc0:	20000e8c 	.word	0x20000e8c
 8008dc4:	20000e6c 	.word	0x20000e6c
 8008dc8:	20000994 	.word	0x20000994
 8008dcc:	20000e24 	.word	0x20000e24
 8008dd0:	20000990 	.word	0x20000990
 8008dd4:	20000e78 	.word	0x20000e78

08008dd8 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b084      	sub	sp, #16
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d10a      	bne.n	8008dfc <vTaskSetTimeOutState+0x24>
	__asm volatile
 8008de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dea:	f383 8811 	msr	BASEPRI, r3
 8008dee:	f3bf 8f6f 	isb	sy
 8008df2:	f3bf 8f4f 	dsb	sy
 8008df6:	60fb      	str	r3, [r7, #12]
}
 8008df8:	bf00      	nop
 8008dfa:	e7fe      	b.n	8008dfa <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8008dfc:	f001 fa02 	bl	800a204 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008e00:	4b06      	ldr	r3, [pc, #24]	; (8008e1c <vTaskSetTimeOutState+0x44>)
 8008e02:	681a      	ldr	r2, [r3, #0]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8008e08:	4b05      	ldr	r3, [pc, #20]	; (8008e20 <vTaskSetTimeOutState+0x48>)
 8008e0a:	681a      	ldr	r2, [r3, #0]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8008e10:	f001 fa28 	bl	800a264 <vPortExitCritical>
}
 8008e14:	bf00      	nop
 8008e16:	3710      	adds	r7, #16
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}
 8008e1c:	20000e7c 	.word	0x20000e7c
 8008e20:	20000e68 	.word	0x20000e68

08008e24 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008e24:	b480      	push	{r7}
 8008e26:	b083      	sub	sp, #12
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008e2c:	4b06      	ldr	r3, [pc, #24]	; (8008e48 <vTaskInternalSetTimeOutState+0x24>)
 8008e2e:	681a      	ldr	r2, [r3, #0]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008e34:	4b05      	ldr	r3, [pc, #20]	; (8008e4c <vTaskInternalSetTimeOutState+0x28>)
 8008e36:	681a      	ldr	r2, [r3, #0]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	605a      	str	r2, [r3, #4]
}
 8008e3c:	bf00      	nop
 8008e3e:	370c      	adds	r7, #12
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr
 8008e48:	20000e7c 	.word	0x20000e7c
 8008e4c:	20000e68 	.word	0x20000e68

08008e50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b088      	sub	sp, #32
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d10a      	bne.n	8008e76 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e64:	f383 8811 	msr	BASEPRI, r3
 8008e68:	f3bf 8f6f 	isb	sy
 8008e6c:	f3bf 8f4f 	dsb	sy
 8008e70:	613b      	str	r3, [r7, #16]
}
 8008e72:	bf00      	nop
 8008e74:	e7fe      	b.n	8008e74 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d10a      	bne.n	8008e92 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e80:	f383 8811 	msr	BASEPRI, r3
 8008e84:	f3bf 8f6f 	isb	sy
 8008e88:	f3bf 8f4f 	dsb	sy
 8008e8c:	60fb      	str	r3, [r7, #12]
}
 8008e8e:	bf00      	nop
 8008e90:	e7fe      	b.n	8008e90 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008e92:	f001 f9b7 	bl	800a204 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008e96:	4b1d      	ldr	r3, [pc, #116]	; (8008f0c <xTaskCheckForTimeOut+0xbc>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	69ba      	ldr	r2, [r7, #24]
 8008ea2:	1ad3      	subs	r3, r2, r3
 8008ea4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008eae:	d102      	bne.n	8008eb6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	61fb      	str	r3, [r7, #28]
 8008eb4:	e023      	b.n	8008efe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681a      	ldr	r2, [r3, #0]
 8008eba:	4b15      	ldr	r3, [pc, #84]	; (8008f10 <xTaskCheckForTimeOut+0xc0>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	429a      	cmp	r2, r3
 8008ec0:	d007      	beq.n	8008ed2 <xTaskCheckForTimeOut+0x82>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	685b      	ldr	r3, [r3, #4]
 8008ec6:	69ba      	ldr	r2, [r7, #24]
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d302      	bcc.n	8008ed2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008ecc:	2301      	movs	r3, #1
 8008ece:	61fb      	str	r3, [r7, #28]
 8008ed0:	e015      	b.n	8008efe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	697a      	ldr	r2, [r7, #20]
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d20b      	bcs.n	8008ef4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	681a      	ldr	r2, [r3, #0]
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	1ad2      	subs	r2, r2, r3
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f7ff ff9b 	bl	8008e24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	61fb      	str	r3, [r7, #28]
 8008ef2:	e004      	b.n	8008efe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008efa:	2301      	movs	r3, #1
 8008efc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008efe:	f001 f9b1 	bl	800a264 <vPortExitCritical>

	return xReturn;
 8008f02:	69fb      	ldr	r3, [r7, #28]
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3720      	adds	r7, #32
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}
 8008f0c:	20000e68 	.word	0x20000e68
 8008f10:	20000e7c 	.word	0x20000e7c

08008f14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008f14:	b480      	push	{r7}
 8008f16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008f18:	4b03      	ldr	r3, [pc, #12]	; (8008f28 <vTaskMissedYield+0x14>)
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	601a      	str	r2, [r3, #0]
}
 8008f1e:	bf00      	nop
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr
 8008f28:	20000e78 	.word	0x20000e78

08008f2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b082      	sub	sp, #8
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008f34:	f000 f852 	bl	8008fdc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008f38:	4b06      	ldr	r3, [pc, #24]	; (8008f54 <prvIdleTask+0x28>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	2b01      	cmp	r3, #1
 8008f3e:	d9f9      	bls.n	8008f34 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008f40:	4b05      	ldr	r3, [pc, #20]	; (8008f58 <prvIdleTask+0x2c>)
 8008f42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f46:	601a      	str	r2, [r3, #0]
 8008f48:	f3bf 8f4f 	dsb	sy
 8008f4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008f50:	e7f0      	b.n	8008f34 <prvIdleTask+0x8>
 8008f52:	bf00      	nop
 8008f54:	20000994 	.word	0x20000994
 8008f58:	e000ed04 	.word	0xe000ed04

08008f5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b082      	sub	sp, #8
 8008f60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f62:	2300      	movs	r3, #0
 8008f64:	607b      	str	r3, [r7, #4]
 8008f66:	e00c      	b.n	8008f82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	4613      	mov	r3, r2
 8008f6c:	009b      	lsls	r3, r3, #2
 8008f6e:	4413      	add	r3, r2
 8008f70:	009b      	lsls	r3, r3, #2
 8008f72:	4a12      	ldr	r2, [pc, #72]	; (8008fbc <prvInitialiseTaskLists+0x60>)
 8008f74:	4413      	add	r3, r2
 8008f76:	4618      	mov	r0, r3
 8008f78:	f7fd fec4 	bl	8006d04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	3301      	adds	r3, #1
 8008f80:	607b      	str	r3, [r7, #4]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2b37      	cmp	r3, #55	; 0x37
 8008f86:	d9ef      	bls.n	8008f68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008f88:	480d      	ldr	r0, [pc, #52]	; (8008fc0 <prvInitialiseTaskLists+0x64>)
 8008f8a:	f7fd febb 	bl	8006d04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008f8e:	480d      	ldr	r0, [pc, #52]	; (8008fc4 <prvInitialiseTaskLists+0x68>)
 8008f90:	f7fd feb8 	bl	8006d04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008f94:	480c      	ldr	r0, [pc, #48]	; (8008fc8 <prvInitialiseTaskLists+0x6c>)
 8008f96:	f7fd feb5 	bl	8006d04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008f9a:	480c      	ldr	r0, [pc, #48]	; (8008fcc <prvInitialiseTaskLists+0x70>)
 8008f9c:	f7fd feb2 	bl	8006d04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008fa0:	480b      	ldr	r0, [pc, #44]	; (8008fd0 <prvInitialiseTaskLists+0x74>)
 8008fa2:	f7fd feaf 	bl	8006d04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008fa6:	4b0b      	ldr	r3, [pc, #44]	; (8008fd4 <prvInitialiseTaskLists+0x78>)
 8008fa8:	4a05      	ldr	r2, [pc, #20]	; (8008fc0 <prvInitialiseTaskLists+0x64>)
 8008faa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008fac:	4b0a      	ldr	r3, [pc, #40]	; (8008fd8 <prvInitialiseTaskLists+0x7c>)
 8008fae:	4a05      	ldr	r2, [pc, #20]	; (8008fc4 <prvInitialiseTaskLists+0x68>)
 8008fb0:	601a      	str	r2, [r3, #0]
}
 8008fb2:	bf00      	nop
 8008fb4:	3708      	adds	r7, #8
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	bf00      	nop
 8008fbc:	20000994 	.word	0x20000994
 8008fc0:	20000df4 	.word	0x20000df4
 8008fc4:	20000e08 	.word	0x20000e08
 8008fc8:	20000e24 	.word	0x20000e24
 8008fcc:	20000e38 	.word	0x20000e38
 8008fd0:	20000e50 	.word	0x20000e50
 8008fd4:	20000e1c 	.word	0x20000e1c
 8008fd8:	20000e20 	.word	0x20000e20

08008fdc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b082      	sub	sp, #8
 8008fe0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008fe2:	e019      	b.n	8009018 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008fe4:	f001 f90e 	bl	800a204 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fe8:	4b10      	ldr	r3, [pc, #64]	; (800902c <prvCheckTasksWaitingTermination+0x50>)
 8008fea:	68db      	ldr	r3, [r3, #12]
 8008fec:	68db      	ldr	r3, [r3, #12]
 8008fee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	3304      	adds	r3, #4
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f7fd ff0f 	bl	8006e18 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008ffa:	4b0d      	ldr	r3, [pc, #52]	; (8009030 <prvCheckTasksWaitingTermination+0x54>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	3b01      	subs	r3, #1
 8009000:	4a0b      	ldr	r2, [pc, #44]	; (8009030 <prvCheckTasksWaitingTermination+0x54>)
 8009002:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009004:	4b0b      	ldr	r3, [pc, #44]	; (8009034 <prvCheckTasksWaitingTermination+0x58>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	3b01      	subs	r3, #1
 800900a:	4a0a      	ldr	r2, [pc, #40]	; (8009034 <prvCheckTasksWaitingTermination+0x58>)
 800900c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800900e:	f001 f929 	bl	800a264 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 f810 	bl	8009038 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009018:	4b06      	ldr	r3, [pc, #24]	; (8009034 <prvCheckTasksWaitingTermination+0x58>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d1e1      	bne.n	8008fe4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009020:	bf00      	nop
 8009022:	bf00      	nop
 8009024:	3708      	adds	r7, #8
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
 800902a:	bf00      	nop
 800902c:	20000e38 	.word	0x20000e38
 8009030:	20000e64 	.word	0x20000e64
 8009034:	20000e4c 	.word	0x20000e4c

08009038 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009038:	b580      	push	{r7, lr}
 800903a:	b084      	sub	sp, #16
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	3354      	adds	r3, #84	; 0x54
 8009044:	4618      	mov	r0, r3
 8009046:	f002 fa51 	bl	800b4ec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009050:	2b00      	cmp	r3, #0
 8009052:	d108      	bne.n	8009066 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009058:	4618      	mov	r0, r3
 800905a:	f001 fac1 	bl	800a5e0 <vPortFree>
				vPortFree( pxTCB );
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f001 fabe 	bl	800a5e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009064:	e018      	b.n	8009098 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800906c:	2b01      	cmp	r3, #1
 800906e:	d103      	bne.n	8009078 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f001 fab5 	bl	800a5e0 <vPortFree>
	}
 8009076:	e00f      	b.n	8009098 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800907e:	2b02      	cmp	r3, #2
 8009080:	d00a      	beq.n	8009098 <prvDeleteTCB+0x60>
	__asm volatile
 8009082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009086:	f383 8811 	msr	BASEPRI, r3
 800908a:	f3bf 8f6f 	isb	sy
 800908e:	f3bf 8f4f 	dsb	sy
 8009092:	60fb      	str	r3, [r7, #12]
}
 8009094:	bf00      	nop
 8009096:	e7fe      	b.n	8009096 <prvDeleteTCB+0x5e>
	}
 8009098:	bf00      	nop
 800909a:	3710      	adds	r7, #16
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80090a0:	b480      	push	{r7}
 80090a2:	b083      	sub	sp, #12
 80090a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090a6:	4b0c      	ldr	r3, [pc, #48]	; (80090d8 <prvResetNextTaskUnblockTime+0x38>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d104      	bne.n	80090ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80090b0:	4b0a      	ldr	r3, [pc, #40]	; (80090dc <prvResetNextTaskUnblockTime+0x3c>)
 80090b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80090b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80090b8:	e008      	b.n	80090cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090ba:	4b07      	ldr	r3, [pc, #28]	; (80090d8 <prvResetNextTaskUnblockTime+0x38>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	68db      	ldr	r3, [r3, #12]
 80090c0:	68db      	ldr	r3, [r3, #12]
 80090c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	4a04      	ldr	r2, [pc, #16]	; (80090dc <prvResetNextTaskUnblockTime+0x3c>)
 80090ca:	6013      	str	r3, [r2, #0]
}
 80090cc:	bf00      	nop
 80090ce:	370c      	adds	r7, #12
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr
 80090d8:	20000e1c 	.word	0x20000e1c
 80090dc:	20000e84 	.word	0x20000e84

080090e0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80090e0:	b480      	push	{r7}
 80090e2:	b083      	sub	sp, #12
 80090e4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80090e6:	4b05      	ldr	r3, [pc, #20]	; (80090fc <xTaskGetCurrentTaskHandle+0x1c>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	607b      	str	r3, [r7, #4]

		return xReturn;
 80090ec:	687b      	ldr	r3, [r7, #4]
	}
 80090ee:	4618      	mov	r0, r3
 80090f0:	370c      	adds	r7, #12
 80090f2:	46bd      	mov	sp, r7
 80090f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f8:	4770      	bx	lr
 80090fa:	bf00      	nop
 80090fc:	20000990 	.word	0x20000990

08009100 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009100:	b480      	push	{r7}
 8009102:	b083      	sub	sp, #12
 8009104:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009106:	4b0b      	ldr	r3, [pc, #44]	; (8009134 <xTaskGetSchedulerState+0x34>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d102      	bne.n	8009114 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800910e:	2301      	movs	r3, #1
 8009110:	607b      	str	r3, [r7, #4]
 8009112:	e008      	b.n	8009126 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009114:	4b08      	ldr	r3, [pc, #32]	; (8009138 <xTaskGetSchedulerState+0x38>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d102      	bne.n	8009122 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800911c:	2302      	movs	r3, #2
 800911e:	607b      	str	r3, [r7, #4]
 8009120:	e001      	b.n	8009126 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009122:	2300      	movs	r3, #0
 8009124:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009126:	687b      	ldr	r3, [r7, #4]
	}
 8009128:	4618      	mov	r0, r3
 800912a:	370c      	adds	r7, #12
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr
 8009134:	20000e70 	.word	0x20000e70
 8009138:	20000e8c 	.word	0x20000e8c

0800913c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800913c:	b580      	push	{r7, lr}
 800913e:	b084      	sub	sp, #16
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009148:	2300      	movs	r3, #0
 800914a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d051      	beq.n	80091f6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009156:	4b2a      	ldr	r3, [pc, #168]	; (8009200 <xTaskPriorityInherit+0xc4>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800915c:	429a      	cmp	r2, r3
 800915e:	d241      	bcs.n	80091e4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	699b      	ldr	r3, [r3, #24]
 8009164:	2b00      	cmp	r3, #0
 8009166:	db06      	blt.n	8009176 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009168:	4b25      	ldr	r3, [pc, #148]	; (8009200 <xTaskPriorityInherit+0xc4>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800916e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	6959      	ldr	r1, [r3, #20]
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800917e:	4613      	mov	r3, r2
 8009180:	009b      	lsls	r3, r3, #2
 8009182:	4413      	add	r3, r2
 8009184:	009b      	lsls	r3, r3, #2
 8009186:	4a1f      	ldr	r2, [pc, #124]	; (8009204 <xTaskPriorityInherit+0xc8>)
 8009188:	4413      	add	r3, r2
 800918a:	4299      	cmp	r1, r3
 800918c:	d122      	bne.n	80091d4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	3304      	adds	r3, #4
 8009192:	4618      	mov	r0, r3
 8009194:	f7fd fe40 	bl	8006e18 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009198:	4b19      	ldr	r3, [pc, #100]	; (8009200 <xTaskPriorityInherit+0xc4>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091a6:	4b18      	ldr	r3, [pc, #96]	; (8009208 <xTaskPriorityInherit+0xcc>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d903      	bls.n	80091b6 <xTaskPriorityInherit+0x7a>
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091b2:	4a15      	ldr	r2, [pc, #84]	; (8009208 <xTaskPriorityInherit+0xcc>)
 80091b4:	6013      	str	r3, [r2, #0]
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091ba:	4613      	mov	r3, r2
 80091bc:	009b      	lsls	r3, r3, #2
 80091be:	4413      	add	r3, r2
 80091c0:	009b      	lsls	r3, r3, #2
 80091c2:	4a10      	ldr	r2, [pc, #64]	; (8009204 <xTaskPriorityInherit+0xc8>)
 80091c4:	441a      	add	r2, r3
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	3304      	adds	r3, #4
 80091ca:	4619      	mov	r1, r3
 80091cc:	4610      	mov	r0, r2
 80091ce:	f7fd fdc6 	bl	8006d5e <vListInsertEnd>
 80091d2:	e004      	b.n	80091de <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80091d4:	4b0a      	ldr	r3, [pc, #40]	; (8009200 <xTaskPriorityInherit+0xc4>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80091de:	2301      	movs	r3, #1
 80091e0:	60fb      	str	r3, [r7, #12]
 80091e2:	e008      	b.n	80091f6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80091e8:	4b05      	ldr	r3, [pc, #20]	; (8009200 <xTaskPriorityInherit+0xc4>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ee:	429a      	cmp	r2, r3
 80091f0:	d201      	bcs.n	80091f6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80091f2:	2301      	movs	r3, #1
 80091f4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80091f6:	68fb      	ldr	r3, [r7, #12]
	}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3710      	adds	r7, #16
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}
 8009200:	20000990 	.word	0x20000990
 8009204:	20000994 	.word	0x20000994
 8009208:	20000e6c 	.word	0x20000e6c

0800920c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800920c:	b580      	push	{r7, lr}
 800920e:	b086      	sub	sp, #24
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009218:	2300      	movs	r3, #0
 800921a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d056      	beq.n	80092d0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009222:	4b2e      	ldr	r3, [pc, #184]	; (80092dc <xTaskPriorityDisinherit+0xd0>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	693a      	ldr	r2, [r7, #16]
 8009228:	429a      	cmp	r2, r3
 800922a:	d00a      	beq.n	8009242 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800922c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009230:	f383 8811 	msr	BASEPRI, r3
 8009234:	f3bf 8f6f 	isb	sy
 8009238:	f3bf 8f4f 	dsb	sy
 800923c:	60fb      	str	r3, [r7, #12]
}
 800923e:	bf00      	nop
 8009240:	e7fe      	b.n	8009240 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009246:	2b00      	cmp	r3, #0
 8009248:	d10a      	bne.n	8009260 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800924a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800924e:	f383 8811 	msr	BASEPRI, r3
 8009252:	f3bf 8f6f 	isb	sy
 8009256:	f3bf 8f4f 	dsb	sy
 800925a:	60bb      	str	r3, [r7, #8]
}
 800925c:	bf00      	nop
 800925e:	e7fe      	b.n	800925e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009264:	1e5a      	subs	r2, r3, #1
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009272:	429a      	cmp	r2, r3
 8009274:	d02c      	beq.n	80092d0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800927a:	2b00      	cmp	r3, #0
 800927c:	d128      	bne.n	80092d0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	3304      	adds	r3, #4
 8009282:	4618      	mov	r0, r3
 8009284:	f7fd fdc8 	bl	8006e18 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009294:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092a0:	4b0f      	ldr	r3, [pc, #60]	; (80092e0 <xTaskPriorityDisinherit+0xd4>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	429a      	cmp	r2, r3
 80092a6:	d903      	bls.n	80092b0 <xTaskPriorityDisinherit+0xa4>
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ac:	4a0c      	ldr	r2, [pc, #48]	; (80092e0 <xTaskPriorityDisinherit+0xd4>)
 80092ae:	6013      	str	r3, [r2, #0]
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092b4:	4613      	mov	r3, r2
 80092b6:	009b      	lsls	r3, r3, #2
 80092b8:	4413      	add	r3, r2
 80092ba:	009b      	lsls	r3, r3, #2
 80092bc:	4a09      	ldr	r2, [pc, #36]	; (80092e4 <xTaskPriorityDisinherit+0xd8>)
 80092be:	441a      	add	r2, r3
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	3304      	adds	r3, #4
 80092c4:	4619      	mov	r1, r3
 80092c6:	4610      	mov	r0, r2
 80092c8:	f7fd fd49 	bl	8006d5e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80092cc:	2301      	movs	r3, #1
 80092ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80092d0:	697b      	ldr	r3, [r7, #20]
	}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3718      	adds	r7, #24
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}
 80092da:	bf00      	nop
 80092dc:	20000990 	.word	0x20000990
 80092e0:	20000e6c 	.word	0x20000e6c
 80092e4:	20000994 	.word	0x20000994

080092e8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b088      	sub	sp, #32
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80092f6:	2301      	movs	r3, #1
 80092f8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d06a      	beq.n	80093d6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009300:	69bb      	ldr	r3, [r7, #24]
 8009302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009304:	2b00      	cmp	r3, #0
 8009306:	d10a      	bne.n	800931e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800930c:	f383 8811 	msr	BASEPRI, r3
 8009310:	f3bf 8f6f 	isb	sy
 8009314:	f3bf 8f4f 	dsb	sy
 8009318:	60fb      	str	r3, [r7, #12]
}
 800931a:	bf00      	nop
 800931c:	e7fe      	b.n	800931c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800931e:	69bb      	ldr	r3, [r7, #24]
 8009320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009322:	683a      	ldr	r2, [r7, #0]
 8009324:	429a      	cmp	r2, r3
 8009326:	d902      	bls.n	800932e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	61fb      	str	r3, [r7, #28]
 800932c:	e002      	b.n	8009334 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800932e:	69bb      	ldr	r3, [r7, #24]
 8009330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009332:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009334:	69bb      	ldr	r3, [r7, #24]
 8009336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009338:	69fa      	ldr	r2, [r7, #28]
 800933a:	429a      	cmp	r2, r3
 800933c:	d04b      	beq.n	80093d6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800933e:	69bb      	ldr	r3, [r7, #24]
 8009340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009342:	697a      	ldr	r2, [r7, #20]
 8009344:	429a      	cmp	r2, r3
 8009346:	d146      	bne.n	80093d6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009348:	4b25      	ldr	r3, [pc, #148]	; (80093e0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	69ba      	ldr	r2, [r7, #24]
 800934e:	429a      	cmp	r2, r3
 8009350:	d10a      	bne.n	8009368 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8009352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009356:	f383 8811 	msr	BASEPRI, r3
 800935a:	f3bf 8f6f 	isb	sy
 800935e:	f3bf 8f4f 	dsb	sy
 8009362:	60bb      	str	r3, [r7, #8]
}
 8009364:	bf00      	nop
 8009366:	e7fe      	b.n	8009366 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009368:	69bb      	ldr	r3, [r7, #24]
 800936a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800936c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800936e:	69bb      	ldr	r3, [r7, #24]
 8009370:	69fa      	ldr	r2, [r7, #28]
 8009372:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009374:	69bb      	ldr	r3, [r7, #24]
 8009376:	699b      	ldr	r3, [r3, #24]
 8009378:	2b00      	cmp	r3, #0
 800937a:	db04      	blt.n	8009386 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800937c:	69fb      	ldr	r3, [r7, #28]
 800937e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009382:	69bb      	ldr	r3, [r7, #24]
 8009384:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009386:	69bb      	ldr	r3, [r7, #24]
 8009388:	6959      	ldr	r1, [r3, #20]
 800938a:	693a      	ldr	r2, [r7, #16]
 800938c:	4613      	mov	r3, r2
 800938e:	009b      	lsls	r3, r3, #2
 8009390:	4413      	add	r3, r2
 8009392:	009b      	lsls	r3, r3, #2
 8009394:	4a13      	ldr	r2, [pc, #76]	; (80093e4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009396:	4413      	add	r3, r2
 8009398:	4299      	cmp	r1, r3
 800939a:	d11c      	bne.n	80093d6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800939c:	69bb      	ldr	r3, [r7, #24]
 800939e:	3304      	adds	r3, #4
 80093a0:	4618      	mov	r0, r3
 80093a2:	f7fd fd39 	bl	8006e18 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80093a6:	69bb      	ldr	r3, [r7, #24]
 80093a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093aa:	4b0f      	ldr	r3, [pc, #60]	; (80093e8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	429a      	cmp	r2, r3
 80093b0:	d903      	bls.n	80093ba <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80093b2:	69bb      	ldr	r3, [r7, #24]
 80093b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093b6:	4a0c      	ldr	r2, [pc, #48]	; (80093e8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80093b8:	6013      	str	r3, [r2, #0]
 80093ba:	69bb      	ldr	r3, [r7, #24]
 80093bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093be:	4613      	mov	r3, r2
 80093c0:	009b      	lsls	r3, r3, #2
 80093c2:	4413      	add	r3, r2
 80093c4:	009b      	lsls	r3, r3, #2
 80093c6:	4a07      	ldr	r2, [pc, #28]	; (80093e4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80093c8:	441a      	add	r2, r3
 80093ca:	69bb      	ldr	r3, [r7, #24]
 80093cc:	3304      	adds	r3, #4
 80093ce:	4619      	mov	r1, r3
 80093d0:	4610      	mov	r0, r2
 80093d2:	f7fd fcc4 	bl	8006d5e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80093d6:	bf00      	nop
 80093d8:	3720      	adds	r7, #32
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	bf00      	nop
 80093e0:	20000990 	.word	0x20000990
 80093e4:	20000994 	.word	0x20000994
 80093e8:	20000e6c 	.word	0x20000e6c

080093ec <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80093ec:	b480      	push	{r7}
 80093ee:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80093f0:	4b07      	ldr	r3, [pc, #28]	; (8009410 <pvTaskIncrementMutexHeldCount+0x24>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d004      	beq.n	8009402 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80093f8:	4b05      	ldr	r3, [pc, #20]	; (8009410 <pvTaskIncrementMutexHeldCount+0x24>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80093fe:	3201      	adds	r2, #1
 8009400:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009402:	4b03      	ldr	r3, [pc, #12]	; (8009410 <pvTaskIncrementMutexHeldCount+0x24>)
 8009404:	681b      	ldr	r3, [r3, #0]
	}
 8009406:	4618      	mov	r0, r3
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr
 8009410:	20000990 	.word	0x20000990

08009414 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8009414:	b580      	push	{r7, lr}
 8009416:	b086      	sub	sp, #24
 8009418:	af00      	add	r7, sp, #0
 800941a:	60f8      	str	r0, [r7, #12]
 800941c:	60b9      	str	r1, [r7, #8]
 800941e:	607a      	str	r2, [r7, #4]
 8009420:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8009422:	f000 feef 	bl	800a204 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009426:	4b29      	ldr	r3, [pc, #164]	; (80094cc <xTaskNotifyWait+0xb8>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800942e:	b2db      	uxtb	r3, r3
 8009430:	2b02      	cmp	r3, #2
 8009432:	d01c      	beq.n	800946e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8009434:	4b25      	ldr	r3, [pc, #148]	; (80094cc <xTaskNotifyWait+0xb8>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800943c:	68fa      	ldr	r2, [r7, #12]
 800943e:	43d2      	mvns	r2, r2
 8009440:	400a      	ands	r2, r1
 8009442:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009446:	4b21      	ldr	r3, [pc, #132]	; (80094cc <xTaskNotifyWait+0xb8>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	2201      	movs	r2, #1
 800944c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d00b      	beq.n	800946e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009456:	2101      	movs	r1, #1
 8009458:	6838      	ldr	r0, [r7, #0]
 800945a:	f000 fa03 	bl	8009864 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800945e:	4b1c      	ldr	r3, [pc, #112]	; (80094d0 <xTaskNotifyWait+0xbc>)
 8009460:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009464:	601a      	str	r2, [r3, #0]
 8009466:	f3bf 8f4f 	dsb	sy
 800946a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800946e:	f000 fef9 	bl	800a264 <vPortExitCritical>

		taskENTER_CRITICAL();
 8009472:	f000 fec7 	bl	800a204 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d005      	beq.n	8009488 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800947c:	4b13      	ldr	r3, [pc, #76]	; (80094cc <xTaskNotifyWait+0xb8>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009488:	4b10      	ldr	r3, [pc, #64]	; (80094cc <xTaskNotifyWait+0xb8>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8009490:	b2db      	uxtb	r3, r3
 8009492:	2b02      	cmp	r3, #2
 8009494:	d002      	beq.n	800949c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8009496:	2300      	movs	r3, #0
 8009498:	617b      	str	r3, [r7, #20]
 800949a:	e00a      	b.n	80094b2 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800949c:	4b0b      	ldr	r3, [pc, #44]	; (80094cc <xTaskNotifyWait+0xb8>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 80094a4:	68ba      	ldr	r2, [r7, #8]
 80094a6:	43d2      	mvns	r2, r2
 80094a8:	400a      	ands	r2, r1
 80094aa:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 80094ae:	2301      	movs	r3, #1
 80094b0:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80094b2:	4b06      	ldr	r3, [pc, #24]	; (80094cc <xTaskNotifyWait+0xb8>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	2200      	movs	r2, #0
 80094b8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 80094bc:	f000 fed2 	bl	800a264 <vPortExitCritical>

		return xReturn;
 80094c0:	697b      	ldr	r3, [r7, #20]
	}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3718      	adds	r7, #24
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}
 80094ca:	bf00      	nop
 80094cc:	20000990 	.word	0x20000990
 80094d0:	e000ed04 	.word	0xe000ed04

080094d4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b08a      	sub	sp, #40	; 0x28
 80094d8:	af00      	add	r7, sp, #0
 80094da:	60f8      	str	r0, [r7, #12]
 80094dc:	60b9      	str	r1, [r7, #8]
 80094de:	603b      	str	r3, [r7, #0]
 80094e0:	4613      	mov	r3, r2
 80094e2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80094e4:	2301      	movs	r3, #1
 80094e6:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d10a      	bne.n	8009504 <xTaskGenericNotify+0x30>
	__asm volatile
 80094ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f2:	f383 8811 	msr	BASEPRI, r3
 80094f6:	f3bf 8f6f 	isb	sy
 80094fa:	f3bf 8f4f 	dsb	sy
 80094fe:	61bb      	str	r3, [r7, #24]
}
 8009500:	bf00      	nop
 8009502:	e7fe      	b.n	8009502 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8009508:	f000 fe7c 	bl	800a204 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d004      	beq.n	800951c <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009512:	6a3b      	ldr	r3, [r7, #32]
 8009514:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800951c:	6a3b      	ldr	r3, [r7, #32]
 800951e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8009522:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009524:	6a3b      	ldr	r3, [r7, #32]
 8009526:	2202      	movs	r2, #2
 8009528:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800952c:	79fb      	ldrb	r3, [r7, #7]
 800952e:	2b04      	cmp	r3, #4
 8009530:	d82d      	bhi.n	800958e <xTaskGenericNotify+0xba>
 8009532:	a201      	add	r2, pc, #4	; (adr r2, 8009538 <xTaskGenericNotify+0x64>)
 8009534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009538:	080095b1 	.word	0x080095b1
 800953c:	0800954d 	.word	0x0800954d
 8009540:	0800955f 	.word	0x0800955f
 8009544:	0800956f 	.word	0x0800956f
 8009548:	08009579 	.word	0x08009579
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800954c:	6a3b      	ldr	r3, [r7, #32]
 800954e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	431a      	orrs	r2, r3
 8009556:	6a3b      	ldr	r3, [r7, #32]
 8009558:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800955c:	e02b      	b.n	80095b6 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800955e:	6a3b      	ldr	r3, [r7, #32]
 8009560:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009564:	1c5a      	adds	r2, r3, #1
 8009566:	6a3b      	ldr	r3, [r7, #32]
 8009568:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800956c:	e023      	b.n	80095b6 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800956e:	6a3b      	ldr	r3, [r7, #32]
 8009570:	68ba      	ldr	r2, [r7, #8]
 8009572:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8009576:	e01e      	b.n	80095b6 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009578:	7ffb      	ldrb	r3, [r7, #31]
 800957a:	2b02      	cmp	r3, #2
 800957c:	d004      	beq.n	8009588 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800957e:	6a3b      	ldr	r3, [r7, #32]
 8009580:	68ba      	ldr	r2, [r7, #8]
 8009582:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009586:	e016      	b.n	80095b6 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8009588:	2300      	movs	r3, #0
 800958a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800958c:	e013      	b.n	80095b6 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800958e:	6a3b      	ldr	r3, [r7, #32]
 8009590:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009594:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009598:	d00c      	beq.n	80095b4 <xTaskGenericNotify+0xe0>
	__asm volatile
 800959a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800959e:	f383 8811 	msr	BASEPRI, r3
 80095a2:	f3bf 8f6f 	isb	sy
 80095a6:	f3bf 8f4f 	dsb	sy
 80095aa:	617b      	str	r3, [r7, #20]
}
 80095ac:	bf00      	nop
 80095ae:	e7fe      	b.n	80095ae <xTaskGenericNotify+0xda>
					break;
 80095b0:	bf00      	nop
 80095b2:	e000      	b.n	80095b6 <xTaskGenericNotify+0xe2>

					break;
 80095b4:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80095b6:	7ffb      	ldrb	r3, [r7, #31]
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	d13a      	bne.n	8009632 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80095bc:	6a3b      	ldr	r3, [r7, #32]
 80095be:	3304      	adds	r3, #4
 80095c0:	4618      	mov	r0, r3
 80095c2:	f7fd fc29 	bl	8006e18 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80095c6:	6a3b      	ldr	r3, [r7, #32]
 80095c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095ca:	4b1d      	ldr	r3, [pc, #116]	; (8009640 <xTaskGenericNotify+0x16c>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	429a      	cmp	r2, r3
 80095d0:	d903      	bls.n	80095da <xTaskGenericNotify+0x106>
 80095d2:	6a3b      	ldr	r3, [r7, #32]
 80095d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d6:	4a1a      	ldr	r2, [pc, #104]	; (8009640 <xTaskGenericNotify+0x16c>)
 80095d8:	6013      	str	r3, [r2, #0]
 80095da:	6a3b      	ldr	r3, [r7, #32]
 80095dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095de:	4613      	mov	r3, r2
 80095e0:	009b      	lsls	r3, r3, #2
 80095e2:	4413      	add	r3, r2
 80095e4:	009b      	lsls	r3, r3, #2
 80095e6:	4a17      	ldr	r2, [pc, #92]	; (8009644 <xTaskGenericNotify+0x170>)
 80095e8:	441a      	add	r2, r3
 80095ea:	6a3b      	ldr	r3, [r7, #32]
 80095ec:	3304      	adds	r3, #4
 80095ee:	4619      	mov	r1, r3
 80095f0:	4610      	mov	r0, r2
 80095f2:	f7fd fbb4 	bl	8006d5e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80095f6:	6a3b      	ldr	r3, [r7, #32]
 80095f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d00a      	beq.n	8009614 <xTaskGenericNotify+0x140>
	__asm volatile
 80095fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009602:	f383 8811 	msr	BASEPRI, r3
 8009606:	f3bf 8f6f 	isb	sy
 800960a:	f3bf 8f4f 	dsb	sy
 800960e:	613b      	str	r3, [r7, #16]
}
 8009610:	bf00      	nop
 8009612:	e7fe      	b.n	8009612 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009614:	6a3b      	ldr	r3, [r7, #32]
 8009616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009618:	4b0b      	ldr	r3, [pc, #44]	; (8009648 <xTaskGenericNotify+0x174>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800961e:	429a      	cmp	r2, r3
 8009620:	d907      	bls.n	8009632 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8009622:	4b0a      	ldr	r3, [pc, #40]	; (800964c <xTaskGenericNotify+0x178>)
 8009624:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009628:	601a      	str	r2, [r3, #0]
 800962a:	f3bf 8f4f 	dsb	sy
 800962e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009632:	f000 fe17 	bl	800a264 <vPortExitCritical>

		return xReturn;
 8009636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8009638:	4618      	mov	r0, r3
 800963a:	3728      	adds	r7, #40	; 0x28
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}
 8009640:	20000e6c 	.word	0x20000e6c
 8009644:	20000994 	.word	0x20000994
 8009648:	20000990 	.word	0x20000990
 800964c:	e000ed04 	.word	0xe000ed04

08009650 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009650:	b580      	push	{r7, lr}
 8009652:	b08e      	sub	sp, #56	; 0x38
 8009654:	af00      	add	r7, sp, #0
 8009656:	60f8      	str	r0, [r7, #12]
 8009658:	60b9      	str	r1, [r7, #8]
 800965a:	603b      	str	r3, [r7, #0]
 800965c:	4613      	mov	r3, r2
 800965e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8009660:	2301      	movs	r3, #1
 8009662:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d10a      	bne.n	8009680 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800966a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800966e:	f383 8811 	msr	BASEPRI, r3
 8009672:	f3bf 8f6f 	isb	sy
 8009676:	f3bf 8f4f 	dsb	sy
 800967a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800967c:	bf00      	nop
 800967e:	e7fe      	b.n	800967e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009680:	f000 fea2 	bl	800a3c8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8009688:	f3ef 8211 	mrs	r2, BASEPRI
 800968c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009690:	f383 8811 	msr	BASEPRI, r3
 8009694:	f3bf 8f6f 	isb	sy
 8009698:	f3bf 8f4f 	dsb	sy
 800969c:	623a      	str	r2, [r7, #32]
 800969e:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80096a0:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80096a2:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d004      	beq.n	80096b4 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80096aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ac:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80096b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b6:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80096ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80096be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c0:	2202      	movs	r2, #2
 80096c2:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 80096c6:	79fb      	ldrb	r3, [r7, #7]
 80096c8:	2b04      	cmp	r3, #4
 80096ca:	d82f      	bhi.n	800972c <xTaskGenericNotifyFromISR+0xdc>
 80096cc:	a201      	add	r2, pc, #4	; (adr r2, 80096d4 <xTaskGenericNotifyFromISR+0x84>)
 80096ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096d2:	bf00      	nop
 80096d4:	0800974f 	.word	0x0800974f
 80096d8:	080096e9 	.word	0x080096e9
 80096dc:	080096fb 	.word	0x080096fb
 80096e0:	0800970b 	.word	0x0800970b
 80096e4:	08009715 	.word	0x08009715
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80096e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ea:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	431a      	orrs	r2, r3
 80096f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80096f8:	e02c      	b.n	8009754 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80096fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009700:	1c5a      	adds	r2, r3, #1
 8009702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009704:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8009708:	e024      	b.n	8009754 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800970a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800970c:	68ba      	ldr	r2, [r7, #8]
 800970e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8009712:	e01f      	b.n	8009754 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009714:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009718:	2b02      	cmp	r3, #2
 800971a:	d004      	beq.n	8009726 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800971c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800971e:	68ba      	ldr	r2, [r7, #8]
 8009720:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009724:	e016      	b.n	8009754 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 8009726:	2300      	movs	r3, #0
 8009728:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800972a:	e013      	b.n	8009754 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800972c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800972e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009732:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009736:	d00c      	beq.n	8009752 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8009738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800973c:	f383 8811 	msr	BASEPRI, r3
 8009740:	f3bf 8f6f 	isb	sy
 8009744:	f3bf 8f4f 	dsb	sy
 8009748:	61bb      	str	r3, [r7, #24]
}
 800974a:	bf00      	nop
 800974c:	e7fe      	b.n	800974c <xTaskGenericNotifyFromISR+0xfc>
					break;
 800974e:	bf00      	nop
 8009750:	e000      	b.n	8009754 <xTaskGenericNotifyFromISR+0x104>
					break;
 8009752:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009754:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009758:	2b01      	cmp	r3, #1
 800975a:	d146      	bne.n	80097ea <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800975c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800975e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009760:	2b00      	cmp	r3, #0
 8009762:	d00a      	beq.n	800977a <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 8009764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009768:	f383 8811 	msr	BASEPRI, r3
 800976c:	f3bf 8f6f 	isb	sy
 8009770:	f3bf 8f4f 	dsb	sy
 8009774:	617b      	str	r3, [r7, #20]
}
 8009776:	bf00      	nop
 8009778:	e7fe      	b.n	8009778 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800977a:	4b21      	ldr	r3, [pc, #132]	; (8009800 <xTaskGenericNotifyFromISR+0x1b0>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d11d      	bne.n	80097be <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009784:	3304      	adds	r3, #4
 8009786:	4618      	mov	r0, r3
 8009788:	f7fd fb46 	bl	8006e18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800978c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800978e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009790:	4b1c      	ldr	r3, [pc, #112]	; (8009804 <xTaskGenericNotifyFromISR+0x1b4>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	429a      	cmp	r2, r3
 8009796:	d903      	bls.n	80097a0 <xTaskGenericNotifyFromISR+0x150>
 8009798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800979a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800979c:	4a19      	ldr	r2, [pc, #100]	; (8009804 <xTaskGenericNotifyFromISR+0x1b4>)
 800979e:	6013      	str	r3, [r2, #0]
 80097a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097a4:	4613      	mov	r3, r2
 80097a6:	009b      	lsls	r3, r3, #2
 80097a8:	4413      	add	r3, r2
 80097aa:	009b      	lsls	r3, r3, #2
 80097ac:	4a16      	ldr	r2, [pc, #88]	; (8009808 <xTaskGenericNotifyFromISR+0x1b8>)
 80097ae:	441a      	add	r2, r3
 80097b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b2:	3304      	adds	r3, #4
 80097b4:	4619      	mov	r1, r3
 80097b6:	4610      	mov	r0, r2
 80097b8:	f7fd fad1 	bl	8006d5e <vListInsertEnd>
 80097bc:	e005      	b.n	80097ca <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80097be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c0:	3318      	adds	r3, #24
 80097c2:	4619      	mov	r1, r3
 80097c4:	4811      	ldr	r0, [pc, #68]	; (800980c <xTaskGenericNotifyFromISR+0x1bc>)
 80097c6:	f7fd faca 	bl	8006d5e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80097ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097ce:	4b10      	ldr	r3, [pc, #64]	; (8009810 <xTaskGenericNotifyFromISR+0x1c0>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d908      	bls.n	80097ea <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80097d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d002      	beq.n	80097e4 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80097de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097e0:	2201      	movs	r2, #1
 80097e2:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80097e4:	4b0b      	ldr	r3, [pc, #44]	; (8009814 <xTaskGenericNotifyFromISR+0x1c4>)
 80097e6:	2201      	movs	r2, #1
 80097e8:	601a      	str	r2, [r3, #0]
 80097ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ec:	613b      	str	r3, [r7, #16]
	__asm volatile
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	f383 8811 	msr	BASEPRI, r3
}
 80097f4:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80097f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3738      	adds	r7, #56	; 0x38
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}
 8009800:	20000e8c 	.word	0x20000e8c
 8009804:	20000e6c 	.word	0x20000e6c
 8009808:	20000994 	.word	0x20000994
 800980c:	20000e24 	.word	0x20000e24
 8009810:	20000990 	.word	0x20000990
 8009814:	20000e78 	.word	0x20000e78

08009818 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 8009818:	b580      	push	{r7, lr}
 800981a:	b084      	sub	sp, #16
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d102      	bne.n	800982c <xTaskNotifyStateClear+0x14>
 8009826:	4b0e      	ldr	r3, [pc, #56]	; (8009860 <xTaskNotifyStateClear+0x48>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	e000      	b.n	800982e <xTaskNotifyStateClear+0x16>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 8009830:	f000 fce8 	bl	800a204 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800983a:	b2db      	uxtb	r3, r3
 800983c:	2b02      	cmp	r3, #2
 800983e:	d106      	bne.n	800984e <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	2200      	movs	r2, #0
 8009844:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
				xReturn = pdPASS;
 8009848:	2301      	movs	r3, #1
 800984a:	60fb      	str	r3, [r7, #12]
 800984c:	e001      	b.n	8009852 <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 800984e:	2300      	movs	r3, #0
 8009850:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 8009852:	f000 fd07 	bl	800a264 <vPortExitCritical>

		return xReturn;
 8009856:	68fb      	ldr	r3, [r7, #12]
	}
 8009858:	4618      	mov	r0, r3
 800985a:	3710      	adds	r7, #16
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}
 8009860:	20000990 	.word	0x20000990

08009864 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b084      	sub	sp, #16
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800986e:	4b21      	ldr	r3, [pc, #132]	; (80098f4 <prvAddCurrentTaskToDelayedList+0x90>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009874:	4b20      	ldr	r3, [pc, #128]	; (80098f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	3304      	adds	r3, #4
 800987a:	4618      	mov	r0, r3
 800987c:	f7fd facc 	bl	8006e18 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009886:	d10a      	bne.n	800989e <prvAddCurrentTaskToDelayedList+0x3a>
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d007      	beq.n	800989e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800988e:	4b1a      	ldr	r3, [pc, #104]	; (80098f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	3304      	adds	r3, #4
 8009894:	4619      	mov	r1, r3
 8009896:	4819      	ldr	r0, [pc, #100]	; (80098fc <prvAddCurrentTaskToDelayedList+0x98>)
 8009898:	f7fd fa61 	bl	8006d5e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800989c:	e026      	b.n	80098ec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800989e:	68fa      	ldr	r2, [r7, #12]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	4413      	add	r3, r2
 80098a4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80098a6:	4b14      	ldr	r3, [pc, #80]	; (80098f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	68ba      	ldr	r2, [r7, #8]
 80098ac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80098ae:	68ba      	ldr	r2, [r7, #8]
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	429a      	cmp	r2, r3
 80098b4:	d209      	bcs.n	80098ca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80098b6:	4b12      	ldr	r3, [pc, #72]	; (8009900 <prvAddCurrentTaskToDelayedList+0x9c>)
 80098b8:	681a      	ldr	r2, [r3, #0]
 80098ba:	4b0f      	ldr	r3, [pc, #60]	; (80098f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	3304      	adds	r3, #4
 80098c0:	4619      	mov	r1, r3
 80098c2:	4610      	mov	r0, r2
 80098c4:	f7fd fa6f 	bl	8006da6 <vListInsert>
}
 80098c8:	e010      	b.n	80098ec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80098ca:	4b0e      	ldr	r3, [pc, #56]	; (8009904 <prvAddCurrentTaskToDelayedList+0xa0>)
 80098cc:	681a      	ldr	r2, [r3, #0]
 80098ce:	4b0a      	ldr	r3, [pc, #40]	; (80098f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	3304      	adds	r3, #4
 80098d4:	4619      	mov	r1, r3
 80098d6:	4610      	mov	r0, r2
 80098d8:	f7fd fa65 	bl	8006da6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80098dc:	4b0a      	ldr	r3, [pc, #40]	; (8009908 <prvAddCurrentTaskToDelayedList+0xa4>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	68ba      	ldr	r2, [r7, #8]
 80098e2:	429a      	cmp	r2, r3
 80098e4:	d202      	bcs.n	80098ec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80098e6:	4a08      	ldr	r2, [pc, #32]	; (8009908 <prvAddCurrentTaskToDelayedList+0xa4>)
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	6013      	str	r3, [r2, #0]
}
 80098ec:	bf00      	nop
 80098ee:	3710      	adds	r7, #16
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}
 80098f4:	20000e68 	.word	0x20000e68
 80098f8:	20000990 	.word	0x20000990
 80098fc:	20000e50 	.word	0x20000e50
 8009900:	20000e20 	.word	0x20000e20
 8009904:	20000e1c 	.word	0x20000e1c
 8009908:	20000e84 	.word	0x20000e84

0800990c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b08a      	sub	sp, #40	; 0x28
 8009910:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009912:	2300      	movs	r3, #0
 8009914:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009916:	f000 fb07 	bl	8009f28 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800991a:	4b1c      	ldr	r3, [pc, #112]	; (800998c <xTimerCreateTimerTask+0x80>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d021      	beq.n	8009966 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009922:	2300      	movs	r3, #0
 8009924:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009926:	2300      	movs	r3, #0
 8009928:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800992a:	1d3a      	adds	r2, r7, #4
 800992c:	f107 0108 	add.w	r1, r7, #8
 8009930:	f107 030c 	add.w	r3, r7, #12
 8009934:	4618      	mov	r0, r3
 8009936:	f7fd f9cb 	bl	8006cd0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800993a:	6879      	ldr	r1, [r7, #4]
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	68fa      	ldr	r2, [r7, #12]
 8009940:	9202      	str	r2, [sp, #8]
 8009942:	9301      	str	r3, [sp, #4]
 8009944:	2302      	movs	r3, #2
 8009946:	9300      	str	r3, [sp, #0]
 8009948:	2300      	movs	r3, #0
 800994a:	460a      	mov	r2, r1
 800994c:	4910      	ldr	r1, [pc, #64]	; (8009990 <xTimerCreateTimerTask+0x84>)
 800994e:	4811      	ldr	r0, [pc, #68]	; (8009994 <xTimerCreateTimerTask+0x88>)
 8009950:	f7fe fd8b 	bl	800846a <xTaskCreateStatic>
 8009954:	4603      	mov	r3, r0
 8009956:	4a10      	ldr	r2, [pc, #64]	; (8009998 <xTimerCreateTimerTask+0x8c>)
 8009958:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800995a:	4b0f      	ldr	r3, [pc, #60]	; (8009998 <xTimerCreateTimerTask+0x8c>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d001      	beq.n	8009966 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009962:	2301      	movs	r3, #1
 8009964:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d10a      	bne.n	8009982 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800996c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009970:	f383 8811 	msr	BASEPRI, r3
 8009974:	f3bf 8f6f 	isb	sy
 8009978:	f3bf 8f4f 	dsb	sy
 800997c:	613b      	str	r3, [r7, #16]
}
 800997e:	bf00      	nop
 8009980:	e7fe      	b.n	8009980 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009982:	697b      	ldr	r3, [r7, #20]
}
 8009984:	4618      	mov	r0, r3
 8009986:	3718      	adds	r7, #24
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}
 800998c:	20000ec0 	.word	0x20000ec0
 8009990:	0800b690 	.word	0x0800b690
 8009994:	08009ad1 	.word	0x08009ad1
 8009998:	20000ec4 	.word	0x20000ec4

0800999c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b08a      	sub	sp, #40	; 0x28
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	60f8      	str	r0, [r7, #12]
 80099a4:	60b9      	str	r1, [r7, #8]
 80099a6:	607a      	str	r2, [r7, #4]
 80099a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80099aa:	2300      	movs	r3, #0
 80099ac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d10a      	bne.n	80099ca <xTimerGenericCommand+0x2e>
	__asm volatile
 80099b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b8:	f383 8811 	msr	BASEPRI, r3
 80099bc:	f3bf 8f6f 	isb	sy
 80099c0:	f3bf 8f4f 	dsb	sy
 80099c4:	623b      	str	r3, [r7, #32]
}
 80099c6:	bf00      	nop
 80099c8:	e7fe      	b.n	80099c8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80099ca:	4b1a      	ldr	r3, [pc, #104]	; (8009a34 <xTimerGenericCommand+0x98>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d02a      	beq.n	8009a28 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	2b05      	cmp	r3, #5
 80099e2:	dc18      	bgt.n	8009a16 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80099e4:	f7ff fb8c 	bl	8009100 <xTaskGetSchedulerState>
 80099e8:	4603      	mov	r3, r0
 80099ea:	2b02      	cmp	r3, #2
 80099ec:	d109      	bne.n	8009a02 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80099ee:	4b11      	ldr	r3, [pc, #68]	; (8009a34 <xTimerGenericCommand+0x98>)
 80099f0:	6818      	ldr	r0, [r3, #0]
 80099f2:	f107 0110 	add.w	r1, r7, #16
 80099f6:	2300      	movs	r3, #0
 80099f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099fa:	f7fd fba7 	bl	800714c <xQueueGenericSend>
 80099fe:	6278      	str	r0, [r7, #36]	; 0x24
 8009a00:	e012      	b.n	8009a28 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009a02:	4b0c      	ldr	r3, [pc, #48]	; (8009a34 <xTimerGenericCommand+0x98>)
 8009a04:	6818      	ldr	r0, [r3, #0]
 8009a06:	f107 0110 	add.w	r1, r7, #16
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	f7fd fb9d 	bl	800714c <xQueueGenericSend>
 8009a12:	6278      	str	r0, [r7, #36]	; 0x24
 8009a14:	e008      	b.n	8009a28 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009a16:	4b07      	ldr	r3, [pc, #28]	; (8009a34 <xTimerGenericCommand+0x98>)
 8009a18:	6818      	ldr	r0, [r3, #0]
 8009a1a:	f107 0110 	add.w	r1, r7, #16
 8009a1e:	2300      	movs	r3, #0
 8009a20:	683a      	ldr	r2, [r7, #0]
 8009a22:	f7fd fc91 	bl	8007348 <xQueueGenericSendFromISR>
 8009a26:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3728      	adds	r7, #40	; 0x28
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	bf00      	nop
 8009a34:	20000ec0 	.word	0x20000ec0

08009a38 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b088      	sub	sp, #32
 8009a3c:	af02      	add	r7, sp, #8
 8009a3e:	6078      	str	r0, [r7, #4]
 8009a40:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a42:	4b22      	ldr	r3, [pc, #136]	; (8009acc <prvProcessExpiredTimer+0x94>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	68db      	ldr	r3, [r3, #12]
 8009a48:	68db      	ldr	r3, [r3, #12]
 8009a4a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	3304      	adds	r3, #4
 8009a50:	4618      	mov	r0, r3
 8009a52:	f7fd f9e1 	bl	8006e18 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a5c:	f003 0304 	and.w	r3, r3, #4
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d022      	beq.n	8009aaa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	699a      	ldr	r2, [r3, #24]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	18d1      	adds	r1, r2, r3
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	683a      	ldr	r2, [r7, #0]
 8009a70:	6978      	ldr	r0, [r7, #20]
 8009a72:	f000 f8d1 	bl	8009c18 <prvInsertTimerInActiveList>
 8009a76:	4603      	mov	r3, r0
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d01f      	beq.n	8009abc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	9300      	str	r3, [sp, #0]
 8009a80:	2300      	movs	r3, #0
 8009a82:	687a      	ldr	r2, [r7, #4]
 8009a84:	2100      	movs	r1, #0
 8009a86:	6978      	ldr	r0, [r7, #20]
 8009a88:	f7ff ff88 	bl	800999c <xTimerGenericCommand>
 8009a8c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d113      	bne.n	8009abc <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a98:	f383 8811 	msr	BASEPRI, r3
 8009a9c:	f3bf 8f6f 	isb	sy
 8009aa0:	f3bf 8f4f 	dsb	sy
 8009aa4:	60fb      	str	r3, [r7, #12]
}
 8009aa6:	bf00      	nop
 8009aa8:	e7fe      	b.n	8009aa8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ab0:	f023 0301 	bic.w	r3, r3, #1
 8009ab4:	b2da      	uxtb	r2, r3
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	6a1b      	ldr	r3, [r3, #32]
 8009ac0:	6978      	ldr	r0, [r7, #20]
 8009ac2:	4798      	blx	r3
}
 8009ac4:	bf00      	nop
 8009ac6:	3718      	adds	r7, #24
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}
 8009acc:	20000eb8 	.word	0x20000eb8

08009ad0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b084      	sub	sp, #16
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009ad8:	f107 0308 	add.w	r3, r7, #8
 8009adc:	4618      	mov	r0, r3
 8009ade:	f000 f857 	bl	8009b90 <prvGetNextExpireTime>
 8009ae2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	4619      	mov	r1, r3
 8009ae8:	68f8      	ldr	r0, [r7, #12]
 8009aea:	f000 f803 	bl	8009af4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009aee:	f000 f8d5 	bl	8009c9c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009af2:	e7f1      	b.n	8009ad8 <prvTimerTask+0x8>

08009af4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b084      	sub	sp, #16
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
 8009afc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009afe:	f7fe fedd 	bl	80088bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009b02:	f107 0308 	add.w	r3, r7, #8
 8009b06:	4618      	mov	r0, r3
 8009b08:	f000 f866 	bl	8009bd8 <prvSampleTimeNow>
 8009b0c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d130      	bne.n	8009b76 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d10a      	bne.n	8009b30 <prvProcessTimerOrBlockTask+0x3c>
 8009b1a:	687a      	ldr	r2, [r7, #4]
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	429a      	cmp	r2, r3
 8009b20:	d806      	bhi.n	8009b30 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009b22:	f7fe fed9 	bl	80088d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009b26:	68f9      	ldr	r1, [r7, #12]
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f7ff ff85 	bl	8009a38 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009b2e:	e024      	b.n	8009b7a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d008      	beq.n	8009b48 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009b36:	4b13      	ldr	r3, [pc, #76]	; (8009b84 <prvProcessTimerOrBlockTask+0x90>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d101      	bne.n	8009b44 <prvProcessTimerOrBlockTask+0x50>
 8009b40:	2301      	movs	r3, #1
 8009b42:	e000      	b.n	8009b46 <prvProcessTimerOrBlockTask+0x52>
 8009b44:	2300      	movs	r3, #0
 8009b46:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009b48:	4b0f      	ldr	r3, [pc, #60]	; (8009b88 <prvProcessTimerOrBlockTask+0x94>)
 8009b4a:	6818      	ldr	r0, [r3, #0]
 8009b4c:	687a      	ldr	r2, [r7, #4]
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	1ad3      	subs	r3, r2, r3
 8009b52:	683a      	ldr	r2, [r7, #0]
 8009b54:	4619      	mov	r1, r3
 8009b56:	f7fe f85d 	bl	8007c14 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009b5a:	f7fe febd 	bl	80088d8 <xTaskResumeAll>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d10a      	bne.n	8009b7a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009b64:	4b09      	ldr	r3, [pc, #36]	; (8009b8c <prvProcessTimerOrBlockTask+0x98>)
 8009b66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b6a:	601a      	str	r2, [r3, #0]
 8009b6c:	f3bf 8f4f 	dsb	sy
 8009b70:	f3bf 8f6f 	isb	sy
}
 8009b74:	e001      	b.n	8009b7a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009b76:	f7fe feaf 	bl	80088d8 <xTaskResumeAll>
}
 8009b7a:	bf00      	nop
 8009b7c:	3710      	adds	r7, #16
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}
 8009b82:	bf00      	nop
 8009b84:	20000ebc 	.word	0x20000ebc
 8009b88:	20000ec0 	.word	0x20000ec0
 8009b8c:	e000ed04 	.word	0xe000ed04

08009b90 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009b90:	b480      	push	{r7}
 8009b92:	b085      	sub	sp, #20
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009b98:	4b0e      	ldr	r3, [pc, #56]	; (8009bd4 <prvGetNextExpireTime+0x44>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d101      	bne.n	8009ba6 <prvGetNextExpireTime+0x16>
 8009ba2:	2201      	movs	r2, #1
 8009ba4:	e000      	b.n	8009ba8 <prvGetNextExpireTime+0x18>
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d105      	bne.n	8009bc0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009bb4:	4b07      	ldr	r3, [pc, #28]	; (8009bd4 <prvGetNextExpireTime+0x44>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	68db      	ldr	r3, [r3, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	60fb      	str	r3, [r7, #12]
 8009bbe:	e001      	b.n	8009bc4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3714      	adds	r7, #20
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd0:	4770      	bx	lr
 8009bd2:	bf00      	nop
 8009bd4:	20000eb8 	.word	0x20000eb8

08009bd8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b084      	sub	sp, #16
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009be0:	f7fe ff18 	bl	8008a14 <xTaskGetTickCount>
 8009be4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009be6:	4b0b      	ldr	r3, [pc, #44]	; (8009c14 <prvSampleTimeNow+0x3c>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	68fa      	ldr	r2, [r7, #12]
 8009bec:	429a      	cmp	r2, r3
 8009bee:	d205      	bcs.n	8009bfc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009bf0:	f000 f936 	bl	8009e60 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	601a      	str	r2, [r3, #0]
 8009bfa:	e002      	b.n	8009c02 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009c02:	4a04      	ldr	r2, [pc, #16]	; (8009c14 <prvSampleTimeNow+0x3c>)
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009c08:	68fb      	ldr	r3, [r7, #12]
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3710      	adds	r7, #16
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}
 8009c12:	bf00      	nop
 8009c14:	20000ec8 	.word	0x20000ec8

08009c18 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b086      	sub	sp, #24
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	60f8      	str	r0, [r7, #12]
 8009c20:	60b9      	str	r1, [r7, #8]
 8009c22:	607a      	str	r2, [r7, #4]
 8009c24:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009c26:	2300      	movs	r3, #0
 8009c28:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	68ba      	ldr	r2, [r7, #8]
 8009c2e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	68fa      	ldr	r2, [r7, #12]
 8009c34:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009c36:	68ba      	ldr	r2, [r7, #8]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	d812      	bhi.n	8009c64 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c3e:	687a      	ldr	r2, [r7, #4]
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	1ad2      	subs	r2, r2, r3
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	699b      	ldr	r3, [r3, #24]
 8009c48:	429a      	cmp	r2, r3
 8009c4a:	d302      	bcc.n	8009c52 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	617b      	str	r3, [r7, #20]
 8009c50:	e01b      	b.n	8009c8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009c52:	4b10      	ldr	r3, [pc, #64]	; (8009c94 <prvInsertTimerInActiveList+0x7c>)
 8009c54:	681a      	ldr	r2, [r3, #0]
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	3304      	adds	r3, #4
 8009c5a:	4619      	mov	r1, r3
 8009c5c:	4610      	mov	r0, r2
 8009c5e:	f7fd f8a2 	bl	8006da6 <vListInsert>
 8009c62:	e012      	b.n	8009c8a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009c64:	687a      	ldr	r2, [r7, #4]
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	d206      	bcs.n	8009c7a <prvInsertTimerInActiveList+0x62>
 8009c6c:	68ba      	ldr	r2, [r7, #8]
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	429a      	cmp	r2, r3
 8009c72:	d302      	bcc.n	8009c7a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009c74:	2301      	movs	r3, #1
 8009c76:	617b      	str	r3, [r7, #20]
 8009c78:	e007      	b.n	8009c8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009c7a:	4b07      	ldr	r3, [pc, #28]	; (8009c98 <prvInsertTimerInActiveList+0x80>)
 8009c7c:	681a      	ldr	r2, [r3, #0]
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	3304      	adds	r3, #4
 8009c82:	4619      	mov	r1, r3
 8009c84:	4610      	mov	r0, r2
 8009c86:	f7fd f88e 	bl	8006da6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009c8a:	697b      	ldr	r3, [r7, #20]
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3718      	adds	r7, #24
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}
 8009c94:	20000ebc 	.word	0x20000ebc
 8009c98:	20000eb8 	.word	0x20000eb8

08009c9c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b08e      	sub	sp, #56	; 0x38
 8009ca0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009ca2:	e0ca      	b.n	8009e3a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	da18      	bge.n	8009cdc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009caa:	1d3b      	adds	r3, r7, #4
 8009cac:	3304      	adds	r3, #4
 8009cae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d10a      	bne.n	8009ccc <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cba:	f383 8811 	msr	BASEPRI, r3
 8009cbe:	f3bf 8f6f 	isb	sy
 8009cc2:	f3bf 8f4f 	dsb	sy
 8009cc6:	61fb      	str	r3, [r7, #28]
}
 8009cc8:	bf00      	nop
 8009cca:	e7fe      	b.n	8009cca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009cd2:	6850      	ldr	r0, [r2, #4]
 8009cd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009cd6:	6892      	ldr	r2, [r2, #8]
 8009cd8:	4611      	mov	r1, r2
 8009cda:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	f2c0 80aa 	blt.w	8009e38 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cea:	695b      	ldr	r3, [r3, #20]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d004      	beq.n	8009cfa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cf2:	3304      	adds	r3, #4
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f7fd f88f 	bl	8006e18 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009cfa:	463b      	mov	r3, r7
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f7ff ff6b 	bl	8009bd8 <prvSampleTimeNow>
 8009d02:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2b09      	cmp	r3, #9
 8009d08:	f200 8097 	bhi.w	8009e3a <prvProcessReceivedCommands+0x19e>
 8009d0c:	a201      	add	r2, pc, #4	; (adr r2, 8009d14 <prvProcessReceivedCommands+0x78>)
 8009d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d12:	bf00      	nop
 8009d14:	08009d3d 	.word	0x08009d3d
 8009d18:	08009d3d 	.word	0x08009d3d
 8009d1c:	08009d3d 	.word	0x08009d3d
 8009d20:	08009db1 	.word	0x08009db1
 8009d24:	08009dc5 	.word	0x08009dc5
 8009d28:	08009e0f 	.word	0x08009e0f
 8009d2c:	08009d3d 	.word	0x08009d3d
 8009d30:	08009d3d 	.word	0x08009d3d
 8009d34:	08009db1 	.word	0x08009db1
 8009d38:	08009dc5 	.word	0x08009dc5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d42:	f043 0301 	orr.w	r3, r3, #1
 8009d46:	b2da      	uxtb	r2, r3
 8009d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009d4e:	68ba      	ldr	r2, [r7, #8]
 8009d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d52:	699b      	ldr	r3, [r3, #24]
 8009d54:	18d1      	adds	r1, r2, r3
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d5c:	f7ff ff5c 	bl	8009c18 <prvInsertTimerInActiveList>
 8009d60:	4603      	mov	r3, r0
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d069      	beq.n	8009e3a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d68:	6a1b      	ldr	r3, [r3, #32]
 8009d6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d6c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d74:	f003 0304 	and.w	r3, r3, #4
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d05e      	beq.n	8009e3a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009d7c:	68ba      	ldr	r2, [r7, #8]
 8009d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d80:	699b      	ldr	r3, [r3, #24]
 8009d82:	441a      	add	r2, r3
 8009d84:	2300      	movs	r3, #0
 8009d86:	9300      	str	r3, [sp, #0]
 8009d88:	2300      	movs	r3, #0
 8009d8a:	2100      	movs	r1, #0
 8009d8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d8e:	f7ff fe05 	bl	800999c <xTimerGenericCommand>
 8009d92:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009d94:	6a3b      	ldr	r3, [r7, #32]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d14f      	bne.n	8009e3a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d9e:	f383 8811 	msr	BASEPRI, r3
 8009da2:	f3bf 8f6f 	isb	sy
 8009da6:	f3bf 8f4f 	dsb	sy
 8009daa:	61bb      	str	r3, [r7, #24]
}
 8009dac:	bf00      	nop
 8009dae:	e7fe      	b.n	8009dae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009db6:	f023 0301 	bic.w	r3, r3, #1
 8009dba:	b2da      	uxtb	r2, r3
 8009dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009dc2:	e03a      	b.n	8009e3a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009dca:	f043 0301 	orr.w	r3, r3, #1
 8009dce:	b2da      	uxtb	r2, r3
 8009dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009dd6:	68ba      	ldr	r2, [r7, #8]
 8009dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dda:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dde:	699b      	ldr	r3, [r3, #24]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d10a      	bne.n	8009dfa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de8:	f383 8811 	msr	BASEPRI, r3
 8009dec:	f3bf 8f6f 	isb	sy
 8009df0:	f3bf 8f4f 	dsb	sy
 8009df4:	617b      	str	r3, [r7, #20]
}
 8009df6:	bf00      	nop
 8009df8:	e7fe      	b.n	8009df8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dfc:	699a      	ldr	r2, [r3, #24]
 8009dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e00:	18d1      	adds	r1, r2, r3
 8009e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e08:	f7ff ff06 	bl	8009c18 <prvInsertTimerInActiveList>
					break;
 8009e0c:	e015      	b.n	8009e3a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e14:	f003 0302 	and.w	r3, r3, #2
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d103      	bne.n	8009e24 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009e1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e1e:	f000 fbdf 	bl	800a5e0 <vPortFree>
 8009e22:	e00a      	b.n	8009e3a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e2a:	f023 0301 	bic.w	r3, r3, #1
 8009e2e:	b2da      	uxtb	r2, r3
 8009e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009e36:	e000      	b.n	8009e3a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009e38:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009e3a:	4b08      	ldr	r3, [pc, #32]	; (8009e5c <prvProcessReceivedCommands+0x1c0>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	1d39      	adds	r1, r7, #4
 8009e40:	2200      	movs	r2, #0
 8009e42:	4618      	mov	r0, r3
 8009e44:	f7fd fba8 	bl	8007598 <xQueueReceive>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	f47f af2a 	bne.w	8009ca4 <prvProcessReceivedCommands+0x8>
	}
}
 8009e50:	bf00      	nop
 8009e52:	bf00      	nop
 8009e54:	3730      	adds	r7, #48	; 0x30
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}
 8009e5a:	bf00      	nop
 8009e5c:	20000ec0 	.word	0x20000ec0

08009e60 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b088      	sub	sp, #32
 8009e64:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009e66:	e048      	b.n	8009efa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009e68:	4b2d      	ldr	r3, [pc, #180]	; (8009f20 <prvSwitchTimerLists+0xc0>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	68db      	ldr	r3, [r3, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e72:	4b2b      	ldr	r3, [pc, #172]	; (8009f20 <prvSwitchTimerLists+0xc0>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	68db      	ldr	r3, [r3, #12]
 8009e78:	68db      	ldr	r3, [r3, #12]
 8009e7a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	3304      	adds	r3, #4
 8009e80:	4618      	mov	r0, r3
 8009e82:	f7fc ffc9 	bl	8006e18 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	6a1b      	ldr	r3, [r3, #32]
 8009e8a:	68f8      	ldr	r0, [r7, #12]
 8009e8c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e94:	f003 0304 	and.w	r3, r3, #4
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d02e      	beq.n	8009efa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	699b      	ldr	r3, [r3, #24]
 8009ea0:	693a      	ldr	r2, [r7, #16]
 8009ea2:	4413      	add	r3, r2
 8009ea4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009ea6:	68ba      	ldr	r2, [r7, #8]
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	d90e      	bls.n	8009ecc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	68ba      	ldr	r2, [r7, #8]
 8009eb2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	68fa      	ldr	r2, [r7, #12]
 8009eb8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009eba:	4b19      	ldr	r3, [pc, #100]	; (8009f20 <prvSwitchTimerLists+0xc0>)
 8009ebc:	681a      	ldr	r2, [r3, #0]
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	3304      	adds	r3, #4
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	4610      	mov	r0, r2
 8009ec6:	f7fc ff6e 	bl	8006da6 <vListInsert>
 8009eca:	e016      	b.n	8009efa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009ecc:	2300      	movs	r3, #0
 8009ece:	9300      	str	r3, [sp, #0]
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	693a      	ldr	r2, [r7, #16]
 8009ed4:	2100      	movs	r1, #0
 8009ed6:	68f8      	ldr	r0, [r7, #12]
 8009ed8:	f7ff fd60 	bl	800999c <xTimerGenericCommand>
 8009edc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d10a      	bne.n	8009efa <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee8:	f383 8811 	msr	BASEPRI, r3
 8009eec:	f3bf 8f6f 	isb	sy
 8009ef0:	f3bf 8f4f 	dsb	sy
 8009ef4:	603b      	str	r3, [r7, #0]
}
 8009ef6:	bf00      	nop
 8009ef8:	e7fe      	b.n	8009ef8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009efa:	4b09      	ldr	r3, [pc, #36]	; (8009f20 <prvSwitchTimerLists+0xc0>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d1b1      	bne.n	8009e68 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009f04:	4b06      	ldr	r3, [pc, #24]	; (8009f20 <prvSwitchTimerLists+0xc0>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009f0a:	4b06      	ldr	r3, [pc, #24]	; (8009f24 <prvSwitchTimerLists+0xc4>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	4a04      	ldr	r2, [pc, #16]	; (8009f20 <prvSwitchTimerLists+0xc0>)
 8009f10:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009f12:	4a04      	ldr	r2, [pc, #16]	; (8009f24 <prvSwitchTimerLists+0xc4>)
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	6013      	str	r3, [r2, #0]
}
 8009f18:	bf00      	nop
 8009f1a:	3718      	adds	r7, #24
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}
 8009f20:	20000eb8 	.word	0x20000eb8
 8009f24:	20000ebc 	.word	0x20000ebc

08009f28 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b082      	sub	sp, #8
 8009f2c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009f2e:	f000 f969 	bl	800a204 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009f32:	4b15      	ldr	r3, [pc, #84]	; (8009f88 <prvCheckForValidListAndQueue+0x60>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d120      	bne.n	8009f7c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009f3a:	4814      	ldr	r0, [pc, #80]	; (8009f8c <prvCheckForValidListAndQueue+0x64>)
 8009f3c:	f7fc fee2 	bl	8006d04 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009f40:	4813      	ldr	r0, [pc, #76]	; (8009f90 <prvCheckForValidListAndQueue+0x68>)
 8009f42:	f7fc fedf 	bl	8006d04 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009f46:	4b13      	ldr	r3, [pc, #76]	; (8009f94 <prvCheckForValidListAndQueue+0x6c>)
 8009f48:	4a10      	ldr	r2, [pc, #64]	; (8009f8c <prvCheckForValidListAndQueue+0x64>)
 8009f4a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009f4c:	4b12      	ldr	r3, [pc, #72]	; (8009f98 <prvCheckForValidListAndQueue+0x70>)
 8009f4e:	4a10      	ldr	r2, [pc, #64]	; (8009f90 <prvCheckForValidListAndQueue+0x68>)
 8009f50:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009f52:	2300      	movs	r3, #0
 8009f54:	9300      	str	r3, [sp, #0]
 8009f56:	4b11      	ldr	r3, [pc, #68]	; (8009f9c <prvCheckForValidListAndQueue+0x74>)
 8009f58:	4a11      	ldr	r2, [pc, #68]	; (8009fa0 <prvCheckForValidListAndQueue+0x78>)
 8009f5a:	2110      	movs	r1, #16
 8009f5c:	200a      	movs	r0, #10
 8009f5e:	f7fc ffed 	bl	8006f3c <xQueueGenericCreateStatic>
 8009f62:	4603      	mov	r3, r0
 8009f64:	4a08      	ldr	r2, [pc, #32]	; (8009f88 <prvCheckForValidListAndQueue+0x60>)
 8009f66:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009f68:	4b07      	ldr	r3, [pc, #28]	; (8009f88 <prvCheckForValidListAndQueue+0x60>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d005      	beq.n	8009f7c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009f70:	4b05      	ldr	r3, [pc, #20]	; (8009f88 <prvCheckForValidListAndQueue+0x60>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	490b      	ldr	r1, [pc, #44]	; (8009fa4 <prvCheckForValidListAndQueue+0x7c>)
 8009f76:	4618      	mov	r0, r3
 8009f78:	f7fd fe22 	bl	8007bc0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009f7c:	f000 f972 	bl	800a264 <vPortExitCritical>
}
 8009f80:	bf00      	nop
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
 8009f86:	bf00      	nop
 8009f88:	20000ec0 	.word	0x20000ec0
 8009f8c:	20000e90 	.word	0x20000e90
 8009f90:	20000ea4 	.word	0x20000ea4
 8009f94:	20000eb8 	.word	0x20000eb8
 8009f98:	20000ebc 	.word	0x20000ebc
 8009f9c:	20000f6c 	.word	0x20000f6c
 8009fa0:	20000ecc 	.word	0x20000ecc
 8009fa4:	0800b698 	.word	0x0800b698

08009fa8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b085      	sub	sp, #20
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	60f8      	str	r0, [r7, #12]
 8009fb0:	60b9      	str	r1, [r7, #8]
 8009fb2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	3b04      	subs	r3, #4
 8009fb8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009fc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	3b04      	subs	r3, #4
 8009fc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	f023 0201 	bic.w	r2, r3, #1
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	3b04      	subs	r3, #4
 8009fd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009fd8:	4a0c      	ldr	r2, [pc, #48]	; (800a00c <pxPortInitialiseStack+0x64>)
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	3b14      	subs	r3, #20
 8009fe2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009fe4:	687a      	ldr	r2, [r7, #4]
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	3b04      	subs	r3, #4
 8009fee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	f06f 0202 	mvn.w	r2, #2
 8009ff6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	3b20      	subs	r3, #32
 8009ffc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
}
 800a000:	4618      	mov	r0, r3
 800a002:	3714      	adds	r7, #20
 800a004:	46bd      	mov	sp, r7
 800a006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00a:	4770      	bx	lr
 800a00c:	0800a011 	.word	0x0800a011

0800a010 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a010:	b480      	push	{r7}
 800a012:	b085      	sub	sp, #20
 800a014:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a016:	2300      	movs	r3, #0
 800a018:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a01a:	4b12      	ldr	r3, [pc, #72]	; (800a064 <prvTaskExitError+0x54>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a022:	d00a      	beq.n	800a03a <prvTaskExitError+0x2a>
	__asm volatile
 800a024:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a028:	f383 8811 	msr	BASEPRI, r3
 800a02c:	f3bf 8f6f 	isb	sy
 800a030:	f3bf 8f4f 	dsb	sy
 800a034:	60fb      	str	r3, [r7, #12]
}
 800a036:	bf00      	nop
 800a038:	e7fe      	b.n	800a038 <prvTaskExitError+0x28>
	__asm volatile
 800a03a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a03e:	f383 8811 	msr	BASEPRI, r3
 800a042:	f3bf 8f6f 	isb	sy
 800a046:	f3bf 8f4f 	dsb	sy
 800a04a:	60bb      	str	r3, [r7, #8]
}
 800a04c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a04e:	bf00      	nop
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d0fc      	beq.n	800a050 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a056:	bf00      	nop
 800a058:	bf00      	nop
 800a05a:	3714      	adds	r7, #20
 800a05c:	46bd      	mov	sp, r7
 800a05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a062:	4770      	bx	lr
 800a064:	20000098 	.word	0x20000098
	...

0800a070 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a070:	4b07      	ldr	r3, [pc, #28]	; (800a090 <pxCurrentTCBConst2>)
 800a072:	6819      	ldr	r1, [r3, #0]
 800a074:	6808      	ldr	r0, [r1, #0]
 800a076:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a07a:	f380 8809 	msr	PSP, r0
 800a07e:	f3bf 8f6f 	isb	sy
 800a082:	f04f 0000 	mov.w	r0, #0
 800a086:	f380 8811 	msr	BASEPRI, r0
 800a08a:	4770      	bx	lr
 800a08c:	f3af 8000 	nop.w

0800a090 <pxCurrentTCBConst2>:
 800a090:	20000990 	.word	0x20000990
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a094:	bf00      	nop
 800a096:	bf00      	nop

0800a098 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a098:	4808      	ldr	r0, [pc, #32]	; (800a0bc <prvPortStartFirstTask+0x24>)
 800a09a:	6800      	ldr	r0, [r0, #0]
 800a09c:	6800      	ldr	r0, [r0, #0]
 800a09e:	f380 8808 	msr	MSP, r0
 800a0a2:	f04f 0000 	mov.w	r0, #0
 800a0a6:	f380 8814 	msr	CONTROL, r0
 800a0aa:	b662      	cpsie	i
 800a0ac:	b661      	cpsie	f
 800a0ae:	f3bf 8f4f 	dsb	sy
 800a0b2:	f3bf 8f6f 	isb	sy
 800a0b6:	df00      	svc	0
 800a0b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a0ba:	bf00      	nop
 800a0bc:	e000ed08 	.word	0xe000ed08

0800a0c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b086      	sub	sp, #24
 800a0c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a0c6:	4b46      	ldr	r3, [pc, #280]	; (800a1e0 <xPortStartScheduler+0x120>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	4a46      	ldr	r2, [pc, #280]	; (800a1e4 <xPortStartScheduler+0x124>)
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d10a      	bne.n	800a0e6 <xPortStartScheduler+0x26>
	__asm volatile
 800a0d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d4:	f383 8811 	msr	BASEPRI, r3
 800a0d8:	f3bf 8f6f 	isb	sy
 800a0dc:	f3bf 8f4f 	dsb	sy
 800a0e0:	613b      	str	r3, [r7, #16]
}
 800a0e2:	bf00      	nop
 800a0e4:	e7fe      	b.n	800a0e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a0e6:	4b3e      	ldr	r3, [pc, #248]	; (800a1e0 <xPortStartScheduler+0x120>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	4a3f      	ldr	r2, [pc, #252]	; (800a1e8 <xPortStartScheduler+0x128>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d10a      	bne.n	800a106 <xPortStartScheduler+0x46>
	__asm volatile
 800a0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f4:	f383 8811 	msr	BASEPRI, r3
 800a0f8:	f3bf 8f6f 	isb	sy
 800a0fc:	f3bf 8f4f 	dsb	sy
 800a100:	60fb      	str	r3, [r7, #12]
}
 800a102:	bf00      	nop
 800a104:	e7fe      	b.n	800a104 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a106:	4b39      	ldr	r3, [pc, #228]	; (800a1ec <xPortStartScheduler+0x12c>)
 800a108:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	781b      	ldrb	r3, [r3, #0]
 800a10e:	b2db      	uxtb	r3, r3
 800a110:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	22ff      	movs	r2, #255	; 0xff
 800a116:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	781b      	ldrb	r3, [r3, #0]
 800a11c:	b2db      	uxtb	r3, r3
 800a11e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a120:	78fb      	ldrb	r3, [r7, #3]
 800a122:	b2db      	uxtb	r3, r3
 800a124:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a128:	b2da      	uxtb	r2, r3
 800a12a:	4b31      	ldr	r3, [pc, #196]	; (800a1f0 <xPortStartScheduler+0x130>)
 800a12c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a12e:	4b31      	ldr	r3, [pc, #196]	; (800a1f4 <xPortStartScheduler+0x134>)
 800a130:	2207      	movs	r2, #7
 800a132:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a134:	e009      	b.n	800a14a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a136:	4b2f      	ldr	r3, [pc, #188]	; (800a1f4 <xPortStartScheduler+0x134>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	3b01      	subs	r3, #1
 800a13c:	4a2d      	ldr	r2, [pc, #180]	; (800a1f4 <xPortStartScheduler+0x134>)
 800a13e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a140:	78fb      	ldrb	r3, [r7, #3]
 800a142:	b2db      	uxtb	r3, r3
 800a144:	005b      	lsls	r3, r3, #1
 800a146:	b2db      	uxtb	r3, r3
 800a148:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a14a:	78fb      	ldrb	r3, [r7, #3]
 800a14c:	b2db      	uxtb	r3, r3
 800a14e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a152:	2b80      	cmp	r3, #128	; 0x80
 800a154:	d0ef      	beq.n	800a136 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a156:	4b27      	ldr	r3, [pc, #156]	; (800a1f4 <xPortStartScheduler+0x134>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f1c3 0307 	rsb	r3, r3, #7
 800a15e:	2b04      	cmp	r3, #4
 800a160:	d00a      	beq.n	800a178 <xPortStartScheduler+0xb8>
	__asm volatile
 800a162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a166:	f383 8811 	msr	BASEPRI, r3
 800a16a:	f3bf 8f6f 	isb	sy
 800a16e:	f3bf 8f4f 	dsb	sy
 800a172:	60bb      	str	r3, [r7, #8]
}
 800a174:	bf00      	nop
 800a176:	e7fe      	b.n	800a176 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a178:	4b1e      	ldr	r3, [pc, #120]	; (800a1f4 <xPortStartScheduler+0x134>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	021b      	lsls	r3, r3, #8
 800a17e:	4a1d      	ldr	r2, [pc, #116]	; (800a1f4 <xPortStartScheduler+0x134>)
 800a180:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a182:	4b1c      	ldr	r3, [pc, #112]	; (800a1f4 <xPortStartScheduler+0x134>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a18a:	4a1a      	ldr	r2, [pc, #104]	; (800a1f4 <xPortStartScheduler+0x134>)
 800a18c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	b2da      	uxtb	r2, r3
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a196:	4b18      	ldr	r3, [pc, #96]	; (800a1f8 <xPortStartScheduler+0x138>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	4a17      	ldr	r2, [pc, #92]	; (800a1f8 <xPortStartScheduler+0x138>)
 800a19c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a1a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a1a2:	4b15      	ldr	r3, [pc, #84]	; (800a1f8 <xPortStartScheduler+0x138>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	4a14      	ldr	r2, [pc, #80]	; (800a1f8 <xPortStartScheduler+0x138>)
 800a1a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a1ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a1ae:	f000 f8dd 	bl	800a36c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a1b2:	4b12      	ldr	r3, [pc, #72]	; (800a1fc <xPortStartScheduler+0x13c>)
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a1b8:	f000 f8fc 	bl	800a3b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a1bc:	4b10      	ldr	r3, [pc, #64]	; (800a200 <xPortStartScheduler+0x140>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	4a0f      	ldr	r2, [pc, #60]	; (800a200 <xPortStartScheduler+0x140>)
 800a1c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a1c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a1c8:	f7ff ff66 	bl	800a098 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a1cc:	f7fe fcec 	bl	8008ba8 <vTaskSwitchContext>
	prvTaskExitError();
 800a1d0:	f7ff ff1e 	bl	800a010 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a1d4:	2300      	movs	r3, #0
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3718      	adds	r7, #24
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}
 800a1de:	bf00      	nop
 800a1e0:	e000ed00 	.word	0xe000ed00
 800a1e4:	410fc271 	.word	0x410fc271
 800a1e8:	410fc270 	.word	0x410fc270
 800a1ec:	e000e400 	.word	0xe000e400
 800a1f0:	20000fbc 	.word	0x20000fbc
 800a1f4:	20000fc0 	.word	0x20000fc0
 800a1f8:	e000ed20 	.word	0xe000ed20
 800a1fc:	20000098 	.word	0x20000098
 800a200:	e000ef34 	.word	0xe000ef34

0800a204 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a204:	b480      	push	{r7}
 800a206:	b083      	sub	sp, #12
 800a208:	af00      	add	r7, sp, #0
	__asm volatile
 800a20a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a20e:	f383 8811 	msr	BASEPRI, r3
 800a212:	f3bf 8f6f 	isb	sy
 800a216:	f3bf 8f4f 	dsb	sy
 800a21a:	607b      	str	r3, [r7, #4]
}
 800a21c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a21e:	4b0f      	ldr	r3, [pc, #60]	; (800a25c <vPortEnterCritical+0x58>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	3301      	adds	r3, #1
 800a224:	4a0d      	ldr	r2, [pc, #52]	; (800a25c <vPortEnterCritical+0x58>)
 800a226:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a228:	4b0c      	ldr	r3, [pc, #48]	; (800a25c <vPortEnterCritical+0x58>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	2b01      	cmp	r3, #1
 800a22e:	d10f      	bne.n	800a250 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a230:	4b0b      	ldr	r3, [pc, #44]	; (800a260 <vPortEnterCritical+0x5c>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	b2db      	uxtb	r3, r3
 800a236:	2b00      	cmp	r3, #0
 800a238:	d00a      	beq.n	800a250 <vPortEnterCritical+0x4c>
	__asm volatile
 800a23a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a23e:	f383 8811 	msr	BASEPRI, r3
 800a242:	f3bf 8f6f 	isb	sy
 800a246:	f3bf 8f4f 	dsb	sy
 800a24a:	603b      	str	r3, [r7, #0]
}
 800a24c:	bf00      	nop
 800a24e:	e7fe      	b.n	800a24e <vPortEnterCritical+0x4a>
	}
}
 800a250:	bf00      	nop
 800a252:	370c      	adds	r7, #12
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr
 800a25c:	20000098 	.word	0x20000098
 800a260:	e000ed04 	.word	0xe000ed04

0800a264 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a264:	b480      	push	{r7}
 800a266:	b083      	sub	sp, #12
 800a268:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a26a:	4b12      	ldr	r3, [pc, #72]	; (800a2b4 <vPortExitCritical+0x50>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d10a      	bne.n	800a288 <vPortExitCritical+0x24>
	__asm volatile
 800a272:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a276:	f383 8811 	msr	BASEPRI, r3
 800a27a:	f3bf 8f6f 	isb	sy
 800a27e:	f3bf 8f4f 	dsb	sy
 800a282:	607b      	str	r3, [r7, #4]
}
 800a284:	bf00      	nop
 800a286:	e7fe      	b.n	800a286 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a288:	4b0a      	ldr	r3, [pc, #40]	; (800a2b4 <vPortExitCritical+0x50>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	3b01      	subs	r3, #1
 800a28e:	4a09      	ldr	r2, [pc, #36]	; (800a2b4 <vPortExitCritical+0x50>)
 800a290:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a292:	4b08      	ldr	r3, [pc, #32]	; (800a2b4 <vPortExitCritical+0x50>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d105      	bne.n	800a2a6 <vPortExitCritical+0x42>
 800a29a:	2300      	movs	r3, #0
 800a29c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	f383 8811 	msr	BASEPRI, r3
}
 800a2a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a2a6:	bf00      	nop
 800a2a8:	370c      	adds	r7, #12
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b0:	4770      	bx	lr
 800a2b2:	bf00      	nop
 800a2b4:	20000098 	.word	0x20000098
	...

0800a2c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a2c0:	f3ef 8009 	mrs	r0, PSP
 800a2c4:	f3bf 8f6f 	isb	sy
 800a2c8:	4b15      	ldr	r3, [pc, #84]	; (800a320 <pxCurrentTCBConst>)
 800a2ca:	681a      	ldr	r2, [r3, #0]
 800a2cc:	f01e 0f10 	tst.w	lr, #16
 800a2d0:	bf08      	it	eq
 800a2d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a2d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2da:	6010      	str	r0, [r2, #0]
 800a2dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a2e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a2e4:	f380 8811 	msr	BASEPRI, r0
 800a2e8:	f3bf 8f4f 	dsb	sy
 800a2ec:	f3bf 8f6f 	isb	sy
 800a2f0:	f7fe fc5a 	bl	8008ba8 <vTaskSwitchContext>
 800a2f4:	f04f 0000 	mov.w	r0, #0
 800a2f8:	f380 8811 	msr	BASEPRI, r0
 800a2fc:	bc09      	pop	{r0, r3}
 800a2fe:	6819      	ldr	r1, [r3, #0]
 800a300:	6808      	ldr	r0, [r1, #0]
 800a302:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a306:	f01e 0f10 	tst.w	lr, #16
 800a30a:	bf08      	it	eq
 800a30c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a310:	f380 8809 	msr	PSP, r0
 800a314:	f3bf 8f6f 	isb	sy
 800a318:	4770      	bx	lr
 800a31a:	bf00      	nop
 800a31c:	f3af 8000 	nop.w

0800a320 <pxCurrentTCBConst>:
 800a320:	20000990 	.word	0x20000990
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a324:	bf00      	nop
 800a326:	bf00      	nop

0800a328 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b082      	sub	sp, #8
 800a32c:	af00      	add	r7, sp, #0
	__asm volatile
 800a32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a332:	f383 8811 	msr	BASEPRI, r3
 800a336:	f3bf 8f6f 	isb	sy
 800a33a:	f3bf 8f4f 	dsb	sy
 800a33e:	607b      	str	r3, [r7, #4]
}
 800a340:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a342:	f7fe fb77 	bl	8008a34 <xTaskIncrementTick>
 800a346:	4603      	mov	r3, r0
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d003      	beq.n	800a354 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a34c:	4b06      	ldr	r3, [pc, #24]	; (800a368 <xPortSysTickHandler+0x40>)
 800a34e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a352:	601a      	str	r2, [r3, #0]
 800a354:	2300      	movs	r3, #0
 800a356:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	f383 8811 	msr	BASEPRI, r3
}
 800a35e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a360:	bf00      	nop
 800a362:	3708      	adds	r7, #8
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}
 800a368:	e000ed04 	.word	0xe000ed04

0800a36c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a36c:	b480      	push	{r7}
 800a36e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a370:	4b0b      	ldr	r3, [pc, #44]	; (800a3a0 <vPortSetupTimerInterrupt+0x34>)
 800a372:	2200      	movs	r2, #0
 800a374:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a376:	4b0b      	ldr	r3, [pc, #44]	; (800a3a4 <vPortSetupTimerInterrupt+0x38>)
 800a378:	2200      	movs	r2, #0
 800a37a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a37c:	4b0a      	ldr	r3, [pc, #40]	; (800a3a8 <vPortSetupTimerInterrupt+0x3c>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	4a0a      	ldr	r2, [pc, #40]	; (800a3ac <vPortSetupTimerInterrupt+0x40>)
 800a382:	fba2 2303 	umull	r2, r3, r2, r3
 800a386:	099b      	lsrs	r3, r3, #6
 800a388:	4a09      	ldr	r2, [pc, #36]	; (800a3b0 <vPortSetupTimerInterrupt+0x44>)
 800a38a:	3b01      	subs	r3, #1
 800a38c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a38e:	4b04      	ldr	r3, [pc, #16]	; (800a3a0 <vPortSetupTimerInterrupt+0x34>)
 800a390:	2207      	movs	r2, #7
 800a392:	601a      	str	r2, [r3, #0]
}
 800a394:	bf00      	nop
 800a396:	46bd      	mov	sp, r7
 800a398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39c:	4770      	bx	lr
 800a39e:	bf00      	nop
 800a3a0:	e000e010 	.word	0xe000e010
 800a3a4:	e000e018 	.word	0xe000e018
 800a3a8:	20000000 	.word	0x20000000
 800a3ac:	10624dd3 	.word	0x10624dd3
 800a3b0:	e000e014 	.word	0xe000e014

0800a3b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a3b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a3c4 <vPortEnableVFP+0x10>
 800a3b8:	6801      	ldr	r1, [r0, #0]
 800a3ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a3be:	6001      	str	r1, [r0, #0]
 800a3c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a3c2:	bf00      	nop
 800a3c4:	e000ed88 	.word	0xe000ed88

0800a3c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b085      	sub	sp, #20
 800a3cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a3ce:	f3ef 8305 	mrs	r3, IPSR
 800a3d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	2b0f      	cmp	r3, #15
 800a3d8:	d914      	bls.n	800a404 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a3da:	4a17      	ldr	r2, [pc, #92]	; (800a438 <vPortValidateInterruptPriority+0x70>)
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	4413      	add	r3, r2
 800a3e0:	781b      	ldrb	r3, [r3, #0]
 800a3e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a3e4:	4b15      	ldr	r3, [pc, #84]	; (800a43c <vPortValidateInterruptPriority+0x74>)
 800a3e6:	781b      	ldrb	r3, [r3, #0]
 800a3e8:	7afa      	ldrb	r2, [r7, #11]
 800a3ea:	429a      	cmp	r2, r3
 800a3ec:	d20a      	bcs.n	800a404 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f2:	f383 8811 	msr	BASEPRI, r3
 800a3f6:	f3bf 8f6f 	isb	sy
 800a3fa:	f3bf 8f4f 	dsb	sy
 800a3fe:	607b      	str	r3, [r7, #4]
}
 800a400:	bf00      	nop
 800a402:	e7fe      	b.n	800a402 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a404:	4b0e      	ldr	r3, [pc, #56]	; (800a440 <vPortValidateInterruptPriority+0x78>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a40c:	4b0d      	ldr	r3, [pc, #52]	; (800a444 <vPortValidateInterruptPriority+0x7c>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	429a      	cmp	r2, r3
 800a412:	d90a      	bls.n	800a42a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a414:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a418:	f383 8811 	msr	BASEPRI, r3
 800a41c:	f3bf 8f6f 	isb	sy
 800a420:	f3bf 8f4f 	dsb	sy
 800a424:	603b      	str	r3, [r7, #0]
}
 800a426:	bf00      	nop
 800a428:	e7fe      	b.n	800a428 <vPortValidateInterruptPriority+0x60>
	}
 800a42a:	bf00      	nop
 800a42c:	3714      	adds	r7, #20
 800a42e:	46bd      	mov	sp, r7
 800a430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a434:	4770      	bx	lr
 800a436:	bf00      	nop
 800a438:	e000e3f0 	.word	0xe000e3f0
 800a43c:	20000fbc 	.word	0x20000fbc
 800a440:	e000ed0c 	.word	0xe000ed0c
 800a444:	20000fc0 	.word	0x20000fc0

0800a448 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b08a      	sub	sp, #40	; 0x28
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a450:	2300      	movs	r3, #0
 800a452:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a454:	f7fe fa32 	bl	80088bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a458:	4b5b      	ldr	r3, [pc, #364]	; (800a5c8 <pvPortMalloc+0x180>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d101      	bne.n	800a464 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a460:	f000 f920 	bl	800a6a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a464:	4b59      	ldr	r3, [pc, #356]	; (800a5cc <pvPortMalloc+0x184>)
 800a466:	681a      	ldr	r2, [r3, #0]
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	4013      	ands	r3, r2
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	f040 8093 	bne.w	800a598 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d01d      	beq.n	800a4b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a478:	2208      	movs	r2, #8
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	4413      	add	r3, r2
 800a47e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f003 0307 	and.w	r3, r3, #7
 800a486:	2b00      	cmp	r3, #0
 800a488:	d014      	beq.n	800a4b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f023 0307 	bic.w	r3, r3, #7
 800a490:	3308      	adds	r3, #8
 800a492:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f003 0307 	and.w	r3, r3, #7
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d00a      	beq.n	800a4b4 <pvPortMalloc+0x6c>
	__asm volatile
 800a49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a2:	f383 8811 	msr	BASEPRI, r3
 800a4a6:	f3bf 8f6f 	isb	sy
 800a4aa:	f3bf 8f4f 	dsb	sy
 800a4ae:	617b      	str	r3, [r7, #20]
}
 800a4b0:	bf00      	nop
 800a4b2:	e7fe      	b.n	800a4b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d06e      	beq.n	800a598 <pvPortMalloc+0x150>
 800a4ba:	4b45      	ldr	r3, [pc, #276]	; (800a5d0 <pvPortMalloc+0x188>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	687a      	ldr	r2, [r7, #4]
 800a4c0:	429a      	cmp	r2, r3
 800a4c2:	d869      	bhi.n	800a598 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a4c4:	4b43      	ldr	r3, [pc, #268]	; (800a5d4 <pvPortMalloc+0x18c>)
 800a4c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a4c8:	4b42      	ldr	r3, [pc, #264]	; (800a5d4 <pvPortMalloc+0x18c>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a4ce:	e004      	b.n	800a4da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4dc:	685b      	ldr	r3, [r3, #4]
 800a4de:	687a      	ldr	r2, [r7, #4]
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d903      	bls.n	800a4ec <pvPortMalloc+0xa4>
 800a4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d1f1      	bne.n	800a4d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a4ec:	4b36      	ldr	r3, [pc, #216]	; (800a5c8 <pvPortMalloc+0x180>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4f2:	429a      	cmp	r2, r3
 800a4f4:	d050      	beq.n	800a598 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a4f6:	6a3b      	ldr	r3, [r7, #32]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	2208      	movs	r2, #8
 800a4fc:	4413      	add	r3, r2
 800a4fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a502:	681a      	ldr	r2, [r3, #0]
 800a504:	6a3b      	ldr	r3, [r7, #32]
 800a506:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a50a:	685a      	ldr	r2, [r3, #4]
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	1ad2      	subs	r2, r2, r3
 800a510:	2308      	movs	r3, #8
 800a512:	005b      	lsls	r3, r3, #1
 800a514:	429a      	cmp	r2, r3
 800a516:	d91f      	bls.n	800a558 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	4413      	add	r3, r2
 800a51e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a520:	69bb      	ldr	r3, [r7, #24]
 800a522:	f003 0307 	and.w	r3, r3, #7
 800a526:	2b00      	cmp	r3, #0
 800a528:	d00a      	beq.n	800a540 <pvPortMalloc+0xf8>
	__asm volatile
 800a52a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a52e:	f383 8811 	msr	BASEPRI, r3
 800a532:	f3bf 8f6f 	isb	sy
 800a536:	f3bf 8f4f 	dsb	sy
 800a53a:	613b      	str	r3, [r7, #16]
}
 800a53c:	bf00      	nop
 800a53e:	e7fe      	b.n	800a53e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a542:	685a      	ldr	r2, [r3, #4]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	1ad2      	subs	r2, r2, r3
 800a548:	69bb      	ldr	r3, [r7, #24]
 800a54a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a54e:	687a      	ldr	r2, [r7, #4]
 800a550:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a552:	69b8      	ldr	r0, [r7, #24]
 800a554:	f000 f908 	bl	800a768 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a558:	4b1d      	ldr	r3, [pc, #116]	; (800a5d0 <pvPortMalloc+0x188>)
 800a55a:	681a      	ldr	r2, [r3, #0]
 800a55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a55e:	685b      	ldr	r3, [r3, #4]
 800a560:	1ad3      	subs	r3, r2, r3
 800a562:	4a1b      	ldr	r2, [pc, #108]	; (800a5d0 <pvPortMalloc+0x188>)
 800a564:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a566:	4b1a      	ldr	r3, [pc, #104]	; (800a5d0 <pvPortMalloc+0x188>)
 800a568:	681a      	ldr	r2, [r3, #0]
 800a56a:	4b1b      	ldr	r3, [pc, #108]	; (800a5d8 <pvPortMalloc+0x190>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	429a      	cmp	r2, r3
 800a570:	d203      	bcs.n	800a57a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a572:	4b17      	ldr	r3, [pc, #92]	; (800a5d0 <pvPortMalloc+0x188>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	4a18      	ldr	r2, [pc, #96]	; (800a5d8 <pvPortMalloc+0x190>)
 800a578:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a57c:	685a      	ldr	r2, [r3, #4]
 800a57e:	4b13      	ldr	r3, [pc, #76]	; (800a5cc <pvPortMalloc+0x184>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	431a      	orrs	r2, r3
 800a584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a586:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a58a:	2200      	movs	r2, #0
 800a58c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a58e:	4b13      	ldr	r3, [pc, #76]	; (800a5dc <pvPortMalloc+0x194>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	3301      	adds	r3, #1
 800a594:	4a11      	ldr	r2, [pc, #68]	; (800a5dc <pvPortMalloc+0x194>)
 800a596:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a598:	f7fe f99e 	bl	80088d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a59c:	69fb      	ldr	r3, [r7, #28]
 800a59e:	f003 0307 	and.w	r3, r3, #7
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d00a      	beq.n	800a5bc <pvPortMalloc+0x174>
	__asm volatile
 800a5a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5aa:	f383 8811 	msr	BASEPRI, r3
 800a5ae:	f3bf 8f6f 	isb	sy
 800a5b2:	f3bf 8f4f 	dsb	sy
 800a5b6:	60fb      	str	r3, [r7, #12]
}
 800a5b8:	bf00      	nop
 800a5ba:	e7fe      	b.n	800a5ba <pvPortMalloc+0x172>
	return pvReturn;
 800a5bc:	69fb      	ldr	r3, [r7, #28]
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3728      	adds	r7, #40	; 0x28
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}
 800a5c6:	bf00      	nop
 800a5c8:	20008fcc 	.word	0x20008fcc
 800a5cc:	20008fe0 	.word	0x20008fe0
 800a5d0:	20008fd0 	.word	0x20008fd0
 800a5d4:	20008fc4 	.word	0x20008fc4
 800a5d8:	20008fd4 	.word	0x20008fd4
 800a5dc:	20008fd8 	.word	0x20008fd8

0800a5e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b086      	sub	sp, #24
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d04d      	beq.n	800a68e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a5f2:	2308      	movs	r3, #8
 800a5f4:	425b      	negs	r3, r3
 800a5f6:	697a      	ldr	r2, [r7, #20]
 800a5f8:	4413      	add	r3, r2
 800a5fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	685a      	ldr	r2, [r3, #4]
 800a604:	4b24      	ldr	r3, [pc, #144]	; (800a698 <vPortFree+0xb8>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	4013      	ands	r3, r2
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d10a      	bne.n	800a624 <vPortFree+0x44>
	__asm volatile
 800a60e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a612:	f383 8811 	msr	BASEPRI, r3
 800a616:	f3bf 8f6f 	isb	sy
 800a61a:	f3bf 8f4f 	dsb	sy
 800a61e:	60fb      	str	r3, [r7, #12]
}
 800a620:	bf00      	nop
 800a622:	e7fe      	b.n	800a622 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d00a      	beq.n	800a642 <vPortFree+0x62>
	__asm volatile
 800a62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a630:	f383 8811 	msr	BASEPRI, r3
 800a634:	f3bf 8f6f 	isb	sy
 800a638:	f3bf 8f4f 	dsb	sy
 800a63c:	60bb      	str	r3, [r7, #8]
}
 800a63e:	bf00      	nop
 800a640:	e7fe      	b.n	800a640 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	685a      	ldr	r2, [r3, #4]
 800a646:	4b14      	ldr	r3, [pc, #80]	; (800a698 <vPortFree+0xb8>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	4013      	ands	r3, r2
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d01e      	beq.n	800a68e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d11a      	bne.n	800a68e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a658:	693b      	ldr	r3, [r7, #16]
 800a65a:	685a      	ldr	r2, [r3, #4]
 800a65c:	4b0e      	ldr	r3, [pc, #56]	; (800a698 <vPortFree+0xb8>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	43db      	mvns	r3, r3
 800a662:	401a      	ands	r2, r3
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a668:	f7fe f928 	bl	80088bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	685a      	ldr	r2, [r3, #4]
 800a670:	4b0a      	ldr	r3, [pc, #40]	; (800a69c <vPortFree+0xbc>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4413      	add	r3, r2
 800a676:	4a09      	ldr	r2, [pc, #36]	; (800a69c <vPortFree+0xbc>)
 800a678:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a67a:	6938      	ldr	r0, [r7, #16]
 800a67c:	f000 f874 	bl	800a768 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a680:	4b07      	ldr	r3, [pc, #28]	; (800a6a0 <vPortFree+0xc0>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	3301      	adds	r3, #1
 800a686:	4a06      	ldr	r2, [pc, #24]	; (800a6a0 <vPortFree+0xc0>)
 800a688:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a68a:	f7fe f925 	bl	80088d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a68e:	bf00      	nop
 800a690:	3718      	adds	r7, #24
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}
 800a696:	bf00      	nop
 800a698:	20008fe0 	.word	0x20008fe0
 800a69c:	20008fd0 	.word	0x20008fd0
 800a6a0:	20008fdc 	.word	0x20008fdc

0800a6a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b085      	sub	sp, #20
 800a6a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a6aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a6ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a6b0:	4b27      	ldr	r3, [pc, #156]	; (800a750 <prvHeapInit+0xac>)
 800a6b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	f003 0307 	and.w	r3, r3, #7
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d00c      	beq.n	800a6d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	3307      	adds	r3, #7
 800a6c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f023 0307 	bic.w	r3, r3, #7
 800a6ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a6cc:	68ba      	ldr	r2, [r7, #8]
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	1ad3      	subs	r3, r2, r3
 800a6d2:	4a1f      	ldr	r2, [pc, #124]	; (800a750 <prvHeapInit+0xac>)
 800a6d4:	4413      	add	r3, r2
 800a6d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a6dc:	4a1d      	ldr	r2, [pc, #116]	; (800a754 <prvHeapInit+0xb0>)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a6e2:	4b1c      	ldr	r3, [pc, #112]	; (800a754 <prvHeapInit+0xb0>)
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	68ba      	ldr	r2, [r7, #8]
 800a6ec:	4413      	add	r3, r2
 800a6ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a6f0:	2208      	movs	r2, #8
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	1a9b      	subs	r3, r3, r2
 800a6f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	f023 0307 	bic.w	r3, r3, #7
 800a6fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	4a15      	ldr	r2, [pc, #84]	; (800a758 <prvHeapInit+0xb4>)
 800a704:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a706:	4b14      	ldr	r3, [pc, #80]	; (800a758 <prvHeapInit+0xb4>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	2200      	movs	r2, #0
 800a70c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a70e:	4b12      	ldr	r3, [pc, #72]	; (800a758 <prvHeapInit+0xb4>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	2200      	movs	r2, #0
 800a714:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	68fa      	ldr	r2, [r7, #12]
 800a71e:	1ad2      	subs	r2, r2, r3
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a724:	4b0c      	ldr	r3, [pc, #48]	; (800a758 <prvHeapInit+0xb4>)
 800a726:	681a      	ldr	r2, [r3, #0]
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	685b      	ldr	r3, [r3, #4]
 800a730:	4a0a      	ldr	r2, [pc, #40]	; (800a75c <prvHeapInit+0xb8>)
 800a732:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	685b      	ldr	r3, [r3, #4]
 800a738:	4a09      	ldr	r2, [pc, #36]	; (800a760 <prvHeapInit+0xbc>)
 800a73a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a73c:	4b09      	ldr	r3, [pc, #36]	; (800a764 <prvHeapInit+0xc0>)
 800a73e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a742:	601a      	str	r2, [r3, #0]
}
 800a744:	bf00      	nop
 800a746:	3714      	adds	r7, #20
 800a748:	46bd      	mov	sp, r7
 800a74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74e:	4770      	bx	lr
 800a750:	20000fc4 	.word	0x20000fc4
 800a754:	20008fc4 	.word	0x20008fc4
 800a758:	20008fcc 	.word	0x20008fcc
 800a75c:	20008fd4 	.word	0x20008fd4
 800a760:	20008fd0 	.word	0x20008fd0
 800a764:	20008fe0 	.word	0x20008fe0

0800a768 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a768:	b480      	push	{r7}
 800a76a:	b085      	sub	sp, #20
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a770:	4b28      	ldr	r3, [pc, #160]	; (800a814 <prvInsertBlockIntoFreeList+0xac>)
 800a772:	60fb      	str	r3, [r7, #12]
 800a774:	e002      	b.n	800a77c <prvInsertBlockIntoFreeList+0x14>
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	60fb      	str	r3, [r7, #12]
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	687a      	ldr	r2, [r7, #4]
 800a782:	429a      	cmp	r2, r3
 800a784:	d8f7      	bhi.n	800a776 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	68ba      	ldr	r2, [r7, #8]
 800a790:	4413      	add	r3, r2
 800a792:	687a      	ldr	r2, [r7, #4]
 800a794:	429a      	cmp	r2, r3
 800a796:	d108      	bne.n	800a7aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	685a      	ldr	r2, [r3, #4]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	685b      	ldr	r3, [r3, #4]
 800a7a0:	441a      	add	r2, r3
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	685b      	ldr	r3, [r3, #4]
 800a7b2:	68ba      	ldr	r2, [r7, #8]
 800a7b4:	441a      	add	r2, r3
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	429a      	cmp	r2, r3
 800a7bc:	d118      	bne.n	800a7f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681a      	ldr	r2, [r3, #0]
 800a7c2:	4b15      	ldr	r3, [pc, #84]	; (800a818 <prvInsertBlockIntoFreeList+0xb0>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	429a      	cmp	r2, r3
 800a7c8:	d00d      	beq.n	800a7e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	685a      	ldr	r2, [r3, #4]
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	685b      	ldr	r3, [r3, #4]
 800a7d4:	441a      	add	r2, r3
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	681a      	ldr	r2, [r3, #0]
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	601a      	str	r2, [r3, #0]
 800a7e4:	e008      	b.n	800a7f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a7e6:	4b0c      	ldr	r3, [pc, #48]	; (800a818 <prvInsertBlockIntoFreeList+0xb0>)
 800a7e8:	681a      	ldr	r2, [r3, #0]
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	601a      	str	r2, [r3, #0]
 800a7ee:	e003      	b.n	800a7f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	681a      	ldr	r2, [r3, #0]
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a7f8:	68fa      	ldr	r2, [r7, #12]
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	429a      	cmp	r2, r3
 800a7fe:	d002      	beq.n	800a806 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	687a      	ldr	r2, [r7, #4]
 800a804:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a806:	bf00      	nop
 800a808:	3714      	adds	r7, #20
 800a80a:	46bd      	mov	sp, r7
 800a80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a810:	4770      	bx	lr
 800a812:	bf00      	nop
 800a814:	20008fc4 	.word	0x20008fc4
 800a818:	20008fcc 	.word	0x20008fcc

0800a81c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a820:	2200      	movs	r2, #0
 800a822:	4912      	ldr	r1, [pc, #72]	; (800a86c <MX_USB_DEVICE_Init+0x50>)
 800a824:	4812      	ldr	r0, [pc, #72]	; (800a870 <MX_USB_DEVICE_Init+0x54>)
 800a826:	f7fa fe27 	bl	8005478 <USBD_Init>
 800a82a:	4603      	mov	r3, r0
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d001      	beq.n	800a834 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a830:	f7f5 ff2c 	bl	800068c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a834:	490f      	ldr	r1, [pc, #60]	; (800a874 <MX_USB_DEVICE_Init+0x58>)
 800a836:	480e      	ldr	r0, [pc, #56]	; (800a870 <MX_USB_DEVICE_Init+0x54>)
 800a838:	f7fa fe4e 	bl	80054d8 <USBD_RegisterClass>
 800a83c:	4603      	mov	r3, r0
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d001      	beq.n	800a846 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a842:	f7f5 ff23 	bl	800068c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a846:	490c      	ldr	r1, [pc, #48]	; (800a878 <MX_USB_DEVICE_Init+0x5c>)
 800a848:	4809      	ldr	r0, [pc, #36]	; (800a870 <MX_USB_DEVICE_Init+0x54>)
 800a84a:	f7fa fd3f 	bl	80052cc <USBD_CDC_RegisterInterface>
 800a84e:	4603      	mov	r3, r0
 800a850:	2b00      	cmp	r3, #0
 800a852:	d001      	beq.n	800a858 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a854:	f7f5 ff1a 	bl	800068c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a858:	4805      	ldr	r0, [pc, #20]	; (800a870 <MX_USB_DEVICE_Init+0x54>)
 800a85a:	f7fa fe73 	bl	8005544 <USBD_Start>
 800a85e:	4603      	mov	r3, r0
 800a860:	2b00      	cmp	r3, #0
 800a862:	d001      	beq.n	800a868 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a864:	f7f5 ff12 	bl	800068c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a868:	bf00      	nop
 800a86a:	bd80      	pop	{r7, pc}
 800a86c:	200000b0 	.word	0x200000b0
 800a870:	20008fe4 	.word	0x20008fe4
 800a874:	20000018 	.word	0x20000018
 800a878:	2000009c 	.word	0x2000009c

0800a87c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a880:	2200      	movs	r2, #0
 800a882:	4905      	ldr	r1, [pc, #20]	; (800a898 <CDC_Init_FS+0x1c>)
 800a884:	4805      	ldr	r0, [pc, #20]	; (800a89c <CDC_Init_FS+0x20>)
 800a886:	f7fa fd3b 	bl	8005300 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a88a:	4905      	ldr	r1, [pc, #20]	; (800a8a0 <CDC_Init_FS+0x24>)
 800a88c:	4803      	ldr	r0, [pc, #12]	; (800a89c <CDC_Init_FS+0x20>)
 800a88e:	f7fa fd59 	bl	8005344 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a892:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a894:	4618      	mov	r0, r3
 800a896:	bd80      	pop	{r7, pc}
 800a898:	20009ac8 	.word	0x20009ac8
 800a89c:	20008fe4 	.word	0x20008fe4
 800a8a0:	200092c8 	.word	0x200092c8

0800a8a4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a8a8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b2:	4770      	bx	lr

0800a8b4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b083      	sub	sp, #12
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	6039      	str	r1, [r7, #0]
 800a8be:	71fb      	strb	r3, [r7, #7]
 800a8c0:	4613      	mov	r3, r2
 800a8c2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a8c4:	79fb      	ldrb	r3, [r7, #7]
 800a8c6:	2b23      	cmp	r3, #35	; 0x23
 800a8c8:	d84a      	bhi.n	800a960 <CDC_Control_FS+0xac>
 800a8ca:	a201      	add	r2, pc, #4	; (adr r2, 800a8d0 <CDC_Control_FS+0x1c>)
 800a8cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8d0:	0800a961 	.word	0x0800a961
 800a8d4:	0800a961 	.word	0x0800a961
 800a8d8:	0800a961 	.word	0x0800a961
 800a8dc:	0800a961 	.word	0x0800a961
 800a8e0:	0800a961 	.word	0x0800a961
 800a8e4:	0800a961 	.word	0x0800a961
 800a8e8:	0800a961 	.word	0x0800a961
 800a8ec:	0800a961 	.word	0x0800a961
 800a8f0:	0800a961 	.word	0x0800a961
 800a8f4:	0800a961 	.word	0x0800a961
 800a8f8:	0800a961 	.word	0x0800a961
 800a8fc:	0800a961 	.word	0x0800a961
 800a900:	0800a961 	.word	0x0800a961
 800a904:	0800a961 	.word	0x0800a961
 800a908:	0800a961 	.word	0x0800a961
 800a90c:	0800a961 	.word	0x0800a961
 800a910:	0800a961 	.word	0x0800a961
 800a914:	0800a961 	.word	0x0800a961
 800a918:	0800a961 	.word	0x0800a961
 800a91c:	0800a961 	.word	0x0800a961
 800a920:	0800a961 	.word	0x0800a961
 800a924:	0800a961 	.word	0x0800a961
 800a928:	0800a961 	.word	0x0800a961
 800a92c:	0800a961 	.word	0x0800a961
 800a930:	0800a961 	.word	0x0800a961
 800a934:	0800a961 	.word	0x0800a961
 800a938:	0800a961 	.word	0x0800a961
 800a93c:	0800a961 	.word	0x0800a961
 800a940:	0800a961 	.word	0x0800a961
 800a944:	0800a961 	.word	0x0800a961
 800a948:	0800a961 	.word	0x0800a961
 800a94c:	0800a961 	.word	0x0800a961
 800a950:	0800a961 	.word	0x0800a961
 800a954:	0800a961 	.word	0x0800a961
 800a958:	0800a961 	.word	0x0800a961
 800a95c:	0800a961 	.word	0x0800a961
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a960:	bf00      	nop
  }

  return (USBD_OK);
 800a962:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a964:	4618      	mov	r0, r3
 800a966:	370c      	adds	r7, #12
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr

0800a970 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b084      	sub	sp, #16
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
 800a978:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  portBASE_TYPE yield = pdFALSE;
 800a97a:	2300      	movs	r3, #0
 800a97c:	60fb      	str	r3, [r7, #12]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a97e:	6879      	ldr	r1, [r7, #4]
 800a980:	480f      	ldr	r0, [pc, #60]	; (800a9c0 <CDC_Receive_FS+0x50>)
 800a982:	f7fa fcdf 	bl	8005344 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a986:	480e      	ldr	r0, [pc, #56]	; (800a9c0 <CDC_Receive_FS+0x50>)
 800a988:	f7fa fd40 	bl	800540c <USBD_CDC_ReceivePacket>

  xMessageBufferSendFromISR(rMessageBuffer, Buf, *Len, &yield);
 800a98c:	4b0d      	ldr	r3, [pc, #52]	; (800a9c4 <CDC_Receive_FS+0x54>)
 800a98e:	6818      	ldr	r0, [r3, #0]
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	681a      	ldr	r2, [r3, #0]
 800a994:	f107 030c 	add.w	r3, r7, #12
 800a998:	6879      	ldr	r1, [r7, #4]
 800a99a:	f7fd fab2 	bl	8007f02 <xStreamBufferSendFromISR>
  portYIELD_FROM_ISR(yield);
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d007      	beq.n	800a9b4 <CDC_Receive_FS+0x44>
 800a9a4:	4b08      	ldr	r3, [pc, #32]	; (800a9c8 <CDC_Receive_FS+0x58>)
 800a9a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9aa:	601a      	str	r2, [r3, #0]
 800a9ac:	f3bf 8f4f 	dsb	sy
 800a9b0:	f3bf 8f6f 	isb	sy

  return (USBD_OK);
 800a9b4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3710      	adds	r7, #16
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}
 800a9be:	bf00      	nop
 800a9c0:	20008fe4 	.word	0x20008fe4
 800a9c4:	2000a2cc 	.word	0x2000a2cc
 800a9c8:	e000ed04 	.word	0xe000ed04

0800a9cc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b084      	sub	sp, #16
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
 800a9d4:	460b      	mov	r3, r1
 800a9d6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  if (xSemaphoreTake(mutex_usb, portMAX_DELAY) == pdTRUE){
 800a9dc:	4b1c      	ldr	r3, [pc, #112]	; (800aa50 <CDC_Transmit_FS+0x84>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f7fc feb7 	bl	8007758 <xQueueSemaphoreTake>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	2b01      	cmp	r3, #1
 800a9ee:	d12a      	bne.n	800aa46 <CDC_Transmit_FS+0x7a>
	  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a9f0:	4b18      	ldr	r3, [pc, #96]	; (800aa54 <CDC_Transmit_FS+0x88>)
 800a9f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a9f6:	60bb      	str	r3, [r7, #8]
	  if (hcdc->TxState != 0){
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d008      	beq.n	800aa14 <CDC_Transmit_FS+0x48>
		xSemaphoreGive(mutex_usb);
 800aa02:	4b13      	ldr	r3, [pc, #76]	; (800aa50 <CDC_Transmit_FS+0x84>)
 800aa04:	6818      	ldr	r0, [r3, #0]
 800aa06:	2300      	movs	r3, #0
 800aa08:	2200      	movs	r2, #0
 800aa0a:	2100      	movs	r1, #0
 800aa0c:	f7fc fb9e 	bl	800714c <xQueueGenericSend>
		return USBD_BUSY;
 800aa10:	2301      	movs	r3, #1
 800aa12:	e019      	b.n	800aa48 <CDC_Transmit_FS+0x7c>
	  }
	  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800aa14:	887b      	ldrh	r3, [r7, #2]
 800aa16:	461a      	mov	r2, r3
 800aa18:	6879      	ldr	r1, [r7, #4]
 800aa1a:	480e      	ldr	r0, [pc, #56]	; (800aa54 <CDC_Transmit_FS+0x88>)
 800aa1c:	f7fa fc70 	bl	8005300 <USBD_CDC_SetTxBuffer>
	  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800aa20:	480c      	ldr	r0, [pc, #48]	; (800aa54 <CDC_Transmit_FS+0x88>)
 800aa22:	f7fa fcad 	bl	8005380 <USBD_CDC_TransmitPacket>
 800aa26:	4603      	mov	r3, r0
 800aa28:	73fb      	strb	r3, [r7, #15]
	  xSemaphoreTake(sem_usb_tx, portMAX_DELAY);
 800aa2a:	4b0b      	ldr	r3, [pc, #44]	; (800aa58 <CDC_Transmit_FS+0x8c>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800aa32:	4618      	mov	r0, r3
 800aa34:	f7fc fe90 	bl	8007758 <xQueueSemaphoreTake>
	  xSemaphoreGive(mutex_usb);
 800aa38:	4b05      	ldr	r3, [pc, #20]	; (800aa50 <CDC_Transmit_FS+0x84>)
 800aa3a:	6818      	ldr	r0, [r3, #0]
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	2200      	movs	r2, #0
 800aa40:	2100      	movs	r1, #0
 800aa42:	f7fc fb83 	bl	800714c <xQueueGenericSend>
  }
  /* USER CODE END 7 */
  return result;
 800aa46:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3710      	adds	r7, #16
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}
 800aa50:	200092c4 	.word	0x200092c4
 800aa54:	20008fe4 	.word	0x20008fe4
 800aa58:	200092c0 	.word	0x200092c0

0800aa5c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b086      	sub	sp, #24
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	60f8      	str	r0, [r7, #12]
 800aa64:	60b9      	str	r1, [r7, #8]
 800aa66:	4613      	mov	r3, r2
 800aa68:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  portBASE_TYPE tmp = pdFALSE;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	613b      	str	r3, [r7, #16]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  xSemaphoreGiveFromISR(sem_usb_tx, &tmp);
 800aa72:	4b0c      	ldr	r3, [pc, #48]	; (800aaa4 <CDC_TransmitCplt_FS+0x48>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f107 0210 	add.w	r2, r7, #16
 800aa7a:	4611      	mov	r1, r2
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	f7fc fcfe 	bl	800747e <xQueueGiveFromISR>
  portYIELD_FROM_ISR(tmp);
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d007      	beq.n	800aa98 <CDC_TransmitCplt_FS+0x3c>
 800aa88:	4b07      	ldr	r3, [pc, #28]	; (800aaa8 <CDC_TransmitCplt_FS+0x4c>)
 800aa8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa8e:	601a      	str	r2, [r3, #0]
 800aa90:	f3bf 8f4f 	dsb	sy
 800aa94:	f3bf 8f6f 	isb	sy
  /* USER CODE END 13 */
  return result;
 800aa98:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3718      	adds	r7, #24
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}
 800aaa4:	200092c0 	.word	0x200092c0
 800aaa8:	e000ed04 	.word	0xe000ed04

0800aaac <init_usb_rtos_obj>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
volatile uint32_t usb_is_on = 0;
void init_usb_rtos_obj(void){
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b082      	sub	sp, #8
 800aab0:	af02      	add	r7, sp, #8

	sem_usb_tx = xSemaphoreCreateBinary();
 800aab2:	2203      	movs	r2, #3
 800aab4:	2100      	movs	r1, #0
 800aab6:	2001      	movs	r0, #1
 800aab8:	f7fc fab8 	bl	800702c <xQueueGenericCreate>
 800aabc:	4603      	mov	r3, r0
 800aabe:	4a15      	ldr	r2, [pc, #84]	; (800ab14 <init_usb_rtos_obj+0x68>)
 800aac0:	6013      	str	r3, [r2, #0]
	mutex_usb = xSemaphoreCreateMutex();
 800aac2:	2001      	movs	r0, #1
 800aac4:	f7fc fb29 	bl	800711a <xQueueCreateMutex>
 800aac8:	4603      	mov	r3, r0
 800aaca:	4a13      	ldr	r2, [pc, #76]	; (800ab18 <init_usb_rtos_obj+0x6c>)
 800aacc:	6013      	str	r3, [r2, #0]
	//queue_usb = xQueueCreate(768, sizeof(char));
	xMessageBuffer = xMessageBufferCreate(768);
 800aace:	2201      	movs	r2, #1
 800aad0:	2100      	movs	r1, #0
 800aad2:	f44f 7040 	mov.w	r0, #768	; 0x300
 800aad6:	f7fd f8d1 	bl	8007c7c <xStreamBufferGenericCreate>
 800aada:	4603      	mov	r3, r0
 800aadc:	4a0f      	ldr	r2, [pc, #60]	; (800ab1c <init_usb_rtos_obj+0x70>)
 800aade:	6013      	str	r3, [r2, #0]
	rMessageBuffer = xMessageBufferCreate(768);
 800aae0:	2201      	movs	r2, #1
 800aae2:	2100      	movs	r1, #0
 800aae4:	f44f 7040 	mov.w	r0, #768	; 0x300
 800aae8:	f7fd f8c8 	bl	8007c7c <xStreamBufferGenericCreate>
 800aaec:	4603      	mov	r3, r0
 800aaee:	4a0c      	ldr	r2, [pc, #48]	; (800ab20 <init_usb_rtos_obj+0x74>)
 800aaf0:	6013      	str	r3, [r2, #0]
	usb_is_on = 1;
 800aaf2:	4b0c      	ldr	r3, [pc, #48]	; (800ab24 <init_usb_rtos_obj+0x78>)
 800aaf4:	2201      	movs	r2, #1
 800aaf6:	601a      	str	r2, [r3, #0]

	xTaskCreate(Print_Task, "print_task", 512, NULL, 2, NULL);
 800aaf8:	2300      	movs	r3, #0
 800aafa:	9301      	str	r3, [sp, #4]
 800aafc:	2302      	movs	r3, #2
 800aafe:	9300      	str	r3, [sp, #0]
 800ab00:	2300      	movs	r3, #0
 800ab02:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab06:	4908      	ldr	r1, [pc, #32]	; (800ab28 <init_usb_rtos_obj+0x7c>)
 800ab08:	4808      	ldr	r0, [pc, #32]	; (800ab2c <init_usb_rtos_obj+0x80>)
 800ab0a:	f7fd fd0b 	bl	8008524 <xTaskCreate>
}
 800ab0e:	bf00      	nop
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}
 800ab14:	200092c0 	.word	0x200092c0
 800ab18:	200092c4 	.word	0x200092c4
 800ab1c:	2000a2c8 	.word	0x2000a2c8
 800ab20:	2000a2cc 	.word	0x2000a2cc
 800ab24:	2000a2d0 	.word	0x2000a2d0
 800ab28:	0800b6a0 	.word	0x0800b6a0
 800ab2c:	0800aba9 	.word	0x0800aba9

0800ab30 <receive_usb_data>:
    // The entire table was written directly to the output buffer.  Execution
    of this command is complete, so return pdFALSE.
    //return pdFALSE;
}*/

size_t receive_usb_data(uint8_t *data, int size, TickType_t timeout){
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b084      	sub	sp, #16
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	60f8      	str	r0, [r7, #12]
 800ab38:	60b9      	str	r1, [r7, #8]
 800ab3a:	607a      	str	r2, [r7, #4]
	return xMessageBufferReceive(rMessageBuffer, (void *)data, size, timeout);
 800ab3c:	4b05      	ldr	r3, [pc, #20]	; (800ab54 <receive_usb_data+0x24>)
 800ab3e:	6818      	ldr	r0, [r3, #0]
 800ab40:	68ba      	ldr	r2, [r7, #8]
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	68f9      	ldr	r1, [r7, #12]
 800ab46:	f7fd fa8a 	bl	800805e <xStreamBufferReceive>
 800ab4a:	4603      	mov	r3, r0
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	3710      	adds	r7, #16
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bd80      	pop	{r7, pc}
 800ab54:	2000a2cc 	.word	0x2000a2cc

0800ab58 <queue_print_usb>:

void queue_print_usb(uint8_t *data, int size, TickType_t timeout){
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b084      	sub	sp, #16
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	60f8      	str	r0, [r7, #12]
 800ab60:	60b9      	str	r1, [r7, #8]
 800ab62:	607a      	str	r2, [r7, #4]
	if(xSemaphoreTake(mutex_usb, portMAX_DELAY) == pdTRUE) {
 800ab64:	4b0e      	ldr	r3, [pc, #56]	; (800aba0 <queue_print_usb+0x48>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f7fc fdf3 	bl	8007758 <xQueueSemaphoreTake>
 800ab72:	4603      	mov	r3, r0
 800ab74:	2b01      	cmp	r3, #1
 800ab76:	d10e      	bne.n	800ab96 <queue_print_usb+0x3e>
		xMessageBufferSend(xMessageBuffer, data, size, portMAX_DELAY);
 800ab78:	4b0a      	ldr	r3, [pc, #40]	; (800aba4 <queue_print_usb+0x4c>)
 800ab7a:	6818      	ldr	r0, [r3, #0]
 800ab7c:	68ba      	ldr	r2, [r7, #8]
 800ab7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ab82:	68f9      	ldr	r1, [r7, #12]
 800ab84:	f7fd f908 	bl	8007d98 <xStreamBufferSend>
		xSemaphoreGive(mutex_usb);
 800ab88:	4b05      	ldr	r3, [pc, #20]	; (800aba0 <queue_print_usb+0x48>)
 800ab8a:	6818      	ldr	r0, [r3, #0]
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	2200      	movs	r2, #0
 800ab90:	2100      	movs	r1, #0
 800ab92:	f7fc fadb 	bl	800714c <xQueueGenericSend>
	}
}
 800ab96:	bf00      	nop
 800ab98:	3710      	adds	r7, #16
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}
 800ab9e:	bf00      	nop
 800aba0:	200092c4 	.word	0x200092c4
 800aba4:	2000a2c8 	.word	0x2000a2c8

0800aba8 <Print_Task>:

//void queue_print(char *data, int size){
//	xMessageBufferSend(xMessageBuffer, data, size, portMAX_DELAY);
//}

void Print_Task(void *param){
 800aba8:	b580      	push	{r7, lr}
 800abaa:	f5ad 7d44 	sub.w	sp, sp, #784	; 0x310
 800abae:	af00      	add	r7, sp, #0
 800abb0:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800abb4:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 800abb8:	6018      	str	r0, [r3, #0]
	char buffer[768];
	uint8_t qtd = 0;
 800abba:	2300      	movs	r3, #0
 800abbc:	f887 330f 	strb.w	r3, [r7, #783]	; 0x30f
	while(1){
		qtd = xMessageBufferReceive(xMessageBuffer, (void*)buffer, sizeof(buffer), portMAX_DELAY);
 800abc0:	4b0b      	ldr	r3, [pc, #44]	; (800abf0 <Print_Task+0x48>)
 800abc2:	6818      	ldr	r0, [r3, #0]
 800abc4:	f107 010c 	add.w	r1, r7, #12
 800abc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800abcc:	f44f 7240 	mov.w	r2, #768	; 0x300
 800abd0:	f7fd fa45 	bl	800805e <xStreamBufferReceive>
 800abd4:	4603      	mov	r3, r0
 800abd6:	f887 330f 	strb.w	r3, [r7, #783]	; 0x30f
		(void)qtd;
		CDC_Transmit_FS((uint8_t *)buffer, qtd);
 800abda:	f897 330f 	ldrb.w	r3, [r7, #783]	; 0x30f
 800abde:	b29a      	uxth	r2, r3
 800abe0:	f107 030c 	add.w	r3, r7, #12
 800abe4:	4611      	mov	r1, r2
 800abe6:	4618      	mov	r0, r3
 800abe8:	f7ff fef0 	bl	800a9cc <CDC_Transmit_FS>
		qtd = xMessageBufferReceive(xMessageBuffer, (void*)buffer, sizeof(buffer), portMAX_DELAY);
 800abec:	e7e8      	b.n	800abc0 <Print_Task+0x18>
 800abee:	bf00      	nop
 800abf0:	2000a2c8 	.word	0x2000a2c8

0800abf4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abf4:	b480      	push	{r7}
 800abf6:	b083      	sub	sp, #12
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	4603      	mov	r3, r0
 800abfc:	6039      	str	r1, [r7, #0]
 800abfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	2212      	movs	r2, #18
 800ac04:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ac06:	4b03      	ldr	r3, [pc, #12]	; (800ac14 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	370c      	adds	r7, #12
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac12:	4770      	bx	lr
 800ac14:	200000cc 	.word	0x200000cc

0800ac18 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b083      	sub	sp, #12
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	4603      	mov	r3, r0
 800ac20:	6039      	str	r1, [r7, #0]
 800ac22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	2204      	movs	r2, #4
 800ac28:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ac2a:	4b03      	ldr	r3, [pc, #12]	; (800ac38 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	370c      	adds	r7, #12
 800ac30:	46bd      	mov	sp, r7
 800ac32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac36:	4770      	bx	lr
 800ac38:	200000e0 	.word	0x200000e0

0800ac3c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b082      	sub	sp, #8
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	4603      	mov	r3, r0
 800ac44:	6039      	str	r1, [r7, #0]
 800ac46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ac48:	79fb      	ldrb	r3, [r7, #7]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d105      	bne.n	800ac5a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ac4e:	683a      	ldr	r2, [r7, #0]
 800ac50:	4907      	ldr	r1, [pc, #28]	; (800ac70 <USBD_FS_ProductStrDescriptor+0x34>)
 800ac52:	4808      	ldr	r0, [pc, #32]	; (800ac74 <USBD_FS_ProductStrDescriptor+0x38>)
 800ac54:	f7fb fe22 	bl	800689c <USBD_GetString>
 800ac58:	e004      	b.n	800ac64 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ac5a:	683a      	ldr	r2, [r7, #0]
 800ac5c:	4904      	ldr	r1, [pc, #16]	; (800ac70 <USBD_FS_ProductStrDescriptor+0x34>)
 800ac5e:	4805      	ldr	r0, [pc, #20]	; (800ac74 <USBD_FS_ProductStrDescriptor+0x38>)
 800ac60:	f7fb fe1c 	bl	800689c <USBD_GetString>
  }
  return USBD_StrDesc;
 800ac64:	4b02      	ldr	r3, [pc, #8]	; (800ac70 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3708      	adds	r7, #8
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}
 800ac6e:	bf00      	nop
 800ac70:	2000a2d4 	.word	0x2000a2d4
 800ac74:	0800b6ac 	.word	0x0800b6ac

0800ac78 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b082      	sub	sp, #8
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	4603      	mov	r3, r0
 800ac80:	6039      	str	r1, [r7, #0]
 800ac82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ac84:	683a      	ldr	r2, [r7, #0]
 800ac86:	4904      	ldr	r1, [pc, #16]	; (800ac98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ac88:	4804      	ldr	r0, [pc, #16]	; (800ac9c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ac8a:	f7fb fe07 	bl	800689c <USBD_GetString>
  return USBD_StrDesc;
 800ac8e:	4b02      	ldr	r3, [pc, #8]	; (800ac98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3708      	adds	r7, #8
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}
 800ac98:	2000a2d4 	.word	0x2000a2d4
 800ac9c:	0800b6c4 	.word	0x0800b6c4

0800aca0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b082      	sub	sp, #8
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	4603      	mov	r3, r0
 800aca8:	6039      	str	r1, [r7, #0]
 800acaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	221a      	movs	r2, #26
 800acb0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800acb2:	f000 f843 	bl	800ad3c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800acb6:	4b02      	ldr	r3, [pc, #8]	; (800acc0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800acb8:	4618      	mov	r0, r3
 800acba:	3708      	adds	r7, #8
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}
 800acc0:	200000e4 	.word	0x200000e4

0800acc4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b082      	sub	sp, #8
 800acc8:	af00      	add	r7, sp, #0
 800acca:	4603      	mov	r3, r0
 800accc:	6039      	str	r1, [r7, #0]
 800acce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800acd0:	79fb      	ldrb	r3, [r7, #7]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d105      	bne.n	800ace2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800acd6:	683a      	ldr	r2, [r7, #0]
 800acd8:	4907      	ldr	r1, [pc, #28]	; (800acf8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800acda:	4808      	ldr	r0, [pc, #32]	; (800acfc <USBD_FS_ConfigStrDescriptor+0x38>)
 800acdc:	f7fb fdde 	bl	800689c <USBD_GetString>
 800ace0:	e004      	b.n	800acec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ace2:	683a      	ldr	r2, [r7, #0]
 800ace4:	4904      	ldr	r1, [pc, #16]	; (800acf8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ace6:	4805      	ldr	r0, [pc, #20]	; (800acfc <USBD_FS_ConfigStrDescriptor+0x38>)
 800ace8:	f7fb fdd8 	bl	800689c <USBD_GetString>
  }
  return USBD_StrDesc;
 800acec:	4b02      	ldr	r3, [pc, #8]	; (800acf8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800acee:	4618      	mov	r0, r3
 800acf0:	3708      	adds	r7, #8
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}
 800acf6:	bf00      	nop
 800acf8:	2000a2d4 	.word	0x2000a2d4
 800acfc:	0800b6d8 	.word	0x0800b6d8

0800ad00 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b082      	sub	sp, #8
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	4603      	mov	r3, r0
 800ad08:	6039      	str	r1, [r7, #0]
 800ad0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ad0c:	79fb      	ldrb	r3, [r7, #7]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d105      	bne.n	800ad1e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ad12:	683a      	ldr	r2, [r7, #0]
 800ad14:	4907      	ldr	r1, [pc, #28]	; (800ad34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ad16:	4808      	ldr	r0, [pc, #32]	; (800ad38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ad18:	f7fb fdc0 	bl	800689c <USBD_GetString>
 800ad1c:	e004      	b.n	800ad28 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ad1e:	683a      	ldr	r2, [r7, #0]
 800ad20:	4904      	ldr	r1, [pc, #16]	; (800ad34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ad22:	4805      	ldr	r0, [pc, #20]	; (800ad38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ad24:	f7fb fdba 	bl	800689c <USBD_GetString>
  }
  return USBD_StrDesc;
 800ad28:	4b02      	ldr	r3, [pc, #8]	; (800ad34 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3708      	adds	r7, #8
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}
 800ad32:	bf00      	nop
 800ad34:	2000a2d4 	.word	0x2000a2d4
 800ad38:	0800b6e4 	.word	0x0800b6e4

0800ad3c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b084      	sub	sp, #16
 800ad40:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ad42:	4b0f      	ldr	r3, [pc, #60]	; (800ad80 <Get_SerialNum+0x44>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ad48:	4b0e      	ldr	r3, [pc, #56]	; (800ad84 <Get_SerialNum+0x48>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ad4e:	4b0e      	ldr	r3, [pc, #56]	; (800ad88 <Get_SerialNum+0x4c>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ad54:	68fa      	ldr	r2, [r7, #12]
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	4413      	add	r3, r2
 800ad5a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d009      	beq.n	800ad76 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ad62:	2208      	movs	r2, #8
 800ad64:	4909      	ldr	r1, [pc, #36]	; (800ad8c <Get_SerialNum+0x50>)
 800ad66:	68f8      	ldr	r0, [r7, #12]
 800ad68:	f000 f814 	bl	800ad94 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ad6c:	2204      	movs	r2, #4
 800ad6e:	4908      	ldr	r1, [pc, #32]	; (800ad90 <Get_SerialNum+0x54>)
 800ad70:	68b8      	ldr	r0, [r7, #8]
 800ad72:	f000 f80f 	bl	800ad94 <IntToUnicode>
  }
}
 800ad76:	bf00      	nop
 800ad78:	3710      	adds	r7, #16
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}
 800ad7e:	bf00      	nop
 800ad80:	1fff7a10 	.word	0x1fff7a10
 800ad84:	1fff7a14 	.word	0x1fff7a14
 800ad88:	1fff7a18 	.word	0x1fff7a18
 800ad8c:	200000e6 	.word	0x200000e6
 800ad90:	200000f6 	.word	0x200000f6

0800ad94 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ad94:	b480      	push	{r7}
 800ad96:	b087      	sub	sp, #28
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	60f8      	str	r0, [r7, #12]
 800ad9c:	60b9      	str	r1, [r7, #8]
 800ad9e:	4613      	mov	r3, r2
 800ada0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ada2:	2300      	movs	r3, #0
 800ada4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ada6:	2300      	movs	r3, #0
 800ada8:	75fb      	strb	r3, [r7, #23]
 800adaa:	e027      	b.n	800adfc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	0f1b      	lsrs	r3, r3, #28
 800adb0:	2b09      	cmp	r3, #9
 800adb2:	d80b      	bhi.n	800adcc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	0f1b      	lsrs	r3, r3, #28
 800adb8:	b2da      	uxtb	r2, r3
 800adba:	7dfb      	ldrb	r3, [r7, #23]
 800adbc:	005b      	lsls	r3, r3, #1
 800adbe:	4619      	mov	r1, r3
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	440b      	add	r3, r1
 800adc4:	3230      	adds	r2, #48	; 0x30
 800adc6:	b2d2      	uxtb	r2, r2
 800adc8:	701a      	strb	r2, [r3, #0]
 800adca:	e00a      	b.n	800ade2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	0f1b      	lsrs	r3, r3, #28
 800add0:	b2da      	uxtb	r2, r3
 800add2:	7dfb      	ldrb	r3, [r7, #23]
 800add4:	005b      	lsls	r3, r3, #1
 800add6:	4619      	mov	r1, r3
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	440b      	add	r3, r1
 800addc:	3237      	adds	r2, #55	; 0x37
 800adde:	b2d2      	uxtb	r2, r2
 800ade0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	011b      	lsls	r3, r3, #4
 800ade6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ade8:	7dfb      	ldrb	r3, [r7, #23]
 800adea:	005b      	lsls	r3, r3, #1
 800adec:	3301      	adds	r3, #1
 800adee:	68ba      	ldr	r2, [r7, #8]
 800adf0:	4413      	add	r3, r2
 800adf2:	2200      	movs	r2, #0
 800adf4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800adf6:	7dfb      	ldrb	r3, [r7, #23]
 800adf8:	3301      	adds	r3, #1
 800adfa:	75fb      	strb	r3, [r7, #23]
 800adfc:	7dfa      	ldrb	r2, [r7, #23]
 800adfe:	79fb      	ldrb	r3, [r7, #7]
 800ae00:	429a      	cmp	r2, r3
 800ae02:	d3d3      	bcc.n	800adac <IntToUnicode+0x18>
  }
}
 800ae04:	bf00      	nop
 800ae06:	bf00      	nop
 800ae08:	371c      	adds	r7, #28
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae10:	4770      	bx	lr
	...

0800ae14 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b08a      	sub	sp, #40	; 0x28
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ae1c:	f107 0314 	add.w	r3, r7, #20
 800ae20:	2200      	movs	r2, #0
 800ae22:	601a      	str	r2, [r3, #0]
 800ae24:	605a      	str	r2, [r3, #4]
 800ae26:	609a      	str	r2, [r3, #8]
 800ae28:	60da      	str	r2, [r3, #12]
 800ae2a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ae34:	d147      	bne.n	800aec6 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ae36:	2300      	movs	r3, #0
 800ae38:	613b      	str	r3, [r7, #16]
 800ae3a:	4b25      	ldr	r3, [pc, #148]	; (800aed0 <HAL_PCD_MspInit+0xbc>)
 800ae3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae3e:	4a24      	ldr	r2, [pc, #144]	; (800aed0 <HAL_PCD_MspInit+0xbc>)
 800ae40:	f043 0301 	orr.w	r3, r3, #1
 800ae44:	6313      	str	r3, [r2, #48]	; 0x30
 800ae46:	4b22      	ldr	r3, [pc, #136]	; (800aed0 <HAL_PCD_MspInit+0xbc>)
 800ae48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae4a:	f003 0301 	and.w	r3, r3, #1
 800ae4e:	613b      	str	r3, [r7, #16]
 800ae50:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800ae52:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800ae56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae58:	2302      	movs	r3, #2
 800ae5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ae60:	2303      	movs	r3, #3
 800ae62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ae64:	230a      	movs	r3, #10
 800ae66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ae68:	f107 0314 	add.w	r3, r7, #20
 800ae6c:	4619      	mov	r1, r3
 800ae6e:	4819      	ldr	r0, [pc, #100]	; (800aed4 <HAL_PCD_MspInit+0xc0>)
 800ae70:	f7f5 fe60 	bl	8000b34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800ae74:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ae82:	f107 0314 	add.w	r3, r7, #20
 800ae86:	4619      	mov	r1, r3
 800ae88:	4812      	ldr	r0, [pc, #72]	; (800aed4 <HAL_PCD_MspInit+0xc0>)
 800ae8a:	f7f5 fe53 	bl	8000b34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ae8e:	4b10      	ldr	r3, [pc, #64]	; (800aed0 <HAL_PCD_MspInit+0xbc>)
 800ae90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae92:	4a0f      	ldr	r2, [pc, #60]	; (800aed0 <HAL_PCD_MspInit+0xbc>)
 800ae94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae98:	6353      	str	r3, [r2, #52]	; 0x34
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	60fb      	str	r3, [r7, #12]
 800ae9e:	4b0c      	ldr	r3, [pc, #48]	; (800aed0 <HAL_PCD_MspInit+0xbc>)
 800aea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aea2:	4a0b      	ldr	r2, [pc, #44]	; (800aed0 <HAL_PCD_MspInit+0xbc>)
 800aea4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aea8:	6453      	str	r3, [r2, #68]	; 0x44
 800aeaa:	4b09      	ldr	r3, [pc, #36]	; (800aed0 <HAL_PCD_MspInit+0xbc>)
 800aeac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aeae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aeb2:	60fb      	str	r3, [r7, #12]
 800aeb4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	2105      	movs	r1, #5
 800aeba:	2043      	movs	r0, #67	; 0x43
 800aebc:	f7f5 fe10 	bl	8000ae0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800aec0:	2043      	movs	r0, #67	; 0x43
 800aec2:	f7f5 fe29 	bl	8000b18 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800aec6:	bf00      	nop
 800aec8:	3728      	adds	r7, #40	; 0x28
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}
 800aece:	bf00      	nop
 800aed0:	40023800 	.word	0x40023800
 800aed4:	40020000 	.word	0x40020000

0800aed8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b082      	sub	sp, #8
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800aeec:	4619      	mov	r1, r3
 800aeee:	4610      	mov	r0, r2
 800aef0:	f7fa fb75 	bl	80055de <USBD_LL_SetupStage>
}
 800aef4:	bf00      	nop
 800aef6:	3708      	adds	r7, #8
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}

0800aefc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b082      	sub	sp, #8
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
 800af04:	460b      	mov	r3, r1
 800af06:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800af0e:	78fa      	ldrb	r2, [r7, #3]
 800af10:	6879      	ldr	r1, [r7, #4]
 800af12:	4613      	mov	r3, r2
 800af14:	00db      	lsls	r3, r3, #3
 800af16:	4413      	add	r3, r2
 800af18:	009b      	lsls	r3, r3, #2
 800af1a:	440b      	add	r3, r1
 800af1c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800af20:	681a      	ldr	r2, [r3, #0]
 800af22:	78fb      	ldrb	r3, [r7, #3]
 800af24:	4619      	mov	r1, r3
 800af26:	f7fa fbaf 	bl	8005688 <USBD_LL_DataOutStage>
}
 800af2a:	bf00      	nop
 800af2c:	3708      	adds	r7, #8
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}

0800af32 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af32:	b580      	push	{r7, lr}
 800af34:	b082      	sub	sp, #8
 800af36:	af00      	add	r7, sp, #0
 800af38:	6078      	str	r0, [r7, #4]
 800af3a:	460b      	mov	r3, r1
 800af3c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800af44:	78fa      	ldrb	r2, [r7, #3]
 800af46:	6879      	ldr	r1, [r7, #4]
 800af48:	4613      	mov	r3, r2
 800af4a:	00db      	lsls	r3, r3, #3
 800af4c:	4413      	add	r3, r2
 800af4e:	009b      	lsls	r3, r3, #2
 800af50:	440b      	add	r3, r1
 800af52:	334c      	adds	r3, #76	; 0x4c
 800af54:	681a      	ldr	r2, [r3, #0]
 800af56:	78fb      	ldrb	r3, [r7, #3]
 800af58:	4619      	mov	r1, r3
 800af5a:	f7fa fc48 	bl	80057ee <USBD_LL_DataInStage>
}
 800af5e:	bf00      	nop
 800af60:	3708      	adds	r7, #8
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}

0800af66 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af66:	b580      	push	{r7, lr}
 800af68:	b082      	sub	sp, #8
 800af6a:	af00      	add	r7, sp, #0
 800af6c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800af74:	4618      	mov	r0, r3
 800af76:	f7fa fd7c 	bl	8005a72 <USBD_LL_SOF>
}
 800af7a:	bf00      	nop
 800af7c:	3708      	adds	r7, #8
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}

0800af82 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af82:	b580      	push	{r7, lr}
 800af84:	b084      	sub	sp, #16
 800af86:	af00      	add	r7, sp, #0
 800af88:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800af8a:	2301      	movs	r3, #1
 800af8c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	68db      	ldr	r3, [r3, #12]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d102      	bne.n	800af9c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800af96:	2300      	movs	r3, #0
 800af98:	73fb      	strb	r3, [r7, #15]
 800af9a:	e008      	b.n	800afae <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	68db      	ldr	r3, [r3, #12]
 800afa0:	2b02      	cmp	r3, #2
 800afa2:	d102      	bne.n	800afaa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800afa4:	2301      	movs	r3, #1
 800afa6:	73fb      	strb	r3, [r7, #15]
 800afa8:	e001      	b.n	800afae <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800afaa:	f7f5 fb6f 	bl	800068c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800afb4:	7bfa      	ldrb	r2, [r7, #15]
 800afb6:	4611      	mov	r1, r2
 800afb8:	4618      	mov	r0, r3
 800afba:	f7fa fd1c 	bl	80059f6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800afc4:	4618      	mov	r0, r3
 800afc6:	f7fa fcc4 	bl	8005952 <USBD_LL_Reset>
}
 800afca:	bf00      	nop
 800afcc:	3710      	adds	r7, #16
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}
	...

0800afd4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b082      	sub	sp, #8
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800afe2:	4618      	mov	r0, r3
 800afe4:	f7fa fd17 	bl	8005a16 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	687a      	ldr	r2, [r7, #4]
 800aff4:	6812      	ldr	r2, [r2, #0]
 800aff6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800affa:	f043 0301 	orr.w	r3, r3, #1
 800affe:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	6a1b      	ldr	r3, [r3, #32]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d005      	beq.n	800b014 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b008:	4b04      	ldr	r3, [pc, #16]	; (800b01c <HAL_PCD_SuspendCallback+0x48>)
 800b00a:	691b      	ldr	r3, [r3, #16]
 800b00c:	4a03      	ldr	r2, [pc, #12]	; (800b01c <HAL_PCD_SuspendCallback+0x48>)
 800b00e:	f043 0306 	orr.w	r3, r3, #6
 800b012:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b014:	bf00      	nop
 800b016:	3708      	adds	r7, #8
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}
 800b01c:	e000ed00 	.word	0xe000ed00

0800b020 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b082      	sub	sp, #8
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b02e:	4618      	mov	r0, r3
 800b030:	f7fa fd07 	bl	8005a42 <USBD_LL_Resume>
}
 800b034:	bf00      	nop
 800b036:	3708      	adds	r7, #8
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd80      	pop	{r7, pc}

0800b03c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b082      	sub	sp, #8
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
 800b044:	460b      	mov	r3, r1
 800b046:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b04e:	78fa      	ldrb	r2, [r7, #3]
 800b050:	4611      	mov	r1, r2
 800b052:	4618      	mov	r0, r3
 800b054:	f7fa fd5f 	bl	8005b16 <USBD_LL_IsoOUTIncomplete>
}
 800b058:	bf00      	nop
 800b05a:	3708      	adds	r7, #8
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}

0800b060 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b082      	sub	sp, #8
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
 800b068:	460b      	mov	r3, r1
 800b06a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b072:	78fa      	ldrb	r2, [r7, #3]
 800b074:	4611      	mov	r1, r2
 800b076:	4618      	mov	r0, r3
 800b078:	f7fa fd1b 	bl	8005ab2 <USBD_LL_IsoINIncomplete>
}
 800b07c:	bf00      	nop
 800b07e:	3708      	adds	r7, #8
 800b080:	46bd      	mov	sp, r7
 800b082:	bd80      	pop	{r7, pc}

0800b084 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b082      	sub	sp, #8
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b092:	4618      	mov	r0, r3
 800b094:	f7fa fd71 	bl	8005b7a <USBD_LL_DevConnected>
}
 800b098:	bf00      	nop
 800b09a:	3708      	adds	r7, #8
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}

0800b0a0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b082      	sub	sp, #8
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f7fa fd6e 	bl	8005b90 <USBD_LL_DevDisconnected>
}
 800b0b4:	bf00      	nop
 800b0b6:	3708      	adds	r7, #8
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	bd80      	pop	{r7, pc}

0800b0bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b082      	sub	sp, #8
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	781b      	ldrb	r3, [r3, #0]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d13c      	bne.n	800b146 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b0cc:	4a20      	ldr	r2, [pc, #128]	; (800b150 <USBD_LL_Init+0x94>)
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	4a1e      	ldr	r2, [pc, #120]	; (800b150 <USBD_LL_Init+0x94>)
 800b0d8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b0dc:	4b1c      	ldr	r3, [pc, #112]	; (800b150 <USBD_LL_Init+0x94>)
 800b0de:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b0e2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b0e4:	4b1a      	ldr	r3, [pc, #104]	; (800b150 <USBD_LL_Init+0x94>)
 800b0e6:	2204      	movs	r2, #4
 800b0e8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b0ea:	4b19      	ldr	r3, [pc, #100]	; (800b150 <USBD_LL_Init+0x94>)
 800b0ec:	2202      	movs	r2, #2
 800b0ee:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b0f0:	4b17      	ldr	r3, [pc, #92]	; (800b150 <USBD_LL_Init+0x94>)
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b0f6:	4b16      	ldr	r3, [pc, #88]	; (800b150 <USBD_LL_Init+0x94>)
 800b0f8:	2202      	movs	r2, #2
 800b0fa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800b0fc:	4b14      	ldr	r3, [pc, #80]	; (800b150 <USBD_LL_Init+0x94>)
 800b0fe:	2201      	movs	r2, #1
 800b100:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b102:	4b13      	ldr	r3, [pc, #76]	; (800b150 <USBD_LL_Init+0x94>)
 800b104:	2200      	movs	r2, #0
 800b106:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b108:	4b11      	ldr	r3, [pc, #68]	; (800b150 <USBD_LL_Init+0x94>)
 800b10a:	2200      	movs	r2, #0
 800b10c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800b10e:	4b10      	ldr	r3, [pc, #64]	; (800b150 <USBD_LL_Init+0x94>)
 800b110:	2201      	movs	r2, #1
 800b112:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b114:	4b0e      	ldr	r3, [pc, #56]	; (800b150 <USBD_LL_Init+0x94>)
 800b116:	2200      	movs	r2, #0
 800b118:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b11a:	480d      	ldr	r0, [pc, #52]	; (800b150 <USBD_LL_Init+0x94>)
 800b11c:	f7f5 fea6 	bl	8000e6c <HAL_PCD_Init>
 800b120:	4603      	mov	r3, r0
 800b122:	2b00      	cmp	r3, #0
 800b124:	d001      	beq.n	800b12a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b126:	f7f5 fab1 	bl	800068c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b12a:	2180      	movs	r1, #128	; 0x80
 800b12c:	4808      	ldr	r0, [pc, #32]	; (800b150 <USBD_LL_Init+0x94>)
 800b12e:	f7f7 f8fe 	bl	800232e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b132:	2240      	movs	r2, #64	; 0x40
 800b134:	2100      	movs	r1, #0
 800b136:	4806      	ldr	r0, [pc, #24]	; (800b150 <USBD_LL_Init+0x94>)
 800b138:	f7f7 f8b2 	bl	80022a0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b13c:	2280      	movs	r2, #128	; 0x80
 800b13e:	2101      	movs	r1, #1
 800b140:	4803      	ldr	r0, [pc, #12]	; (800b150 <USBD_LL_Init+0x94>)
 800b142:	f7f7 f8ad 	bl	80022a0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b146:	2300      	movs	r3, #0
}
 800b148:	4618      	mov	r0, r3
 800b14a:	3708      	adds	r7, #8
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}
 800b150:	2000a4d4 	.word	0x2000a4d4

0800b154 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b084      	sub	sp, #16
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b15c:	2300      	movs	r3, #0
 800b15e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b160:	2300      	movs	r3, #0
 800b162:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b16a:	4618      	mov	r0, r3
 800b16c:	f7f5 ff9b 	bl	80010a6 <HAL_PCD_Start>
 800b170:	4603      	mov	r3, r0
 800b172:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b174:	7bfb      	ldrb	r3, [r7, #15]
 800b176:	4618      	mov	r0, r3
 800b178:	f000 f942 	bl	800b400 <USBD_Get_USB_Status>
 800b17c:	4603      	mov	r3, r0
 800b17e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b180:	7bbb      	ldrb	r3, [r7, #14]
}
 800b182:	4618      	mov	r0, r3
 800b184:	3710      	adds	r7, #16
 800b186:	46bd      	mov	sp, r7
 800b188:	bd80      	pop	{r7, pc}

0800b18a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b18a:	b580      	push	{r7, lr}
 800b18c:	b084      	sub	sp, #16
 800b18e:	af00      	add	r7, sp, #0
 800b190:	6078      	str	r0, [r7, #4]
 800b192:	4608      	mov	r0, r1
 800b194:	4611      	mov	r1, r2
 800b196:	461a      	mov	r2, r3
 800b198:	4603      	mov	r3, r0
 800b19a:	70fb      	strb	r3, [r7, #3]
 800b19c:	460b      	mov	r3, r1
 800b19e:	70bb      	strb	r3, [r7, #2]
 800b1a0:	4613      	mov	r3, r2
 800b1a2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b1b2:	78bb      	ldrb	r3, [r7, #2]
 800b1b4:	883a      	ldrh	r2, [r7, #0]
 800b1b6:	78f9      	ldrb	r1, [r7, #3]
 800b1b8:	f7f6 fc6c 	bl	8001a94 <HAL_PCD_EP_Open>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1c0:	7bfb      	ldrb	r3, [r7, #15]
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	f000 f91c 	bl	800b400 <USBD_Get_USB_Status>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	3710      	adds	r7, #16
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	bd80      	pop	{r7, pc}

0800b1d6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b1d6:	b580      	push	{r7, lr}
 800b1d8:	b084      	sub	sp, #16
 800b1da:	af00      	add	r7, sp, #0
 800b1dc:	6078      	str	r0, [r7, #4]
 800b1de:	460b      	mov	r3, r1
 800b1e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b1f0:	78fa      	ldrb	r2, [r7, #3]
 800b1f2:	4611      	mov	r1, r2
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	f7f6 fcb5 	bl	8001b64 <HAL_PCD_EP_Close>
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1fe:	7bfb      	ldrb	r3, [r7, #15]
 800b200:	4618      	mov	r0, r3
 800b202:	f000 f8fd 	bl	800b400 <USBD_Get_USB_Status>
 800b206:	4603      	mov	r3, r0
 800b208:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b20a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	3710      	adds	r7, #16
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}

0800b214 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b084      	sub	sp, #16
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
 800b21c:	460b      	mov	r3, r1
 800b21e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b220:	2300      	movs	r3, #0
 800b222:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b224:	2300      	movs	r3, #0
 800b226:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b22e:	78fa      	ldrb	r2, [r7, #3]
 800b230:	4611      	mov	r1, r2
 800b232:	4618      	mov	r0, r3
 800b234:	f7f6 fd8d 	bl	8001d52 <HAL_PCD_EP_SetStall>
 800b238:	4603      	mov	r3, r0
 800b23a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b23c:	7bfb      	ldrb	r3, [r7, #15]
 800b23e:	4618      	mov	r0, r3
 800b240:	f000 f8de 	bl	800b400 <USBD_Get_USB_Status>
 800b244:	4603      	mov	r3, r0
 800b246:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b248:	7bbb      	ldrb	r3, [r7, #14]
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	3710      	adds	r7, #16
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}

0800b252 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b252:	b580      	push	{r7, lr}
 800b254:	b084      	sub	sp, #16
 800b256:	af00      	add	r7, sp, #0
 800b258:	6078      	str	r0, [r7, #4]
 800b25a:	460b      	mov	r3, r1
 800b25c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b25e:	2300      	movs	r3, #0
 800b260:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b262:	2300      	movs	r3, #0
 800b264:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b26c:	78fa      	ldrb	r2, [r7, #3]
 800b26e:	4611      	mov	r1, r2
 800b270:	4618      	mov	r0, r3
 800b272:	f7f6 fdd2 	bl	8001e1a <HAL_PCD_EP_ClrStall>
 800b276:	4603      	mov	r3, r0
 800b278:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b27a:	7bfb      	ldrb	r3, [r7, #15]
 800b27c:	4618      	mov	r0, r3
 800b27e:	f000 f8bf 	bl	800b400 <USBD_Get_USB_Status>
 800b282:	4603      	mov	r3, r0
 800b284:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b286:	7bbb      	ldrb	r3, [r7, #14]
}
 800b288:	4618      	mov	r0, r3
 800b28a:	3710      	adds	r7, #16
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}

0800b290 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b290:	b480      	push	{r7}
 800b292:	b085      	sub	sp, #20
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
 800b298:	460b      	mov	r3, r1
 800b29a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b2a2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b2a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	da0b      	bge.n	800b2c4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b2ac:	78fb      	ldrb	r3, [r7, #3]
 800b2ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b2b2:	68f9      	ldr	r1, [r7, #12]
 800b2b4:	4613      	mov	r3, r2
 800b2b6:	00db      	lsls	r3, r3, #3
 800b2b8:	4413      	add	r3, r2
 800b2ba:	009b      	lsls	r3, r3, #2
 800b2bc:	440b      	add	r3, r1
 800b2be:	333e      	adds	r3, #62	; 0x3e
 800b2c0:	781b      	ldrb	r3, [r3, #0]
 800b2c2:	e00b      	b.n	800b2dc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b2c4:	78fb      	ldrb	r3, [r7, #3]
 800b2c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b2ca:	68f9      	ldr	r1, [r7, #12]
 800b2cc:	4613      	mov	r3, r2
 800b2ce:	00db      	lsls	r3, r3, #3
 800b2d0:	4413      	add	r3, r2
 800b2d2:	009b      	lsls	r3, r3, #2
 800b2d4:	440b      	add	r3, r1
 800b2d6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800b2da:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3714      	adds	r7, #20
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e6:	4770      	bx	lr

0800b2e8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b084      	sub	sp, #16
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
 800b2f0:	460b      	mov	r3, r1
 800b2f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b302:	78fa      	ldrb	r2, [r7, #3]
 800b304:	4611      	mov	r1, r2
 800b306:	4618      	mov	r0, r3
 800b308:	f7f6 fb9f 	bl	8001a4a <HAL_PCD_SetAddress>
 800b30c:	4603      	mov	r3, r0
 800b30e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b310:	7bfb      	ldrb	r3, [r7, #15]
 800b312:	4618      	mov	r0, r3
 800b314:	f000 f874 	bl	800b400 <USBD_Get_USB_Status>
 800b318:	4603      	mov	r3, r0
 800b31a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b31c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b31e:	4618      	mov	r0, r3
 800b320:	3710      	adds	r7, #16
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}

0800b326 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b326:	b580      	push	{r7, lr}
 800b328:	b086      	sub	sp, #24
 800b32a:	af00      	add	r7, sp, #0
 800b32c:	60f8      	str	r0, [r7, #12]
 800b32e:	607a      	str	r2, [r7, #4]
 800b330:	603b      	str	r3, [r7, #0]
 800b332:	460b      	mov	r3, r1
 800b334:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b336:	2300      	movs	r3, #0
 800b338:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b33a:	2300      	movs	r3, #0
 800b33c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b344:	7af9      	ldrb	r1, [r7, #11]
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	687a      	ldr	r2, [r7, #4]
 800b34a:	f7f6 fcb8 	bl	8001cbe <HAL_PCD_EP_Transmit>
 800b34e:	4603      	mov	r3, r0
 800b350:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b352:	7dfb      	ldrb	r3, [r7, #23]
 800b354:	4618      	mov	r0, r3
 800b356:	f000 f853 	bl	800b400 <USBD_Get_USB_Status>
 800b35a:	4603      	mov	r3, r0
 800b35c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b35e:	7dbb      	ldrb	r3, [r7, #22]
}
 800b360:	4618      	mov	r0, r3
 800b362:	3718      	adds	r7, #24
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}

0800b368 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b086      	sub	sp, #24
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	60f8      	str	r0, [r7, #12]
 800b370:	607a      	str	r2, [r7, #4]
 800b372:	603b      	str	r3, [r7, #0]
 800b374:	460b      	mov	r3, r1
 800b376:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b378:	2300      	movs	r3, #0
 800b37a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b37c:	2300      	movs	r3, #0
 800b37e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b386:	7af9      	ldrb	r1, [r7, #11]
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	687a      	ldr	r2, [r7, #4]
 800b38c:	f7f6 fc34 	bl	8001bf8 <HAL_PCD_EP_Receive>
 800b390:	4603      	mov	r3, r0
 800b392:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b394:	7dfb      	ldrb	r3, [r7, #23]
 800b396:	4618      	mov	r0, r3
 800b398:	f000 f832 	bl	800b400 <USBD_Get_USB_Status>
 800b39c:	4603      	mov	r3, r0
 800b39e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b3a0:	7dbb      	ldrb	r3, [r7, #22]
}
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	3718      	adds	r7, #24
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}

0800b3aa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b3aa:	b580      	push	{r7, lr}
 800b3ac:	b082      	sub	sp, #8
 800b3ae:	af00      	add	r7, sp, #0
 800b3b0:	6078      	str	r0, [r7, #4]
 800b3b2:	460b      	mov	r3, r1
 800b3b4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b3bc:	78fa      	ldrb	r2, [r7, #3]
 800b3be:	4611      	mov	r1, r2
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f7f6 fc64 	bl	8001c8e <HAL_PCD_EP_GetRxCount>
 800b3c6:	4603      	mov	r3, r0
}
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	3708      	adds	r7, #8
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bd80      	pop	{r7, pc}

0800b3d0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b083      	sub	sp, #12
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b3d8:	4b03      	ldr	r3, [pc, #12]	; (800b3e8 <USBD_static_malloc+0x18>)
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	370c      	adds	r7, #12
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e4:	4770      	bx	lr
 800b3e6:	bf00      	nop
 800b3e8:	2000a9e0 	.word	0x2000a9e0

0800b3ec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b083      	sub	sp, #12
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]

}
 800b3f4:	bf00      	nop
 800b3f6:	370c      	adds	r7, #12
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fe:	4770      	bx	lr

0800b400 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b400:	b480      	push	{r7}
 800b402:	b085      	sub	sp, #20
 800b404:	af00      	add	r7, sp, #0
 800b406:	4603      	mov	r3, r0
 800b408:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b40a:	2300      	movs	r3, #0
 800b40c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b40e:	79fb      	ldrb	r3, [r7, #7]
 800b410:	2b03      	cmp	r3, #3
 800b412:	d817      	bhi.n	800b444 <USBD_Get_USB_Status+0x44>
 800b414:	a201      	add	r2, pc, #4	; (adr r2, 800b41c <USBD_Get_USB_Status+0x1c>)
 800b416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b41a:	bf00      	nop
 800b41c:	0800b42d 	.word	0x0800b42d
 800b420:	0800b433 	.word	0x0800b433
 800b424:	0800b439 	.word	0x0800b439
 800b428:	0800b43f 	.word	0x0800b43f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b42c:	2300      	movs	r3, #0
 800b42e:	73fb      	strb	r3, [r7, #15]
    break;
 800b430:	e00b      	b.n	800b44a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b432:	2303      	movs	r3, #3
 800b434:	73fb      	strb	r3, [r7, #15]
    break;
 800b436:	e008      	b.n	800b44a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b438:	2301      	movs	r3, #1
 800b43a:	73fb      	strb	r3, [r7, #15]
    break;
 800b43c:	e005      	b.n	800b44a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b43e:	2303      	movs	r3, #3
 800b440:	73fb      	strb	r3, [r7, #15]
    break;
 800b442:	e002      	b.n	800b44a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b444:	2303      	movs	r3, #3
 800b446:	73fb      	strb	r3, [r7, #15]
    break;
 800b448:	bf00      	nop
  }
  return usb_status;
 800b44a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b44c:	4618      	mov	r0, r3
 800b44e:	3714      	adds	r7, #20
 800b450:	46bd      	mov	sp, r7
 800b452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b456:	4770      	bx	lr

0800b458 <__libc_init_array>:
 800b458:	b570      	push	{r4, r5, r6, lr}
 800b45a:	4d0d      	ldr	r5, [pc, #52]	; (800b490 <__libc_init_array+0x38>)
 800b45c:	4c0d      	ldr	r4, [pc, #52]	; (800b494 <__libc_init_array+0x3c>)
 800b45e:	1b64      	subs	r4, r4, r5
 800b460:	10a4      	asrs	r4, r4, #2
 800b462:	2600      	movs	r6, #0
 800b464:	42a6      	cmp	r6, r4
 800b466:	d109      	bne.n	800b47c <__libc_init_array+0x24>
 800b468:	4d0b      	ldr	r5, [pc, #44]	; (800b498 <__libc_init_array+0x40>)
 800b46a:	4c0c      	ldr	r4, [pc, #48]	; (800b49c <__libc_init_array+0x44>)
 800b46c:	f000 f8f2 	bl	800b654 <_init>
 800b470:	1b64      	subs	r4, r4, r5
 800b472:	10a4      	asrs	r4, r4, #2
 800b474:	2600      	movs	r6, #0
 800b476:	42a6      	cmp	r6, r4
 800b478:	d105      	bne.n	800b486 <__libc_init_array+0x2e>
 800b47a:	bd70      	pop	{r4, r5, r6, pc}
 800b47c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b480:	4798      	blx	r3
 800b482:	3601      	adds	r6, #1
 800b484:	e7ee      	b.n	800b464 <__libc_init_array+0xc>
 800b486:	f855 3b04 	ldr.w	r3, [r5], #4
 800b48a:	4798      	blx	r3
 800b48c:	3601      	adds	r6, #1
 800b48e:	e7f2      	b.n	800b476 <__libc_init_array+0x1e>
 800b490:	0800b798 	.word	0x0800b798
 800b494:	0800b798 	.word	0x0800b798
 800b498:	0800b798 	.word	0x0800b798
 800b49c:	0800b79c 	.word	0x0800b79c

0800b4a0 <__retarget_lock_acquire_recursive>:
 800b4a0:	4770      	bx	lr

0800b4a2 <__retarget_lock_release_recursive>:
 800b4a2:	4770      	bx	lr

0800b4a4 <memcpy>:
 800b4a4:	440a      	add	r2, r1
 800b4a6:	4291      	cmp	r1, r2
 800b4a8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b4ac:	d100      	bne.n	800b4b0 <memcpy+0xc>
 800b4ae:	4770      	bx	lr
 800b4b0:	b510      	push	{r4, lr}
 800b4b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b4ba:	4291      	cmp	r1, r2
 800b4bc:	d1f9      	bne.n	800b4b2 <memcpy+0xe>
 800b4be:	bd10      	pop	{r4, pc}

0800b4c0 <memset>:
 800b4c0:	4402      	add	r2, r0
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	4293      	cmp	r3, r2
 800b4c6:	d100      	bne.n	800b4ca <memset+0xa>
 800b4c8:	4770      	bx	lr
 800b4ca:	f803 1b01 	strb.w	r1, [r3], #1
 800b4ce:	e7f9      	b.n	800b4c4 <memset+0x4>

0800b4d0 <cleanup_glue>:
 800b4d0:	b538      	push	{r3, r4, r5, lr}
 800b4d2:	460c      	mov	r4, r1
 800b4d4:	6809      	ldr	r1, [r1, #0]
 800b4d6:	4605      	mov	r5, r0
 800b4d8:	b109      	cbz	r1, 800b4de <cleanup_glue+0xe>
 800b4da:	f7ff fff9 	bl	800b4d0 <cleanup_glue>
 800b4de:	4621      	mov	r1, r4
 800b4e0:	4628      	mov	r0, r5
 800b4e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b4e6:	f000 b869 	b.w	800b5bc <_free_r>
	...

0800b4ec <_reclaim_reent>:
 800b4ec:	4b2c      	ldr	r3, [pc, #176]	; (800b5a0 <_reclaim_reent+0xb4>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4283      	cmp	r3, r0
 800b4f2:	b570      	push	{r4, r5, r6, lr}
 800b4f4:	4604      	mov	r4, r0
 800b4f6:	d051      	beq.n	800b59c <_reclaim_reent+0xb0>
 800b4f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b4fa:	b143      	cbz	r3, 800b50e <_reclaim_reent+0x22>
 800b4fc:	68db      	ldr	r3, [r3, #12]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d14a      	bne.n	800b598 <_reclaim_reent+0xac>
 800b502:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b504:	6819      	ldr	r1, [r3, #0]
 800b506:	b111      	cbz	r1, 800b50e <_reclaim_reent+0x22>
 800b508:	4620      	mov	r0, r4
 800b50a:	f000 f857 	bl	800b5bc <_free_r>
 800b50e:	6961      	ldr	r1, [r4, #20]
 800b510:	b111      	cbz	r1, 800b518 <_reclaim_reent+0x2c>
 800b512:	4620      	mov	r0, r4
 800b514:	f000 f852 	bl	800b5bc <_free_r>
 800b518:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b51a:	b111      	cbz	r1, 800b522 <_reclaim_reent+0x36>
 800b51c:	4620      	mov	r0, r4
 800b51e:	f000 f84d 	bl	800b5bc <_free_r>
 800b522:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b524:	b111      	cbz	r1, 800b52c <_reclaim_reent+0x40>
 800b526:	4620      	mov	r0, r4
 800b528:	f000 f848 	bl	800b5bc <_free_r>
 800b52c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b52e:	b111      	cbz	r1, 800b536 <_reclaim_reent+0x4a>
 800b530:	4620      	mov	r0, r4
 800b532:	f000 f843 	bl	800b5bc <_free_r>
 800b536:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b538:	b111      	cbz	r1, 800b540 <_reclaim_reent+0x54>
 800b53a:	4620      	mov	r0, r4
 800b53c:	f000 f83e 	bl	800b5bc <_free_r>
 800b540:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b542:	b111      	cbz	r1, 800b54a <_reclaim_reent+0x5e>
 800b544:	4620      	mov	r0, r4
 800b546:	f000 f839 	bl	800b5bc <_free_r>
 800b54a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b54c:	b111      	cbz	r1, 800b554 <_reclaim_reent+0x68>
 800b54e:	4620      	mov	r0, r4
 800b550:	f000 f834 	bl	800b5bc <_free_r>
 800b554:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b556:	b111      	cbz	r1, 800b55e <_reclaim_reent+0x72>
 800b558:	4620      	mov	r0, r4
 800b55a:	f000 f82f 	bl	800b5bc <_free_r>
 800b55e:	69a3      	ldr	r3, [r4, #24]
 800b560:	b1e3      	cbz	r3, 800b59c <_reclaim_reent+0xb0>
 800b562:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b564:	4620      	mov	r0, r4
 800b566:	4798      	blx	r3
 800b568:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b56a:	b1b9      	cbz	r1, 800b59c <_reclaim_reent+0xb0>
 800b56c:	4620      	mov	r0, r4
 800b56e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b572:	f7ff bfad 	b.w	800b4d0 <cleanup_glue>
 800b576:	5949      	ldr	r1, [r1, r5]
 800b578:	b941      	cbnz	r1, 800b58c <_reclaim_reent+0xa0>
 800b57a:	3504      	adds	r5, #4
 800b57c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b57e:	2d80      	cmp	r5, #128	; 0x80
 800b580:	68d9      	ldr	r1, [r3, #12]
 800b582:	d1f8      	bne.n	800b576 <_reclaim_reent+0x8a>
 800b584:	4620      	mov	r0, r4
 800b586:	f000 f819 	bl	800b5bc <_free_r>
 800b58a:	e7ba      	b.n	800b502 <_reclaim_reent+0x16>
 800b58c:	680e      	ldr	r6, [r1, #0]
 800b58e:	4620      	mov	r0, r4
 800b590:	f000 f814 	bl	800b5bc <_free_r>
 800b594:	4631      	mov	r1, r6
 800b596:	e7ef      	b.n	800b578 <_reclaim_reent+0x8c>
 800b598:	2500      	movs	r5, #0
 800b59a:	e7ef      	b.n	800b57c <_reclaim_reent+0x90>
 800b59c:	bd70      	pop	{r4, r5, r6, pc}
 800b59e:	bf00      	nop
 800b5a0:	20000100 	.word	0x20000100

0800b5a4 <__malloc_lock>:
 800b5a4:	4801      	ldr	r0, [pc, #4]	; (800b5ac <__malloc_lock+0x8>)
 800b5a6:	f7ff bf7b 	b.w	800b4a0 <__retarget_lock_acquire_recursive>
 800b5aa:	bf00      	nop
 800b5ac:	2000ac00 	.word	0x2000ac00

0800b5b0 <__malloc_unlock>:
 800b5b0:	4801      	ldr	r0, [pc, #4]	; (800b5b8 <__malloc_unlock+0x8>)
 800b5b2:	f7ff bf76 	b.w	800b4a2 <__retarget_lock_release_recursive>
 800b5b6:	bf00      	nop
 800b5b8:	2000ac00 	.word	0x2000ac00

0800b5bc <_free_r>:
 800b5bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b5be:	2900      	cmp	r1, #0
 800b5c0:	d044      	beq.n	800b64c <_free_r+0x90>
 800b5c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5c6:	9001      	str	r0, [sp, #4]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	f1a1 0404 	sub.w	r4, r1, #4
 800b5ce:	bfb8      	it	lt
 800b5d0:	18e4      	addlt	r4, r4, r3
 800b5d2:	f7ff ffe7 	bl	800b5a4 <__malloc_lock>
 800b5d6:	4a1e      	ldr	r2, [pc, #120]	; (800b650 <_free_r+0x94>)
 800b5d8:	9801      	ldr	r0, [sp, #4]
 800b5da:	6813      	ldr	r3, [r2, #0]
 800b5dc:	b933      	cbnz	r3, 800b5ec <_free_r+0x30>
 800b5de:	6063      	str	r3, [r4, #4]
 800b5e0:	6014      	str	r4, [r2, #0]
 800b5e2:	b003      	add	sp, #12
 800b5e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b5e8:	f7ff bfe2 	b.w	800b5b0 <__malloc_unlock>
 800b5ec:	42a3      	cmp	r3, r4
 800b5ee:	d908      	bls.n	800b602 <_free_r+0x46>
 800b5f0:	6825      	ldr	r5, [r4, #0]
 800b5f2:	1961      	adds	r1, r4, r5
 800b5f4:	428b      	cmp	r3, r1
 800b5f6:	bf01      	itttt	eq
 800b5f8:	6819      	ldreq	r1, [r3, #0]
 800b5fa:	685b      	ldreq	r3, [r3, #4]
 800b5fc:	1949      	addeq	r1, r1, r5
 800b5fe:	6021      	streq	r1, [r4, #0]
 800b600:	e7ed      	b.n	800b5de <_free_r+0x22>
 800b602:	461a      	mov	r2, r3
 800b604:	685b      	ldr	r3, [r3, #4]
 800b606:	b10b      	cbz	r3, 800b60c <_free_r+0x50>
 800b608:	42a3      	cmp	r3, r4
 800b60a:	d9fa      	bls.n	800b602 <_free_r+0x46>
 800b60c:	6811      	ldr	r1, [r2, #0]
 800b60e:	1855      	adds	r5, r2, r1
 800b610:	42a5      	cmp	r5, r4
 800b612:	d10b      	bne.n	800b62c <_free_r+0x70>
 800b614:	6824      	ldr	r4, [r4, #0]
 800b616:	4421      	add	r1, r4
 800b618:	1854      	adds	r4, r2, r1
 800b61a:	42a3      	cmp	r3, r4
 800b61c:	6011      	str	r1, [r2, #0]
 800b61e:	d1e0      	bne.n	800b5e2 <_free_r+0x26>
 800b620:	681c      	ldr	r4, [r3, #0]
 800b622:	685b      	ldr	r3, [r3, #4]
 800b624:	6053      	str	r3, [r2, #4]
 800b626:	4421      	add	r1, r4
 800b628:	6011      	str	r1, [r2, #0]
 800b62a:	e7da      	b.n	800b5e2 <_free_r+0x26>
 800b62c:	d902      	bls.n	800b634 <_free_r+0x78>
 800b62e:	230c      	movs	r3, #12
 800b630:	6003      	str	r3, [r0, #0]
 800b632:	e7d6      	b.n	800b5e2 <_free_r+0x26>
 800b634:	6825      	ldr	r5, [r4, #0]
 800b636:	1961      	adds	r1, r4, r5
 800b638:	428b      	cmp	r3, r1
 800b63a:	bf04      	itt	eq
 800b63c:	6819      	ldreq	r1, [r3, #0]
 800b63e:	685b      	ldreq	r3, [r3, #4]
 800b640:	6063      	str	r3, [r4, #4]
 800b642:	bf04      	itt	eq
 800b644:	1949      	addeq	r1, r1, r5
 800b646:	6021      	streq	r1, [r4, #0]
 800b648:	6054      	str	r4, [r2, #4]
 800b64a:	e7ca      	b.n	800b5e2 <_free_r+0x26>
 800b64c:	b003      	add	sp, #12
 800b64e:	bd30      	pop	{r4, r5, pc}
 800b650:	2000ac04 	.word	0x2000ac04

0800b654 <_init>:
 800b654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b656:	bf00      	nop
 800b658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b65a:	bc08      	pop	{r3}
 800b65c:	469e      	mov	lr, r3
 800b65e:	4770      	bx	lr

0800b660 <_fini>:
 800b660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b662:	bf00      	nop
 800b664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b666:	bc08      	pop	{r3}
 800b668:	469e      	mov	lr, r3
 800b66a:	4770      	bx	lr
