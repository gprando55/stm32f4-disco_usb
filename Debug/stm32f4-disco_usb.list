
stm32f4-disco_usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000380  0800c884  0800c884  0001c884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc04  0800cc04  00020170  2**0
                  CONTENTS
  4 .ARM          00000008  0800cc04  0800cc04  0001cc04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc0c  0800cc0c  00020170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc0c  0800cc0c  0001cc0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cc10  0800cc10  0001cc10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000170  20000000  0800cc14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020170  2**0
                  CONTENTS
 10 .bss          0000acec  20000170  20000170  00020170  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000ae5c  2000ae5c  00020170  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY
 13 .debug_info   000214a5  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004e05  00000000  00000000  00041645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a70  00000000  00000000  00046450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001858  00000000  00000000  00047ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026ca7  00000000  00000000  00049718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fc82  00000000  00000000  000703bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9136  00000000  00000000  00090041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00169177  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007390  00000000  00000000  001691c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000170 	.word	0x20000170
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c86c 	.word	0x0800c86c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000174 	.word	0x20000174
 80001cc:	0800c86c 	.word	0x0800c86c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
 800058c:	2300      	movs	r3, #0
 800058e:	617b      	str	r3, [r7, #20]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d10a      	bne.n	80005ac <FreeRTOS_CLIRegisterCommand+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800059a:	f383 8811 	msr	BASEPRI, r3
 800059e:	f3bf 8f6f 	isb	sy
 80005a2:	f3bf 8f4f 	dsb	sy
 80005a6:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80005a8:	bf00      	nop
 80005aa:	e7fe      	b.n	80005aa <FreeRTOS_CLIRegisterCommand+0x26>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 80005ac:	2008      	movs	r0, #8
 80005ae:	f00a fc1b 	bl	800ade8 <pvPortMalloc>
 80005b2:	6138      	str	r0, [r7, #16]
	configASSERT( pxNewListItem );
 80005b4:	693b      	ldr	r3, [r7, #16]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d10a      	bne.n	80005d0 <FreeRTOS_CLIRegisterCommand+0x4c>
	__asm volatile
 80005ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005be:	f383 8811 	msr	BASEPRI, r3
 80005c2:	f3bf 8f6f 	isb	sy
 80005c6:	f3bf 8f4f 	dsb	sy
 80005ca:	60bb      	str	r3, [r7, #8]
}
 80005cc:	bf00      	nop
 80005ce:	e7fe      	b.n	80005ce <FreeRTOS_CLIRegisterCommand+0x4a>

	if( pxNewListItem != NULL )
 80005d0:	693b      	ldr	r3, [r7, #16]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d012      	beq.n	80005fc <FreeRTOS_CLIRegisterCommand+0x78>
	{
		taskENTER_CRITICAL();
 80005d6:	f00a fae5 	bl	800aba4 <vPortEnterCritical>
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 80005da:	693b      	ldr	r3, [r7, #16]
 80005dc:	687a      	ldr	r2, [r7, #4]
 80005de:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
 80005e0:	693b      	ldr	r3, [r7, #16]
 80005e2:	2200      	movs	r2, #0
 80005e4:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 80005e6:	4b08      	ldr	r3, [pc, #32]	; (8000608 <FreeRTOS_CLIRegisterCommand+0x84>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	693a      	ldr	r2, [r7, #16]
 80005ec:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 80005ee:	4a06      	ldr	r2, [pc, #24]	; (8000608 <FreeRTOS_CLIRegisterCommand+0x84>)
 80005f0:	693b      	ldr	r3, [r7, #16]
 80005f2:	6013      	str	r3, [r2, #0]
		}
		taskEXIT_CRITICAL();
 80005f4:	f00a fb06 	bl	800ac04 <vPortExitCritical>

		xReturn = pdPASS;
 80005f8:	2301      	movs	r3, #1
 80005fa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80005fc:	697b      	ldr	r3, [r7, #20]
}
 80005fe:	4618      	mov	r0, r3
 8000600:	3718      	adds	r7, #24
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20000008 	.word	0x20000008

0800060c <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b088      	sub	sp, #32
 8000610:	af00      	add	r7, sp, #0
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
 8000618:	2301      	movs	r3, #1
 800061a:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
 800061c:	4b3a      	ldr	r3, [pc, #232]	; (8000708 <FreeRTOS_CLIProcessCommand+0xfc>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d141      	bne.n	80006a8 <FreeRTOS_CLIProcessCommand+0x9c>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8000624:	4b38      	ldr	r3, [pc, #224]	; (8000708 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000626:	4a39      	ldr	r2, [pc, #228]	; (800070c <FreeRTOS_CLIProcessCommand+0x100>)
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	e037      	b.n	800069c <FreeRTOS_CLIProcessCommand+0x90>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800062c:	4b36      	ldr	r3, [pc, #216]	; (8000708 <FreeRTOS_CLIProcessCommand+0xfc>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
 8000636:	69b8      	ldr	r0, [r7, #24]
 8000638:	f7ff fdca 	bl	80001d0 <strlen>
 800063c:	6178      	str	r0, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800063e:	697a      	ldr	r2, [r7, #20]
 8000640:	69b9      	ldr	r1, [r7, #24]
 8000642:	68f8      	ldr	r0, [r7, #12]
 8000644:	f00b fd50 	bl	800c0e8 <strncmp>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d121      	bne.n	8000692 <FreeRTOS_CLIProcessCommand+0x86>
			{
				if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800064e:	68fa      	ldr	r2, [r7, #12]
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	4413      	add	r3, r2
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b20      	cmp	r3, #32
 8000658:	d005      	beq.n	8000666 <FreeRTOS_CLIProcessCommand+0x5a>
 800065a:	68fa      	ldr	r2, [r7, #12]
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	4413      	add	r3, r2
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d115      	bne.n	8000692 <FreeRTOS_CLIProcessCommand+0x86>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 8000666:	4b28      	ldr	r3, [pc, #160]	; (8000708 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000670:	2b00      	cmp	r3, #0
 8000672:	db18      	blt.n	80006a6 <FreeRTOS_CLIProcessCommand+0x9a>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 8000674:	68f8      	ldr	r0, [r7, #12]
 8000676:	f000 f87d 	bl	8000774 <prvGetNumberOfParameters>
 800067a:	4603      	mov	r3, r0
 800067c:	461a      	mov	r2, r3
 800067e:	4b22      	ldr	r3, [pc, #136]	; (8000708 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000688:	429a      	cmp	r2, r3
 800068a:	d00c      	beq.n	80006a6 <FreeRTOS_CLIProcessCommand+0x9a>
						{
							xReturn = pdFALSE;
 800068c:	2300      	movs	r3, #0
 800068e:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
 8000690:	e009      	b.n	80006a6 <FreeRTOS_CLIProcessCommand+0x9a>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8000692:	4b1d      	ldr	r3, [pc, #116]	; (8000708 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	685b      	ldr	r3, [r3, #4]
 8000698:	4a1b      	ldr	r2, [pc, #108]	; (8000708 <FreeRTOS_CLIProcessCommand+0xfc>)
 800069a:	6013      	str	r3, [r2, #0]
 800069c:	4b1a      	ldr	r3, [pc, #104]	; (8000708 <FreeRTOS_CLIProcessCommand+0xfc>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d1c3      	bne.n	800062c <FreeRTOS_CLIProcessCommand+0x20>
 80006a4:	e000      	b.n	80006a8 <FreeRTOS_CLIProcessCommand+0x9c>
					break;
 80006a6:	bf00      	nop
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 80006a8:	4b17      	ldr	r3, [pc, #92]	; (8000708 <FreeRTOS_CLIProcessCommand+0xfc>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d00b      	beq.n	80006c8 <FreeRTOS_CLIProcessCommand+0xbc>
 80006b0:	69fb      	ldr	r3, [r7, #28]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d108      	bne.n	80006c8 <FreeRTOS_CLIProcessCommand+0xbc>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 80006b6:	687a      	ldr	r2, [r7, #4]
 80006b8:	4915      	ldr	r1, [pc, #84]	; (8000710 <FreeRTOS_CLIProcessCommand+0x104>)
 80006ba:	68b8      	ldr	r0, [r7, #8]
 80006bc:	f00b fd28 	bl	800c110 <strncpy>
		pxCommand = NULL;
 80006c0:	4b11      	ldr	r3, [pc, #68]	; (8000708 <FreeRTOS_CLIProcessCommand+0xfc>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	e01a      	b.n	80006fe <FreeRTOS_CLIProcessCommand+0xf2>
	}
	else if( pxCommand != NULL )
 80006c8:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <FreeRTOS_CLIProcessCommand+0xfc>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d00f      	beq.n	80006f0 <FreeRTOS_CLIProcessCommand+0xe4>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 80006d0:	4b0d      	ldr	r3, [pc, #52]	; (8000708 <FreeRTOS_CLIProcessCommand+0xfc>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	689b      	ldr	r3, [r3, #8]
 80006d8:	68fa      	ldr	r2, [r7, #12]
 80006da:	6879      	ldr	r1, [r7, #4]
 80006dc:	68b8      	ldr	r0, [r7, #8]
 80006de:	4798      	blx	r3
 80006e0:	61f8      	str	r0, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 80006e2:	69fb      	ldr	r3, [r7, #28]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d10a      	bne.n	80006fe <FreeRTOS_CLIProcessCommand+0xf2>
		{
			pxCommand = NULL;
 80006e8:	4b07      	ldr	r3, [pc, #28]	; (8000708 <FreeRTOS_CLIProcessCommand+0xfc>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	e006      	b.n	80006fe <FreeRTOS_CLIProcessCommand+0xf2>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 80006f0:	687a      	ldr	r2, [r7, #4]
 80006f2:	4908      	ldr	r1, [pc, #32]	; (8000714 <FreeRTOS_CLIProcessCommand+0x108>)
 80006f4:	68b8      	ldr	r0, [r7, #8]
 80006f6:	f00b fd0b 	bl	800c110 <strncpy>
		xReturn = pdFALSE;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
 80006fe:	69fb      	ldr	r3, [r7, #28]
}
 8000700:	4618      	mov	r0, r3
 8000702:	3720      	adds	r7, #32
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	2000018c 	.word	0x2000018c
 800070c:	20000000 	.word	0x20000000
 8000710:	0800c8bc 	.word	0x0800c8bc
 8000714:	0800c914 	.word	0x0800c914

08000718 <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b086      	sub	sp, #24
 800071c:	af00      	add	r7, sp, #0
 800071e:	60f8      	str	r0, [r7, #12]
 8000720:	60b9      	str	r1, [r7, #8]
 8000722:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
 8000724:	4b11      	ldr	r3, [pc, #68]	; (800076c <prvHelpCommand+0x54>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d102      	bne.n	8000732 <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
 800072c:	4b0f      	ldr	r3, [pc, #60]	; (800076c <prvHelpCommand+0x54>)
 800072e:	4a10      	ldr	r2, [pc, #64]	; (8000770 <prvHelpCommand+0x58>)
 8000730:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <prvHelpCommand+0x54>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	685b      	ldr	r3, [r3, #4]
 800073a:	68ba      	ldr	r2, [r7, #8]
 800073c:	4619      	mov	r1, r3
 800073e:	68f8      	ldr	r0, [r7, #12]
 8000740:	f00b fce6 	bl	800c110 <strncpy>
	pxCommand = pxCommand->pxNext;
 8000744:	4b09      	ldr	r3, [pc, #36]	; (800076c <prvHelpCommand+0x54>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	685b      	ldr	r3, [r3, #4]
 800074a:	4a08      	ldr	r2, [pc, #32]	; (800076c <prvHelpCommand+0x54>)
 800074c:	6013      	str	r3, [r2, #0]

	if( pxCommand == NULL )
 800074e:	4b07      	ldr	r3, [pc, #28]	; (800076c <prvHelpCommand+0x54>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d102      	bne.n	800075c <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]
 800075a:	e001      	b.n	8000760 <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
 800075c:	2301      	movs	r3, #1
 800075e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8000760:	697b      	ldr	r3, [r7, #20]
}
 8000762:	4618      	mov	r0, r3
 8000764:	3718      	adds	r7, #24
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000190 	.word	0x20000190
 8000770:	20000000 	.word	0x20000000

08000774 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
 8000774:	b480      	push	{r7}
 8000776:	b085      	sub	sp, #20
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
 800077c:	2300      	movs	r3, #0
 800077e:	73fb      	strb	r3, [r7, #15]
BaseType_t xLastCharacterWasSpace = pdFALSE;
 8000780:	2300      	movs	r3, #0
 8000782:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 8000784:	e014      	b.n	80007b0 <prvGetNumberOfParameters+0x3c>
	{
		if( ( *pcCommandString ) == ' ' )
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	2b20      	cmp	r3, #32
 800078c:	d10b      	bne.n	80007a6 <prvGetNumberOfParameters+0x32>
		{
			if( xLastCharacterWasSpace != pdTRUE )
 800078e:	68bb      	ldr	r3, [r7, #8]
 8000790:	2b01      	cmp	r3, #1
 8000792:	d00a      	beq.n	80007aa <prvGetNumberOfParameters+0x36>
			{
				cParameters++;
 8000794:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000798:	b2db      	uxtb	r3, r3
 800079a:	3301      	adds	r3, #1
 800079c:	b2db      	uxtb	r3, r3
 800079e:	73fb      	strb	r3, [r7, #15]
				xLastCharacterWasSpace = pdTRUE;
 80007a0:	2301      	movs	r3, #1
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	e001      	b.n	80007aa <prvGetNumberOfParameters+0x36>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 80007a6:	2300      	movs	r3, #0
 80007a8:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	3301      	adds	r3, #1
 80007ae:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d1e6      	bne.n	8000786 <prvGetNumberOfParameters+0x12>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	d105      	bne.n	80007ca <prvGetNumberOfParameters+0x56>
	{
		cParameters--;
 80007be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	3b01      	subs	r3, #1
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	73fb      	strb	r3, [r7, #15]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
 80007ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3714      	adds	r7, #20
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
	...

080007dc <vCommandConsoleTask>:




void vCommandConsoleTask( void *pvParameters )
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
    //xConsole = ( Peripheral_Descriptor_t ) pvParameters;

    /* Send a welcome message to the user knows they are connected. */
    //FreeRTOS_write( xConsole, pcWelcomeMessage, strlen( pcWelcomeMessage ) );
    /* init code for USB_DEVICE */
    MX_USB_DEVICE_Init();
 80007e4:	f00a fcea 	bl	800b1bc <MX_USB_DEVICE_Init>
    /* USER CODE BEGIN 5 */
    init_usb_rtos_obj();
 80007e8:	f00a fe30 	bl	800b44c <init_usb_rtos_obj>
    //char data[32];
	int qtd;
    /* Infinite loop */
	//Peripheral_Descriptor_t xConsole;
	int cInputIndex = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]

	FreeRTOS_CLIRegisterCommand( &xTasksCommand );
 80007f0:	4832      	ldr	r0, [pc, #200]	; (80008bc <vCommandConsoleTask+0xe0>)
 80007f2:	f7ff fec7 	bl	8000584 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &xHarmonicsCommand );
 80007f6:	4832      	ldr	r0, [pc, #200]	; (80008c0 <vCommandConsoleTask+0xe4>)
 80007f8:	f7ff fec4 	bl	8000584 <FreeRTOS_CLIRegisterCommand>
    parameter.  Cast the task parameter to the correct type. */
	//xConsole = ( Peripheral_Descriptor_t ) pvParameters;

	/* Send a welcome message to the user knows they are connected. */
    //qtd = receive_usb_data(data, 128, portMAX_DELAY);
    (void)queue_print_usb(pcWelcomeMessage, strlen( pcWelcomeMessage ), portMAX_DELAY);
 80007fc:	4b31      	ldr	r3, [pc, #196]	; (80008c4 <vCommandConsoleTask+0xe8>)
 80007fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000802:	214c      	movs	r1, #76	; 0x4c
 8000804:	4618      	mov	r0, r3
 8000806:	f00a fe77 	bl	800b4f8 <queue_print_usb>
    for( ;; )
    {
        /* This implementation reads a single character at a time.  Wait in the
        Blocked state until a character is received. */
       // FreeRTOS_read( xConsole, &cRxedChar, sizeof( cRxedChar ) );
        qtd = receive_usb_data(&data, 1, portMAX_DELAY);
 800080a:	f107 030b 	add.w	r3, r7, #11
 800080e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000812:	2101      	movs	r1, #1
 8000814:	4618      	mov	r0, r3
 8000816:	f00a fe5b 	bl	800b4d0 <receive_usb_data>
 800081a:	6138      	str	r0, [r7, #16]
        
        if( data == '\r' )
 800081c:	7afb      	ldrb	r3, [r7, #11]
 800081e:	2b0d      	cmp	r3, #13
 8000820:	d11b      	bne.n	800085a <vCommandConsoleTask+0x7e>
            do
            {
                /* Send the command string to the command interpreter.  Any
                output generated by the command interpreter will be placed in the
                pcOutputString buffer. */
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand
 8000822:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000826:	4928      	ldr	r1, [pc, #160]	; (80008c8 <vCommandConsoleTask+0xec>)
 8000828:	4828      	ldr	r0, [pc, #160]	; (80008cc <vCommandConsoleTask+0xf0>)
 800082a:	f7ff feef 	bl	800060c <FreeRTOS_CLIProcessCommand>
 800082e:	60f8      	str	r0, [r7, #12]
                              );

                /* Write the output generated by the command interpreter to the
                console. */
               // FreeRTOS_write( xConsole, pcOutputString, strlen( pcOutputString ) );
               (void)queue_print_usb(pcOutputString, (int)strlen( pcOutputString ), portMAX_DELAY);
 8000830:	4825      	ldr	r0, [pc, #148]	; (80008c8 <vCommandConsoleTask+0xec>)
 8000832:	f7ff fccd 	bl	80001d0 <strlen>
 8000836:	4603      	mov	r3, r0
 8000838:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800083c:	4619      	mov	r1, r3
 800083e:	4822      	ldr	r0, [pc, #136]	; (80008c8 <vCommandConsoleTask+0xec>)
 8000840:	f00a fe5a 	bl	800b4f8 <queue_print_usb>

            } while( xMoreDataToFollow != pdFALSE );
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d1eb      	bne.n	8000822 <vCommandConsoleTask+0x46>

            /* All the strings generated by the input command have been sent.
            Processing of the command is complete.  Clear the input string ready
            to receive the next command. */
            cInputIndex = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	617b      	str	r3, [r7, #20]
            memset( pcInputString, 0x00, MAX_INPUT_LENGTH );
 800084e:	2232      	movs	r2, #50	; 0x32
 8000850:	2100      	movs	r1, #0
 8000852:	481e      	ldr	r0, [pc, #120]	; (80008cc <vCommandConsoleTask+0xf0>)
 8000854:	f00b fb0a 	bl	800be6c <memset>
 8000858:	e7d7      	b.n	800080a <vCommandConsoleTask+0x2e>
        {
            /* The if() clause performs the processing after a newline character
            is received.  This else clause performs the processing if any other
            character is received. */

            if( data == '\n' )
 800085a:	7afb      	ldrb	r3, [r7, #11]
 800085c:	2b0a      	cmp	r3, #10
 800085e:	d0d4      	beq.n	800080a <vCommandConsoleTask+0x2e>
            {
                /* Ignore carriage returns. */
            }
            else if( data == '\b' )
 8000860:	7afb      	ldrb	r3, [r7, #11]
 8000862:	2b08      	cmp	r3, #8
 8000864:	d113      	bne.n	800088e <vCommandConsoleTask+0xb2>
            {
                /* Backspace was pressed.  Erase the last character in the input
                buffer - if there are any. */
                if( cInputIndex > 0 )
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	2b00      	cmp	r3, #0
 800086a:	ddce      	ble.n	800080a <vCommandConsoleTask+0x2e>
                {
                    cInputIndex--;
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	3b01      	subs	r3, #1
 8000870:	617b      	str	r3, [r7, #20]
                    pcInputString[ cInputIndex ] = ' ';
 8000872:	4a16      	ldr	r2, [pc, #88]	; (80008cc <vCommandConsoleTask+0xf0>)
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	4413      	add	r3, r2
 8000878:	2220      	movs	r2, #32
 800087a:	701a      	strb	r2, [r3, #0]
                    (void)queue_print_usb(&data, 1, portMAX_DELAY);
 800087c:	f107 030b 	add.w	r3, r7, #11
 8000880:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000884:	2101      	movs	r1, #1
 8000886:	4618      	mov	r0, r3
 8000888:	f00a fe36 	bl	800b4f8 <queue_print_usb>
 800088c:	e7bd      	b.n	800080a <vCommandConsoleTask+0x2e>
            {
                /* A character was entered.  It was not a new line, backspace
                or carriage return, so it is accepted as part of the input and
                placed into the input buffer.  When a n is entered the complete
                string will be passed to the command interpreter. */
                if( cInputIndex < MAX_INPUT_LENGTH )
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	2b31      	cmp	r3, #49	; 0x31
 8000892:	dcba      	bgt.n	800080a <vCommandConsoleTask+0x2e>
                {
                    pcInputString[ cInputIndex ] = data;
 8000894:	7afb      	ldrb	r3, [r7, #11]
 8000896:	b259      	sxtb	r1, r3
 8000898:	4a0c      	ldr	r2, [pc, #48]	; (80008cc <vCommandConsoleTask+0xf0>)
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	4413      	add	r3, r2
 800089e:	460a      	mov	r2, r1
 80008a0:	701a      	strb	r2, [r3, #0]
                    cInputIndex++;
 80008a2:	697b      	ldr	r3, [r7, #20]
 80008a4:	3301      	adds	r3, #1
 80008a6:	617b      	str	r3, [r7, #20]
                    (void)queue_print_usb(&data, 1, portMAX_DELAY);
 80008a8:	f107 030b 	add.w	r3, r7, #11
 80008ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008b0:	2101      	movs	r1, #1
 80008b2:	4618      	mov	r0, r3
 80008b4:	f00a fe20 	bl	800b4f8 <queue_print_usb>
    {
 80008b8:	e7a7      	b.n	800080a <vCommandConsoleTask+0x2e>
 80008ba:	bf00      	nop
 80008bc:	0800cb14 	.word	0x0800cb14
 80008c0:	0800cb24 	.word	0x0800cb24
 80008c4:	0800c964 	.word	0x0800c964
 80008c8:	200001c8 	.word	0x200001c8
 80008cc:	20000194 	.word	0x20000194

080008d0 <prvTaskStatsCommand>:
/* This function implements the behaviour of a command, so must have the correct
prototype. */
static BaseType_t prvTaskStatsCommand( char *pcWriteBuffer,
                                          size_t xWriteBufferLen,
                                          const char *pcCommandString )
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	607a      	str	r2, [r7, #4]
    ( void ) xWriteBufferLen;

    /* pcWriteBuffer is used directly as the vTaskList() parameter, so the table
    generated by executing vTaskList() is written directly into the output
    buffer. */
    vTaskList( pcWriteBuffer); //+ strlen( pcHeader ) );
 80008dc:	68f8      	ldr	r0, [r7, #12]
 80008de:	f009 f9bf 	bl	8009c60 <vTaskList>

    /* The entire table was written directly to the output buffer.  Execution
    of this command is complete, so return pdFALSE. */
    return pdFALSE;
 80008e2:	2300      	movs	r3, #0
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3710      	adds	r7, #16
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <prvHarmonicsStatsCommand>:
/* This function implements the behaviour of a command, so must have the correct
prototype. */
static BaseType_t prvHarmonicsStatsCommand( char *pcWriteBuffer,
                                          size_t xWriteBufferLen,
                                          const char *pcCommandString )
{
 80008ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	60b9      	str	r1, [r7, #8]
 80008f6:	607a      	str	r2, [r7, #4]
    /* The entire table was written directly to the output buffer.  Execution
    of this command is complete, so return pdFALSE. */
    strcpy(pcWriteBuffer, (char *)"Função ainda não implementada\r\n");
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	4a0e      	ldr	r2, [pc, #56]	; (8000934 <prvHarmonicsStatsCommand+0x48>)
 80008fc:	4614      	mov	r4, r2
 80008fe:	469c      	mov	ip, r3
 8000900:	f104 0e20 	add.w	lr, r4, #32
 8000904:	4665      	mov	r5, ip
 8000906:	4626      	mov	r6, r4
 8000908:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800090a:	6028      	str	r0, [r5, #0]
 800090c:	6069      	str	r1, [r5, #4]
 800090e:	60aa      	str	r2, [r5, #8]
 8000910:	60eb      	str	r3, [r5, #12]
 8000912:	3410      	adds	r4, #16
 8000914:	f10c 0c10 	add.w	ip, ip, #16
 8000918:	4574      	cmp	r4, lr
 800091a:	d1f3      	bne.n	8000904 <prvHarmonicsStatsCommand+0x18>
 800091c:	4663      	mov	r3, ip
 800091e:	4622      	mov	r2, r4
 8000920:	8811      	ldrh	r1, [r2, #0]
 8000922:	7892      	ldrb	r2, [r2, #2]
 8000924:	8019      	strh	r1, [r3, #0]
 8000926:	709a      	strb	r2, [r3, #2]
    return pdFALSE;
 8000928:	2300      	movs	r3, #0
}
 800092a:	4618      	mov	r0, r3
 800092c:	3714      	adds	r7, #20
 800092e:	46bd      	mov	sp, r7
 8000930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000932:	bf00      	nop
 8000934:	0800ca58 	.word	0x0800ca58

08000938 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800093c:	f000 f9fe 	bl	8000d3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000940:	f000 f816 	bl	8000970 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000944:	f000 f87e 	bl	8000a44 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000948:	f006 fb18 	bl	8006f7c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(vCommandConsoleTask, NULL, &defaultTask_attributes);
 800094c:	4a05      	ldr	r2, [pc, #20]	; (8000964 <main+0x2c>)
 800094e:	2100      	movs	r1, #0
 8000950:	4805      	ldr	r0, [pc, #20]	; (8000968 <main+0x30>)
 8000952:	f006 fb5d 	bl	8007010 <osThreadNew>
 8000956:	4603      	mov	r3, r0
 8000958:	4a04      	ldr	r2, [pc, #16]	; (800096c <main+0x34>)
 800095a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800095c:	f006 fb32 	bl	8006fc4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000960:	e7fe      	b.n	8000960 <main+0x28>
 8000962:	bf00      	nop
 8000964:	0800cb34 	.word	0x0800cb34
 8000968:	080007dd 	.word	0x080007dd
 800096c:	200003c8 	.word	0x200003c8

08000970 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b094      	sub	sp, #80	; 0x50
 8000974:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000976:	f107 0320 	add.w	r3, r7, #32
 800097a:	2230      	movs	r2, #48	; 0x30
 800097c:	2100      	movs	r1, #0
 800097e:	4618      	mov	r0, r3
 8000980:	f00b fa74 	bl	800be6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000984:	f107 030c 	add.w	r3, r7, #12
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000994:	2300      	movs	r3, #0
 8000996:	60bb      	str	r3, [r7, #8]
 8000998:	4b28      	ldr	r3, [pc, #160]	; (8000a3c <SystemClock_Config+0xcc>)
 800099a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099c:	4a27      	ldr	r2, [pc, #156]	; (8000a3c <SystemClock_Config+0xcc>)
 800099e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a2:	6413      	str	r3, [r2, #64]	; 0x40
 80009a4:	4b25      	ldr	r3, [pc, #148]	; (8000a3c <SystemClock_Config+0xcc>)
 80009a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ac:	60bb      	str	r3, [r7, #8]
 80009ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009b0:	2300      	movs	r3, #0
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	4b22      	ldr	r3, [pc, #136]	; (8000a40 <SystemClock_Config+0xd0>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a21      	ldr	r2, [pc, #132]	; (8000a40 <SystemClock_Config+0xd0>)
 80009ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009be:	6013      	str	r3, [r2, #0]
 80009c0:	4b1f      	ldr	r3, [pc, #124]	; (8000a40 <SystemClock_Config+0xd0>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009cc:	2301      	movs	r3, #1
 80009ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d6:	2302      	movs	r3, #2
 80009d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009e0:	2304      	movs	r3, #4
 80009e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80009e4:	23a8      	movs	r3, #168	; 0xa8
 80009e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009e8:	2302      	movs	r3, #2
 80009ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009ec:	2307      	movs	r3, #7
 80009ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f0:	f107 0320 	add.w	r3, r7, #32
 80009f4:	4618      	mov	r0, r3
 80009f6:	f001 ff03 	bl	8002800 <HAL_RCC_OscConfig>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a00:	f000 f85a 	bl	8000ab8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a04:	230f      	movs	r3, #15
 8000a06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a10:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a1a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a1c:	f107 030c 	add.w	r3, r7, #12
 8000a20:	2105      	movs	r1, #5
 8000a22:	4618      	mov	r0, r3
 8000a24:	f002 f964 	bl	8002cf0 <HAL_RCC_ClockConfig>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a2e:	f000 f843 	bl	8000ab8 <Error_Handler>
  }
}
 8000a32:	bf00      	nop
 8000a34:	3750      	adds	r7, #80	; 0x50
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40007000 	.word	0x40007000

08000a44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <MX_GPIO_Init+0x4c>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a0f      	ldr	r2, [pc, #60]	; (8000a90 <MX_GPIO_Init+0x4c>)
 8000a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b0d      	ldr	r3, [pc, #52]	; (8000a90 <MX_GPIO_Init+0x4c>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	603b      	str	r3, [r7, #0]
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <MX_GPIO_Init+0x4c>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a08      	ldr	r2, [pc, #32]	; (8000a90 <MX_GPIO_Init+0x4c>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <MX_GPIO_Init+0x4c>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	603b      	str	r3, [r7, #0]
 8000a80:	683b      	ldr	r3, [r7, #0]

}
 8000a82:	bf00      	nop
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	40023800 	.word	0x40023800

08000a94 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d101      	bne.n	8000aaa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aa6:	f000 f96b 	bl	8000d80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40010000 	.word	0x40010000

08000ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000abc:	b672      	cpsid	i
}
 8000abe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <Error_Handler+0x8>
	...

08000ac4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <HAL_MspInit+0x54>)
 8000ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad2:	4a11      	ldr	r2, [pc, #68]	; (8000b18 <HAL_MspInit+0x54>)
 8000ad4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8000ada:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <HAL_MspInit+0x54>)
 8000adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	603b      	str	r3, [r7, #0]
 8000aea:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <HAL_MspInit+0x54>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aee:	4a0a      	ldr	r2, [pc, #40]	; (8000b18 <HAL_MspInit+0x54>)
 8000af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af4:	6413      	str	r3, [r2, #64]	; 0x40
 8000af6:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <HAL_MspInit+0x54>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afe:	603b      	str	r3, [r7, #0]
 8000b00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b02:	2200      	movs	r2, #0
 8000b04:	210f      	movs	r1, #15
 8000b06:	f06f 0001 	mvn.w	r0, #1
 8000b0a:	f000 fa35 	bl	8000f78 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40023800 	.word	0x40023800

08000b1c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08c      	sub	sp, #48	; 0x30
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000b24:	2300      	movs	r3, #0
 8000b26:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60bb      	str	r3, [r7, #8]
 8000b30:	4b2f      	ldr	r3, [pc, #188]	; (8000bf0 <HAL_InitTick+0xd4>)
 8000b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b34:	4a2e      	ldr	r2, [pc, #184]	; (8000bf0 <HAL_InitTick+0xd4>)
 8000b36:	f043 0301 	orr.w	r3, r3, #1
 8000b3a:	6453      	str	r3, [r2, #68]	; 0x44
 8000b3c:	4b2c      	ldr	r3, [pc, #176]	; (8000bf0 <HAL_InitTick+0xd4>)
 8000b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b40:	f003 0301 	and.w	r3, r3, #1
 8000b44:	60bb      	str	r3, [r7, #8]
 8000b46:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b48:	f107 020c 	add.w	r2, r7, #12
 8000b4c:	f107 0310 	add.w	r3, r7, #16
 8000b50:	4611      	mov	r1, r2
 8000b52:	4618      	mov	r0, r3
 8000b54:	f002 fad8 	bl	8003108 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000b58:	f002 fac2 	bl	80030e0 <HAL_RCC_GetPCLK2Freq>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b64:	4a23      	ldr	r2, [pc, #140]	; (8000bf4 <HAL_InitTick+0xd8>)
 8000b66:	fba2 2303 	umull	r2, r3, r2, r3
 8000b6a:	0c9b      	lsrs	r3, r3, #18
 8000b6c:	3b01      	subs	r3, #1
 8000b6e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b70:	4b21      	ldr	r3, [pc, #132]	; (8000bf8 <HAL_InitTick+0xdc>)
 8000b72:	4a22      	ldr	r2, [pc, #136]	; (8000bfc <HAL_InitTick+0xe0>)
 8000b74:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b76:	4b20      	ldr	r3, [pc, #128]	; (8000bf8 <HAL_InitTick+0xdc>)
 8000b78:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b7c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b7e:	4a1e      	ldr	r2, [pc, #120]	; (8000bf8 <HAL_InitTick+0xdc>)
 8000b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b82:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b84:	4b1c      	ldr	r3, [pc, #112]	; (8000bf8 <HAL_InitTick+0xdc>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8a:	4b1b      	ldr	r3, [pc, #108]	; (8000bf8 <HAL_InitTick+0xdc>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b90:	4b19      	ldr	r3, [pc, #100]	; (8000bf8 <HAL_InitTick+0xdc>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000b96:	4818      	ldr	r0, [pc, #96]	; (8000bf8 <HAL_InitTick+0xdc>)
 8000b98:	f002 fae8 	bl	800316c <HAL_TIM_Base_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000ba2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d11b      	bne.n	8000be2 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000baa:	4813      	ldr	r0, [pc, #76]	; (8000bf8 <HAL_InitTick+0xdc>)
 8000bac:	f002 fb38 	bl	8003220 <HAL_TIM_Base_Start_IT>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000bb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d111      	bne.n	8000be2 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000bbe:	2019      	movs	r0, #25
 8000bc0:	f000 f9f6 	bl	8000fb0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2b0f      	cmp	r3, #15
 8000bc8:	d808      	bhi.n	8000bdc <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	6879      	ldr	r1, [r7, #4]
 8000bce:	2019      	movs	r0, #25
 8000bd0:	f000 f9d2 	bl	8000f78 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bd4:	4a0a      	ldr	r2, [pc, #40]	; (8000c00 <HAL_InitTick+0xe4>)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6013      	str	r3, [r2, #0]
 8000bda:	e002      	b.n	8000be2 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000be2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3730      	adds	r7, #48	; 0x30
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	431bde83 	.word	0x431bde83
 8000bf8:	200003cc 	.word	0x200003cc
 8000bfc:	40010000 	.word	0x40010000
 8000c00:	20000010 	.word	0x20000010

08000c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <NMI_Handler+0x4>

08000c0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <HardFault_Handler+0x4>

08000c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <MemManage_Handler+0x4>

08000c16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <BusFault_Handler+0x4>

08000c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <UsageFault_Handler+0x4>

08000c22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c34:	4802      	ldr	r0, [pc, #8]	; (8000c40 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000c36:	f002 fb63 	bl	8003300 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	200003cc 	.word	0x200003cc

08000c44 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c48:	4802      	ldr	r0, [pc, #8]	; (8000c54 <OTG_FS_IRQHandler+0x10>)
 8000c4a:	f000 fcab 	bl	80015a4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	2000a720 	.word	0x2000a720

08000c58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c60:	4a14      	ldr	r2, [pc, #80]	; (8000cb4 <_sbrk+0x5c>)
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <_sbrk+0x60>)
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c6c:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <_sbrk+0x64>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d102      	bne.n	8000c7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c74:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <_sbrk+0x64>)
 8000c76:	4a12      	ldr	r2, [pc, #72]	; (8000cc0 <_sbrk+0x68>)
 8000c78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c7a:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <_sbrk+0x64>)
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4413      	add	r3, r2
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d207      	bcs.n	8000c98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c88:	f00b f8b6 	bl	800bdf8 <__errno>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	220c      	movs	r2, #12
 8000c90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c96:	e009      	b.n	8000cac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c98:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <_sbrk+0x64>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c9e:	4b07      	ldr	r3, [pc, #28]	; (8000cbc <_sbrk+0x64>)
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	4a05      	ldr	r2, [pc, #20]	; (8000cbc <_sbrk+0x64>)
 8000ca8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000caa:	68fb      	ldr	r3, [r7, #12]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3718      	adds	r7, #24
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20020000 	.word	0x20020000
 8000cb8:	00000400 	.word	0x00000400
 8000cbc:	20000414 	.word	0x20000414
 8000cc0:	2000ae60 	.word	0x2000ae60

08000cc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <SystemInit+0x20>)
 8000cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cce:	4a05      	ldr	r2, [pc, #20]	; (8000ce4 <SystemInit+0x20>)
 8000cd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ce8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cec:	480d      	ldr	r0, [pc, #52]	; (8000d24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cee:	490e      	ldr	r1, [pc, #56]	; (8000d28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cf0:	4a0e      	ldr	r2, [pc, #56]	; (8000d2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf4:	e002      	b.n	8000cfc <LoopCopyDataInit>

08000cf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cfa:	3304      	adds	r3, #4

08000cfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d00:	d3f9      	bcc.n	8000cf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d02:	4a0b      	ldr	r2, [pc, #44]	; (8000d30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d04:	4c0b      	ldr	r4, [pc, #44]	; (8000d34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d08:	e001      	b.n	8000d0e <LoopFillZerobss>

08000d0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d0c:	3204      	adds	r2, #4

08000d0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d10:	d3fb      	bcc.n	8000d0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d12:	f7ff ffd7 	bl	8000cc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d16:	f00b f875 	bl	800be04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d1a:	f7ff fe0d 	bl	8000938 <main>
  bx  lr    
 8000d1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d28:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 8000d2c:	0800cc14 	.word	0x0800cc14
  ldr r2, =_sbss
 8000d30:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 8000d34:	2000ae5c 	.word	0x2000ae5c

08000d38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d38:	e7fe      	b.n	8000d38 <ADC_IRQHandler>
	...

08000d3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d40:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <HAL_Init+0x40>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a0d      	ldr	r2, [pc, #52]	; (8000d7c <HAL_Init+0x40>)
 8000d46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d4c:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <HAL_Init+0x40>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a0a      	ldr	r2, [pc, #40]	; (8000d7c <HAL_Init+0x40>)
 8000d52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d58:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <HAL_Init+0x40>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a07      	ldr	r2, [pc, #28]	; (8000d7c <HAL_Init+0x40>)
 8000d5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d64:	2003      	movs	r0, #3
 8000d66:	f000 f8fc 	bl	8000f62 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d6a:	200f      	movs	r0, #15
 8000d6c:	f7ff fed6 	bl	8000b1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d70:	f7ff fea8 	bl	8000ac4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40023c00 	.word	0x40023c00

08000d80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <HAL_IncTick+0x20>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	461a      	mov	r2, r3
 8000d8a:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <HAL_IncTick+0x24>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4413      	add	r3, r2
 8000d90:	4a04      	ldr	r2, [pc, #16]	; (8000da4 <HAL_IncTick+0x24>)
 8000d92:	6013      	str	r3, [r2, #0]
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	20000014 	.word	0x20000014
 8000da4:	20000418 	.word	0x20000418

08000da8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  return uwTick;
 8000dac:	4b03      	ldr	r3, [pc, #12]	; (8000dbc <HAL_GetTick+0x14>)
 8000dae:	681b      	ldr	r3, [r3, #0]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	20000418 	.word	0x20000418

08000dc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dc8:	f7ff ffee 	bl	8000da8 <HAL_GetTick>
 8000dcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000dd8:	d005      	beq.n	8000de6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dda:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <HAL_Delay+0x44>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	461a      	mov	r2, r3
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	4413      	add	r3, r2
 8000de4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000de6:	bf00      	nop
 8000de8:	f7ff ffde 	bl	8000da8 <HAL_GetTick>
 8000dec:	4602      	mov	r2, r0
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	68fa      	ldr	r2, [r7, #12]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d8f7      	bhi.n	8000de8 <HAL_Delay+0x28>
  {
  }
}
 8000df8:	bf00      	nop
 8000dfa:	bf00      	nop
 8000dfc:	3710      	adds	r7, #16
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000014 	.word	0x20000014

08000e08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e18:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <__NVIC_SetPriorityGrouping+0x44>)
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e1e:	68ba      	ldr	r2, [r7, #8]
 8000e20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e24:	4013      	ands	r3, r2
 8000e26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e3a:	4a04      	ldr	r2, [pc, #16]	; (8000e4c <__NVIC_SetPriorityGrouping+0x44>)
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	60d3      	str	r3, [r2, #12]
}
 8000e40:	bf00      	nop
 8000e42:	3714      	adds	r7, #20
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e54:	4b04      	ldr	r3, [pc, #16]	; (8000e68 <__NVIC_GetPriorityGrouping+0x18>)
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	0a1b      	lsrs	r3, r3, #8
 8000e5a:	f003 0307 	and.w	r3, r3, #7
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	db0b      	blt.n	8000e96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	f003 021f 	and.w	r2, r3, #31
 8000e84:	4907      	ldr	r1, [pc, #28]	; (8000ea4 <__NVIC_EnableIRQ+0x38>)
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	095b      	lsrs	r3, r3, #5
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e96:	bf00      	nop
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	e000e100 	.word	0xe000e100

08000ea8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	6039      	str	r1, [r7, #0]
 8000eb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	db0a      	blt.n	8000ed2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	490c      	ldr	r1, [pc, #48]	; (8000ef4 <__NVIC_SetPriority+0x4c>)
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	0112      	lsls	r2, r2, #4
 8000ec8:	b2d2      	uxtb	r2, r2
 8000eca:	440b      	add	r3, r1
 8000ecc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed0:	e00a      	b.n	8000ee8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	b2da      	uxtb	r2, r3
 8000ed6:	4908      	ldr	r1, [pc, #32]	; (8000ef8 <__NVIC_SetPriority+0x50>)
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	f003 030f 	and.w	r3, r3, #15
 8000ede:	3b04      	subs	r3, #4
 8000ee0:	0112      	lsls	r2, r2, #4
 8000ee2:	b2d2      	uxtb	r2, r2
 8000ee4:	440b      	add	r3, r1
 8000ee6:	761a      	strb	r2, [r3, #24]
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	e000e100 	.word	0xe000e100
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b089      	sub	sp, #36	; 0x24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	f003 0307 	and.w	r3, r3, #7
 8000f0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	f1c3 0307 	rsb	r3, r3, #7
 8000f16:	2b04      	cmp	r3, #4
 8000f18:	bf28      	it	cs
 8000f1a:	2304      	movcs	r3, #4
 8000f1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	3304      	adds	r3, #4
 8000f22:	2b06      	cmp	r3, #6
 8000f24:	d902      	bls.n	8000f2c <NVIC_EncodePriority+0x30>
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	3b03      	subs	r3, #3
 8000f2a:	e000      	b.n	8000f2e <NVIC_EncodePriority+0x32>
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43da      	mvns	r2, r3
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	401a      	ands	r2, r3
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4e:	43d9      	mvns	r1, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f54:	4313      	orrs	r3, r2
         );
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3724      	adds	r7, #36	; 0x24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f7ff ff4c 	bl	8000e08 <__NVIC_SetPriorityGrouping>
}
 8000f70:	bf00      	nop
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
 8000f84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f86:	2300      	movs	r3, #0
 8000f88:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f8a:	f7ff ff61 	bl	8000e50 <__NVIC_GetPriorityGrouping>
 8000f8e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	68b9      	ldr	r1, [r7, #8]
 8000f94:	6978      	ldr	r0, [r7, #20]
 8000f96:	f7ff ffb1 	bl	8000efc <NVIC_EncodePriority>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa0:	4611      	mov	r1, r2
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff ff80 	bl	8000ea8 <__NVIC_SetPriority>
}
 8000fa8:	bf00      	nop
 8000faa:	3718      	adds	r7, #24
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff ff54 	bl	8000e6c <__NVIC_EnableIRQ>
}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b089      	sub	sp, #36	; 0x24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61fb      	str	r3, [r7, #28]
 8000fe6:	e16b      	b.n	80012c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fe8:	2201      	movs	r2, #1
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	697a      	ldr	r2, [r7, #20]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	429a      	cmp	r2, r3
 8001002:	f040 815a 	bne.w	80012ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f003 0303 	and.w	r3, r3, #3
 800100e:	2b01      	cmp	r3, #1
 8001010:	d005      	beq.n	800101e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800101a:	2b02      	cmp	r3, #2
 800101c:	d130      	bne.n	8001080 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	2203      	movs	r2, #3
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43db      	mvns	r3, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4013      	ands	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	68da      	ldr	r2, [r3, #12]
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4313      	orrs	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001054:	2201      	movs	r2, #1
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4013      	ands	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	091b      	lsrs	r3, r3, #4
 800106a:	f003 0201 	and.w	r2, r3, #1
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4313      	orrs	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f003 0303 	and.w	r3, r3, #3
 8001088:	2b03      	cmp	r3, #3
 800108a:	d017      	beq.n	80010bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	2203      	movs	r2, #3
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	689a      	ldr	r2, [r3, #8]
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 0303 	and.w	r3, r3, #3
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d123      	bne.n	8001110 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	08da      	lsrs	r2, r3, #3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3208      	adds	r2, #8
 80010d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	f003 0307 	and.w	r3, r3, #7
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	220f      	movs	r2, #15
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	691a      	ldr	r2, [r3, #16]
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4313      	orrs	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	08da      	lsrs	r2, r3, #3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	3208      	adds	r2, #8
 800110a:	69b9      	ldr	r1, [r7, #24]
 800110c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	2203      	movs	r2, #3
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f003 0203 	and.w	r2, r3, #3
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800114c:	2b00      	cmp	r3, #0
 800114e:	f000 80b4 	beq.w	80012ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	4b60      	ldr	r3, [pc, #384]	; (80012d8 <HAL_GPIO_Init+0x30c>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115a:	4a5f      	ldr	r2, [pc, #380]	; (80012d8 <HAL_GPIO_Init+0x30c>)
 800115c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001160:	6453      	str	r3, [r2, #68]	; 0x44
 8001162:	4b5d      	ldr	r3, [pc, #372]	; (80012d8 <HAL_GPIO_Init+0x30c>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800116e:	4a5b      	ldr	r2, [pc, #364]	; (80012dc <HAL_GPIO_Init+0x310>)
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	089b      	lsrs	r3, r3, #2
 8001174:	3302      	adds	r3, #2
 8001176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	f003 0303 	and.w	r3, r3, #3
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	220f      	movs	r2, #15
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43db      	mvns	r3, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4013      	ands	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a52      	ldr	r2, [pc, #328]	; (80012e0 <HAL_GPIO_Init+0x314>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d02b      	beq.n	80011f2 <HAL_GPIO_Init+0x226>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a51      	ldr	r2, [pc, #324]	; (80012e4 <HAL_GPIO_Init+0x318>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d025      	beq.n	80011ee <HAL_GPIO_Init+0x222>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a50      	ldr	r2, [pc, #320]	; (80012e8 <HAL_GPIO_Init+0x31c>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d01f      	beq.n	80011ea <HAL_GPIO_Init+0x21e>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a4f      	ldr	r2, [pc, #316]	; (80012ec <HAL_GPIO_Init+0x320>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d019      	beq.n	80011e6 <HAL_GPIO_Init+0x21a>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a4e      	ldr	r2, [pc, #312]	; (80012f0 <HAL_GPIO_Init+0x324>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d013      	beq.n	80011e2 <HAL_GPIO_Init+0x216>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a4d      	ldr	r2, [pc, #308]	; (80012f4 <HAL_GPIO_Init+0x328>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d00d      	beq.n	80011de <HAL_GPIO_Init+0x212>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a4c      	ldr	r2, [pc, #304]	; (80012f8 <HAL_GPIO_Init+0x32c>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d007      	beq.n	80011da <HAL_GPIO_Init+0x20e>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a4b      	ldr	r2, [pc, #300]	; (80012fc <HAL_GPIO_Init+0x330>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d101      	bne.n	80011d6 <HAL_GPIO_Init+0x20a>
 80011d2:	2307      	movs	r3, #7
 80011d4:	e00e      	b.n	80011f4 <HAL_GPIO_Init+0x228>
 80011d6:	2308      	movs	r3, #8
 80011d8:	e00c      	b.n	80011f4 <HAL_GPIO_Init+0x228>
 80011da:	2306      	movs	r3, #6
 80011dc:	e00a      	b.n	80011f4 <HAL_GPIO_Init+0x228>
 80011de:	2305      	movs	r3, #5
 80011e0:	e008      	b.n	80011f4 <HAL_GPIO_Init+0x228>
 80011e2:	2304      	movs	r3, #4
 80011e4:	e006      	b.n	80011f4 <HAL_GPIO_Init+0x228>
 80011e6:	2303      	movs	r3, #3
 80011e8:	e004      	b.n	80011f4 <HAL_GPIO_Init+0x228>
 80011ea:	2302      	movs	r3, #2
 80011ec:	e002      	b.n	80011f4 <HAL_GPIO_Init+0x228>
 80011ee:	2301      	movs	r3, #1
 80011f0:	e000      	b.n	80011f4 <HAL_GPIO_Init+0x228>
 80011f2:	2300      	movs	r3, #0
 80011f4:	69fa      	ldr	r2, [r7, #28]
 80011f6:	f002 0203 	and.w	r2, r2, #3
 80011fa:	0092      	lsls	r2, r2, #2
 80011fc:	4093      	lsls	r3, r2
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4313      	orrs	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001204:	4935      	ldr	r1, [pc, #212]	; (80012dc <HAL_GPIO_Init+0x310>)
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	089b      	lsrs	r3, r3, #2
 800120a:	3302      	adds	r3, #2
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001212:	4b3b      	ldr	r3, [pc, #236]	; (8001300 <HAL_GPIO_Init+0x334>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	43db      	mvns	r3, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4013      	ands	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	4313      	orrs	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001236:	4a32      	ldr	r2, [pc, #200]	; (8001300 <HAL_GPIO_Init+0x334>)
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800123c:	4b30      	ldr	r3, [pc, #192]	; (8001300 <HAL_GPIO_Init+0x334>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	43db      	mvns	r3, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4013      	ands	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d003      	beq.n	8001260 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	4313      	orrs	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001260:	4a27      	ldr	r2, [pc, #156]	; (8001300 <HAL_GPIO_Init+0x334>)
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001266:	4b26      	ldr	r3, [pc, #152]	; (8001300 <HAL_GPIO_Init+0x334>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	43db      	mvns	r3, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4013      	ands	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800128a:	4a1d      	ldr	r2, [pc, #116]	; (8001300 <HAL_GPIO_Init+0x334>)
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001290:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <HAL_GPIO_Init+0x334>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d003      	beq.n	80012b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012b4:	4a12      	ldr	r2, [pc, #72]	; (8001300 <HAL_GPIO_Init+0x334>)
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3301      	adds	r3, #1
 80012be:	61fb      	str	r3, [r7, #28]
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	2b0f      	cmp	r3, #15
 80012c4:	f67f ae90 	bls.w	8000fe8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012c8:	bf00      	nop
 80012ca:	bf00      	nop
 80012cc:	3724      	adds	r7, #36	; 0x24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40013800 	.word	0x40013800
 80012e0:	40020000 	.word	0x40020000
 80012e4:	40020400 	.word	0x40020400
 80012e8:	40020800 	.word	0x40020800
 80012ec:	40020c00 	.word	0x40020c00
 80012f0:	40021000 	.word	0x40021000
 80012f4:	40021400 	.word	0x40021400
 80012f8:	40021800 	.word	0x40021800
 80012fc:	40021c00 	.word	0x40021c00
 8001300:	40013c00 	.word	0x40013c00

08001304 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001306:	b08f      	sub	sp, #60	; 0x3c
 8001308:	af0a      	add	r7, sp, #40	; 0x28
 800130a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d101      	bne.n	8001316 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e10f      	b.n	8001536 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001322:	b2db      	uxtb	r3, r3
 8001324:	2b00      	cmp	r3, #0
 8001326:	d106      	bne.n	8001336 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2200      	movs	r2, #0
 800132c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f00a fa3f 	bl	800b7b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2203      	movs	r2, #3
 800133a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001346:	2b00      	cmp	r3, #0
 8001348:	d102      	bne.n	8001350 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f002 facc 	bl	80038f2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	603b      	str	r3, [r7, #0]
 8001360:	687e      	ldr	r6, [r7, #4]
 8001362:	466d      	mov	r5, sp
 8001364:	f106 0410 	add.w	r4, r6, #16
 8001368:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800136a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800136c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800136e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001370:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001374:	e885 0003 	stmia.w	r5, {r0, r1}
 8001378:	1d33      	adds	r3, r6, #4
 800137a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800137c:	6838      	ldr	r0, [r7, #0]
 800137e:	f002 f9a3 	bl	80036c8 <USB_CoreInit>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d005      	beq.n	8001394 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2202      	movs	r2, #2
 800138c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e0d0      	b.n	8001536 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2100      	movs	r1, #0
 800139a:	4618      	mov	r0, r3
 800139c:	f002 faba 	bl	8003914 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013a0:	2300      	movs	r3, #0
 80013a2:	73fb      	strb	r3, [r7, #15]
 80013a4:	e04a      	b.n	800143c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013a6:	7bfa      	ldrb	r2, [r7, #15]
 80013a8:	6879      	ldr	r1, [r7, #4]
 80013aa:	4613      	mov	r3, r2
 80013ac:	00db      	lsls	r3, r3, #3
 80013ae:	4413      	add	r3, r2
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	440b      	add	r3, r1
 80013b4:	333d      	adds	r3, #61	; 0x3d
 80013b6:	2201      	movs	r2, #1
 80013b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013ba:	7bfa      	ldrb	r2, [r7, #15]
 80013bc:	6879      	ldr	r1, [r7, #4]
 80013be:	4613      	mov	r3, r2
 80013c0:	00db      	lsls	r3, r3, #3
 80013c2:	4413      	add	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	440b      	add	r3, r1
 80013c8:	333c      	adds	r3, #60	; 0x3c
 80013ca:	7bfa      	ldrb	r2, [r7, #15]
 80013cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013ce:	7bfa      	ldrb	r2, [r7, #15]
 80013d0:	7bfb      	ldrb	r3, [r7, #15]
 80013d2:	b298      	uxth	r0, r3
 80013d4:	6879      	ldr	r1, [r7, #4]
 80013d6:	4613      	mov	r3, r2
 80013d8:	00db      	lsls	r3, r3, #3
 80013da:	4413      	add	r3, r2
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	440b      	add	r3, r1
 80013e0:	3344      	adds	r3, #68	; 0x44
 80013e2:	4602      	mov	r2, r0
 80013e4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013e6:	7bfa      	ldrb	r2, [r7, #15]
 80013e8:	6879      	ldr	r1, [r7, #4]
 80013ea:	4613      	mov	r3, r2
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	4413      	add	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	440b      	add	r3, r1
 80013f4:	3340      	adds	r3, #64	; 0x40
 80013f6:	2200      	movs	r2, #0
 80013f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80013fa:	7bfa      	ldrb	r2, [r7, #15]
 80013fc:	6879      	ldr	r1, [r7, #4]
 80013fe:	4613      	mov	r3, r2
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	4413      	add	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	440b      	add	r3, r1
 8001408:	3348      	adds	r3, #72	; 0x48
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800140e:	7bfa      	ldrb	r2, [r7, #15]
 8001410:	6879      	ldr	r1, [r7, #4]
 8001412:	4613      	mov	r3, r2
 8001414:	00db      	lsls	r3, r3, #3
 8001416:	4413      	add	r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	440b      	add	r3, r1
 800141c:	334c      	adds	r3, #76	; 0x4c
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001422:	7bfa      	ldrb	r2, [r7, #15]
 8001424:	6879      	ldr	r1, [r7, #4]
 8001426:	4613      	mov	r3, r2
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	4413      	add	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	440b      	add	r3, r1
 8001430:	3354      	adds	r3, #84	; 0x54
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001436:	7bfb      	ldrb	r3, [r7, #15]
 8001438:	3301      	adds	r3, #1
 800143a:	73fb      	strb	r3, [r7, #15]
 800143c:	7bfa      	ldrb	r2, [r7, #15]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	429a      	cmp	r2, r3
 8001444:	d3af      	bcc.n	80013a6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001446:	2300      	movs	r3, #0
 8001448:	73fb      	strb	r3, [r7, #15]
 800144a:	e044      	b.n	80014d6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800144c:	7bfa      	ldrb	r2, [r7, #15]
 800144e:	6879      	ldr	r1, [r7, #4]
 8001450:	4613      	mov	r3, r2
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	4413      	add	r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	440b      	add	r3, r1
 800145a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800145e:	2200      	movs	r2, #0
 8001460:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001462:	7bfa      	ldrb	r2, [r7, #15]
 8001464:	6879      	ldr	r1, [r7, #4]
 8001466:	4613      	mov	r3, r2
 8001468:	00db      	lsls	r3, r3, #3
 800146a:	4413      	add	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	440b      	add	r3, r1
 8001470:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001474:	7bfa      	ldrb	r2, [r7, #15]
 8001476:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001478:	7bfa      	ldrb	r2, [r7, #15]
 800147a:	6879      	ldr	r1, [r7, #4]
 800147c:	4613      	mov	r3, r2
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	4413      	add	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	440b      	add	r3, r1
 8001486:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800148a:	2200      	movs	r2, #0
 800148c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800148e:	7bfa      	ldrb	r2, [r7, #15]
 8001490:	6879      	ldr	r1, [r7, #4]
 8001492:	4613      	mov	r3, r2
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	4413      	add	r3, r2
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	440b      	add	r3, r1
 800149c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014a4:	7bfa      	ldrb	r2, [r7, #15]
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	4613      	mov	r3, r2
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	4413      	add	r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	440b      	add	r3, r1
 80014b2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014ba:	7bfa      	ldrb	r2, [r7, #15]
 80014bc:	6879      	ldr	r1, [r7, #4]
 80014be:	4613      	mov	r3, r2
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	4413      	add	r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	440b      	add	r3, r1
 80014c8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014d0:	7bfb      	ldrb	r3, [r7, #15]
 80014d2:	3301      	adds	r3, #1
 80014d4:	73fb      	strb	r3, [r7, #15]
 80014d6:	7bfa      	ldrb	r2, [r7, #15]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d3b5      	bcc.n	800144c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	603b      	str	r3, [r7, #0]
 80014e6:	687e      	ldr	r6, [r7, #4]
 80014e8:	466d      	mov	r5, sp
 80014ea:	f106 0410 	add.w	r4, r6, #16
 80014ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80014fe:	1d33      	adds	r3, r6, #4
 8001500:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001502:	6838      	ldr	r0, [r7, #0]
 8001504:	f002 fa52 	bl	80039ac <USB_DevInit>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d005      	beq.n	800151a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2202      	movs	r2, #2
 8001512:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e00d      	b.n	8001536 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2201      	movs	r2, #1
 8001526:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4618      	mov	r0, r3
 8001530:	f003 fba1 	bl	8004c76 <USB_DevDisconnect>

  return HAL_OK;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800153e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b084      	sub	sp, #16
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001552:	2b01      	cmp	r3, #1
 8001554:	d101      	bne.n	800155a <HAL_PCD_Start+0x1c>
 8001556:	2302      	movs	r3, #2
 8001558:	e020      	b.n	800159c <HAL_PCD_Start+0x5e>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2201      	movs	r2, #1
 800155e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001566:	2b01      	cmp	r3, #1
 8001568:	d109      	bne.n	800157e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800156e:	2b01      	cmp	r3, #1
 8001570:	d005      	beq.n	800157e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001576:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4618      	mov	r0, r3
 8001584:	f002 f9a4 	bl	80038d0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4618      	mov	r0, r3
 800158e:	f003 fb51 	bl	8004c34 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800159a:	2300      	movs	r3, #0
}
 800159c:	4618      	mov	r0, r3
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80015a4:	b590      	push	{r4, r7, lr}
 80015a6:	b08d      	sub	sp, #52	; 0x34
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80015b2:	6a3b      	ldr	r3, [r7, #32]
 80015b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f003 fc0f 	bl	8004dde <USB_GetMode>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	f040 848a 	bne.w	8001edc <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f003 fb73 	bl	8004cb8 <USB_ReadInterrupts>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 8480 	beq.w	8001eda <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	0a1b      	lsrs	r3, r3, #8
 80015e4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f003 fb60 	bl	8004cb8 <USB_ReadInterrupts>
 80015f8:	4603      	mov	r3, r0
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d107      	bne.n	8001612 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	695a      	ldr	r2, [r3, #20]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f002 0202 	and.w	r2, r2, #2
 8001610:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4618      	mov	r0, r3
 8001618:	f003 fb4e 	bl	8004cb8 <USB_ReadInterrupts>
 800161c:	4603      	mov	r3, r0
 800161e:	f003 0310 	and.w	r3, r3, #16
 8001622:	2b10      	cmp	r3, #16
 8001624:	d161      	bne.n	80016ea <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	699a      	ldr	r2, [r3, #24]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 0210 	bic.w	r2, r2, #16
 8001634:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001636:	6a3b      	ldr	r3, [r7, #32]
 8001638:	6a1b      	ldr	r3, [r3, #32]
 800163a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	f003 020f 	and.w	r2, r3, #15
 8001642:	4613      	mov	r3, r2
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	4413      	add	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	4413      	add	r3, r2
 8001652:	3304      	adds	r3, #4
 8001654:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	0c5b      	lsrs	r3, r3, #17
 800165a:	f003 030f 	and.w	r3, r3, #15
 800165e:	2b02      	cmp	r3, #2
 8001660:	d124      	bne.n	80016ac <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001668:	4013      	ands	r3, r2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d035      	beq.n	80016da <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	091b      	lsrs	r3, r3, #4
 8001676:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001678:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800167c:	b29b      	uxth	r3, r3
 800167e:	461a      	mov	r2, r3
 8001680:	6a38      	ldr	r0, [r7, #32]
 8001682:	f003 f985 	bl	8004990 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	691a      	ldr	r2, [r3, #16]
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	091b      	lsrs	r3, r3, #4
 800168e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001692:	441a      	add	r2, r3
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	6a1a      	ldr	r2, [r3, #32]
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	091b      	lsrs	r3, r3, #4
 80016a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016a4:	441a      	add	r2, r3
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	621a      	str	r2, [r3, #32]
 80016aa:	e016      	b.n	80016da <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	0c5b      	lsrs	r3, r3, #17
 80016b0:	f003 030f 	and.w	r3, r3, #15
 80016b4:	2b06      	cmp	r3, #6
 80016b6:	d110      	bne.n	80016da <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80016be:	2208      	movs	r2, #8
 80016c0:	4619      	mov	r1, r3
 80016c2:	6a38      	ldr	r0, [r7, #32]
 80016c4:	f003 f964 	bl	8004990 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	6a1a      	ldr	r2, [r3, #32]
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	091b      	lsrs	r3, r3, #4
 80016d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016d4:	441a      	add	r2, r3
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	699a      	ldr	r2, [r3, #24]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f042 0210 	orr.w	r2, r2, #16
 80016e8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f003 fae2 	bl	8004cb8 <USB_ReadInterrupts>
 80016f4:	4603      	mov	r3, r0
 80016f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016fa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80016fe:	f040 80a7 	bne.w	8001850 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001702:	2300      	movs	r3, #0
 8001704:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4618      	mov	r0, r3
 800170c:	f003 fae7 	bl	8004cde <USB_ReadDevAllOutEpInterrupt>
 8001710:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001712:	e099      	b.n	8001848 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	2b00      	cmp	r3, #0
 800171c:	f000 808e 	beq.w	800183c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	4611      	mov	r1, r2
 800172a:	4618      	mov	r0, r3
 800172c:	f003 fb0b 	bl	8004d46 <USB_ReadDevOutEPInterrupt>
 8001730:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	f003 0301 	and.w	r3, r3, #1
 8001738:	2b00      	cmp	r3, #0
 800173a:	d00c      	beq.n	8001756 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800173c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173e:	015a      	lsls	r2, r3, #5
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	4413      	add	r3, r2
 8001744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001748:	461a      	mov	r2, r3
 800174a:	2301      	movs	r3, #1
 800174c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800174e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f000 fec3 	bl	80024dc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	f003 0308 	and.w	r3, r3, #8
 800175c:	2b00      	cmp	r3, #0
 800175e:	d00c      	beq.n	800177a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001762:	015a      	lsls	r2, r3, #5
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	4413      	add	r3, r2
 8001768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800176c:	461a      	mov	r2, r3
 800176e:	2308      	movs	r3, #8
 8001770:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001772:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f000 ff99 	bl	80026ac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	f003 0310 	and.w	r3, r3, #16
 8001780:	2b00      	cmp	r3, #0
 8001782:	d008      	beq.n	8001796 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001786:	015a      	lsls	r2, r3, #5
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	4413      	add	r3, r2
 800178c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001790:	461a      	mov	r2, r3
 8001792:	2310      	movs	r3, #16
 8001794:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	2b00      	cmp	r3, #0
 800179e:	d030      	beq.n	8001802 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80017a0:	6a3b      	ldr	r3, [r7, #32]
 80017a2:	695b      	ldr	r3, [r3, #20]
 80017a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017a8:	2b80      	cmp	r3, #128	; 0x80
 80017aa:	d109      	bne.n	80017c0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	69fa      	ldr	r2, [r7, #28]
 80017b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017be:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80017c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017c2:	4613      	mov	r3, r2
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	4413      	add	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	4413      	add	r3, r2
 80017d2:	3304      	adds	r3, #4
 80017d4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	78db      	ldrb	r3, [r3, #3]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d108      	bne.n	80017f0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	2200      	movs	r2, #0
 80017e2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80017e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	4619      	mov	r1, r3
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f00a f8f6 	bl	800b9dc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80017f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f2:	015a      	lsls	r2, r3, #5
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	4413      	add	r3, r2
 80017f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017fc:	461a      	mov	r2, r3
 80017fe:	2302      	movs	r3, #2
 8001800:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	f003 0320 	and.w	r3, r3, #32
 8001808:	2b00      	cmp	r3, #0
 800180a:	d008      	beq.n	800181e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800180c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180e:	015a      	lsls	r2, r3, #5
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	4413      	add	r3, r2
 8001814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001818:	461a      	mov	r2, r3
 800181a:	2320      	movs	r3, #32
 800181c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d009      	beq.n	800183c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182a:	015a      	lsls	r2, r3, #5
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	4413      	add	r3, r2
 8001830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001834:	461a      	mov	r2, r3
 8001836:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800183a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	3301      	adds	r3, #1
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001844:	085b      	lsrs	r3, r3, #1
 8001846:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800184a:	2b00      	cmp	r3, #0
 800184c:	f47f af62 	bne.w	8001714 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f003 fa2f 	bl	8004cb8 <USB_ReadInterrupts>
 800185a:	4603      	mov	r3, r0
 800185c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001860:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001864:	f040 80db 	bne.w	8001a1e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f003 fa50 	bl	8004d12 <USB_ReadDevAllInEpInterrupt>
 8001872:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001874:	2300      	movs	r3, #0
 8001876:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001878:	e0cd      	b.n	8001a16 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800187a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800187c:	f003 0301 	and.w	r3, r3, #1
 8001880:	2b00      	cmp	r3, #0
 8001882:	f000 80c2 	beq.w	8001a0a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800188c:	b2d2      	uxtb	r2, r2
 800188e:	4611      	mov	r1, r2
 8001890:	4618      	mov	r0, r3
 8001892:	f003 fa76 	bl	8004d82 <USB_ReadDevInEPInterrupt>
 8001896:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d057      	beq.n	8001952 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	f003 030f 	and.w	r3, r3, #15
 80018a8:	2201      	movs	r2, #1
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	43db      	mvns	r3, r3
 80018bc:	69f9      	ldr	r1, [r7, #28]
 80018be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80018c2:	4013      	ands	r3, r2
 80018c4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80018c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c8:	015a      	lsls	r2, r3, #5
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	4413      	add	r3, r2
 80018ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018d2:	461a      	mov	r2, r3
 80018d4:	2301      	movs	r3, #1
 80018d6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	691b      	ldr	r3, [r3, #16]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d132      	bne.n	8001946 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80018e0:	6879      	ldr	r1, [r7, #4]
 80018e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018e4:	4613      	mov	r3, r2
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	4413      	add	r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	440b      	add	r3, r1
 80018ee:	334c      	adds	r3, #76	; 0x4c
 80018f0:	6819      	ldr	r1, [r3, #0]
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018f6:	4613      	mov	r3, r2
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	4413      	add	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4403      	add	r3, r0
 8001900:	3348      	adds	r3, #72	; 0x48
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4419      	add	r1, r3
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800190a:	4613      	mov	r3, r2
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	4413      	add	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4403      	add	r3, r0
 8001914:	334c      	adds	r3, #76	; 0x4c
 8001916:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191a:	2b00      	cmp	r3, #0
 800191c:	d113      	bne.n	8001946 <HAL_PCD_IRQHandler+0x3a2>
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001922:	4613      	mov	r3, r2
 8001924:	00db      	lsls	r3, r3, #3
 8001926:	4413      	add	r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	440b      	add	r3, r1
 800192c:	3354      	adds	r3, #84	; 0x54
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d108      	bne.n	8001946 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6818      	ldr	r0, [r3, #0]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800193e:	461a      	mov	r2, r3
 8001940:	2101      	movs	r1, #1
 8001942:	f003 fa7d 	bl	8004e40 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	b2db      	uxtb	r3, r3
 800194a:	4619      	mov	r1, r3
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f009 ffc0 	bl	800b8d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	f003 0308 	and.w	r3, r3, #8
 8001958:	2b00      	cmp	r3, #0
 800195a:	d008      	beq.n	800196e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195e:	015a      	lsls	r2, r3, #5
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	4413      	add	r3, r2
 8001964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001968:	461a      	mov	r2, r3
 800196a:	2308      	movs	r3, #8
 800196c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	f003 0310 	and.w	r3, r3, #16
 8001974:	2b00      	cmp	r3, #0
 8001976:	d008      	beq.n	800198a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197a:	015a      	lsls	r2, r3, #5
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	4413      	add	r3, r2
 8001980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001984:	461a      	mov	r2, r3
 8001986:	2310      	movs	r3, #16
 8001988:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001990:	2b00      	cmp	r3, #0
 8001992:	d008      	beq.n	80019a6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001996:	015a      	lsls	r2, r3, #5
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	4413      	add	r3, r2
 800199c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019a0:	461a      	mov	r2, r3
 80019a2:	2340      	movs	r3, #64	; 0x40
 80019a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d023      	beq.n	80019f8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80019b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019b2:	6a38      	ldr	r0, [r7, #32]
 80019b4:	f002 f95e 	bl	8003c74 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80019b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ba:	4613      	mov	r3, r2
 80019bc:	00db      	lsls	r3, r3, #3
 80019be:	4413      	add	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	3338      	adds	r3, #56	; 0x38
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	4413      	add	r3, r2
 80019c8:	3304      	adds	r3, #4
 80019ca:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	78db      	ldrb	r3, [r3, #3]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d108      	bne.n	80019e6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	2200      	movs	r2, #0
 80019d8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80019da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	4619      	mov	r1, r3
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f00a f80d 	bl	800ba00 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80019e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e8:	015a      	lsls	r2, r3, #5
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	4413      	add	r3, r2
 80019ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019f2:	461a      	mov	r2, r3
 80019f4:	2302      	movs	r3, #2
 80019f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d003      	beq.n	8001a0a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001a02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f000 fcdb 	bl	80023c0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a12:	085b      	lsrs	r3, r3, #1
 8001a14:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f47f af2e 	bne.w	800187a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f003 f948 	bl	8004cb8 <USB_ReadInterrupts>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001a2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a32:	d122      	bne.n	8001a7a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	69fa      	ldr	r2, [r7, #28]
 8001a3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a42:	f023 0301 	bic.w	r3, r3, #1
 8001a46:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d108      	bne.n	8001a64 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 fec3 	bl	80027e8 <HAL_PCDEx_LPM_Callback>
 8001a62:	e002      	b.n	8001a6a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f009 ffab 	bl	800b9c0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	695a      	ldr	r2, [r3, #20]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001a78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f003 f91a 	bl	8004cb8 <USB_ReadInterrupts>
 8001a84:	4603      	mov	r3, r0
 8001a86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a8e:	d112      	bne.n	8001ab6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d102      	bne.n	8001aa6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f009 ff67 	bl	800b974 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	695a      	ldr	r2, [r3, #20]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001ab4:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f003 f8fc 	bl	8004cb8 <USB_ReadInterrupts>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ac6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001aca:	f040 80b7 	bne.w	8001c3c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	69fa      	ldr	r2, [r7, #28]
 8001ad8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001adc:	f023 0301 	bic.w	r3, r3, #1
 8001ae0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2110      	movs	r1, #16
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f002 f8c3 	bl	8003c74 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001aee:	2300      	movs	r3, #0
 8001af0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001af2:	e046      	b.n	8001b82 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001af6:	015a      	lsls	r2, r3, #5
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	4413      	add	r3, r2
 8001afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b00:	461a      	mov	r2, r3
 8001b02:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001b06:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b0a:	015a      	lsls	r2, r3, #5
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	4413      	add	r3, r2
 8001b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b18:	0151      	lsls	r1, r2, #5
 8001b1a:	69fa      	ldr	r2, [r7, #28]
 8001b1c:	440a      	add	r2, r1
 8001b1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001b22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b26:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b2a:	015a      	lsls	r2, r3, #5
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	4413      	add	r3, r2
 8001b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b34:	461a      	mov	r2, r3
 8001b36:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001b3a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b3e:	015a      	lsls	r2, r3, #5
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	4413      	add	r3, r2
 8001b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b4c:	0151      	lsls	r1, r2, #5
 8001b4e:	69fa      	ldr	r2, [r7, #28]
 8001b50:	440a      	add	r2, r1
 8001b52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001b56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b5a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b5e:	015a      	lsls	r2, r3, #5
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	4413      	add	r3, r2
 8001b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b6c:	0151      	lsls	r1, r2, #5
 8001b6e:	69fa      	ldr	r2, [r7, #28]
 8001b70:	440a      	add	r2, r1
 8001b72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001b76:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001b7a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b7e:	3301      	adds	r3, #1
 8001b80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d3b3      	bcc.n	8001af4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b92:	69db      	ldr	r3, [r3, #28]
 8001b94:	69fa      	ldr	r2, [r7, #28]
 8001b96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b9a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001b9e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d016      	beq.n	8001bd6 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001bb2:	69fa      	ldr	r2, [r7, #28]
 8001bb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bb8:	f043 030b 	orr.w	r3, r3, #11
 8001bbc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc8:	69fa      	ldr	r2, [r7, #28]
 8001bca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bce:	f043 030b 	orr.w	r3, r3, #11
 8001bd2:	6453      	str	r3, [r2, #68]	; 0x44
 8001bd4:	e015      	b.n	8001c02 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	69fa      	ldr	r2, [r7, #28]
 8001be0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001be4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001be8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001bec:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	69fa      	ldr	r2, [r7, #28]
 8001bf8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bfc:	f043 030b 	orr.w	r3, r3, #11
 8001c00:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	69fa      	ldr	r2, [r7, #28]
 8001c0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c10:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001c14:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6818      	ldr	r0, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001c26:	461a      	mov	r2, r3
 8001c28:	f003 f90a 	bl	8004e40 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	695a      	ldr	r2, [r3, #20]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001c3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f003 f839 	bl	8004cb8 <USB_ReadInterrupts>
 8001c46:	4603      	mov	r3, r0
 8001c48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c50:	d124      	bne.n	8001c9c <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f003 f8cf 	bl	8004dfa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f002 f884 	bl	8003d6e <USB_GetDevSpeed>
 8001c66:	4603      	mov	r3, r0
 8001c68:	461a      	mov	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681c      	ldr	r4, [r3, #0]
 8001c72:	f001 fa29 	bl	80030c8 <HAL_RCC_GetHCLKFreq>
 8001c76:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	461a      	mov	r2, r3
 8001c80:	4620      	mov	r0, r4
 8001c82:	f001 fd83 	bl	800378c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f009 fe4b 	bl	800b922 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	695a      	ldr	r2, [r3, #20]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001c9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f003 f809 	bl	8004cb8 <USB_ReadInterrupts>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	f003 0308 	and.w	r3, r3, #8
 8001cac:	2b08      	cmp	r3, #8
 8001cae:	d10a      	bne.n	8001cc6 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f009 fe28 	bl	800b906 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	695a      	ldr	r2, [r3, #20]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f002 0208 	and.w	r2, r2, #8
 8001cc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f002 fff4 	bl	8004cb8 <USB_ReadInterrupts>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cd6:	2b80      	cmp	r3, #128	; 0x80
 8001cd8:	d122      	bne.n	8001d20 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001cda:	6a3b      	ldr	r3, [r7, #32]
 8001cdc:	699b      	ldr	r3, [r3, #24]
 8001cde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ce2:	6a3b      	ldr	r3, [r7, #32]
 8001ce4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8001cea:	e014      	b.n	8001d16 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001cec:	6879      	ldr	r1, [r7, #4]
 8001cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	4413      	add	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	440b      	add	r3, r1
 8001cfa:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d105      	bne.n	8001d10 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	4619      	mov	r1, r3
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 fb27 	bl	800235e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d12:	3301      	adds	r3, #1
 8001d14:	627b      	str	r3, [r7, #36]	; 0x24
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d3e5      	bcc.n	8001cec <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f002 ffc7 	bl	8004cb8 <USB_ReadInterrupts>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d34:	d13b      	bne.n	8001dae <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d36:	2301      	movs	r3, #1
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
 8001d3a:	e02b      	b.n	8001d94 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3e:	015a      	lsls	r2, r3, #5
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	4413      	add	r3, r2
 8001d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d4c:	6879      	ldr	r1, [r7, #4]
 8001d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d50:	4613      	mov	r3, r2
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	4413      	add	r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	440b      	add	r3, r1
 8001d5a:	3340      	adds	r3, #64	; 0x40
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d115      	bne.n	8001d8e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001d62:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	da12      	bge.n	8001d8e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001d68:	6879      	ldr	r1, [r7, #4]
 8001d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	4413      	add	r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	440b      	add	r3, r1
 8001d76:	333f      	adds	r3, #63	; 0x3f
 8001d78:	2201      	movs	r2, #1
 8001d7a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	4619      	mov	r1, r3
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 fae8 	bl	800235e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d90:	3301      	adds	r3, #1
 8001d92:	627b      	str	r3, [r7, #36]	; 0x24
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d3ce      	bcc.n	8001d3c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	695a      	ldr	r2, [r3, #20]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001dac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f002 ff80 	bl	8004cb8 <USB_ReadInterrupts>
 8001db8:	4603      	mov	r3, r0
 8001dba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001dc2:	d155      	bne.n	8001e70 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8001dc8:	e045      	b.n	8001e56 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dcc:	015a      	lsls	r2, r3, #5
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dde:	4613      	mov	r3, r2
 8001de0:	00db      	lsls	r3, r3, #3
 8001de2:	4413      	add	r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	440b      	add	r3, r1
 8001de8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d12e      	bne.n	8001e50 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001df2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	da2b      	bge.n	8001e50 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001e04:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d121      	bne.n	8001e50 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001e0c:	6879      	ldr	r1, [r7, #4]
 8001e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e10:	4613      	mov	r3, r2
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	4413      	add	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	440b      	add	r3, r1
 8001e1a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001e1e:	2201      	movs	r2, #1
 8001e20:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001e22:	6a3b      	ldr	r3, [r7, #32]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001e2a:	6a3b      	ldr	r3, [r7, #32]
 8001e2c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001e2e:	6a3b      	ldr	r3, [r7, #32]
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10a      	bne.n	8001e50 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	69fa      	ldr	r2, [r7, #28]
 8001e44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e4c:	6053      	str	r3, [r2, #4]
            break;
 8001e4e:	e007      	b.n	8001e60 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e52:	3301      	adds	r3, #1
 8001e54:	627b      	str	r3, [r7, #36]	; 0x24
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d3b4      	bcc.n	8001dca <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	695a      	ldr	r2, [r3, #20]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001e6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f002 ff1f 	bl	8004cb8 <USB_ReadInterrupts>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e84:	d10a      	bne.n	8001e9c <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f009 fdcc 	bl	800ba24 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	695a      	ldr	r2, [r3, #20]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001e9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f002 ff09 	bl	8004cb8 <USB_ReadInterrupts>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	f003 0304 	and.w	r3, r3, #4
 8001eac:	2b04      	cmp	r3, #4
 8001eae:	d115      	bne.n	8001edc <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	f003 0304 	and.w	r3, r3, #4
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d002      	beq.n	8001ec8 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f009 fdbc 	bl	800ba40 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6859      	ldr	r1, [r3, #4]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	605a      	str	r2, [r3, #4]
 8001ed8:	e000      	b.n	8001edc <HAL_PCD_IRQHandler+0x938>
      return;
 8001eda:	bf00      	nop
    }
  }
}
 8001edc:	3734      	adds	r7, #52	; 0x34
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd90      	pop	{r4, r7, pc}

08001ee2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b082      	sub	sp, #8
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
 8001eea:	460b      	mov	r3, r1
 8001eec:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d101      	bne.n	8001efc <HAL_PCD_SetAddress+0x1a>
 8001ef8:	2302      	movs	r3, #2
 8001efa:	e013      	b.n	8001f24 <HAL_PCD_SetAddress+0x42>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	78fa      	ldrb	r2, [r7, #3]
 8001f08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	78fa      	ldrb	r2, [r7, #3]
 8001f12:	4611      	mov	r1, r2
 8001f14:	4618      	mov	r0, r3
 8001f16:	f002 fe67 	bl	8004be8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	4608      	mov	r0, r1
 8001f36:	4611      	mov	r1, r2
 8001f38:	461a      	mov	r2, r3
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	70fb      	strb	r3, [r7, #3]
 8001f3e:	460b      	mov	r3, r1
 8001f40:	803b      	strh	r3, [r7, #0]
 8001f42:	4613      	mov	r3, r2
 8001f44:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001f46:	2300      	movs	r3, #0
 8001f48:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	da0f      	bge.n	8001f72 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f52:	78fb      	ldrb	r3, [r7, #3]
 8001f54:	f003 020f 	and.w	r2, r3, #15
 8001f58:	4613      	mov	r3, r2
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	4413      	add	r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	3338      	adds	r3, #56	; 0x38
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	4413      	add	r3, r2
 8001f66:	3304      	adds	r3, #4
 8001f68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	705a      	strb	r2, [r3, #1]
 8001f70:	e00f      	b.n	8001f92 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f72:	78fb      	ldrb	r3, [r7, #3]
 8001f74:	f003 020f 	and.w	r2, r3, #15
 8001f78:	4613      	mov	r3, r2
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	4413      	add	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	4413      	add	r3, r2
 8001f88:	3304      	adds	r3, #4
 8001f8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001f92:	78fb      	ldrb	r3, [r7, #3]
 8001f94:	f003 030f 	and.w	r3, r3, #15
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001f9e:	883a      	ldrh	r2, [r7, #0]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	78ba      	ldrb	r2, [r7, #2]
 8001fa8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	785b      	ldrb	r3, [r3, #1]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d004      	beq.n	8001fbc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001fbc:	78bb      	ldrb	r3, [r7, #2]
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d102      	bne.n	8001fc8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d101      	bne.n	8001fd6 <HAL_PCD_EP_Open+0xaa>
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	e00e      	b.n	8001ff4 <HAL_PCD_EP_Open+0xc8>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68f9      	ldr	r1, [r7, #12]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f001 fee7 	bl	8003db8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001ff2:	7afb      	ldrb	r3, [r7, #11]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3710      	adds	r7, #16
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	460b      	mov	r3, r1
 8002006:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002008:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800200c:	2b00      	cmp	r3, #0
 800200e:	da0f      	bge.n	8002030 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002010:	78fb      	ldrb	r3, [r7, #3]
 8002012:	f003 020f 	and.w	r2, r3, #15
 8002016:	4613      	mov	r3, r2
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	4413      	add	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	3338      	adds	r3, #56	; 0x38
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	4413      	add	r3, r2
 8002024:	3304      	adds	r3, #4
 8002026:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2201      	movs	r2, #1
 800202c:	705a      	strb	r2, [r3, #1]
 800202e:	e00f      	b.n	8002050 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002030:	78fb      	ldrb	r3, [r7, #3]
 8002032:	f003 020f 	and.w	r2, r3, #15
 8002036:	4613      	mov	r3, r2
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	4413      	add	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	4413      	add	r3, r2
 8002046:	3304      	adds	r3, #4
 8002048:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2200      	movs	r2, #0
 800204e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002050:	78fb      	ldrb	r3, [r7, #3]
 8002052:	f003 030f 	and.w	r3, r3, #15
 8002056:	b2da      	uxtb	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002062:	2b01      	cmp	r3, #1
 8002064:	d101      	bne.n	800206a <HAL_PCD_EP_Close+0x6e>
 8002066:	2302      	movs	r3, #2
 8002068:	e00e      	b.n	8002088 <HAL_PCD_EP_Close+0x8c>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68f9      	ldr	r1, [r7, #12]
 8002078:	4618      	mov	r0, r3
 800207a:	f001 ff25 	bl	8003ec8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	607a      	str	r2, [r7, #4]
 800209a:	603b      	str	r3, [r7, #0]
 800209c:	460b      	mov	r3, r1
 800209e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020a0:	7afb      	ldrb	r3, [r7, #11]
 80020a2:	f003 020f 	and.w	r2, r3, #15
 80020a6:	4613      	mov	r3, r2
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	4413      	add	r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	4413      	add	r3, r2
 80020b6:	3304      	adds	r3, #4
 80020b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	2200      	movs	r2, #0
 80020ca:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	2200      	movs	r2, #0
 80020d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020d2:	7afb      	ldrb	r3, [r7, #11]
 80020d4:	f003 030f 	and.w	r3, r3, #15
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d102      	bne.n	80020ec <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020ec:	7afb      	ldrb	r3, [r7, #11]
 80020ee:	f003 030f 	and.w	r3, r3, #15
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d109      	bne.n	800210a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6818      	ldr	r0, [r3, #0]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	461a      	mov	r2, r3
 8002102:	6979      	ldr	r1, [r7, #20]
 8002104:	f002 fa04 	bl	8004510 <USB_EP0StartXfer>
 8002108:	e008      	b.n	800211c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6818      	ldr	r0, [r3, #0]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	b2db      	uxtb	r3, r3
 8002114:	461a      	mov	r2, r3
 8002116:	6979      	ldr	r1, [r7, #20]
 8002118:	f001 ffb2 	bl	8004080 <USB_EPStartXfer>
  }

  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3718      	adds	r7, #24
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002126:	b480      	push	{r7}
 8002128:	b083      	sub	sp, #12
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
 800212e:	460b      	mov	r3, r1
 8002130:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002132:	78fb      	ldrb	r3, [r7, #3]
 8002134:	f003 020f 	and.w	r2, r3, #15
 8002138:	6879      	ldr	r1, [r7, #4]
 800213a:	4613      	mov	r3, r2
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	4413      	add	r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	440b      	add	r3, r1
 8002144:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002148:	681b      	ldr	r3, [r3, #0]
}
 800214a:	4618      	mov	r0, r3
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b086      	sub	sp, #24
 800215a:	af00      	add	r7, sp, #0
 800215c:	60f8      	str	r0, [r7, #12]
 800215e:	607a      	str	r2, [r7, #4]
 8002160:	603b      	str	r3, [r7, #0]
 8002162:	460b      	mov	r3, r1
 8002164:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002166:	7afb      	ldrb	r3, [r7, #11]
 8002168:	f003 020f 	and.w	r2, r3, #15
 800216c:	4613      	mov	r3, r2
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	4413      	add	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	3338      	adds	r3, #56	; 0x38
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	4413      	add	r3, r2
 800217a:	3304      	adds	r3, #4
 800217c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	2200      	movs	r2, #0
 800218e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	2201      	movs	r2, #1
 8002194:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002196:	7afb      	ldrb	r3, [r7, #11]
 8002198:	f003 030f 	and.w	r3, r3, #15
 800219c:	b2da      	uxtb	r2, r3
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d102      	bne.n	80021b0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021b0:	7afb      	ldrb	r3, [r7, #11]
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d109      	bne.n	80021ce <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6818      	ldr	r0, [r3, #0]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	461a      	mov	r2, r3
 80021c6:	6979      	ldr	r1, [r7, #20]
 80021c8:	f002 f9a2 	bl	8004510 <USB_EP0StartXfer>
 80021cc:	e008      	b.n	80021e0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6818      	ldr	r0, [r3, #0]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	461a      	mov	r2, r3
 80021da:	6979      	ldr	r1, [r7, #20]
 80021dc:	f001 ff50 	bl	8004080 <USB_EPStartXfer>
  }

  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3718      	adds	r7, #24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b084      	sub	sp, #16
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	460b      	mov	r3, r1
 80021f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80021f6:	78fb      	ldrb	r3, [r7, #3]
 80021f8:	f003 020f 	and.w	r2, r3, #15
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	429a      	cmp	r2, r3
 8002202:	d901      	bls.n	8002208 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e050      	b.n	80022aa <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002208:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800220c:	2b00      	cmp	r3, #0
 800220e:	da0f      	bge.n	8002230 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002210:	78fb      	ldrb	r3, [r7, #3]
 8002212:	f003 020f 	and.w	r2, r3, #15
 8002216:	4613      	mov	r3, r2
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	4413      	add	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	3338      	adds	r3, #56	; 0x38
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	4413      	add	r3, r2
 8002224:	3304      	adds	r3, #4
 8002226:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2201      	movs	r2, #1
 800222c:	705a      	strb	r2, [r3, #1]
 800222e:	e00d      	b.n	800224c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002230:	78fa      	ldrb	r2, [r7, #3]
 8002232:	4613      	mov	r3, r2
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	4413      	add	r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	4413      	add	r3, r2
 8002242:	3304      	adds	r3, #4
 8002244:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2200      	movs	r2, #0
 800224a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2201      	movs	r2, #1
 8002250:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002252:	78fb      	ldrb	r3, [r7, #3]
 8002254:	f003 030f 	and.w	r3, r3, #15
 8002258:	b2da      	uxtb	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002264:	2b01      	cmp	r3, #1
 8002266:	d101      	bne.n	800226c <HAL_PCD_EP_SetStall+0x82>
 8002268:	2302      	movs	r3, #2
 800226a:	e01e      	b.n	80022aa <HAL_PCD_EP_SetStall+0xc0>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	68f9      	ldr	r1, [r7, #12]
 800227a:	4618      	mov	r0, r3
 800227c:	f002 fbe0 	bl	8004a40 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002280:	78fb      	ldrb	r3, [r7, #3]
 8002282:	f003 030f 	and.w	r3, r3, #15
 8002286:	2b00      	cmp	r3, #0
 8002288:	d10a      	bne.n	80022a0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6818      	ldr	r0, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	b2d9      	uxtb	r1, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800229a:	461a      	mov	r2, r3
 800229c:	f002 fdd0 	bl	8004e40 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b084      	sub	sp, #16
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
 80022ba:	460b      	mov	r3, r1
 80022bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80022be:	78fb      	ldrb	r3, [r7, #3]
 80022c0:	f003 020f 	and.w	r2, r3, #15
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d901      	bls.n	80022d0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e042      	b.n	8002356 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	da0f      	bge.n	80022f8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022d8:	78fb      	ldrb	r3, [r7, #3]
 80022da:	f003 020f 	and.w	r2, r3, #15
 80022de:	4613      	mov	r3, r2
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	4413      	add	r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	3338      	adds	r3, #56	; 0x38
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	4413      	add	r3, r2
 80022ec:	3304      	adds	r3, #4
 80022ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2201      	movs	r2, #1
 80022f4:	705a      	strb	r2, [r3, #1]
 80022f6:	e00f      	b.n	8002318 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022f8:	78fb      	ldrb	r3, [r7, #3]
 80022fa:	f003 020f 	and.w	r2, r3, #15
 80022fe:	4613      	mov	r3, r2
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	4413      	add	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	4413      	add	r3, r2
 800230e:	3304      	adds	r3, #4
 8002310:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2200      	movs	r2, #0
 8002316:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2200      	movs	r2, #0
 800231c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800231e:	78fb      	ldrb	r3, [r7, #3]
 8002320:	f003 030f 	and.w	r3, r3, #15
 8002324:	b2da      	uxtb	r2, r3
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002330:	2b01      	cmp	r3, #1
 8002332:	d101      	bne.n	8002338 <HAL_PCD_EP_ClrStall+0x86>
 8002334:	2302      	movs	r3, #2
 8002336:	e00e      	b.n	8002356 <HAL_PCD_EP_ClrStall+0xa4>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68f9      	ldr	r1, [r7, #12]
 8002346:	4618      	mov	r0, r3
 8002348:	f002 fbe8 	bl	8004b1c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b084      	sub	sp, #16
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
 8002366:	460b      	mov	r3, r1
 8002368:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800236a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800236e:	2b00      	cmp	r3, #0
 8002370:	da0c      	bge.n	800238c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002372:	78fb      	ldrb	r3, [r7, #3]
 8002374:	f003 020f 	and.w	r2, r3, #15
 8002378:	4613      	mov	r3, r2
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	4413      	add	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	3338      	adds	r3, #56	; 0x38
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	4413      	add	r3, r2
 8002386:	3304      	adds	r3, #4
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	e00c      	b.n	80023a6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800238c:	78fb      	ldrb	r3, [r7, #3]
 800238e:	f003 020f 	and.w	r2, r3, #15
 8002392:	4613      	mov	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	4413      	add	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	4413      	add	r3, r2
 80023a2:	3304      	adds	r3, #4
 80023a4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68f9      	ldr	r1, [r7, #12]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f002 fa07 	bl	80047c0 <USB_EPStopXfer>
 80023b2:	4603      	mov	r3, r0
 80023b4:	72fb      	strb	r3, [r7, #11]

  return ret;
 80023b6:	7afb      	ldrb	r3, [r7, #11]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b08a      	sub	sp, #40	; 0x28
 80023c4:	af02      	add	r7, sp, #8
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	4613      	mov	r3, r2
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	4413      	add	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	3338      	adds	r3, #56	; 0x38
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	4413      	add	r3, r2
 80023e4:	3304      	adds	r3, #4
 80023e6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6a1a      	ldr	r2, [r3, #32]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d901      	bls.n	80023f8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e06c      	b.n	80024d2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	699a      	ldr	r2, [r3, #24]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	69fa      	ldr	r2, [r7, #28]
 800240a:	429a      	cmp	r2, r3
 800240c:	d902      	bls.n	8002414 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	3303      	adds	r3, #3
 8002418:	089b      	lsrs	r3, r3, #2
 800241a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800241c:	e02b      	b.n	8002476 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	699a      	ldr	r2, [r3, #24]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	69fa      	ldr	r2, [r7, #28]
 8002430:	429a      	cmp	r2, r3
 8002432:	d902      	bls.n	800243a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	3303      	adds	r3, #3
 800243e:	089b      	lsrs	r3, r3, #2
 8002440:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6919      	ldr	r1, [r3, #16]
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	b2da      	uxtb	r2, r3
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002452:	b2db      	uxtb	r3, r3
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	4603      	mov	r3, r0
 8002458:	6978      	ldr	r0, [r7, #20]
 800245a:	f002 fa5b 	bl	8004914 <USB_WritePacket>

    ep->xfer_buff  += len;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	691a      	ldr	r2, [r3, #16]
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	441a      	add	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6a1a      	ldr	r2, [r3, #32]
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	441a      	add	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	015a      	lsls	r2, r3, #5
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	4413      	add	r3, r2
 800247e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	b29b      	uxth	r3, r3
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	429a      	cmp	r2, r3
 800248a:	d809      	bhi.n	80024a0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6a1a      	ldr	r2, [r3, #32]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002494:	429a      	cmp	r2, r3
 8002496:	d203      	bcs.n	80024a0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1be      	bne.n	800241e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	699a      	ldr	r2, [r3, #24]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d811      	bhi.n	80024d0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	2201      	movs	r2, #1
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	43db      	mvns	r3, r3
 80024c6:	6939      	ldr	r1, [r7, #16]
 80024c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80024cc:	4013      	ands	r3, r2
 80024ce:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3720      	adds	r7, #32
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
	...

080024dc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b088      	sub	sp, #32
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	333c      	adds	r3, #60	; 0x3c
 80024f4:	3304      	adds	r3, #4
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	015a      	lsls	r2, r3, #5
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	4413      	add	r3, r2
 8002502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d17b      	bne.n	800260a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	f003 0308 	and.w	r3, r3, #8
 8002518:	2b00      	cmp	r3, #0
 800251a:	d015      	beq.n	8002548 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	4a61      	ldr	r2, [pc, #388]	; (80026a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002520:	4293      	cmp	r3, r2
 8002522:	f240 80b9 	bls.w	8002698 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800252c:	2b00      	cmp	r3, #0
 800252e:	f000 80b3 	beq.w	8002698 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	015a      	lsls	r2, r3, #5
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	4413      	add	r3, r2
 800253a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800253e:	461a      	mov	r2, r3
 8002540:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002544:	6093      	str	r3, [r2, #8]
 8002546:	e0a7      	b.n	8002698 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	f003 0320 	and.w	r3, r3, #32
 800254e:	2b00      	cmp	r3, #0
 8002550:	d009      	beq.n	8002566 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	015a      	lsls	r2, r3, #5
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	4413      	add	r3, r2
 800255a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800255e:	461a      	mov	r2, r3
 8002560:	2320      	movs	r3, #32
 8002562:	6093      	str	r3, [r2, #8]
 8002564:	e098      	b.n	8002698 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800256c:	2b00      	cmp	r3, #0
 800256e:	f040 8093 	bne.w	8002698 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	4a4b      	ldr	r2, [pc, #300]	; (80026a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d90f      	bls.n	800259a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00a      	beq.n	800259a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	015a      	lsls	r2, r3, #5
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	4413      	add	r3, r2
 800258c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002590:	461a      	mov	r2, r3
 8002592:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002596:	6093      	str	r3, [r2, #8]
 8002598:	e07e      	b.n	8002698 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	4613      	mov	r3, r2
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	4413      	add	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	4413      	add	r3, r2
 80025ac:	3304      	adds	r3, #4
 80025ae:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	69da      	ldr	r2, [r3, #28]
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	0159      	lsls	r1, r3, #5
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	440b      	add	r3, r1
 80025bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025c6:	1ad2      	subs	r2, r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d114      	bne.n	80025fc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d109      	bne.n	80025ee <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6818      	ldr	r0, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80025e4:	461a      	mov	r2, r3
 80025e6:	2101      	movs	r1, #1
 80025e8:	f002 fc2a 	bl	8004e40 <USB_EP0_OutStart>
 80025ec:	e006      	b.n	80025fc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	691a      	ldr	r2, [r3, #16]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	441a      	add	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	4619      	mov	r1, r3
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f009 f94a 	bl	800b89c <HAL_PCD_DataOutStageCallback>
 8002608:	e046      	b.n	8002698 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	4a26      	ldr	r2, [pc, #152]	; (80026a8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d124      	bne.n	800265c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00a      	beq.n	8002632 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	015a      	lsls	r2, r3, #5
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	4413      	add	r3, r2
 8002624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002628:	461a      	mov	r2, r3
 800262a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800262e:	6093      	str	r3, [r2, #8]
 8002630:	e032      	b.n	8002698 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	f003 0320 	and.w	r3, r3, #32
 8002638:	2b00      	cmp	r3, #0
 800263a:	d008      	beq.n	800264e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	015a      	lsls	r2, r3, #5
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	4413      	add	r3, r2
 8002644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002648:	461a      	mov	r2, r3
 800264a:	2320      	movs	r3, #32
 800264c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	b2db      	uxtb	r3, r3
 8002652:	4619      	mov	r1, r3
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f009 f921 	bl	800b89c <HAL_PCD_DataOutStageCallback>
 800265a:	e01d      	b.n	8002698 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d114      	bne.n	800268c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	4613      	mov	r3, r2
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	4413      	add	r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	440b      	add	r3, r1
 8002670:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d108      	bne.n	800268c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6818      	ldr	r0, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002684:	461a      	mov	r2, r3
 8002686:	2100      	movs	r1, #0
 8002688:	f002 fbda 	bl	8004e40 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	b2db      	uxtb	r3, r3
 8002690:	4619      	mov	r1, r3
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f009 f902 	bl	800b89c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3720      	adds	r7, #32
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	4f54300a 	.word	0x4f54300a
 80026a8:	4f54310a 	.word	0x4f54310a

080026ac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	333c      	adds	r3, #60	; 0x3c
 80026c4:	3304      	adds	r3, #4
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	015a      	lsls	r2, r3, #5
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	4413      	add	r3, r2
 80026d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	4a15      	ldr	r2, [pc, #84]	; (8002734 <PCD_EP_OutSetupPacket_int+0x88>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d90e      	bls.n	8002700 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d009      	beq.n	8002700 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	015a      	lsls	r2, r3, #5
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	4413      	add	r3, r2
 80026f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026f8:	461a      	mov	r2, r3
 80026fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026fe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f009 f8b9 	bl	800b878 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	4a0a      	ldr	r2, [pc, #40]	; (8002734 <PCD_EP_OutSetupPacket_int+0x88>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d90c      	bls.n	8002728 <PCD_EP_OutSetupPacket_int+0x7c>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d108      	bne.n	8002728 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6818      	ldr	r0, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002720:	461a      	mov	r2, r3
 8002722:	2101      	movs	r1, #1
 8002724:	f002 fb8c 	bl	8004e40 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3718      	adds	r7, #24
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	4f54300a 	.word	0x4f54300a

08002738 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	460b      	mov	r3, r1
 8002742:	70fb      	strb	r3, [r7, #3]
 8002744:	4613      	mov	r3, r2
 8002746:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002750:	78fb      	ldrb	r3, [r7, #3]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d107      	bne.n	8002766 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002756:	883b      	ldrh	r3, [r7, #0]
 8002758:	0419      	lsls	r1, r3, #16
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68ba      	ldr	r2, [r7, #8]
 8002760:	430a      	orrs	r2, r1
 8002762:	629a      	str	r2, [r3, #40]	; 0x28
 8002764:	e028      	b.n	80027b8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276c:	0c1b      	lsrs	r3, r3, #16
 800276e:	68ba      	ldr	r2, [r7, #8]
 8002770:	4413      	add	r3, r2
 8002772:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002774:	2300      	movs	r3, #0
 8002776:	73fb      	strb	r3, [r7, #15]
 8002778:	e00d      	b.n	8002796 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	7bfb      	ldrb	r3, [r7, #15]
 8002780:	3340      	adds	r3, #64	; 0x40
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	0c1b      	lsrs	r3, r3, #16
 800278a:	68ba      	ldr	r2, [r7, #8]
 800278c:	4413      	add	r3, r2
 800278e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002790:	7bfb      	ldrb	r3, [r7, #15]
 8002792:	3301      	adds	r3, #1
 8002794:	73fb      	strb	r3, [r7, #15]
 8002796:	7bfa      	ldrb	r2, [r7, #15]
 8002798:	78fb      	ldrb	r3, [r7, #3]
 800279a:	3b01      	subs	r3, #1
 800279c:	429a      	cmp	r2, r3
 800279e:	d3ec      	bcc.n	800277a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80027a0:	883b      	ldrh	r3, [r7, #0]
 80027a2:	0418      	lsls	r0, r3, #16
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6819      	ldr	r1, [r3, #0]
 80027a8:	78fb      	ldrb	r3, [r7, #3]
 80027aa:	3b01      	subs	r3, #1
 80027ac:	68ba      	ldr	r2, [r7, #8]
 80027ae:	4302      	orrs	r2, r0
 80027b0:	3340      	adds	r3, #64	; 0x40
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	440b      	add	r3, r1
 80027b6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3714      	adds	r7, #20
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b083      	sub	sp, #12
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
 80027ce:	460b      	mov	r3, r1
 80027d0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	887a      	ldrh	r2, [r7, #2]
 80027d8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	460b      	mov	r3, r1
 80027f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e267      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b00      	cmp	r3, #0
 800281c:	d075      	beq.n	800290a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800281e:	4b88      	ldr	r3, [pc, #544]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 030c 	and.w	r3, r3, #12
 8002826:	2b04      	cmp	r3, #4
 8002828:	d00c      	beq.n	8002844 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800282a:	4b85      	ldr	r3, [pc, #532]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002832:	2b08      	cmp	r3, #8
 8002834:	d112      	bne.n	800285c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002836:	4b82      	ldr	r3, [pc, #520]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800283e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002842:	d10b      	bne.n	800285c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002844:	4b7e      	ldr	r3, [pc, #504]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d05b      	beq.n	8002908 <HAL_RCC_OscConfig+0x108>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d157      	bne.n	8002908 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e242      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002864:	d106      	bne.n	8002874 <HAL_RCC_OscConfig+0x74>
 8002866:	4b76      	ldr	r3, [pc, #472]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a75      	ldr	r2, [pc, #468]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 800286c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002870:	6013      	str	r3, [r2, #0]
 8002872:	e01d      	b.n	80028b0 <HAL_RCC_OscConfig+0xb0>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800287c:	d10c      	bne.n	8002898 <HAL_RCC_OscConfig+0x98>
 800287e:	4b70      	ldr	r3, [pc, #448]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a6f      	ldr	r2, [pc, #444]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002884:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002888:	6013      	str	r3, [r2, #0]
 800288a:	4b6d      	ldr	r3, [pc, #436]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a6c      	ldr	r2, [pc, #432]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002894:	6013      	str	r3, [r2, #0]
 8002896:	e00b      	b.n	80028b0 <HAL_RCC_OscConfig+0xb0>
 8002898:	4b69      	ldr	r3, [pc, #420]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a68      	ldr	r2, [pc, #416]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 800289e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028a2:	6013      	str	r3, [r2, #0]
 80028a4:	4b66      	ldr	r3, [pc, #408]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a65      	ldr	r2, [pc, #404]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 80028aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d013      	beq.n	80028e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b8:	f7fe fa76 	bl	8000da8 <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028c0:	f7fe fa72 	bl	8000da8 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b64      	cmp	r3, #100	; 0x64
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e207      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028d2:	4b5b      	ldr	r3, [pc, #364]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d0f0      	beq.n	80028c0 <HAL_RCC_OscConfig+0xc0>
 80028de:	e014      	b.n	800290a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e0:	f7fe fa62 	bl	8000da8 <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028e8:	f7fe fa5e 	bl	8000da8 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b64      	cmp	r3, #100	; 0x64
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e1f3      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028fa:	4b51      	ldr	r3, [pc, #324]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1f0      	bne.n	80028e8 <HAL_RCC_OscConfig+0xe8>
 8002906:	e000      	b.n	800290a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002908:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d063      	beq.n	80029de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002916:	4b4a      	ldr	r3, [pc, #296]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f003 030c 	and.w	r3, r3, #12
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00b      	beq.n	800293a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002922:	4b47      	ldr	r3, [pc, #284]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800292a:	2b08      	cmp	r3, #8
 800292c:	d11c      	bne.n	8002968 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800292e:	4b44      	ldr	r3, [pc, #272]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d116      	bne.n	8002968 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800293a:	4b41      	ldr	r3, [pc, #260]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d005      	beq.n	8002952 <HAL_RCC_OscConfig+0x152>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d001      	beq.n	8002952 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e1c7      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002952:	4b3b      	ldr	r3, [pc, #236]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	4937      	ldr	r1, [pc, #220]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002962:	4313      	orrs	r3, r2
 8002964:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002966:	e03a      	b.n	80029de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d020      	beq.n	80029b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002970:	4b34      	ldr	r3, [pc, #208]	; (8002a44 <HAL_RCC_OscConfig+0x244>)
 8002972:	2201      	movs	r2, #1
 8002974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002976:	f7fe fa17 	bl	8000da8 <HAL_GetTick>
 800297a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800297c:	e008      	b.n	8002990 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800297e:	f7fe fa13 	bl	8000da8 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e1a8      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002990:	4b2b      	ldr	r3, [pc, #172]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d0f0      	beq.n	800297e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800299c:	4b28      	ldr	r3, [pc, #160]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	4925      	ldr	r1, [pc, #148]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	600b      	str	r3, [r1, #0]
 80029b0:	e015      	b.n	80029de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029b2:	4b24      	ldr	r3, [pc, #144]	; (8002a44 <HAL_RCC_OscConfig+0x244>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b8:	f7fe f9f6 	bl	8000da8 <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029c0:	f7fe f9f2 	bl	8000da8 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e187      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029d2:	4b1b      	ldr	r3, [pc, #108]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1f0      	bne.n	80029c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0308 	and.w	r3, r3, #8
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d036      	beq.n	8002a58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d016      	beq.n	8002a20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029f2:	4b15      	ldr	r3, [pc, #84]	; (8002a48 <HAL_RCC_OscConfig+0x248>)
 80029f4:	2201      	movs	r2, #1
 80029f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f8:	f7fe f9d6 	bl	8000da8 <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a00:	f7fe f9d2 	bl	8000da8 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e167      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a12:	4b0b      	ldr	r3, [pc, #44]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002a14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0f0      	beq.n	8002a00 <HAL_RCC_OscConfig+0x200>
 8002a1e:	e01b      	b.n	8002a58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a20:	4b09      	ldr	r3, [pc, #36]	; (8002a48 <HAL_RCC_OscConfig+0x248>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a26:	f7fe f9bf 	bl	8000da8 <HAL_GetTick>
 8002a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a2c:	e00e      	b.n	8002a4c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a2e:	f7fe f9bb 	bl	8000da8 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d907      	bls.n	8002a4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e150      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
 8002a40:	40023800 	.word	0x40023800
 8002a44:	42470000 	.word	0x42470000
 8002a48:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a4c:	4b88      	ldr	r3, [pc, #544]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002a4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1ea      	bne.n	8002a2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0304 	and.w	r3, r3, #4
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 8097 	beq.w	8002b94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a66:	2300      	movs	r3, #0
 8002a68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a6a:	4b81      	ldr	r3, [pc, #516]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10f      	bne.n	8002a96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a76:	2300      	movs	r3, #0
 8002a78:	60bb      	str	r3, [r7, #8]
 8002a7a:	4b7d      	ldr	r3, [pc, #500]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	4a7c      	ldr	r2, [pc, #496]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a84:	6413      	str	r3, [r2, #64]	; 0x40
 8002a86:	4b7a      	ldr	r3, [pc, #488]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8e:	60bb      	str	r3, [r7, #8]
 8002a90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a92:	2301      	movs	r3, #1
 8002a94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a96:	4b77      	ldr	r3, [pc, #476]	; (8002c74 <HAL_RCC_OscConfig+0x474>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d118      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aa2:	4b74      	ldr	r3, [pc, #464]	; (8002c74 <HAL_RCC_OscConfig+0x474>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a73      	ldr	r2, [pc, #460]	; (8002c74 <HAL_RCC_OscConfig+0x474>)
 8002aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aae:	f7fe f97b 	bl	8000da8 <HAL_GetTick>
 8002ab2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab4:	e008      	b.n	8002ac8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ab6:	f7fe f977 	bl	8000da8 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e10c      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac8:	4b6a      	ldr	r3, [pc, #424]	; (8002c74 <HAL_RCC_OscConfig+0x474>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0f0      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d106      	bne.n	8002aea <HAL_RCC_OscConfig+0x2ea>
 8002adc:	4b64      	ldr	r3, [pc, #400]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae0:	4a63      	ldr	r2, [pc, #396]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002ae2:	f043 0301 	orr.w	r3, r3, #1
 8002ae6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ae8:	e01c      	b.n	8002b24 <HAL_RCC_OscConfig+0x324>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	2b05      	cmp	r3, #5
 8002af0:	d10c      	bne.n	8002b0c <HAL_RCC_OscConfig+0x30c>
 8002af2:	4b5f      	ldr	r3, [pc, #380]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af6:	4a5e      	ldr	r2, [pc, #376]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002af8:	f043 0304 	orr.w	r3, r3, #4
 8002afc:	6713      	str	r3, [r2, #112]	; 0x70
 8002afe:	4b5c      	ldr	r3, [pc, #368]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b02:	4a5b      	ldr	r2, [pc, #364]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002b04:	f043 0301 	orr.w	r3, r3, #1
 8002b08:	6713      	str	r3, [r2, #112]	; 0x70
 8002b0a:	e00b      	b.n	8002b24 <HAL_RCC_OscConfig+0x324>
 8002b0c:	4b58      	ldr	r3, [pc, #352]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b10:	4a57      	ldr	r2, [pc, #348]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002b12:	f023 0301 	bic.w	r3, r3, #1
 8002b16:	6713      	str	r3, [r2, #112]	; 0x70
 8002b18:	4b55      	ldr	r3, [pc, #340]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1c:	4a54      	ldr	r2, [pc, #336]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002b1e:	f023 0304 	bic.w	r3, r3, #4
 8002b22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d015      	beq.n	8002b58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b2c:	f7fe f93c 	bl	8000da8 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b32:	e00a      	b.n	8002b4a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b34:	f7fe f938 	bl	8000da8 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e0cb      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b4a:	4b49      	ldr	r3, [pc, #292]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d0ee      	beq.n	8002b34 <HAL_RCC_OscConfig+0x334>
 8002b56:	e014      	b.n	8002b82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b58:	f7fe f926 	bl	8000da8 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b5e:	e00a      	b.n	8002b76 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b60:	f7fe f922 	bl	8000da8 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e0b5      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b76:	4b3e      	ldr	r3, [pc, #248]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1ee      	bne.n	8002b60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b82:	7dfb      	ldrb	r3, [r7, #23]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d105      	bne.n	8002b94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b88:	4b39      	ldr	r3, [pc, #228]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8c:	4a38      	ldr	r2, [pc, #224]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002b8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 80a1 	beq.w	8002ce0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b9e:	4b34      	ldr	r3, [pc, #208]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f003 030c 	and.w	r3, r3, #12
 8002ba6:	2b08      	cmp	r3, #8
 8002ba8:	d05c      	beq.n	8002c64 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d141      	bne.n	8002c36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bb2:	4b31      	ldr	r3, [pc, #196]	; (8002c78 <HAL_RCC_OscConfig+0x478>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb8:	f7fe f8f6 	bl	8000da8 <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bc0:	f7fe f8f2 	bl	8000da8 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e087      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bd2:	4b27      	ldr	r3, [pc, #156]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1f0      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	69da      	ldr	r2, [r3, #28]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	431a      	orrs	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bec:	019b      	lsls	r3, r3, #6
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf4:	085b      	lsrs	r3, r3, #1
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	041b      	lsls	r3, r3, #16
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c00:	061b      	lsls	r3, r3, #24
 8002c02:	491b      	ldr	r1, [pc, #108]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c08:	4b1b      	ldr	r3, [pc, #108]	; (8002c78 <HAL_RCC_OscConfig+0x478>)
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0e:	f7fe f8cb 	bl	8000da8 <HAL_GetTick>
 8002c12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c14:	e008      	b.n	8002c28 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c16:	f7fe f8c7 	bl	8000da8 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e05c      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c28:	4b11      	ldr	r3, [pc, #68]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d0f0      	beq.n	8002c16 <HAL_RCC_OscConfig+0x416>
 8002c34:	e054      	b.n	8002ce0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c36:	4b10      	ldr	r3, [pc, #64]	; (8002c78 <HAL_RCC_OscConfig+0x478>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3c:	f7fe f8b4 	bl	8000da8 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c44:	f7fe f8b0 	bl	8000da8 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e045      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c56:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1f0      	bne.n	8002c44 <HAL_RCC_OscConfig+0x444>
 8002c62:	e03d      	b.n	8002ce0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d107      	bne.n	8002c7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e038      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
 8002c70:	40023800 	.word	0x40023800
 8002c74:	40007000 	.word	0x40007000
 8002c78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c7c:	4b1b      	ldr	r3, [pc, #108]	; (8002cec <HAL_RCC_OscConfig+0x4ec>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d028      	beq.n	8002cdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d121      	bne.n	8002cdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d11a      	bne.n	8002cdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cac:	4013      	ands	r3, r2
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cb2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d111      	bne.n	8002cdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc2:	085b      	lsrs	r3, r3, #1
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d107      	bne.n	8002cdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d001      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e000      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3718      	adds	r7, #24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	40023800 	.word	0x40023800

08002cf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d101      	bne.n	8002d04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e0cc      	b.n	8002e9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d04:	4b68      	ldr	r3, [pc, #416]	; (8002ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d90c      	bls.n	8002d2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d12:	4b65      	ldr	r3, [pc, #404]	; (8002ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d14:	683a      	ldr	r2, [r7, #0]
 8002d16:	b2d2      	uxtb	r2, r2
 8002d18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d1a:	4b63      	ldr	r3, [pc, #396]	; (8002ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0307 	and.w	r3, r3, #7
 8002d22:	683a      	ldr	r2, [r7, #0]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d001      	beq.n	8002d2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e0b8      	b.n	8002e9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d020      	beq.n	8002d7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0304 	and.w	r3, r3, #4
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d005      	beq.n	8002d50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d44:	4b59      	ldr	r3, [pc, #356]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	4a58      	ldr	r2, [pc, #352]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002d4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0308 	and.w	r3, r3, #8
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d005      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d5c:	4b53      	ldr	r3, [pc, #332]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	4a52      	ldr	r2, [pc, #328]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002d62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d68:	4b50      	ldr	r3, [pc, #320]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	494d      	ldr	r1, [pc, #308]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d044      	beq.n	8002e10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d107      	bne.n	8002d9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d8e:	4b47      	ldr	r3, [pc, #284]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d119      	bne.n	8002dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e07f      	b.n	8002e9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d003      	beq.n	8002dae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002daa:	2b03      	cmp	r3, #3
 8002dac:	d107      	bne.n	8002dbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dae:	4b3f      	ldr	r3, [pc, #252]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d109      	bne.n	8002dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e06f      	b.n	8002e9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dbe:	4b3b      	ldr	r3, [pc, #236]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e067      	b.n	8002e9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dce:	4b37      	ldr	r3, [pc, #220]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f023 0203 	bic.w	r2, r3, #3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	4934      	ldr	r1, [pc, #208]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002de0:	f7fd ffe2 	bl	8000da8 <HAL_GetTick>
 8002de4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002de6:	e00a      	b.n	8002dfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002de8:	f7fd ffde 	bl	8000da8 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e04f      	b.n	8002e9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dfe:	4b2b      	ldr	r3, [pc, #172]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 020c 	and.w	r2, r3, #12
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d1eb      	bne.n	8002de8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e10:	4b25      	ldr	r3, [pc, #148]	; (8002ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0307 	and.w	r3, r3, #7
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d20c      	bcs.n	8002e38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e1e:	4b22      	ldr	r3, [pc, #136]	; (8002ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	b2d2      	uxtb	r2, r2
 8002e24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e26:	4b20      	ldr	r3, [pc, #128]	; (8002ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0307 	and.w	r3, r3, #7
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d001      	beq.n	8002e38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e032      	b.n	8002e9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0304 	and.w	r3, r3, #4
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d008      	beq.n	8002e56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e44:	4b19      	ldr	r3, [pc, #100]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	4916      	ldr	r1, [pc, #88]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0308 	and.w	r3, r3, #8
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d009      	beq.n	8002e76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e62:	4b12      	ldr	r3, [pc, #72]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	490e      	ldr	r1, [pc, #56]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e76:	f000 f821 	bl	8002ebc <HAL_RCC_GetSysClockFreq>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	4b0b      	ldr	r3, [pc, #44]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	091b      	lsrs	r3, r3, #4
 8002e82:	f003 030f 	and.w	r3, r3, #15
 8002e86:	490a      	ldr	r1, [pc, #40]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e88:	5ccb      	ldrb	r3, [r1, r3]
 8002e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e8e:	4a09      	ldr	r2, [pc, #36]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e92:	4b09      	ldr	r3, [pc, #36]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7fd fe40 	bl	8000b1c <HAL_InitTick>

  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40023c00 	.word	0x40023c00
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	0800cb58 	.word	0x0800cb58
 8002eb4:	2000000c 	.word	0x2000000c
 8002eb8:	20000010 	.word	0x20000010

08002ebc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ebc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ec0:	b094      	sub	sp, #80	; 0x50
 8002ec2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	647b      	str	r3, [r7, #68]	; 0x44
 8002ec8:	2300      	movs	r3, #0
 8002eca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ecc:	2300      	movs	r3, #0
 8002ece:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ed4:	4b79      	ldr	r3, [pc, #484]	; (80030bc <HAL_RCC_GetSysClockFreq+0x200>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f003 030c 	and.w	r3, r3, #12
 8002edc:	2b08      	cmp	r3, #8
 8002ede:	d00d      	beq.n	8002efc <HAL_RCC_GetSysClockFreq+0x40>
 8002ee0:	2b08      	cmp	r3, #8
 8002ee2:	f200 80e1 	bhi.w	80030a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d002      	beq.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x34>
 8002eea:	2b04      	cmp	r3, #4
 8002eec:	d003      	beq.n	8002ef6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002eee:	e0db      	b.n	80030a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ef0:	4b73      	ldr	r3, [pc, #460]	; (80030c0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ef2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002ef4:	e0db      	b.n	80030ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ef6:	4b73      	ldr	r3, [pc, #460]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002ef8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002efa:	e0d8      	b.n	80030ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002efc:	4b6f      	ldr	r3, [pc, #444]	; (80030bc <HAL_RCC_GetSysClockFreq+0x200>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f04:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f06:	4b6d      	ldr	r3, [pc, #436]	; (80030bc <HAL_RCC_GetSysClockFreq+0x200>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d063      	beq.n	8002fda <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f12:	4b6a      	ldr	r3, [pc, #424]	; (80030bc <HAL_RCC_GetSysClockFreq+0x200>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	099b      	lsrs	r3, r3, #6
 8002f18:	2200      	movs	r2, #0
 8002f1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f1c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f24:	633b      	str	r3, [r7, #48]	; 0x30
 8002f26:	2300      	movs	r3, #0
 8002f28:	637b      	str	r3, [r7, #52]	; 0x34
 8002f2a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f2e:	4622      	mov	r2, r4
 8002f30:	462b      	mov	r3, r5
 8002f32:	f04f 0000 	mov.w	r0, #0
 8002f36:	f04f 0100 	mov.w	r1, #0
 8002f3a:	0159      	lsls	r1, r3, #5
 8002f3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f40:	0150      	lsls	r0, r2, #5
 8002f42:	4602      	mov	r2, r0
 8002f44:	460b      	mov	r3, r1
 8002f46:	4621      	mov	r1, r4
 8002f48:	1a51      	subs	r1, r2, r1
 8002f4a:	6139      	str	r1, [r7, #16]
 8002f4c:	4629      	mov	r1, r5
 8002f4e:	eb63 0301 	sbc.w	r3, r3, r1
 8002f52:	617b      	str	r3, [r7, #20]
 8002f54:	f04f 0200 	mov.w	r2, #0
 8002f58:	f04f 0300 	mov.w	r3, #0
 8002f5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f60:	4659      	mov	r1, fp
 8002f62:	018b      	lsls	r3, r1, #6
 8002f64:	4651      	mov	r1, sl
 8002f66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f6a:	4651      	mov	r1, sl
 8002f6c:	018a      	lsls	r2, r1, #6
 8002f6e:	4651      	mov	r1, sl
 8002f70:	ebb2 0801 	subs.w	r8, r2, r1
 8002f74:	4659      	mov	r1, fp
 8002f76:	eb63 0901 	sbc.w	r9, r3, r1
 8002f7a:	f04f 0200 	mov.w	r2, #0
 8002f7e:	f04f 0300 	mov.w	r3, #0
 8002f82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f8e:	4690      	mov	r8, r2
 8002f90:	4699      	mov	r9, r3
 8002f92:	4623      	mov	r3, r4
 8002f94:	eb18 0303 	adds.w	r3, r8, r3
 8002f98:	60bb      	str	r3, [r7, #8]
 8002f9a:	462b      	mov	r3, r5
 8002f9c:	eb49 0303 	adc.w	r3, r9, r3
 8002fa0:	60fb      	str	r3, [r7, #12]
 8002fa2:	f04f 0200 	mov.w	r2, #0
 8002fa6:	f04f 0300 	mov.w	r3, #0
 8002faa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002fae:	4629      	mov	r1, r5
 8002fb0:	024b      	lsls	r3, r1, #9
 8002fb2:	4621      	mov	r1, r4
 8002fb4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fb8:	4621      	mov	r1, r4
 8002fba:	024a      	lsls	r2, r1, #9
 8002fbc:	4610      	mov	r0, r2
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fc8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fcc:	f7fd f958 	bl	8000280 <__aeabi_uldivmod>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fd8:	e058      	b.n	800308c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fda:	4b38      	ldr	r3, [pc, #224]	; (80030bc <HAL_RCC_GetSysClockFreq+0x200>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	099b      	lsrs	r3, r3, #6
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	4611      	mov	r1, r2
 8002fe6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fea:	623b      	str	r3, [r7, #32]
 8002fec:	2300      	movs	r3, #0
 8002fee:	627b      	str	r3, [r7, #36]	; 0x24
 8002ff0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ff4:	4642      	mov	r2, r8
 8002ff6:	464b      	mov	r3, r9
 8002ff8:	f04f 0000 	mov.w	r0, #0
 8002ffc:	f04f 0100 	mov.w	r1, #0
 8003000:	0159      	lsls	r1, r3, #5
 8003002:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003006:	0150      	lsls	r0, r2, #5
 8003008:	4602      	mov	r2, r0
 800300a:	460b      	mov	r3, r1
 800300c:	4641      	mov	r1, r8
 800300e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003012:	4649      	mov	r1, r9
 8003014:	eb63 0b01 	sbc.w	fp, r3, r1
 8003018:	f04f 0200 	mov.w	r2, #0
 800301c:	f04f 0300 	mov.w	r3, #0
 8003020:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003024:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003028:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800302c:	ebb2 040a 	subs.w	r4, r2, sl
 8003030:	eb63 050b 	sbc.w	r5, r3, fp
 8003034:	f04f 0200 	mov.w	r2, #0
 8003038:	f04f 0300 	mov.w	r3, #0
 800303c:	00eb      	lsls	r3, r5, #3
 800303e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003042:	00e2      	lsls	r2, r4, #3
 8003044:	4614      	mov	r4, r2
 8003046:	461d      	mov	r5, r3
 8003048:	4643      	mov	r3, r8
 800304a:	18e3      	adds	r3, r4, r3
 800304c:	603b      	str	r3, [r7, #0]
 800304e:	464b      	mov	r3, r9
 8003050:	eb45 0303 	adc.w	r3, r5, r3
 8003054:	607b      	str	r3, [r7, #4]
 8003056:	f04f 0200 	mov.w	r2, #0
 800305a:	f04f 0300 	mov.w	r3, #0
 800305e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003062:	4629      	mov	r1, r5
 8003064:	028b      	lsls	r3, r1, #10
 8003066:	4621      	mov	r1, r4
 8003068:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800306c:	4621      	mov	r1, r4
 800306e:	028a      	lsls	r2, r1, #10
 8003070:	4610      	mov	r0, r2
 8003072:	4619      	mov	r1, r3
 8003074:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003076:	2200      	movs	r2, #0
 8003078:	61bb      	str	r3, [r7, #24]
 800307a:	61fa      	str	r2, [r7, #28]
 800307c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003080:	f7fd f8fe 	bl	8000280 <__aeabi_uldivmod>
 8003084:	4602      	mov	r2, r0
 8003086:	460b      	mov	r3, r1
 8003088:	4613      	mov	r3, r2
 800308a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800308c:	4b0b      	ldr	r3, [pc, #44]	; (80030bc <HAL_RCC_GetSysClockFreq+0x200>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	0c1b      	lsrs	r3, r3, #16
 8003092:	f003 0303 	and.w	r3, r3, #3
 8003096:	3301      	adds	r3, #1
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800309c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800309e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030a6:	e002      	b.n	80030ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030a8:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80030aa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3750      	adds	r7, #80	; 0x50
 80030b4:	46bd      	mov	sp, r7
 80030b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030ba:	bf00      	nop
 80030bc:	40023800 	.word	0x40023800
 80030c0:	00f42400 	.word	0x00f42400
 80030c4:	007a1200 	.word	0x007a1200

080030c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030cc:	4b03      	ldr	r3, [pc, #12]	; (80030dc <HAL_RCC_GetHCLKFreq+0x14>)
 80030ce:	681b      	ldr	r3, [r3, #0]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	2000000c 	.word	0x2000000c

080030e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80030e4:	f7ff fff0 	bl	80030c8 <HAL_RCC_GetHCLKFreq>
 80030e8:	4602      	mov	r2, r0
 80030ea:	4b05      	ldr	r3, [pc, #20]	; (8003100 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	0b5b      	lsrs	r3, r3, #13
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	4903      	ldr	r1, [pc, #12]	; (8003104 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030f6:	5ccb      	ldrb	r3, [r1, r3]
 80030f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40023800 	.word	0x40023800
 8003104:	0800cb68 	.word	0x0800cb68

08003108 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	220f      	movs	r2, #15
 8003116:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003118:	4b12      	ldr	r3, [pc, #72]	; (8003164 <HAL_RCC_GetClockConfig+0x5c>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f003 0203 	and.w	r2, r3, #3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003124:	4b0f      	ldr	r3, [pc, #60]	; (8003164 <HAL_RCC_GetClockConfig+0x5c>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003130:	4b0c      	ldr	r3, [pc, #48]	; (8003164 <HAL_RCC_GetClockConfig+0x5c>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800313c:	4b09      	ldr	r3, [pc, #36]	; (8003164 <HAL_RCC_GetClockConfig+0x5c>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	08db      	lsrs	r3, r3, #3
 8003142:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800314a:	4b07      	ldr	r3, [pc, #28]	; (8003168 <HAL_RCC_GetClockConfig+0x60>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0207 	and.w	r2, r3, #7
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	601a      	str	r2, [r3, #0]
}
 8003156:	bf00      	nop
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	40023800 	.word	0x40023800
 8003168:	40023c00 	.word	0x40023c00

0800316c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e041      	b.n	8003202 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	d106      	bne.n	8003198 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 f839 	bl	800320a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2202      	movs	r2, #2
 800319c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	3304      	adds	r3, #4
 80031a8:	4619      	mov	r1, r3
 80031aa:	4610      	mov	r0, r2
 80031ac:	f000 f9d8 	bl	8003560 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800320a:	b480      	push	{r7}
 800320c:	b083      	sub	sp, #12
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
	...

08003220 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800322e:	b2db      	uxtb	r3, r3
 8003230:	2b01      	cmp	r3, #1
 8003232:	d001      	beq.n	8003238 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e04e      	b.n	80032d6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2202      	movs	r2, #2
 800323c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68da      	ldr	r2, [r3, #12]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f042 0201 	orr.w	r2, r2, #1
 800324e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a23      	ldr	r2, [pc, #140]	; (80032e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d022      	beq.n	80032a0 <HAL_TIM_Base_Start_IT+0x80>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003262:	d01d      	beq.n	80032a0 <HAL_TIM_Base_Start_IT+0x80>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a1f      	ldr	r2, [pc, #124]	; (80032e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d018      	beq.n	80032a0 <HAL_TIM_Base_Start_IT+0x80>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a1e      	ldr	r2, [pc, #120]	; (80032ec <HAL_TIM_Base_Start_IT+0xcc>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d013      	beq.n	80032a0 <HAL_TIM_Base_Start_IT+0x80>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a1c      	ldr	r2, [pc, #112]	; (80032f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d00e      	beq.n	80032a0 <HAL_TIM_Base_Start_IT+0x80>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a1b      	ldr	r2, [pc, #108]	; (80032f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d009      	beq.n	80032a0 <HAL_TIM_Base_Start_IT+0x80>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a19      	ldr	r2, [pc, #100]	; (80032f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d004      	beq.n	80032a0 <HAL_TIM_Base_Start_IT+0x80>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a18      	ldr	r2, [pc, #96]	; (80032fc <HAL_TIM_Base_Start_IT+0xdc>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d111      	bne.n	80032c4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 0307 	and.w	r3, r3, #7
 80032aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2b06      	cmp	r3, #6
 80032b0:	d010      	beq.n	80032d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f042 0201 	orr.w	r2, r2, #1
 80032c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032c2:	e007      	b.n	80032d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0201 	orr.w	r2, r2, #1
 80032d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3714      	adds	r7, #20
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	40010000 	.word	0x40010000
 80032e8:	40000400 	.word	0x40000400
 80032ec:	40000800 	.word	0x40000800
 80032f0:	40000c00 	.word	0x40000c00
 80032f4:	40010400 	.word	0x40010400
 80032f8:	40014000 	.word	0x40014000
 80032fc:	40001800 	.word	0x40001800

08003300 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b02      	cmp	r3, #2
 8003314:	d122      	bne.n	800335c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	2b02      	cmp	r3, #2
 8003322:	d11b      	bne.n	800335c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f06f 0202 	mvn.w	r2, #2
 800332c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2201      	movs	r2, #1
 8003332:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	f003 0303 	and.w	r3, r3, #3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d003      	beq.n	800334a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 f8ee 	bl	8003524 <HAL_TIM_IC_CaptureCallback>
 8003348:	e005      	b.n	8003356 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 f8e0 	bl	8003510 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f000 f8f1 	bl	8003538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	f003 0304 	and.w	r3, r3, #4
 8003366:	2b04      	cmp	r3, #4
 8003368:	d122      	bne.n	80033b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	2b04      	cmp	r3, #4
 8003376:	d11b      	bne.n	80033b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f06f 0204 	mvn.w	r2, #4
 8003380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2202      	movs	r2, #2
 8003386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003392:	2b00      	cmp	r3, #0
 8003394:	d003      	beq.n	800339e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 f8c4 	bl	8003524 <HAL_TIM_IC_CaptureCallback>
 800339c:	e005      	b.n	80033aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 f8b6 	bl	8003510 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f000 f8c7 	bl	8003538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	f003 0308 	and.w	r3, r3, #8
 80033ba:	2b08      	cmp	r3, #8
 80033bc:	d122      	bne.n	8003404 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	f003 0308 	and.w	r3, r3, #8
 80033c8:	2b08      	cmp	r3, #8
 80033ca:	d11b      	bne.n	8003404 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f06f 0208 	mvn.w	r2, #8
 80033d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2204      	movs	r2, #4
 80033da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	f003 0303 	and.w	r3, r3, #3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d003      	beq.n	80033f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 f89a 	bl	8003524 <HAL_TIM_IC_CaptureCallback>
 80033f0:	e005      	b.n	80033fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 f88c 	bl	8003510 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 f89d 	bl	8003538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	f003 0310 	and.w	r3, r3, #16
 800340e:	2b10      	cmp	r3, #16
 8003410:	d122      	bne.n	8003458 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	f003 0310 	and.w	r3, r3, #16
 800341c:	2b10      	cmp	r3, #16
 800341e:	d11b      	bne.n	8003458 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f06f 0210 	mvn.w	r2, #16
 8003428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2208      	movs	r2, #8
 800342e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	69db      	ldr	r3, [r3, #28]
 8003436:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800343a:	2b00      	cmp	r3, #0
 800343c:	d003      	beq.n	8003446 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 f870 	bl	8003524 <HAL_TIM_IC_CaptureCallback>
 8003444:	e005      	b.n	8003452 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f862 	bl	8003510 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 f873 	bl	8003538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b01      	cmp	r3, #1
 8003464:	d10e      	bne.n	8003484 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	2b01      	cmp	r3, #1
 8003472:	d107      	bne.n	8003484 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f06f 0201 	mvn.w	r2, #1
 800347c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f7fd fb08 	bl	8000a94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800348e:	2b80      	cmp	r3, #128	; 0x80
 8003490:	d10e      	bne.n	80034b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800349c:	2b80      	cmp	r3, #128	; 0x80
 800349e:	d107      	bne.n	80034b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f902 	bl	80036b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ba:	2b40      	cmp	r3, #64	; 0x40
 80034bc:	d10e      	bne.n	80034dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c8:	2b40      	cmp	r3, #64	; 0x40
 80034ca:	d107      	bne.n	80034dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 f838 	bl	800354c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	f003 0320 	and.w	r3, r3, #32
 80034e6:	2b20      	cmp	r3, #32
 80034e8:	d10e      	bne.n	8003508 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	f003 0320 	and.w	r3, r3, #32
 80034f4:	2b20      	cmp	r3, #32
 80034f6:	d107      	bne.n	8003508 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f06f 0220 	mvn.w	r2, #32
 8003500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f8cc 	bl	80036a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003508:	bf00      	nop
 800350a:	3708      	adds	r7, #8
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800352c:	bf00      	nop
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003560:	b480      	push	{r7}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a40      	ldr	r2, [pc, #256]	; (8003674 <TIM_Base_SetConfig+0x114>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d013      	beq.n	80035a0 <TIM_Base_SetConfig+0x40>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800357e:	d00f      	beq.n	80035a0 <TIM_Base_SetConfig+0x40>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a3d      	ldr	r2, [pc, #244]	; (8003678 <TIM_Base_SetConfig+0x118>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d00b      	beq.n	80035a0 <TIM_Base_SetConfig+0x40>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a3c      	ldr	r2, [pc, #240]	; (800367c <TIM_Base_SetConfig+0x11c>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d007      	beq.n	80035a0 <TIM_Base_SetConfig+0x40>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a3b      	ldr	r2, [pc, #236]	; (8003680 <TIM_Base_SetConfig+0x120>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d003      	beq.n	80035a0 <TIM_Base_SetConfig+0x40>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a3a      	ldr	r2, [pc, #232]	; (8003684 <TIM_Base_SetConfig+0x124>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d108      	bne.n	80035b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a2f      	ldr	r2, [pc, #188]	; (8003674 <TIM_Base_SetConfig+0x114>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d02b      	beq.n	8003612 <TIM_Base_SetConfig+0xb2>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035c0:	d027      	beq.n	8003612 <TIM_Base_SetConfig+0xb2>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a2c      	ldr	r2, [pc, #176]	; (8003678 <TIM_Base_SetConfig+0x118>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d023      	beq.n	8003612 <TIM_Base_SetConfig+0xb2>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a2b      	ldr	r2, [pc, #172]	; (800367c <TIM_Base_SetConfig+0x11c>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d01f      	beq.n	8003612 <TIM_Base_SetConfig+0xb2>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a2a      	ldr	r2, [pc, #168]	; (8003680 <TIM_Base_SetConfig+0x120>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d01b      	beq.n	8003612 <TIM_Base_SetConfig+0xb2>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a29      	ldr	r2, [pc, #164]	; (8003684 <TIM_Base_SetConfig+0x124>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d017      	beq.n	8003612 <TIM_Base_SetConfig+0xb2>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a28      	ldr	r2, [pc, #160]	; (8003688 <TIM_Base_SetConfig+0x128>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d013      	beq.n	8003612 <TIM_Base_SetConfig+0xb2>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a27      	ldr	r2, [pc, #156]	; (800368c <TIM_Base_SetConfig+0x12c>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d00f      	beq.n	8003612 <TIM_Base_SetConfig+0xb2>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a26      	ldr	r2, [pc, #152]	; (8003690 <TIM_Base_SetConfig+0x130>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d00b      	beq.n	8003612 <TIM_Base_SetConfig+0xb2>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a25      	ldr	r2, [pc, #148]	; (8003694 <TIM_Base_SetConfig+0x134>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d007      	beq.n	8003612 <TIM_Base_SetConfig+0xb2>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a24      	ldr	r2, [pc, #144]	; (8003698 <TIM_Base_SetConfig+0x138>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d003      	beq.n	8003612 <TIM_Base_SetConfig+0xb2>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a23      	ldr	r2, [pc, #140]	; (800369c <TIM_Base_SetConfig+0x13c>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d108      	bne.n	8003624 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003618:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	4313      	orrs	r3, r2
 8003622:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	4313      	orrs	r3, r2
 8003630:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a0a      	ldr	r2, [pc, #40]	; (8003674 <TIM_Base_SetConfig+0x114>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d003      	beq.n	8003658 <TIM_Base_SetConfig+0xf8>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a0c      	ldr	r2, [pc, #48]	; (8003684 <TIM_Base_SetConfig+0x124>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d103      	bne.n	8003660 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	691a      	ldr	r2, [r3, #16]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	615a      	str	r2, [r3, #20]
}
 8003666:	bf00      	nop
 8003668:	3714      	adds	r7, #20
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	40010000 	.word	0x40010000
 8003678:	40000400 	.word	0x40000400
 800367c:	40000800 	.word	0x40000800
 8003680:	40000c00 	.word	0x40000c00
 8003684:	40010400 	.word	0x40010400
 8003688:	40014000 	.word	0x40014000
 800368c:	40014400 	.word	0x40014400
 8003690:	40014800 	.word	0x40014800
 8003694:	40001800 	.word	0x40001800
 8003698:	40001c00 	.word	0x40001c00
 800369c:	40002000 	.word	0x40002000

080036a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80036c8:	b084      	sub	sp, #16
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b084      	sub	sp, #16
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
 80036d2:	f107 001c 	add.w	r0, r7, #28
 80036d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80036da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d122      	bne.n	8003726 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80036f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003708:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800370a:	2b01      	cmp	r3, #1
 800370c:	d105      	bne.n	800371a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f001 fbee 	bl	8004efc <USB_CoreReset>
 8003720:	4603      	mov	r3, r0
 8003722:	73fb      	strb	r3, [r7, #15]
 8003724:	e01a      	b.n	800375c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f001 fbe2 	bl	8004efc <USB_CoreReset>
 8003738:	4603      	mov	r3, r0
 800373a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800373c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800373e:	2b00      	cmp	r3, #0
 8003740:	d106      	bne.n	8003750 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003746:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	639a      	str	r2, [r3, #56]	; 0x38
 800374e:	e005      	b.n	800375c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003754:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800375c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800375e:	2b01      	cmp	r3, #1
 8003760:	d10b      	bne.n	800377a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f043 0206 	orr.w	r2, r3, #6
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f043 0220 	orr.w	r2, r3, #32
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800377a:	7bfb      	ldrb	r3, [r7, #15]
}
 800377c:	4618      	mov	r0, r3
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003786:	b004      	add	sp, #16
 8003788:	4770      	bx	lr
	...

0800378c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800378c:	b480      	push	{r7}
 800378e:	b087      	sub	sp, #28
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	4613      	mov	r3, r2
 8003798:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800379a:	79fb      	ldrb	r3, [r7, #7]
 800379c:	2b02      	cmp	r3, #2
 800379e:	d165      	bne.n	800386c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	4a41      	ldr	r2, [pc, #260]	; (80038a8 <USB_SetTurnaroundTime+0x11c>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d906      	bls.n	80037b6 <USB_SetTurnaroundTime+0x2a>
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	4a40      	ldr	r2, [pc, #256]	; (80038ac <USB_SetTurnaroundTime+0x120>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d202      	bcs.n	80037b6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80037b0:	230f      	movs	r3, #15
 80037b2:	617b      	str	r3, [r7, #20]
 80037b4:	e062      	b.n	800387c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	4a3c      	ldr	r2, [pc, #240]	; (80038ac <USB_SetTurnaroundTime+0x120>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d306      	bcc.n	80037cc <USB_SetTurnaroundTime+0x40>
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	4a3b      	ldr	r2, [pc, #236]	; (80038b0 <USB_SetTurnaroundTime+0x124>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d202      	bcs.n	80037cc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80037c6:	230e      	movs	r3, #14
 80037c8:	617b      	str	r3, [r7, #20]
 80037ca:	e057      	b.n	800387c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	4a38      	ldr	r2, [pc, #224]	; (80038b0 <USB_SetTurnaroundTime+0x124>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d306      	bcc.n	80037e2 <USB_SetTurnaroundTime+0x56>
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	4a37      	ldr	r2, [pc, #220]	; (80038b4 <USB_SetTurnaroundTime+0x128>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d202      	bcs.n	80037e2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80037dc:	230d      	movs	r3, #13
 80037de:	617b      	str	r3, [r7, #20]
 80037e0:	e04c      	b.n	800387c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	4a33      	ldr	r2, [pc, #204]	; (80038b4 <USB_SetTurnaroundTime+0x128>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d306      	bcc.n	80037f8 <USB_SetTurnaroundTime+0x6c>
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	4a32      	ldr	r2, [pc, #200]	; (80038b8 <USB_SetTurnaroundTime+0x12c>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d802      	bhi.n	80037f8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80037f2:	230c      	movs	r3, #12
 80037f4:	617b      	str	r3, [r7, #20]
 80037f6:	e041      	b.n	800387c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	4a2f      	ldr	r2, [pc, #188]	; (80038b8 <USB_SetTurnaroundTime+0x12c>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d906      	bls.n	800380e <USB_SetTurnaroundTime+0x82>
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	4a2e      	ldr	r2, [pc, #184]	; (80038bc <USB_SetTurnaroundTime+0x130>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d802      	bhi.n	800380e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003808:	230b      	movs	r3, #11
 800380a:	617b      	str	r3, [r7, #20]
 800380c:	e036      	b.n	800387c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	4a2a      	ldr	r2, [pc, #168]	; (80038bc <USB_SetTurnaroundTime+0x130>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d906      	bls.n	8003824 <USB_SetTurnaroundTime+0x98>
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	4a29      	ldr	r2, [pc, #164]	; (80038c0 <USB_SetTurnaroundTime+0x134>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d802      	bhi.n	8003824 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800381e:	230a      	movs	r3, #10
 8003820:	617b      	str	r3, [r7, #20]
 8003822:	e02b      	b.n	800387c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	4a26      	ldr	r2, [pc, #152]	; (80038c0 <USB_SetTurnaroundTime+0x134>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d906      	bls.n	800383a <USB_SetTurnaroundTime+0xae>
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	4a25      	ldr	r2, [pc, #148]	; (80038c4 <USB_SetTurnaroundTime+0x138>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d202      	bcs.n	800383a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003834:	2309      	movs	r3, #9
 8003836:	617b      	str	r3, [r7, #20]
 8003838:	e020      	b.n	800387c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	4a21      	ldr	r2, [pc, #132]	; (80038c4 <USB_SetTurnaroundTime+0x138>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d306      	bcc.n	8003850 <USB_SetTurnaroundTime+0xc4>
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	4a20      	ldr	r2, [pc, #128]	; (80038c8 <USB_SetTurnaroundTime+0x13c>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d802      	bhi.n	8003850 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800384a:	2308      	movs	r3, #8
 800384c:	617b      	str	r3, [r7, #20]
 800384e:	e015      	b.n	800387c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	4a1d      	ldr	r2, [pc, #116]	; (80038c8 <USB_SetTurnaroundTime+0x13c>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d906      	bls.n	8003866 <USB_SetTurnaroundTime+0xda>
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	4a1c      	ldr	r2, [pc, #112]	; (80038cc <USB_SetTurnaroundTime+0x140>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d202      	bcs.n	8003866 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003860:	2307      	movs	r3, #7
 8003862:	617b      	str	r3, [r7, #20]
 8003864:	e00a      	b.n	800387c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003866:	2306      	movs	r3, #6
 8003868:	617b      	str	r3, [r7, #20]
 800386a:	e007      	b.n	800387c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800386c:	79fb      	ldrb	r3, [r7, #7]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d102      	bne.n	8003878 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003872:	2309      	movs	r3, #9
 8003874:	617b      	str	r3, [r7, #20]
 8003876:	e001      	b.n	800387c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003878:	2309      	movs	r3, #9
 800387a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	68da      	ldr	r2, [r3, #12]
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	029b      	lsls	r3, r3, #10
 8003890:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003894:	431a      	orrs	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	371c      	adds	r7, #28
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr
 80038a8:	00d8acbf 	.word	0x00d8acbf
 80038ac:	00e4e1c0 	.word	0x00e4e1c0
 80038b0:	00f42400 	.word	0x00f42400
 80038b4:	01067380 	.word	0x01067380
 80038b8:	011a499f 	.word	0x011a499f
 80038bc:	01312cff 	.word	0x01312cff
 80038c0:	014ca43f 	.word	0x014ca43f
 80038c4:	016e3600 	.word	0x016e3600
 80038c8:	01a6ab1f 	.word	0x01a6ab1f
 80038cc:	01e84800 	.word	0x01e84800

080038d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f043 0201 	orr.w	r2, r3, #1
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr

080038f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80038f2:	b480      	push	{r7}
 80038f4:	b083      	sub	sp, #12
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f023 0201 	bic.w	r2, r3, #1
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	460b      	mov	r3, r1
 800391e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003920:	2300      	movs	r3, #0
 8003922:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003930:	78fb      	ldrb	r3, [r7, #3]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d115      	bne.n	8003962 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003942:	2001      	movs	r0, #1
 8003944:	f7fd fa3c 	bl	8000dc0 <HAL_Delay>
      ms++;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	3301      	adds	r3, #1
 800394c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f001 fa45 	bl	8004dde <USB_GetMode>
 8003954:	4603      	mov	r3, r0
 8003956:	2b01      	cmp	r3, #1
 8003958:	d01e      	beq.n	8003998 <USB_SetCurrentMode+0x84>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2b31      	cmp	r3, #49	; 0x31
 800395e:	d9f0      	bls.n	8003942 <USB_SetCurrentMode+0x2e>
 8003960:	e01a      	b.n	8003998 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003962:	78fb      	ldrb	r3, [r7, #3]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d115      	bne.n	8003994 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003974:	2001      	movs	r0, #1
 8003976:	f7fd fa23 	bl	8000dc0 <HAL_Delay>
      ms++;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	3301      	adds	r3, #1
 800397e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f001 fa2c 	bl	8004dde <USB_GetMode>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d005      	beq.n	8003998 <USB_SetCurrentMode+0x84>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2b31      	cmp	r3, #49	; 0x31
 8003990:	d9f0      	bls.n	8003974 <USB_SetCurrentMode+0x60>
 8003992:	e001      	b.n	8003998 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e005      	b.n	80039a4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2b32      	cmp	r3, #50	; 0x32
 800399c:	d101      	bne.n	80039a2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e000      	b.n	80039a4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80039ac:	b084      	sub	sp, #16
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b086      	sub	sp, #24
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
 80039b6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80039ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80039be:	2300      	movs	r3, #0
 80039c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80039c6:	2300      	movs	r3, #0
 80039c8:	613b      	str	r3, [r7, #16]
 80039ca:	e009      	b.n	80039e0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	3340      	adds	r3, #64	; 0x40
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	4413      	add	r3, r2
 80039d6:	2200      	movs	r2, #0
 80039d8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	3301      	adds	r3, #1
 80039de:	613b      	str	r3, [r7, #16]
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	2b0e      	cmp	r3, #14
 80039e4:	d9f2      	bls.n	80039cc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80039e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d11c      	bne.n	8003a26 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039fa:	f043 0302 	orr.w	r3, r3, #2
 80039fe:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a04:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a10:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	639a      	str	r2, [r3, #56]	; 0x38
 8003a24:	e00b      	b.n	8003a3e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a36:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003a44:	461a      	mov	r2, r3
 8003a46:	2300      	movs	r3, #0
 8003a48:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a50:	4619      	mov	r1, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a58:	461a      	mov	r2, r3
 8003a5a:	680b      	ldr	r3, [r1, #0]
 8003a5c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d10c      	bne.n	8003a7e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d104      	bne.n	8003a74 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 f965 	bl	8003d3c <USB_SetDevSpeed>
 8003a72:	e008      	b.n	8003a86 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003a74:	2101      	movs	r1, #1
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f960 	bl	8003d3c <USB_SetDevSpeed>
 8003a7c:	e003      	b.n	8003a86 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003a7e:	2103      	movs	r1, #3
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 f95b 	bl	8003d3c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003a86:	2110      	movs	r1, #16
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 f8f3 	bl	8003c74 <USB_FlushTxFifo>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d001      	beq.n	8003a98 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 f91f 	bl	8003cdc <USB_FlushRxFifo>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d001      	beq.n	8003aa8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aae:	461a      	mov	r2, r3
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aba:	461a      	mov	r2, r3
 8003abc:	2300      	movs	r3, #0
 8003abe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	2300      	movs	r3, #0
 8003aca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003acc:	2300      	movs	r3, #0
 8003ace:	613b      	str	r3, [r7, #16]
 8003ad0:	e043      	b.n	8003b5a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	015a      	lsls	r2, r3, #5
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	4413      	add	r3, r2
 8003ada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ae4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ae8:	d118      	bne.n	8003b1c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10a      	bne.n	8003b06 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	015a      	lsls	r2, r3, #5
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	4413      	add	r3, r2
 8003af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003afc:	461a      	mov	r2, r3
 8003afe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b02:	6013      	str	r3, [r2, #0]
 8003b04:	e013      	b.n	8003b2e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	015a      	lsls	r2, r3, #5
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b12:	461a      	mov	r2, r3
 8003b14:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003b18:	6013      	str	r3, [r2, #0]
 8003b1a:	e008      	b.n	8003b2e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	015a      	lsls	r2, r3, #5
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	4413      	add	r3, r2
 8003b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b28:	461a      	mov	r2, r3
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	015a      	lsls	r2, r3, #5
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	4413      	add	r3, r2
 8003b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	015a      	lsls	r2, r3, #5
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	4413      	add	r3, r2
 8003b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b52:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	3301      	adds	r3, #1
 8003b58:	613b      	str	r3, [r7, #16]
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d3b7      	bcc.n	8003ad2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b62:	2300      	movs	r3, #0
 8003b64:	613b      	str	r3, [r7, #16]
 8003b66:	e043      	b.n	8003bf0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	015a      	lsls	r2, r3, #5
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	4413      	add	r3, r2
 8003b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b7e:	d118      	bne.n	8003bb2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d10a      	bne.n	8003b9c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	015a      	lsls	r2, r3, #5
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b92:	461a      	mov	r2, r3
 8003b94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b98:	6013      	str	r3, [r2, #0]
 8003b9a:	e013      	b.n	8003bc4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	015a      	lsls	r2, r3, #5
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ba8:	461a      	mov	r2, r3
 8003baa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003bae:	6013      	str	r3, [r2, #0]
 8003bb0:	e008      	b.n	8003bc4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	015a      	lsls	r2, r3, #5
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	4413      	add	r3, r2
 8003bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	015a      	lsls	r2, r3, #5
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	4413      	add	r3, r2
 8003bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	015a      	lsls	r2, r3, #5
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	4413      	add	r3, r2
 8003bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003be2:	461a      	mov	r2, r3
 8003be4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003be8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	3301      	adds	r3, #1
 8003bee:	613b      	str	r3, [r7, #16]
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d3b7      	bcc.n	8003b68 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c0a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003c18:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d105      	bne.n	8003c2c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	f043 0210 	orr.w	r2, r3, #16
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	699a      	ldr	r2, [r3, #24]
 8003c30:	4b0f      	ldr	r3, [pc, #60]	; (8003c70 <USB_DevInit+0x2c4>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d005      	beq.n	8003c4a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	f043 0208 	orr.w	r2, r3, #8
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003c4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d107      	bne.n	8003c60 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c58:	f043 0304 	orr.w	r3, r3, #4
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003c60:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3718      	adds	r7, #24
 8003c66:	46bd      	mov	sp, r7
 8003c68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c6c:	b004      	add	sp, #16
 8003c6e:	4770      	bx	lr
 8003c70:	803c3800 	.word	0x803c3800

08003c74 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	3301      	adds	r3, #1
 8003c86:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	4a13      	ldr	r2, [pc, #76]	; (8003cd8 <USB_FlushTxFifo+0x64>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d901      	bls.n	8003c94 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e01b      	b.n	8003ccc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	daf2      	bge.n	8003c82 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	019b      	lsls	r3, r3, #6
 8003ca4:	f043 0220 	orr.w	r2, r3, #32
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	3301      	adds	r3, #1
 8003cb0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	4a08      	ldr	r2, [pc, #32]	; (8003cd8 <USB_FlushTxFifo+0x64>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d901      	bls.n	8003cbe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e006      	b.n	8003ccc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	f003 0320 	and.w	r3, r3, #32
 8003cc6:	2b20      	cmp	r3, #32
 8003cc8:	d0f0      	beq.n	8003cac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3714      	adds	r7, #20
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr
 8003cd8:	00030d40 	.word	0x00030d40

08003cdc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	3301      	adds	r3, #1
 8003cec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	4a11      	ldr	r2, [pc, #68]	; (8003d38 <USB_FlushRxFifo+0x5c>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d901      	bls.n	8003cfa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e018      	b.n	8003d2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	daf2      	bge.n	8003ce8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003d02:	2300      	movs	r3, #0
 8003d04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2210      	movs	r2, #16
 8003d0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	3301      	adds	r3, #1
 8003d10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	4a08      	ldr	r2, [pc, #32]	; (8003d38 <USB_FlushRxFifo+0x5c>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d901      	bls.n	8003d1e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e006      	b.n	8003d2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	f003 0310 	and.w	r3, r3, #16
 8003d26:	2b10      	cmp	r3, #16
 8003d28:	d0f0      	beq.n	8003d0c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3714      	adds	r7, #20
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr
 8003d38:	00030d40 	.word	0x00030d40

08003d3c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	460b      	mov	r3, r1
 8003d46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	78fb      	ldrb	r3, [r7, #3]
 8003d56:	68f9      	ldr	r1, [r7, #12]
 8003d58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3714      	adds	r7, #20
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr

08003d6e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b087      	sub	sp, #28
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f003 0306 	and.w	r3, r3, #6
 8003d86:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d102      	bne.n	8003d94 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	75fb      	strb	r3, [r7, #23]
 8003d92:	e00a      	b.n	8003daa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d002      	beq.n	8003da0 <USB_GetDevSpeed+0x32>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2b06      	cmp	r3, #6
 8003d9e:	d102      	bne.n	8003da6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003da0:	2302      	movs	r3, #2
 8003da2:	75fb      	strb	r3, [r7, #23]
 8003da4:	e001      	b.n	8003daa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003da6:	230f      	movs	r3, #15
 8003da8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003daa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	371c      	adds	r7, #28
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	785b      	ldrb	r3, [r3, #1]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d13a      	bne.n	8003e4a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dda:	69da      	ldr	r2, [r3, #28]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	f003 030f 	and.w	r3, r3, #15
 8003de4:	2101      	movs	r1, #1
 8003de6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	68f9      	ldr	r1, [r7, #12]
 8003dee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003df2:	4313      	orrs	r3, r2
 8003df4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	015a      	lsls	r2, r3, #5
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d155      	bne.n	8003eb8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	015a      	lsls	r2, r3, #5
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	4413      	add	r3, r2
 8003e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	791b      	ldrb	r3, [r3, #4]
 8003e26:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e28:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	059b      	lsls	r3, r3, #22
 8003e2e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e30:	4313      	orrs	r3, r2
 8003e32:	68ba      	ldr	r2, [r7, #8]
 8003e34:	0151      	lsls	r1, r2, #5
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	440a      	add	r2, r1
 8003e3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e46:	6013      	str	r3, [r2, #0]
 8003e48:	e036      	b.n	8003eb8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e50:	69da      	ldr	r2, [r3, #28]
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	f003 030f 	and.w	r3, r3, #15
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e60:	041b      	lsls	r3, r3, #16
 8003e62:	68f9      	ldr	r1, [r7, #12]
 8003e64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	015a      	lsls	r2, r3, #5
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	4413      	add	r3, r2
 8003e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d11a      	bne.n	8003eb8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	015a      	lsls	r2, r3, #5
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	4413      	add	r3, r2
 8003e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	791b      	ldrb	r3, [r3, #4]
 8003e9c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003e9e:	430b      	orrs	r3, r1
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	0151      	lsls	r1, r2, #5
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	440a      	add	r2, r1
 8003eaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003eae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eb6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3714      	adds	r7, #20
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
	...

08003ec8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	785b      	ldrb	r3, [r3, #1]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d161      	bne.n	8003fa8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	015a      	lsls	r2, r3, #5
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	4413      	add	r3, r2
 8003eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ef6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003efa:	d11f      	bne.n	8003f3c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	015a      	lsls	r2, r3, #5
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	4413      	add	r3, r2
 8003f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	0151      	lsls	r1, r2, #5
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	440a      	add	r2, r1
 8003f12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f16:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f1a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	015a      	lsls	r2, r3, #5
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	4413      	add	r3, r2
 8003f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68ba      	ldr	r2, [r7, #8]
 8003f2c:	0151      	lsls	r1, r2, #5
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	440a      	add	r2, r1
 8003f32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f3a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	f003 030f 	and.w	r3, r3, #15
 8003f4c:	2101      	movs	r1, #1
 8003f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	43db      	mvns	r3, r3
 8003f56:	68f9      	ldr	r1, [r7, #12]
 8003f58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f66:	69da      	ldr	r2, [r3, #28]
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	f003 030f 	and.w	r3, r3, #15
 8003f70:	2101      	movs	r1, #1
 8003f72:	fa01 f303 	lsl.w	r3, r1, r3
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	43db      	mvns	r3, r3
 8003f7a:	68f9      	ldr	r1, [r7, #12]
 8003f7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f80:	4013      	ands	r3, r2
 8003f82:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	015a      	lsls	r2, r3, #5
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	0159      	lsls	r1, r3, #5
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	440b      	add	r3, r1
 8003f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	4b35      	ldr	r3, [pc, #212]	; (8004078 <USB_DeactivateEndpoint+0x1b0>)
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	600b      	str	r3, [r1, #0]
 8003fa6:	e060      	b.n	800406a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	015a      	lsls	r2, r3, #5
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	4413      	add	r3, r2
 8003fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fbe:	d11f      	bne.n	8004000 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	015a      	lsls	r2, r3, #5
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	0151      	lsls	r1, r2, #5
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	440a      	add	r2, r1
 8003fd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fda:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003fde:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	015a      	lsls	r2, r3, #5
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68ba      	ldr	r2, [r7, #8]
 8003ff0:	0151      	lsls	r1, r2, #5
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	440a      	add	r2, r1
 8003ff6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ffa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ffe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004006:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	f003 030f 	and.w	r3, r3, #15
 8004010:	2101      	movs	r1, #1
 8004012:	fa01 f303 	lsl.w	r3, r1, r3
 8004016:	041b      	lsls	r3, r3, #16
 8004018:	43db      	mvns	r3, r3
 800401a:	68f9      	ldr	r1, [r7, #12]
 800401c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004020:	4013      	ands	r3, r2
 8004022:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800402a:	69da      	ldr	r2, [r3, #28]
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	f003 030f 	and.w	r3, r3, #15
 8004034:	2101      	movs	r1, #1
 8004036:	fa01 f303 	lsl.w	r3, r1, r3
 800403a:	041b      	lsls	r3, r3, #16
 800403c:	43db      	mvns	r3, r3
 800403e:	68f9      	ldr	r1, [r7, #12]
 8004040:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004044:	4013      	ands	r3, r2
 8004046:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	015a      	lsls	r2, r3, #5
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	4413      	add	r3, r2
 8004050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	0159      	lsls	r1, r3, #5
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	440b      	add	r3, r1
 800405e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004062:	4619      	mov	r1, r3
 8004064:	4b05      	ldr	r3, [pc, #20]	; (800407c <USB_DeactivateEndpoint+0x1b4>)
 8004066:	4013      	ands	r3, r2
 8004068:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	3714      	adds	r7, #20
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr
 8004078:	ec337800 	.word	0xec337800
 800407c:	eff37800 	.word	0xeff37800

08004080 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b08a      	sub	sp, #40	; 0x28
 8004084:	af02      	add	r7, sp, #8
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	4613      	mov	r3, r2
 800408c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	785b      	ldrb	r3, [r3, #1]
 800409c:	2b01      	cmp	r3, #1
 800409e:	f040 815c 	bne.w	800435a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d132      	bne.n	8004110 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	015a      	lsls	r2, r3, #5
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	4413      	add	r3, r2
 80040b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	0151      	lsls	r1, r2, #5
 80040bc:	69fa      	ldr	r2, [r7, #28]
 80040be:	440a      	add	r2, r1
 80040c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80040c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80040cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	015a      	lsls	r2, r3, #5
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	4413      	add	r3, r2
 80040d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	0151      	lsls	r1, r2, #5
 80040e0:	69fa      	ldr	r2, [r7, #28]
 80040e2:	440a      	add	r2, r1
 80040e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80040ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	015a      	lsls	r2, r3, #5
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	4413      	add	r3, r2
 80040f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	69ba      	ldr	r2, [r7, #24]
 80040fe:	0151      	lsls	r1, r2, #5
 8004100:	69fa      	ldr	r2, [r7, #28]
 8004102:	440a      	add	r2, r1
 8004104:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004108:	0cdb      	lsrs	r3, r3, #19
 800410a:	04db      	lsls	r3, r3, #19
 800410c:	6113      	str	r3, [r2, #16]
 800410e:	e074      	b.n	80041fa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	015a      	lsls	r2, r3, #5
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	4413      	add	r3, r2
 8004118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	69ba      	ldr	r2, [r7, #24]
 8004120:	0151      	lsls	r1, r2, #5
 8004122:	69fa      	ldr	r2, [r7, #28]
 8004124:	440a      	add	r2, r1
 8004126:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800412a:	0cdb      	lsrs	r3, r3, #19
 800412c:	04db      	lsls	r3, r3, #19
 800412e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	015a      	lsls	r2, r3, #5
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	4413      	add	r3, r2
 8004138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	0151      	lsls	r1, r2, #5
 8004142:	69fa      	ldr	r2, [r7, #28]
 8004144:	440a      	add	r2, r1
 8004146:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800414a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800414e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004152:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	015a      	lsls	r2, r3, #5
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	4413      	add	r3, r2
 800415c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004160:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	6999      	ldr	r1, [r3, #24]
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	440b      	add	r3, r1
 800416c:	1e59      	subs	r1, r3, #1
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	fbb1 f3f3 	udiv	r3, r1, r3
 8004176:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004178:	4b9d      	ldr	r3, [pc, #628]	; (80043f0 <USB_EPStartXfer+0x370>)
 800417a:	400b      	ands	r3, r1
 800417c:	69b9      	ldr	r1, [r7, #24]
 800417e:	0148      	lsls	r0, r1, #5
 8004180:	69f9      	ldr	r1, [r7, #28]
 8004182:	4401      	add	r1, r0
 8004184:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004188:	4313      	orrs	r3, r2
 800418a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	015a      	lsls	r2, r3, #5
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	4413      	add	r3, r2
 8004194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004198:	691a      	ldr	r2, [r3, #16]
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041a2:	69b9      	ldr	r1, [r7, #24]
 80041a4:	0148      	lsls	r0, r1, #5
 80041a6:	69f9      	ldr	r1, [r7, #28]
 80041a8:	4401      	add	r1, r0
 80041aa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80041ae:	4313      	orrs	r3, r2
 80041b0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	791b      	ldrb	r3, [r3, #4]
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d11f      	bne.n	80041fa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	015a      	lsls	r2, r3, #5
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	4413      	add	r3, r2
 80041c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	0151      	lsls	r1, r2, #5
 80041cc:	69fa      	ldr	r2, [r7, #28]
 80041ce:	440a      	add	r2, r1
 80041d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041d4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80041d8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	015a      	lsls	r2, r3, #5
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	4413      	add	r3, r2
 80041e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	0151      	lsls	r1, r2, #5
 80041ec:	69fa      	ldr	r2, [r7, #28]
 80041ee:	440a      	add	r2, r1
 80041f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80041f8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80041fa:	79fb      	ldrb	r3, [r7, #7]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d14b      	bne.n	8004298 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d009      	beq.n	800421c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	015a      	lsls	r2, r3, #5
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	4413      	add	r3, r2
 8004210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004214:	461a      	mov	r2, r3
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	791b      	ldrb	r3, [r3, #4]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d128      	bne.n	8004276 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004230:	2b00      	cmp	r3, #0
 8004232:	d110      	bne.n	8004256 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	015a      	lsls	r2, r3, #5
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	4413      	add	r3, r2
 800423c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	69ba      	ldr	r2, [r7, #24]
 8004244:	0151      	lsls	r1, r2, #5
 8004246:	69fa      	ldr	r2, [r7, #28]
 8004248:	440a      	add	r2, r1
 800424a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800424e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004252:	6013      	str	r3, [r2, #0]
 8004254:	e00f      	b.n	8004276 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	015a      	lsls	r2, r3, #5
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	4413      	add	r3, r2
 800425e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	69ba      	ldr	r2, [r7, #24]
 8004266:	0151      	lsls	r1, r2, #5
 8004268:	69fa      	ldr	r2, [r7, #28]
 800426a:	440a      	add	r2, r1
 800426c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004274:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	015a      	lsls	r2, r3, #5
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	4413      	add	r3, r2
 800427e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	0151      	lsls	r1, r2, #5
 8004288:	69fa      	ldr	r2, [r7, #28]
 800428a:	440a      	add	r2, r1
 800428c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004290:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004294:	6013      	str	r3, [r2, #0]
 8004296:	e133      	b.n	8004500 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	015a      	lsls	r2, r3, #5
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	4413      	add	r3, r2
 80042a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	69ba      	ldr	r2, [r7, #24]
 80042a8:	0151      	lsls	r1, r2, #5
 80042aa:	69fa      	ldr	r2, [r7, #28]
 80042ac:	440a      	add	r2, r1
 80042ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042b6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	791b      	ldrb	r3, [r3, #4]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d015      	beq.n	80042ec <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f000 811b 	beq.w	8004500 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	f003 030f 	and.w	r3, r3, #15
 80042da:	2101      	movs	r1, #1
 80042dc:	fa01 f303 	lsl.w	r3, r1, r3
 80042e0:	69f9      	ldr	r1, [r7, #28]
 80042e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042e6:	4313      	orrs	r3, r2
 80042e8:	634b      	str	r3, [r1, #52]	; 0x34
 80042ea:	e109      	b.n	8004500 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d110      	bne.n	800431e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	015a      	lsls	r2, r3, #5
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	4413      	add	r3, r2
 8004304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	69ba      	ldr	r2, [r7, #24]
 800430c:	0151      	lsls	r1, r2, #5
 800430e:	69fa      	ldr	r2, [r7, #28]
 8004310:	440a      	add	r2, r1
 8004312:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004316:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800431a:	6013      	str	r3, [r2, #0]
 800431c:	e00f      	b.n	800433e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	015a      	lsls	r2, r3, #5
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	4413      	add	r3, r2
 8004326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	69ba      	ldr	r2, [r7, #24]
 800432e:	0151      	lsls	r1, r2, #5
 8004330:	69fa      	ldr	r2, [r7, #28]
 8004332:	440a      	add	r2, r1
 8004334:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800433c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	6919      	ldr	r1, [r3, #16]
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	781a      	ldrb	r2, [r3, #0]
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	b298      	uxth	r0, r3
 800434c:	79fb      	ldrb	r3, [r7, #7]
 800434e:	9300      	str	r3, [sp, #0]
 8004350:	4603      	mov	r3, r0
 8004352:	68f8      	ldr	r0, [r7, #12]
 8004354:	f000 fade 	bl	8004914 <USB_WritePacket>
 8004358:	e0d2      	b.n	8004500 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	015a      	lsls	r2, r3, #5
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	4413      	add	r3, r2
 8004362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	69ba      	ldr	r2, [r7, #24]
 800436a:	0151      	lsls	r1, r2, #5
 800436c:	69fa      	ldr	r2, [r7, #28]
 800436e:	440a      	add	r2, r1
 8004370:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004374:	0cdb      	lsrs	r3, r3, #19
 8004376:	04db      	lsls	r3, r3, #19
 8004378:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	015a      	lsls	r2, r3, #5
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	4413      	add	r3, r2
 8004382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	69ba      	ldr	r2, [r7, #24]
 800438a:	0151      	lsls	r1, r2, #5
 800438c:	69fa      	ldr	r2, [r7, #28]
 800438e:	440a      	add	r2, r1
 8004390:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004394:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004398:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800439c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d126      	bne.n	80043f4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	015a      	lsls	r2, r3, #5
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	4413      	add	r3, r2
 80043ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b2:	691a      	ldr	r2, [r3, #16]
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043bc:	69b9      	ldr	r1, [r7, #24]
 80043be:	0148      	lsls	r0, r1, #5
 80043c0:	69f9      	ldr	r1, [r7, #28]
 80043c2:	4401      	add	r1, r0
 80043c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80043c8:	4313      	orrs	r3, r2
 80043ca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	015a      	lsls	r2, r3, #5
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	4413      	add	r3, r2
 80043d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	69ba      	ldr	r2, [r7, #24]
 80043dc:	0151      	lsls	r1, r2, #5
 80043de:	69fa      	ldr	r2, [r7, #28]
 80043e0:	440a      	add	r2, r1
 80043e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80043ea:	6113      	str	r3, [r2, #16]
 80043ec:	e03a      	b.n	8004464 <USB_EPStartXfer+0x3e4>
 80043ee:	bf00      	nop
 80043f0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	699a      	ldr	r2, [r3, #24]
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	4413      	add	r3, r2
 80043fe:	1e5a      	subs	r2, r3, #1
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	fbb2 f3f3 	udiv	r3, r2, r3
 8004408:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	8afa      	ldrh	r2, [r7, #22]
 8004410:	fb03 f202 	mul.w	r2, r3, r2
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	015a      	lsls	r2, r3, #5
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	4413      	add	r3, r2
 8004420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004424:	691a      	ldr	r2, [r3, #16]
 8004426:	8afb      	ldrh	r3, [r7, #22]
 8004428:	04d9      	lsls	r1, r3, #19
 800442a:	4b38      	ldr	r3, [pc, #224]	; (800450c <USB_EPStartXfer+0x48c>)
 800442c:	400b      	ands	r3, r1
 800442e:	69b9      	ldr	r1, [r7, #24]
 8004430:	0148      	lsls	r0, r1, #5
 8004432:	69f9      	ldr	r1, [r7, #28]
 8004434:	4401      	add	r1, r0
 8004436:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800443a:	4313      	orrs	r3, r2
 800443c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	015a      	lsls	r2, r3, #5
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	4413      	add	r3, r2
 8004446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800444a:	691a      	ldr	r2, [r3, #16]
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	69db      	ldr	r3, [r3, #28]
 8004450:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004454:	69b9      	ldr	r1, [r7, #24]
 8004456:	0148      	lsls	r0, r1, #5
 8004458:	69f9      	ldr	r1, [r7, #28]
 800445a:	4401      	add	r1, r0
 800445c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004460:	4313      	orrs	r3, r2
 8004462:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004464:	79fb      	ldrb	r3, [r7, #7]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d10d      	bne.n	8004486 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d009      	beq.n	8004486 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	6919      	ldr	r1, [r3, #16]
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	015a      	lsls	r2, r3, #5
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	4413      	add	r3, r2
 800447e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004482:	460a      	mov	r2, r1
 8004484:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	791b      	ldrb	r3, [r3, #4]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d128      	bne.n	80044e0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800449a:	2b00      	cmp	r3, #0
 800449c:	d110      	bne.n	80044c0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	015a      	lsls	r2, r3, #5
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	4413      	add	r3, r2
 80044a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	0151      	lsls	r1, r2, #5
 80044b0:	69fa      	ldr	r2, [r7, #28]
 80044b2:	440a      	add	r2, r1
 80044b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80044bc:	6013      	str	r3, [r2, #0]
 80044be:	e00f      	b.n	80044e0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	015a      	lsls	r2, r3, #5
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	4413      	add	r3, r2
 80044c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	69ba      	ldr	r2, [r7, #24]
 80044d0:	0151      	lsls	r1, r2, #5
 80044d2:	69fa      	ldr	r2, [r7, #28]
 80044d4:	440a      	add	r2, r1
 80044d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044de:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	015a      	lsls	r2, r3, #5
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	4413      	add	r3, r2
 80044e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	69ba      	ldr	r2, [r7, #24]
 80044f0:	0151      	lsls	r1, r2, #5
 80044f2:	69fa      	ldr	r2, [r7, #28]
 80044f4:	440a      	add	r2, r1
 80044f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80044fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3720      	adds	r7, #32
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	1ff80000 	.word	0x1ff80000

08004510 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004510:	b480      	push	{r7}
 8004512:	b087      	sub	sp, #28
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	4613      	mov	r3, r2
 800451c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	785b      	ldrb	r3, [r3, #1]
 800452c:	2b01      	cmp	r3, #1
 800452e:	f040 80ce 	bne.w	80046ce <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d132      	bne.n	80045a0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	015a      	lsls	r2, r3, #5
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	4413      	add	r3, r2
 8004542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	0151      	lsls	r1, r2, #5
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	440a      	add	r2, r1
 8004550:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004554:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004558:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800455c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	015a      	lsls	r2, r3, #5
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	4413      	add	r3, r2
 8004566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	693a      	ldr	r2, [r7, #16]
 800456e:	0151      	lsls	r1, r2, #5
 8004570:	697a      	ldr	r2, [r7, #20]
 8004572:	440a      	add	r2, r1
 8004574:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004578:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800457c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	015a      	lsls	r2, r3, #5
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	4413      	add	r3, r2
 8004586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	0151      	lsls	r1, r2, #5
 8004590:	697a      	ldr	r2, [r7, #20]
 8004592:	440a      	add	r2, r1
 8004594:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004598:	0cdb      	lsrs	r3, r3, #19
 800459a:	04db      	lsls	r3, r3, #19
 800459c:	6113      	str	r3, [r2, #16]
 800459e:	e04e      	b.n	800463e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	015a      	lsls	r2, r3, #5
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	4413      	add	r3, r2
 80045a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	0151      	lsls	r1, r2, #5
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	440a      	add	r2, r1
 80045b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045ba:	0cdb      	lsrs	r3, r3, #19
 80045bc:	04db      	lsls	r3, r3, #19
 80045be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	015a      	lsls	r2, r3, #5
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	4413      	add	r3, r2
 80045c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	0151      	lsls	r1, r2, #5
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	440a      	add	r2, r1
 80045d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045da:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80045de:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80045e2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	699a      	ldr	r2, [r3, #24]
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d903      	bls.n	80045f8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	68da      	ldr	r2, [r3, #12]
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	015a      	lsls	r2, r3, #5
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	4413      	add	r3, r2
 8004600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	693a      	ldr	r2, [r7, #16]
 8004608:	0151      	lsls	r1, r2, #5
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	440a      	add	r2, r1
 800460e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004612:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004616:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	015a      	lsls	r2, r3, #5
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	4413      	add	r3, r2
 8004620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004624:	691a      	ldr	r2, [r3, #16]
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800462e:	6939      	ldr	r1, [r7, #16]
 8004630:	0148      	lsls	r0, r1, #5
 8004632:	6979      	ldr	r1, [r7, #20]
 8004634:	4401      	add	r1, r0
 8004636:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800463a:	4313      	orrs	r3, r2
 800463c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800463e:	79fb      	ldrb	r3, [r7, #7]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d11e      	bne.n	8004682 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	695b      	ldr	r3, [r3, #20]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d009      	beq.n	8004660 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	015a      	lsls	r2, r3, #5
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	4413      	add	r3, r2
 8004654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004658:	461a      	mov	r2, r3
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	015a      	lsls	r2, r3, #5
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	4413      	add	r3, r2
 8004668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	0151      	lsls	r1, r2, #5
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	440a      	add	r2, r1
 8004676:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800467a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800467e:	6013      	str	r3, [r2, #0]
 8004680:	e097      	b.n	80047b2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	015a      	lsls	r2, r3, #5
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	4413      	add	r3, r2
 800468a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	0151      	lsls	r1, r2, #5
 8004694:	697a      	ldr	r2, [r7, #20]
 8004696:	440a      	add	r2, r1
 8004698:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800469c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80046a0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	f000 8083 	beq.w	80047b2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	f003 030f 	and.w	r3, r3, #15
 80046bc:	2101      	movs	r1, #1
 80046be:	fa01 f303 	lsl.w	r3, r1, r3
 80046c2:	6979      	ldr	r1, [r7, #20]
 80046c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046c8:	4313      	orrs	r3, r2
 80046ca:	634b      	str	r3, [r1, #52]	; 0x34
 80046cc:	e071      	b.n	80047b2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	015a      	lsls	r2, r3, #5
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	4413      	add	r3, r2
 80046d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	0151      	lsls	r1, r2, #5
 80046e0:	697a      	ldr	r2, [r7, #20]
 80046e2:	440a      	add	r2, r1
 80046e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046e8:	0cdb      	lsrs	r3, r3, #19
 80046ea:	04db      	lsls	r3, r3, #19
 80046ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	015a      	lsls	r2, r3, #5
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	4413      	add	r3, r2
 80046f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	0151      	lsls	r1, r2, #5
 8004700:	697a      	ldr	r2, [r7, #20]
 8004702:	440a      	add	r2, r1
 8004704:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004708:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800470c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004710:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d003      	beq.n	8004722 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	68da      	ldr	r2, [r3, #12]
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	68da      	ldr	r2, [r3, #12]
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	015a      	lsls	r2, r3, #5
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	4413      	add	r3, r2
 8004732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	0151      	lsls	r1, r2, #5
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	440a      	add	r2, r1
 8004740:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004744:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004748:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	015a      	lsls	r2, r3, #5
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	4413      	add	r3, r2
 8004752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004756:	691a      	ldr	r2, [r3, #16]
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	69db      	ldr	r3, [r3, #28]
 800475c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004760:	6939      	ldr	r1, [r7, #16]
 8004762:	0148      	lsls	r0, r1, #5
 8004764:	6979      	ldr	r1, [r7, #20]
 8004766:	4401      	add	r1, r0
 8004768:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800476c:	4313      	orrs	r3, r2
 800476e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004770:	79fb      	ldrb	r3, [r7, #7]
 8004772:	2b01      	cmp	r3, #1
 8004774:	d10d      	bne.n	8004792 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d009      	beq.n	8004792 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	6919      	ldr	r1, [r3, #16]
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	015a      	lsls	r2, r3, #5
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	4413      	add	r3, r2
 800478a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800478e:	460a      	mov	r2, r1
 8004790:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	015a      	lsls	r2, r3, #5
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	4413      	add	r3, r2
 800479a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	0151      	lsls	r1, r2, #5
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	440a      	add	r2, r1
 80047a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80047b0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	371c      	adds	r7, #28
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b087      	sub	sp, #28
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80047ca:	2300      	movs	r3, #0
 80047cc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80047ce:	2300      	movs	r3, #0
 80047d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	785b      	ldrb	r3, [r3, #1]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d14a      	bne.n	8004874 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	015a      	lsls	r2, r3, #5
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	4413      	add	r3, r2
 80047e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047f6:	f040 8086 	bne.w	8004906 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	015a      	lsls	r2, r3, #5
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	4413      	add	r3, r2
 8004804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	683a      	ldr	r2, [r7, #0]
 800480c:	7812      	ldrb	r2, [r2, #0]
 800480e:	0151      	lsls	r1, r2, #5
 8004810:	693a      	ldr	r2, [r7, #16]
 8004812:	440a      	add	r2, r1
 8004814:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004818:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800481c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	015a      	lsls	r2, r3, #5
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	4413      	add	r3, r2
 8004828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	683a      	ldr	r2, [r7, #0]
 8004830:	7812      	ldrb	r2, [r2, #0]
 8004832:	0151      	lsls	r1, r2, #5
 8004834:	693a      	ldr	r2, [r7, #16]
 8004836:	440a      	add	r2, r1
 8004838:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800483c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004840:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	3301      	adds	r3, #1
 8004846:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f242 7210 	movw	r2, #10000	; 0x2710
 800484e:	4293      	cmp	r3, r2
 8004850:	d902      	bls.n	8004858 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	75fb      	strb	r3, [r7, #23]
          break;
 8004856:	e056      	b.n	8004906 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	015a      	lsls	r2, r3, #5
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	4413      	add	r3, r2
 8004862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800486c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004870:	d0e7      	beq.n	8004842 <USB_EPStopXfer+0x82>
 8004872:	e048      	b.n	8004906 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	015a      	lsls	r2, r3, #5
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	4413      	add	r3, r2
 800487e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004888:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800488c:	d13b      	bne.n	8004906 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	015a      	lsls	r2, r3, #5
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	4413      	add	r3, r2
 8004898:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	7812      	ldrb	r2, [r2, #0]
 80048a2:	0151      	lsls	r1, r2, #5
 80048a4:	693a      	ldr	r2, [r7, #16]
 80048a6:	440a      	add	r2, r1
 80048a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80048b0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	015a      	lsls	r2, r3, #5
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	4413      	add	r3, r2
 80048bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	683a      	ldr	r2, [r7, #0]
 80048c4:	7812      	ldrb	r2, [r2, #0]
 80048c6:	0151      	lsls	r1, r2, #5
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	440a      	add	r2, r1
 80048cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048d4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	3301      	adds	r3, #1
 80048da:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f242 7210 	movw	r2, #10000	; 0x2710
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d902      	bls.n	80048ec <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	75fb      	strb	r3, [r7, #23]
          break;
 80048ea:	e00c      	b.n	8004906 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	015a      	lsls	r2, r3, #5
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	4413      	add	r3, r2
 80048f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004900:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004904:	d0e7      	beq.n	80048d6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004906:	7dfb      	ldrb	r3, [r7, #23]
}
 8004908:	4618      	mov	r0, r3
 800490a:	371c      	adds	r7, #28
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004914:	b480      	push	{r7}
 8004916:	b089      	sub	sp, #36	; 0x24
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	4611      	mov	r1, r2
 8004920:	461a      	mov	r2, r3
 8004922:	460b      	mov	r3, r1
 8004924:	71fb      	strb	r3, [r7, #7]
 8004926:	4613      	mov	r3, r2
 8004928:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004932:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004936:	2b00      	cmp	r3, #0
 8004938:	d123      	bne.n	8004982 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800493a:	88bb      	ldrh	r3, [r7, #4]
 800493c:	3303      	adds	r3, #3
 800493e:	089b      	lsrs	r3, r3, #2
 8004940:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004942:	2300      	movs	r3, #0
 8004944:	61bb      	str	r3, [r7, #24]
 8004946:	e018      	b.n	800497a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004948:	79fb      	ldrb	r3, [r7, #7]
 800494a:	031a      	lsls	r2, r3, #12
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	4413      	add	r3, r2
 8004950:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004954:	461a      	mov	r2, r3
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	3301      	adds	r3, #1
 8004960:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	3301      	adds	r3, #1
 8004966:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	3301      	adds	r3, #1
 800496c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	3301      	adds	r3, #1
 8004972:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	3301      	adds	r3, #1
 8004978:	61bb      	str	r3, [r7, #24]
 800497a:	69ba      	ldr	r2, [r7, #24]
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	429a      	cmp	r2, r3
 8004980:	d3e2      	bcc.n	8004948 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3724      	adds	r7, #36	; 0x24
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004990:	b480      	push	{r7}
 8004992:	b08b      	sub	sp, #44	; 0x2c
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	4613      	mov	r3, r2
 800499c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80049a6:	88fb      	ldrh	r3, [r7, #6]
 80049a8:	089b      	lsrs	r3, r3, #2
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80049ae:	88fb      	ldrh	r3, [r7, #6]
 80049b0:	f003 0303 	and.w	r3, r3, #3
 80049b4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80049b6:	2300      	movs	r3, #0
 80049b8:	623b      	str	r3, [r7, #32]
 80049ba:	e014      	b.n	80049e6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c6:	601a      	str	r2, [r3, #0]
    pDest++;
 80049c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ca:	3301      	adds	r3, #1
 80049cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80049ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d0:	3301      	adds	r3, #1
 80049d2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80049d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d6:	3301      	adds	r3, #1
 80049d8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80049da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049dc:	3301      	adds	r3, #1
 80049de:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80049e0:	6a3b      	ldr	r3, [r7, #32]
 80049e2:	3301      	adds	r3, #1
 80049e4:	623b      	str	r3, [r7, #32]
 80049e6:	6a3a      	ldr	r2, [r7, #32]
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d3e6      	bcc.n	80049bc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80049ee:	8bfb      	ldrh	r3, [r7, #30]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d01e      	beq.n	8004a32 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80049f4:	2300      	movs	r3, #0
 80049f6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049fe:	461a      	mov	r2, r3
 8004a00:	f107 0310 	add.w	r3, r7, #16
 8004a04:	6812      	ldr	r2, [r2, #0]
 8004a06:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004a08:	693a      	ldr	r2, [r7, #16]
 8004a0a:	6a3b      	ldr	r3, [r7, #32]
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	00db      	lsls	r3, r3, #3
 8004a10:	fa22 f303 	lsr.w	r3, r2, r3
 8004a14:	b2da      	uxtb	r2, r3
 8004a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a18:	701a      	strb	r2, [r3, #0]
      i++;
 8004a1a:	6a3b      	ldr	r3, [r7, #32]
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	623b      	str	r3, [r7, #32]
      pDest++;
 8004a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a22:	3301      	adds	r3, #1
 8004a24:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004a26:	8bfb      	ldrh	r3, [r7, #30]
 8004a28:	3b01      	subs	r3, #1
 8004a2a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004a2c:	8bfb      	ldrh	r3, [r7, #30]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1ea      	bne.n	8004a08 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	372c      	adds	r7, #44	; 0x2c
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	785b      	ldrb	r3, [r3, #1]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d12c      	bne.n	8004ab6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	015a      	lsls	r2, r3, #5
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	4413      	add	r3, r2
 8004a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	db12      	blt.n	8004a94 <USB_EPSetStall+0x54>
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d00f      	beq.n	8004a94 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	015a      	lsls	r2, r3, #5
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68ba      	ldr	r2, [r7, #8]
 8004a84:	0151      	lsls	r1, r2, #5
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	440a      	add	r2, r1
 8004a8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a8e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a92:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	015a      	lsls	r2, r3, #5
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	0151      	lsls	r1, r2, #5
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	440a      	add	r2, r1
 8004aaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ab2:	6013      	str	r3, [r2, #0]
 8004ab4:	e02b      	b.n	8004b0e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	015a      	lsls	r2, r3, #5
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	4413      	add	r3, r2
 8004abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	db12      	blt.n	8004aee <USB_EPSetStall+0xae>
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00f      	beq.n	8004aee <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	015a      	lsls	r2, r3, #5
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68ba      	ldr	r2, [r7, #8]
 8004ade:	0151      	lsls	r1, r2, #5
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	440a      	add	r2, r1
 8004ae4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ae8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004aec:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	015a      	lsls	r2, r3, #5
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	4413      	add	r3, r2
 8004af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68ba      	ldr	r2, [r7, #8]
 8004afe:	0151      	lsls	r1, r2, #5
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	440a      	add	r2, r1
 8004b04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b0c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3714      	adds	r7, #20
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	785b      	ldrb	r3, [r3, #1]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d128      	bne.n	8004b8a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	015a      	lsls	r2, r3, #5
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	4413      	add	r3, r2
 8004b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68ba      	ldr	r2, [r7, #8]
 8004b48:	0151      	lsls	r1, r2, #5
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	440a      	add	r2, r1
 8004b4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b56:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	791b      	ldrb	r3, [r3, #4]
 8004b5c:	2b03      	cmp	r3, #3
 8004b5e:	d003      	beq.n	8004b68 <USB_EPClearStall+0x4c>
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	791b      	ldrb	r3, [r3, #4]
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d138      	bne.n	8004bda <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	015a      	lsls	r2, r3, #5
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	4413      	add	r3, r2
 8004b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68ba      	ldr	r2, [r7, #8]
 8004b78:	0151      	lsls	r1, r2, #5
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	440a      	add	r2, r1
 8004b7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b86:	6013      	str	r3, [r2, #0]
 8004b88:	e027      	b.n	8004bda <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	015a      	lsls	r2, r3, #5
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	4413      	add	r3, r2
 8004b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68ba      	ldr	r2, [r7, #8]
 8004b9a:	0151      	lsls	r1, r2, #5
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	440a      	add	r2, r1
 8004ba0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ba4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ba8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	791b      	ldrb	r3, [r3, #4]
 8004bae:	2b03      	cmp	r3, #3
 8004bb0:	d003      	beq.n	8004bba <USB_EPClearStall+0x9e>
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	791b      	ldrb	r3, [r3, #4]
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d10f      	bne.n	8004bda <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	015a      	lsls	r2, r3, #5
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68ba      	ldr	r2, [r7, #8]
 8004bca:	0151      	lsls	r1, r2, #5
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	440a      	add	r2, r1
 8004bd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bd8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3714      	adds	r7, #20
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c06:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004c0a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	78fb      	ldrb	r3, [r7, #3]
 8004c16:	011b      	lsls	r3, r3, #4
 8004c18:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004c1c:	68f9      	ldr	r1, [r7, #12]
 8004c1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c22:	4313      	orrs	r3, r2
 8004c24:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3714      	adds	r7, #20
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004c4e:	f023 0303 	bic.w	r3, r3, #3
 8004c52:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c62:	f023 0302 	bic.w	r3, r3, #2
 8004c66:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3714      	adds	r7, #20
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr

08004c76 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004c76:	b480      	push	{r7}
 8004c78:	b085      	sub	sp, #20
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004c90:	f023 0303 	bic.w	r3, r3, #3
 8004c94:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ca4:	f043 0302 	orr.w	r3, r3, #2
 8004ca8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3714      	adds	r7, #20
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	695b      	ldr	r3, [r3, #20]
 8004cc4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	4013      	ands	r3, r2
 8004cce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3714      	adds	r7, #20
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr

08004cde <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004cde:	b480      	push	{r7}
 8004ce0:	b085      	sub	sp, #20
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cfa:	69db      	ldr	r3, [r3, #28]
 8004cfc:	68ba      	ldr	r2, [r7, #8]
 8004cfe:	4013      	ands	r3, r2
 8004d00:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	0c1b      	lsrs	r3, r3, #16
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3714      	adds	r7, #20
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr

08004d12 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d12:	b480      	push	{r7}
 8004d14:	b085      	sub	sp, #20
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d2e:	69db      	ldr	r3, [r3, #28]
 8004d30:	68ba      	ldr	r2, [r7, #8]
 8004d32:	4013      	ands	r3, r2
 8004d34:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	b29b      	uxth	r3, r3
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3714      	adds	r7, #20
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr

08004d46 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004d46:	b480      	push	{r7}
 8004d48:	b085      	sub	sp, #20
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
 8004d4e:	460b      	mov	r3, r1
 8004d50:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004d56:	78fb      	ldrb	r3, [r7, #3]
 8004d58:	015a      	lsls	r2, r3, #5
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d6c:	695b      	ldr	r3, [r3, #20]
 8004d6e:	68ba      	ldr	r2, [r7, #8]
 8004d70:	4013      	ands	r3, r2
 8004d72:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004d74:	68bb      	ldr	r3, [r7, #8]
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3714      	adds	r7, #20
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b087      	sub	sp, #28
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004da4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004da6:	78fb      	ldrb	r3, [r7, #3]
 8004da8:	f003 030f 	and.w	r3, r3, #15
 8004dac:	68fa      	ldr	r2, [r7, #12]
 8004dae:	fa22 f303 	lsr.w	r3, r2, r3
 8004db2:	01db      	lsls	r3, r3, #7
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	693a      	ldr	r2, [r7, #16]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004dbc:	78fb      	ldrb	r3, [r7, #3]
 8004dbe:	015a      	lsls	r2, r3, #5
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	4013      	ands	r3, r2
 8004dce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004dd0:	68bb      	ldr	r3, [r7, #8]
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	371c      	adds	r7, #28
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr

08004dde <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004dde:	b480      	push	{r7}
 8004de0:	b083      	sub	sp, #12
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	f003 0301 	and.w	r3, r3, #1
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	370c      	adds	r7, #12
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr

08004dfa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004dfa:	b480      	push	{r7}
 8004dfc:	b085      	sub	sp, #20
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e14:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004e18:	f023 0307 	bic.w	r3, r3, #7
 8004e1c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e30:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3714      	adds	r7, #20
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b087      	sub	sp, #28
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	460b      	mov	r3, r1
 8004e4a:	607a      	str	r2, [r7, #4]
 8004e4c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	333c      	adds	r3, #60	; 0x3c
 8004e56:	3304      	adds	r3, #4
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	4a26      	ldr	r2, [pc, #152]	; (8004ef8 <USB_EP0_OutStart+0xb8>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d90a      	bls.n	8004e7a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e74:	d101      	bne.n	8004e7a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004e76:	2300      	movs	r3, #0
 8004e78:	e037      	b.n	8004eea <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e80:	461a      	mov	r2, r3
 8004e82:	2300      	movs	r3, #0
 8004e84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	697a      	ldr	r2, [r7, #20]
 8004e90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	697a      	ldr	r2, [r7, #20]
 8004ea4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ea8:	f043 0318 	orr.w	r3, r3, #24
 8004eac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ebc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004ec0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004ec2:	7afb      	ldrb	r3, [r7, #11]
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d10f      	bne.n	8004ee8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ece:	461a      	mov	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	697a      	ldr	r2, [r7, #20]
 8004ede:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ee2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004ee6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	371c      	adds	r7, #28
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	4f54300a 	.word	0x4f54300a

08004efc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f04:	2300      	movs	r3, #0
 8004f06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	4a13      	ldr	r2, [pc, #76]	; (8004f60 <USB_CoreReset+0x64>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d901      	bls.n	8004f1a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e01b      	b.n	8004f52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	daf2      	bge.n	8004f08 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004f22:	2300      	movs	r3, #0
 8004f24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	f043 0201 	orr.w	r2, r3, #1
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	3301      	adds	r3, #1
 8004f36:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	4a09      	ldr	r2, [pc, #36]	; (8004f60 <USB_CoreReset+0x64>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d901      	bls.n	8004f44 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e006      	b.n	8004f52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	f003 0301 	and.w	r3, r3, #1
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d0f0      	beq.n	8004f32 <USB_CoreReset+0x36>

  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3714      	adds	r7, #20
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr
 8004f5e:	bf00      	nop
 8004f60:	00030d40 	.word	0x00030d40

08004f64 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004f70:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004f74:	f006 fefc 	bl	800bd70 <USBD_static_malloc>
 8004f78:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d109      	bne.n	8004f94 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	32b0      	adds	r2, #176	; 0xb0
 8004f8a:	2100      	movs	r1, #0
 8004f8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004f90:	2302      	movs	r3, #2
 8004f92:	e0d4      	b.n	800513e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004f94:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004f98:	2100      	movs	r1, #0
 8004f9a:	68f8      	ldr	r0, [r7, #12]
 8004f9c:	f006 ff66 	bl	800be6c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	32b0      	adds	r2, #176	; 0xb0
 8004faa:	68f9      	ldr	r1, [r7, #12]
 8004fac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	32b0      	adds	r2, #176	; 0xb0
 8004fba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	7c1b      	ldrb	r3, [r3, #16]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d138      	bne.n	800503e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004fcc:	4b5e      	ldr	r3, [pc, #376]	; (8005148 <USBD_CDC_Init+0x1e4>)
 8004fce:	7819      	ldrb	r1, [r3, #0]
 8004fd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fd4:	2202      	movs	r2, #2
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f006 fda7 	bl	800bb2a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004fdc:	4b5a      	ldr	r3, [pc, #360]	; (8005148 <USBD_CDC_Init+0x1e4>)
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	f003 020f 	and.w	r2, r3, #15
 8004fe4:	6879      	ldr	r1, [r7, #4]
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	4413      	add	r3, r2
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	440b      	add	r3, r1
 8004ff0:	3324      	adds	r3, #36	; 0x24
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004ff6:	4b55      	ldr	r3, [pc, #340]	; (800514c <USBD_CDC_Init+0x1e8>)
 8004ff8:	7819      	ldrb	r1, [r3, #0]
 8004ffa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ffe:	2202      	movs	r2, #2
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f006 fd92 	bl	800bb2a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005006:	4b51      	ldr	r3, [pc, #324]	; (800514c <USBD_CDC_Init+0x1e8>)
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	f003 020f 	and.w	r2, r3, #15
 800500e:	6879      	ldr	r1, [r7, #4]
 8005010:	4613      	mov	r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	4413      	add	r3, r2
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	440b      	add	r3, r1
 800501a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800501e:	2201      	movs	r2, #1
 8005020:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005022:	4b4b      	ldr	r3, [pc, #300]	; (8005150 <USBD_CDC_Init+0x1ec>)
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	f003 020f 	and.w	r2, r3, #15
 800502a:	6879      	ldr	r1, [r7, #4]
 800502c:	4613      	mov	r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	4413      	add	r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	440b      	add	r3, r1
 8005036:	3326      	adds	r3, #38	; 0x26
 8005038:	2210      	movs	r2, #16
 800503a:	801a      	strh	r2, [r3, #0]
 800503c:	e035      	b.n	80050aa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800503e:	4b42      	ldr	r3, [pc, #264]	; (8005148 <USBD_CDC_Init+0x1e4>)
 8005040:	7819      	ldrb	r1, [r3, #0]
 8005042:	2340      	movs	r3, #64	; 0x40
 8005044:	2202      	movs	r2, #2
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f006 fd6f 	bl	800bb2a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800504c:	4b3e      	ldr	r3, [pc, #248]	; (8005148 <USBD_CDC_Init+0x1e4>)
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	f003 020f 	and.w	r2, r3, #15
 8005054:	6879      	ldr	r1, [r7, #4]
 8005056:	4613      	mov	r3, r2
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	4413      	add	r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	440b      	add	r3, r1
 8005060:	3324      	adds	r3, #36	; 0x24
 8005062:	2201      	movs	r2, #1
 8005064:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005066:	4b39      	ldr	r3, [pc, #228]	; (800514c <USBD_CDC_Init+0x1e8>)
 8005068:	7819      	ldrb	r1, [r3, #0]
 800506a:	2340      	movs	r3, #64	; 0x40
 800506c:	2202      	movs	r2, #2
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f006 fd5b 	bl	800bb2a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005074:	4b35      	ldr	r3, [pc, #212]	; (800514c <USBD_CDC_Init+0x1e8>)
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	f003 020f 	and.w	r2, r3, #15
 800507c:	6879      	ldr	r1, [r7, #4]
 800507e:	4613      	mov	r3, r2
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	4413      	add	r3, r2
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	440b      	add	r3, r1
 8005088:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800508c:	2201      	movs	r2, #1
 800508e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005090:	4b2f      	ldr	r3, [pc, #188]	; (8005150 <USBD_CDC_Init+0x1ec>)
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	f003 020f 	and.w	r2, r3, #15
 8005098:	6879      	ldr	r1, [r7, #4]
 800509a:	4613      	mov	r3, r2
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	4413      	add	r3, r2
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	440b      	add	r3, r1
 80050a4:	3326      	adds	r3, #38	; 0x26
 80050a6:	2210      	movs	r2, #16
 80050a8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80050aa:	4b29      	ldr	r3, [pc, #164]	; (8005150 <USBD_CDC_Init+0x1ec>)
 80050ac:	7819      	ldrb	r1, [r3, #0]
 80050ae:	2308      	movs	r3, #8
 80050b0:	2203      	movs	r2, #3
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f006 fd39 	bl	800bb2a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80050b8:	4b25      	ldr	r3, [pc, #148]	; (8005150 <USBD_CDC_Init+0x1ec>)
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	f003 020f 	and.w	r2, r3, #15
 80050c0:	6879      	ldr	r1, [r7, #4]
 80050c2:	4613      	mov	r3, r2
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	4413      	add	r3, r2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	440b      	add	r3, r1
 80050cc:	3324      	adds	r3, #36	; 0x24
 80050ce:	2201      	movs	r2, #1
 80050d0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	33b0      	adds	r3, #176	; 0xb0
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	4413      	add	r3, r2
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005104:	2b00      	cmp	r3, #0
 8005106:	d101      	bne.n	800510c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005108:	2302      	movs	r3, #2
 800510a:	e018      	b.n	800513e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	7c1b      	ldrb	r3, [r3, #16]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d10a      	bne.n	800512a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005114:	4b0d      	ldr	r3, [pc, #52]	; (800514c <USBD_CDC_Init+0x1e8>)
 8005116:	7819      	ldrb	r1, [r3, #0]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800511e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f006 fdf0 	bl	800bd08 <USBD_LL_PrepareReceive>
 8005128:	e008      	b.n	800513c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800512a:	4b08      	ldr	r3, [pc, #32]	; (800514c <USBD_CDC_Init+0x1e8>)
 800512c:	7819      	ldrb	r1, [r3, #0]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005134:	2340      	movs	r3, #64	; 0x40
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f006 fde6 	bl	800bd08 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	2000009f 	.word	0x2000009f
 800514c:	200000a0 	.word	0x200000a0
 8005150:	200000a1 	.word	0x200000a1

08005154 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	460b      	mov	r3, r1
 800515e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005160:	4b3a      	ldr	r3, [pc, #232]	; (800524c <USBD_CDC_DeInit+0xf8>)
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	4619      	mov	r1, r3
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f006 fd05 	bl	800bb76 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800516c:	4b37      	ldr	r3, [pc, #220]	; (800524c <USBD_CDC_DeInit+0xf8>)
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	f003 020f 	and.w	r2, r3, #15
 8005174:	6879      	ldr	r1, [r7, #4]
 8005176:	4613      	mov	r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	4413      	add	r3, r2
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	440b      	add	r3, r1
 8005180:	3324      	adds	r3, #36	; 0x24
 8005182:	2200      	movs	r2, #0
 8005184:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005186:	4b32      	ldr	r3, [pc, #200]	; (8005250 <USBD_CDC_DeInit+0xfc>)
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	4619      	mov	r1, r3
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f006 fcf2 	bl	800bb76 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005192:	4b2f      	ldr	r3, [pc, #188]	; (8005250 <USBD_CDC_DeInit+0xfc>)
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	f003 020f 	and.w	r2, r3, #15
 800519a:	6879      	ldr	r1, [r7, #4]
 800519c:	4613      	mov	r3, r2
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	4413      	add	r3, r2
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	440b      	add	r3, r1
 80051a6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80051aa:	2200      	movs	r2, #0
 80051ac:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80051ae:	4b29      	ldr	r3, [pc, #164]	; (8005254 <USBD_CDC_DeInit+0x100>)
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	4619      	mov	r1, r3
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f006 fcde 	bl	800bb76 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80051ba:	4b26      	ldr	r3, [pc, #152]	; (8005254 <USBD_CDC_DeInit+0x100>)
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	f003 020f 	and.w	r2, r3, #15
 80051c2:	6879      	ldr	r1, [r7, #4]
 80051c4:	4613      	mov	r3, r2
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	4413      	add	r3, r2
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	440b      	add	r3, r1
 80051ce:	3324      	adds	r3, #36	; 0x24
 80051d0:	2200      	movs	r2, #0
 80051d2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80051d4:	4b1f      	ldr	r3, [pc, #124]	; (8005254 <USBD_CDC_DeInit+0x100>)
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	f003 020f 	and.w	r2, r3, #15
 80051dc:	6879      	ldr	r1, [r7, #4]
 80051de:	4613      	mov	r3, r2
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	4413      	add	r3, r2
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	440b      	add	r3, r1
 80051e8:	3326      	adds	r3, #38	; 0x26
 80051ea:	2200      	movs	r2, #0
 80051ec:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	32b0      	adds	r2, #176	; 0xb0
 80051f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d01f      	beq.n	8005240 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	33b0      	adds	r3, #176	; 0xb0
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4413      	add	r3, r2
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	32b0      	adds	r2, #176	; 0xb0
 800521e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005222:	4618      	mov	r0, r3
 8005224:	f006 fdb2 	bl	800bd8c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	32b0      	adds	r2, #176	; 0xb0
 8005232:	2100      	movs	r1, #0
 8005234:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3708      	adds	r7, #8
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	2000009f 	.word	0x2000009f
 8005250:	200000a0 	.word	0x200000a0
 8005254:	200000a1 	.word	0x200000a1

08005258 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b086      	sub	sp, #24
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	32b0      	adds	r2, #176	; 0xb0
 800526c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005270:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005272:	2300      	movs	r3, #0
 8005274:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005276:	2300      	movs	r3, #0
 8005278:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800527a:	2300      	movs	r3, #0
 800527c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d101      	bne.n	8005288 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005284:	2303      	movs	r3, #3
 8005286:	e0bf      	b.n	8005408 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005290:	2b00      	cmp	r3, #0
 8005292:	d050      	beq.n	8005336 <USBD_CDC_Setup+0xde>
 8005294:	2b20      	cmp	r3, #32
 8005296:	f040 80af 	bne.w	80053f8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	88db      	ldrh	r3, [r3, #6]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d03a      	beq.n	8005318 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	b25b      	sxtb	r3, r3
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	da1b      	bge.n	80052e4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	33b0      	adds	r3, #176	; 0xb0
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	4413      	add	r3, r2
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	683a      	ldr	r2, [r7, #0]
 80052c0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80052c2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80052c4:	683a      	ldr	r2, [r7, #0]
 80052c6:	88d2      	ldrh	r2, [r2, #6]
 80052c8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	88db      	ldrh	r3, [r3, #6]
 80052ce:	2b07      	cmp	r3, #7
 80052d0:	bf28      	it	cs
 80052d2:	2307      	movcs	r3, #7
 80052d4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	89fa      	ldrh	r2, [r7, #14]
 80052da:	4619      	mov	r1, r3
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f001 fd89 	bl	8006df4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80052e2:	e090      	b.n	8005406 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	785a      	ldrb	r2, [r3, #1]
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	88db      	ldrh	r3, [r3, #6]
 80052f2:	2b3f      	cmp	r3, #63	; 0x3f
 80052f4:	d803      	bhi.n	80052fe <USBD_CDC_Setup+0xa6>
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	88db      	ldrh	r3, [r3, #6]
 80052fa:	b2da      	uxtb	r2, r3
 80052fc:	e000      	b.n	8005300 <USBD_CDC_Setup+0xa8>
 80052fe:	2240      	movs	r2, #64	; 0x40
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005306:	6939      	ldr	r1, [r7, #16]
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800530e:	461a      	mov	r2, r3
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f001 fd9b 	bl	8006e4c <USBD_CtlPrepareRx>
      break;
 8005316:	e076      	b.n	8005406 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	33b0      	adds	r3, #176	; 0xb0
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	4413      	add	r3, r2
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	683a      	ldr	r2, [r7, #0]
 800532c:	7850      	ldrb	r0, [r2, #1]
 800532e:	2200      	movs	r2, #0
 8005330:	6839      	ldr	r1, [r7, #0]
 8005332:	4798      	blx	r3
      break;
 8005334:	e067      	b.n	8005406 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	785b      	ldrb	r3, [r3, #1]
 800533a:	2b0b      	cmp	r3, #11
 800533c:	d851      	bhi.n	80053e2 <USBD_CDC_Setup+0x18a>
 800533e:	a201      	add	r2, pc, #4	; (adr r2, 8005344 <USBD_CDC_Setup+0xec>)
 8005340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005344:	08005375 	.word	0x08005375
 8005348:	080053f1 	.word	0x080053f1
 800534c:	080053e3 	.word	0x080053e3
 8005350:	080053e3 	.word	0x080053e3
 8005354:	080053e3 	.word	0x080053e3
 8005358:	080053e3 	.word	0x080053e3
 800535c:	080053e3 	.word	0x080053e3
 8005360:	080053e3 	.word	0x080053e3
 8005364:	080053e3 	.word	0x080053e3
 8005368:	080053e3 	.word	0x080053e3
 800536c:	0800539f 	.word	0x0800539f
 8005370:	080053c9 	.word	0x080053c9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800537a:	b2db      	uxtb	r3, r3
 800537c:	2b03      	cmp	r3, #3
 800537e:	d107      	bne.n	8005390 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005380:	f107 030a 	add.w	r3, r7, #10
 8005384:	2202      	movs	r2, #2
 8005386:	4619      	mov	r1, r3
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f001 fd33 	bl	8006df4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800538e:	e032      	b.n	80053f6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005390:	6839      	ldr	r1, [r7, #0]
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f001 fcbd 	bl	8006d12 <USBD_CtlError>
            ret = USBD_FAIL;
 8005398:	2303      	movs	r3, #3
 800539a:	75fb      	strb	r3, [r7, #23]
          break;
 800539c:	e02b      	b.n	80053f6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	2b03      	cmp	r3, #3
 80053a8:	d107      	bne.n	80053ba <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80053aa:	f107 030d 	add.w	r3, r7, #13
 80053ae:	2201      	movs	r2, #1
 80053b0:	4619      	mov	r1, r3
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f001 fd1e 	bl	8006df4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80053b8:	e01d      	b.n	80053f6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80053ba:	6839      	ldr	r1, [r7, #0]
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f001 fca8 	bl	8006d12 <USBD_CtlError>
            ret = USBD_FAIL;
 80053c2:	2303      	movs	r3, #3
 80053c4:	75fb      	strb	r3, [r7, #23]
          break;
 80053c6:	e016      	b.n	80053f6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	2b03      	cmp	r3, #3
 80053d2:	d00f      	beq.n	80053f4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80053d4:	6839      	ldr	r1, [r7, #0]
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f001 fc9b 	bl	8006d12 <USBD_CtlError>
            ret = USBD_FAIL;
 80053dc:	2303      	movs	r3, #3
 80053de:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80053e0:	e008      	b.n	80053f4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80053e2:	6839      	ldr	r1, [r7, #0]
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f001 fc94 	bl	8006d12 <USBD_CtlError>
          ret = USBD_FAIL;
 80053ea:	2303      	movs	r3, #3
 80053ec:	75fb      	strb	r3, [r7, #23]
          break;
 80053ee:	e002      	b.n	80053f6 <USBD_CDC_Setup+0x19e>
          break;
 80053f0:	bf00      	nop
 80053f2:	e008      	b.n	8005406 <USBD_CDC_Setup+0x1ae>
          break;
 80053f4:	bf00      	nop
      }
      break;
 80053f6:	e006      	b.n	8005406 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80053f8:	6839      	ldr	r1, [r7, #0]
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f001 fc89 	bl	8006d12 <USBD_CtlError>
      ret = USBD_FAIL;
 8005400:	2303      	movs	r3, #3
 8005402:	75fb      	strb	r3, [r7, #23]
      break;
 8005404:	bf00      	nop
  }

  return (uint8_t)ret;
 8005406:	7dfb      	ldrb	r3, [r7, #23]
}
 8005408:	4618      	mov	r0, r3
 800540a:	3718      	adds	r7, #24
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	460b      	mov	r3, r1
 800541a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005422:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	32b0      	adds	r2, #176	; 0xb0
 800542e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d101      	bne.n	800543a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005436:	2303      	movs	r3, #3
 8005438:	e065      	b.n	8005506 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	32b0      	adds	r2, #176	; 0xb0
 8005444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005448:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800544a:	78fb      	ldrb	r3, [r7, #3]
 800544c:	f003 020f 	and.w	r2, r3, #15
 8005450:	6879      	ldr	r1, [r7, #4]
 8005452:	4613      	mov	r3, r2
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	4413      	add	r3, r2
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	440b      	add	r3, r1
 800545c:	3318      	adds	r3, #24
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d02f      	beq.n	80054c4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005464:	78fb      	ldrb	r3, [r7, #3]
 8005466:	f003 020f 	and.w	r2, r3, #15
 800546a:	6879      	ldr	r1, [r7, #4]
 800546c:	4613      	mov	r3, r2
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	4413      	add	r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	440b      	add	r3, r1
 8005476:	3318      	adds	r3, #24
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	78fb      	ldrb	r3, [r7, #3]
 800547c:	f003 010f 	and.w	r1, r3, #15
 8005480:	68f8      	ldr	r0, [r7, #12]
 8005482:	460b      	mov	r3, r1
 8005484:	00db      	lsls	r3, r3, #3
 8005486:	440b      	add	r3, r1
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	4403      	add	r3, r0
 800548c:	3348      	adds	r3, #72	; 0x48
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	fbb2 f1f3 	udiv	r1, r2, r3
 8005494:	fb01 f303 	mul.w	r3, r1, r3
 8005498:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800549a:	2b00      	cmp	r3, #0
 800549c:	d112      	bne.n	80054c4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800549e:	78fb      	ldrb	r3, [r7, #3]
 80054a0:	f003 020f 	and.w	r2, r3, #15
 80054a4:	6879      	ldr	r1, [r7, #4]
 80054a6:	4613      	mov	r3, r2
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	4413      	add	r3, r2
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	440b      	add	r3, r1
 80054b0:	3318      	adds	r3, #24
 80054b2:	2200      	movs	r2, #0
 80054b4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80054b6:	78f9      	ldrb	r1, [r7, #3]
 80054b8:	2300      	movs	r3, #0
 80054ba:	2200      	movs	r2, #0
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f006 fc02 	bl	800bcc6 <USBD_LL_Transmit>
 80054c2:	e01f      	b.n	8005504 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	33b0      	adds	r3, #176	; 0xb0
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	4413      	add	r3, r2
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d010      	beq.n	8005504 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	33b0      	adds	r3, #176	; 0xb0
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	4413      	add	r3, r2
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	691b      	ldr	r3, [r3, #16]
 80054f4:	68ba      	ldr	r2, [r7, #8]
 80054f6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80054fa:	68ba      	ldr	r2, [r7, #8]
 80054fc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005500:	78fa      	ldrb	r2, [r7, #3]
 8005502:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}

0800550e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800550e:	b580      	push	{r7, lr}
 8005510:	b084      	sub	sp, #16
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
 8005516:	460b      	mov	r3, r1
 8005518:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	32b0      	adds	r2, #176	; 0xb0
 8005524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005528:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	32b0      	adds	r2, #176	; 0xb0
 8005534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d101      	bne.n	8005540 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800553c:	2303      	movs	r3, #3
 800553e:	e01a      	b.n	8005576 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005540:	78fb      	ldrb	r3, [r7, #3]
 8005542:	4619      	mov	r1, r3
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f006 fc00 	bl	800bd4a <USBD_LL_GetRxDataSize>
 800554a:	4602      	mov	r2, r0
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	33b0      	adds	r3, #176	; 0xb0
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	4413      	add	r3, r2
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005570:	4611      	mov	r1, r2
 8005572:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3710      	adds	r7, #16
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800557e:	b580      	push	{r7, lr}
 8005580:	b084      	sub	sp, #16
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	32b0      	adds	r2, #176	; 0xb0
 8005590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005594:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d101      	bne.n	80055a0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800559c:	2303      	movs	r3, #3
 800559e:	e025      	b.n	80055ec <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	33b0      	adds	r3, #176	; 0xb0
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	4413      	add	r3, r2
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d01a      	beq.n	80055ea <USBD_CDC_EP0_RxReady+0x6c>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80055ba:	2bff      	cmp	r3, #255	; 0xff
 80055bc:	d015      	beq.n	80055ea <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	33b0      	adds	r3, #176	; 0xb0
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	4413      	add	r3, r2
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80055d6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80055de:	b292      	uxth	r2, r2
 80055e0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	22ff      	movs	r2, #255	; 0xff
 80055e6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3710      	adds	r7, #16
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b086      	sub	sp, #24
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80055fc:	2182      	movs	r1, #130	; 0x82
 80055fe:	4818      	ldr	r0, [pc, #96]	; (8005660 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005600:	f000 fd4f 	bl	80060a2 <USBD_GetEpDesc>
 8005604:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005606:	2101      	movs	r1, #1
 8005608:	4815      	ldr	r0, [pc, #84]	; (8005660 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800560a:	f000 fd4a 	bl	80060a2 <USBD_GetEpDesc>
 800560e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005610:	2181      	movs	r1, #129	; 0x81
 8005612:	4813      	ldr	r0, [pc, #76]	; (8005660 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005614:	f000 fd45 	bl	80060a2 <USBD_GetEpDesc>
 8005618:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d002      	beq.n	8005626 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	2210      	movs	r2, #16
 8005624:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d006      	beq.n	800563a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	2200      	movs	r2, #0
 8005630:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005634:	711a      	strb	r2, [r3, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d006      	beq.n	800564e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005648:	711a      	strb	r2, [r3, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2243      	movs	r2, #67	; 0x43
 8005652:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005654:	4b02      	ldr	r3, [pc, #8]	; (8005660 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005656:	4618      	mov	r0, r3
 8005658:	3718      	adds	r7, #24
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	2000005c 	.word	0x2000005c

08005664 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b086      	sub	sp, #24
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800566c:	2182      	movs	r1, #130	; 0x82
 800566e:	4818      	ldr	r0, [pc, #96]	; (80056d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005670:	f000 fd17 	bl	80060a2 <USBD_GetEpDesc>
 8005674:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005676:	2101      	movs	r1, #1
 8005678:	4815      	ldr	r0, [pc, #84]	; (80056d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800567a:	f000 fd12 	bl	80060a2 <USBD_GetEpDesc>
 800567e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005680:	2181      	movs	r1, #129	; 0x81
 8005682:	4813      	ldr	r0, [pc, #76]	; (80056d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005684:	f000 fd0d 	bl	80060a2 <USBD_GetEpDesc>
 8005688:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d002      	beq.n	8005696 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	2210      	movs	r2, #16
 8005694:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d006      	beq.n	80056aa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	2200      	movs	r2, #0
 80056a0:	711a      	strb	r2, [r3, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f042 0202 	orr.w	r2, r2, #2
 80056a8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d006      	beq.n	80056be <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	711a      	strb	r2, [r3, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f042 0202 	orr.w	r2, r2, #2
 80056bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2243      	movs	r2, #67	; 0x43
 80056c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80056c4:	4b02      	ldr	r3, [pc, #8]	; (80056d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3718      	adds	r7, #24
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	2000005c 	.word	0x2000005c

080056d4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b086      	sub	sp, #24
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80056dc:	2182      	movs	r1, #130	; 0x82
 80056de:	4818      	ldr	r0, [pc, #96]	; (8005740 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80056e0:	f000 fcdf 	bl	80060a2 <USBD_GetEpDesc>
 80056e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80056e6:	2101      	movs	r1, #1
 80056e8:	4815      	ldr	r0, [pc, #84]	; (8005740 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80056ea:	f000 fcda 	bl	80060a2 <USBD_GetEpDesc>
 80056ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80056f0:	2181      	movs	r1, #129	; 0x81
 80056f2:	4813      	ldr	r0, [pc, #76]	; (8005740 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80056f4:	f000 fcd5 	bl	80060a2 <USBD_GetEpDesc>
 80056f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d002      	beq.n	8005706 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	2210      	movs	r2, #16
 8005704:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d006      	beq.n	800571a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	2200      	movs	r2, #0
 8005710:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005714:	711a      	strb	r2, [r3, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d006      	beq.n	800572e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2200      	movs	r2, #0
 8005724:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005728:	711a      	strb	r2, [r3, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2243      	movs	r2, #67	; 0x43
 8005732:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005734:	4b02      	ldr	r3, [pc, #8]	; (8005740 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005736:	4618      	mov	r0, r3
 8005738:	3718      	adds	r7, #24
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	2000005c 	.word	0x2000005c

08005744 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	220a      	movs	r2, #10
 8005750:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005752:	4b03      	ldr	r3, [pc, #12]	; (8005760 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005754:	4618      	mov	r0, r3
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr
 8005760:	20000018 	.word	0x20000018

08005764 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d101      	bne.n	8005778 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005774:	2303      	movs	r3, #3
 8005776:	e009      	b.n	800578c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	33b0      	adds	r3, #176	; 0xb0
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	4413      	add	r3, r2
 8005786:	683a      	ldr	r2, [r7, #0]
 8005788:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	370c      	adds	r7, #12
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005798:	b480      	push	{r7}
 800579a:	b087      	sub	sp, #28
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	32b0      	adds	r2, #176	; 0xb0
 80057ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057b2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d101      	bne.n	80057be <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e008      	b.n	80057d0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	68ba      	ldr	r2, [r7, #8]
 80057c2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	371c      	adds	r7, #28
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80057dc:	b480      	push	{r7}
 80057de:	b085      	sub	sp, #20
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	32b0      	adds	r2, #176	; 0xb0
 80057f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057f4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d101      	bne.n	8005800 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80057fc:	2303      	movs	r3, #3
 80057fe:	e004      	b.n	800580a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	683a      	ldr	r2, [r7, #0]
 8005804:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3714      	adds	r7, #20
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
	...

08005818 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	32b0      	adds	r2, #176	; 0xb0
 800582a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800582e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005830:	2301      	movs	r3, #1
 8005832:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	32b0      	adds	r2, #176	; 0xb0
 800583e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d101      	bne.n	800584a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005846:	2303      	movs	r3, #3
 8005848:	e025      	b.n	8005896 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005850:	2b00      	cmp	r3, #0
 8005852:	d11f      	bne.n	8005894 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	2201      	movs	r2, #1
 8005858:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800585c:	4b10      	ldr	r3, [pc, #64]	; (80058a0 <USBD_CDC_TransmitPacket+0x88>)
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	f003 020f 	and.w	r2, r3, #15
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	4613      	mov	r3, r2
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	4413      	add	r3, r2
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	4403      	add	r3, r0
 8005876:	3318      	adds	r3, #24
 8005878:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800587a:	4b09      	ldr	r3, [pc, #36]	; (80058a0 <USBD_CDC_TransmitPacket+0x88>)
 800587c:	7819      	ldrb	r1, [r3, #0]
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f006 fa1b 	bl	800bcc6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005890:	2300      	movs	r3, #0
 8005892:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005894:	7bfb      	ldrb	r3, [r7, #15]
}
 8005896:	4618      	mov	r0, r3
 8005898:	3710      	adds	r7, #16
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	2000009f 	.word	0x2000009f

080058a4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	32b0      	adds	r2, #176	; 0xb0
 80058b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058ba:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	32b0      	adds	r2, #176	; 0xb0
 80058c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d101      	bne.n	80058d2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e018      	b.n	8005904 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	7c1b      	ldrb	r3, [r3, #16]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d10a      	bne.n	80058f0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80058da:	4b0c      	ldr	r3, [pc, #48]	; (800590c <USBD_CDC_ReceivePacket+0x68>)
 80058dc:	7819      	ldrb	r1, [r3, #0]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80058e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f006 fa0d 	bl	800bd08 <USBD_LL_PrepareReceive>
 80058ee:	e008      	b.n	8005902 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80058f0:	4b06      	ldr	r3, [pc, #24]	; (800590c <USBD_CDC_ReceivePacket+0x68>)
 80058f2:	7819      	ldrb	r1, [r3, #0]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80058fa:	2340      	movs	r3, #64	; 0x40
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f006 fa03 	bl	800bd08 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005902:	2300      	movs	r3, #0
}
 8005904:	4618      	mov	r0, r3
 8005906:	3710      	adds	r7, #16
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	200000a0 	.word	0x200000a0

08005910 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b086      	sub	sp, #24
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	4613      	mov	r3, r2
 800591c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d101      	bne.n	8005928 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005924:	2303      	movs	r3, #3
 8005926:	e01f      	b.n	8005968 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2200      	movs	r2, #0
 8005934:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d003      	beq.n	800594e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	68ba      	ldr	r2, [r7, #8]
 800594a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	79fa      	ldrb	r2, [r7, #7]
 800595a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800595c:	68f8      	ldr	r0, [r7, #12]
 800595e:	f006 f87d 	bl	800ba5c <USBD_LL_Init>
 8005962:	4603      	mov	r3, r0
 8005964:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005966:	7dfb      	ldrb	r3, [r7, #23]
}
 8005968:	4618      	mov	r0, r3
 800596a:	3718      	adds	r7, #24
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800597a:	2300      	movs	r3, #0
 800597c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d101      	bne.n	8005988 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005984:	2303      	movs	r3, #3
 8005986:	e025      	b.n	80059d4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	683a      	ldr	r2, [r7, #0]
 800598c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	32ae      	adds	r2, #174	; 0xae
 800599a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800599e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00f      	beq.n	80059c4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	32ae      	adds	r2, #174	; 0xae
 80059ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b4:	f107 020e 	add.w	r2, r7, #14
 80059b8:	4610      	mov	r0, r2
 80059ba:	4798      	blx	r3
 80059bc:	4602      	mov	r2, r0
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80059ca:	1c5a      	adds	r2, r3, #1
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3710      	adds	r7, #16
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b082      	sub	sp, #8
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f006 f885 	bl	800baf4 <USBD_LL_Start>
 80059ea:	4603      	mov	r3, r0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3708      	adds	r7, #8
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80059fc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	370c      	adds	r7, #12
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr

08005a0a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a0a:	b580      	push	{r7, lr}
 8005a0c:	b084      	sub	sp, #16
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
 8005a12:	460b      	mov	r3, r1
 8005a14:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a16:	2300      	movs	r3, #0
 8005a18:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d009      	beq.n	8005a38 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	78fa      	ldrb	r2, [r7, #3]
 8005a2e:	4611      	mov	r1, r2
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	4798      	blx	r3
 8005a34:	4603      	mov	r3, r0
 8005a36:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3710      	adds	r7, #16
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}

08005a42 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a42:	b580      	push	{r7, lr}
 8005a44:	b084      	sub	sp, #16
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
 8005a4a:	460b      	mov	r3, r1
 8005a4c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	78fa      	ldrb	r2, [r7, #3]
 8005a5c:	4611      	mov	r1, r2
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	4798      	blx	r3
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d001      	beq.n	8005a6c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005a76:	b580      	push	{r7, lr}
 8005a78:	b084      	sub	sp, #16
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
 8005a7e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005a86:	6839      	ldr	r1, [r7, #0]
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f001 f908 	bl	8006c9e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2201      	movs	r2, #1
 8005a92:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005aaa:	f003 031f 	and.w	r3, r3, #31
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d01a      	beq.n	8005ae8 <USBD_LL_SetupStage+0x72>
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d822      	bhi.n	8005afc <USBD_LL_SetupStage+0x86>
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d002      	beq.n	8005ac0 <USBD_LL_SetupStage+0x4a>
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d00a      	beq.n	8005ad4 <USBD_LL_SetupStage+0x5e>
 8005abe:	e01d      	b.n	8005afc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 fb5f 	bl	800618c <USBD_StdDevReq>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	73fb      	strb	r3, [r7, #15]
      break;
 8005ad2:	e020      	b.n	8005b16 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ada:	4619      	mov	r1, r3
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f000 fbc7 	bl	8006270 <USBD_StdItfReq>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	73fb      	strb	r3, [r7, #15]
      break;
 8005ae6:	e016      	b.n	8005b16 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005aee:	4619      	mov	r1, r3
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f000 fc29 	bl	8006348 <USBD_StdEPReq>
 8005af6:	4603      	mov	r3, r0
 8005af8:	73fb      	strb	r3, [r7, #15]
      break;
 8005afa:	e00c      	b.n	8005b16 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005b02:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	4619      	mov	r1, r3
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f006 f852 	bl	800bbb4 <USBD_LL_StallEP>
 8005b10:	4603      	mov	r3, r0
 8005b12:	73fb      	strb	r3, [r7, #15]
      break;
 8005b14:	bf00      	nop
  }

  return ret;
 8005b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3710      	adds	r7, #16
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	460b      	mov	r3, r1
 8005b2a:	607a      	str	r2, [r7, #4]
 8005b2c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005b32:	7afb      	ldrb	r3, [r7, #11]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d16e      	bne.n	8005c16 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005b3e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005b46:	2b03      	cmp	r3, #3
 8005b48:	f040 8098 	bne.w	8005c7c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	689a      	ldr	r2, [r3, #8]
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d913      	bls.n	8005b80 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	689a      	ldr	r2, [r3, #8]
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	1ad2      	subs	r2, r2, r3
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	68da      	ldr	r2, [r3, #12]
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	bf28      	it	cs
 8005b72:	4613      	movcs	r3, r2
 8005b74:	461a      	mov	r2, r3
 8005b76:	6879      	ldr	r1, [r7, #4]
 8005b78:	68f8      	ldr	r0, [r7, #12]
 8005b7a:	f001 f984 	bl	8006e86 <USBD_CtlContinueRx>
 8005b7e:	e07d      	b.n	8005c7c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005b86:	f003 031f 	and.w	r3, r3, #31
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d014      	beq.n	8005bb8 <USBD_LL_DataOutStage+0x98>
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d81d      	bhi.n	8005bce <USBD_LL_DataOutStage+0xae>
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d002      	beq.n	8005b9c <USBD_LL_DataOutStage+0x7c>
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d003      	beq.n	8005ba2 <USBD_LL_DataOutStage+0x82>
 8005b9a:	e018      	b.n	8005bce <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	75bb      	strb	r3, [r7, #22]
            break;
 8005ba0:	e018      	b.n	8005bd4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	4619      	mov	r1, r3
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f000 fa5e 	bl	800606e <USBD_CoreFindIF>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	75bb      	strb	r3, [r7, #22]
            break;
 8005bb6:	e00d      	b.n	8005bd4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	f000 fa60 	bl	8006088 <USBD_CoreFindEP>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	75bb      	strb	r3, [r7, #22]
            break;
 8005bcc:	e002      	b.n	8005bd4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	75bb      	strb	r3, [r7, #22]
            break;
 8005bd2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005bd4:	7dbb      	ldrb	r3, [r7, #22]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d119      	bne.n	8005c0e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b03      	cmp	r3, #3
 8005be4:	d113      	bne.n	8005c0e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005be6:	7dba      	ldrb	r2, [r7, #22]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	32ae      	adds	r2, #174	; 0xae
 8005bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00b      	beq.n	8005c0e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005bf6:	7dba      	ldrb	r2, [r7, #22]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005bfe:	7dba      	ldrb	r2, [r7, #22]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	32ae      	adds	r2, #174	; 0xae
 8005c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005c0e:	68f8      	ldr	r0, [r7, #12]
 8005c10:	f001 f94a 	bl	8006ea8 <USBD_CtlSendStatus>
 8005c14:	e032      	b.n	8005c7c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005c16:	7afb      	ldrb	r3, [r7, #11]
 8005c18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	4619      	mov	r1, r3
 8005c20:	68f8      	ldr	r0, [r7, #12]
 8005c22:	f000 fa31 	bl	8006088 <USBD_CoreFindEP>
 8005c26:	4603      	mov	r3, r0
 8005c28:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005c2a:	7dbb      	ldrb	r3, [r7, #22]
 8005c2c:	2bff      	cmp	r3, #255	; 0xff
 8005c2e:	d025      	beq.n	8005c7c <USBD_LL_DataOutStage+0x15c>
 8005c30:	7dbb      	ldrb	r3, [r7, #22]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d122      	bne.n	8005c7c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	2b03      	cmp	r3, #3
 8005c40:	d117      	bne.n	8005c72 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005c42:	7dba      	ldrb	r2, [r7, #22]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	32ae      	adds	r2, #174	; 0xae
 8005c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00f      	beq.n	8005c72 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005c52:	7dba      	ldrb	r2, [r7, #22]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005c5a:	7dba      	ldrb	r2, [r7, #22]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	32ae      	adds	r2, #174	; 0xae
 8005c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c64:	699b      	ldr	r3, [r3, #24]
 8005c66:	7afa      	ldrb	r2, [r7, #11]
 8005c68:	4611      	mov	r1, r2
 8005c6a:	68f8      	ldr	r0, [r7, #12]
 8005c6c:	4798      	blx	r3
 8005c6e:	4603      	mov	r3, r0
 8005c70:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005c72:	7dfb      	ldrb	r3, [r7, #23]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d001      	beq.n	8005c7c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005c78:	7dfb      	ldrb	r3, [r7, #23]
 8005c7a:	e000      	b.n	8005c7e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3718      	adds	r7, #24
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}

08005c86 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b086      	sub	sp, #24
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	60f8      	str	r0, [r7, #12]
 8005c8e:	460b      	mov	r3, r1
 8005c90:	607a      	str	r2, [r7, #4]
 8005c92:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005c94:	7afb      	ldrb	r3, [r7, #11]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d16f      	bne.n	8005d7a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	3314      	adds	r3, #20
 8005c9e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	d15a      	bne.n	8005d60 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	689a      	ldr	r2, [r3, #8]
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d914      	bls.n	8005ce0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	689a      	ldr	r2, [r3, #8]
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	1ad2      	subs	r2, r2, r3
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	461a      	mov	r2, r3
 8005cca:	6879      	ldr	r1, [r7, #4]
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f001 f8ac 	bl	8006e2a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	2100      	movs	r1, #0
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	f006 f815 	bl	800bd08 <USBD_LL_PrepareReceive>
 8005cde:	e03f      	b.n	8005d60 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	68da      	ldr	r2, [r3, #12]
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d11c      	bne.n	8005d26 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	685a      	ldr	r2, [r3, #4]
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d316      	bcc.n	8005d26 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	685a      	ldr	r2, [r3, #4]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d20f      	bcs.n	8005d26 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005d06:	2200      	movs	r2, #0
 8005d08:	2100      	movs	r1, #0
 8005d0a:	68f8      	ldr	r0, [r7, #12]
 8005d0c:	f001 f88d 	bl	8006e2a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005d18:	2300      	movs	r3, #0
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	2100      	movs	r1, #0
 8005d1e:	68f8      	ldr	r0, [r7, #12]
 8005d20:	f005 fff2 	bl	800bd08 <USBD_LL_PrepareReceive>
 8005d24:	e01c      	b.n	8005d60 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	2b03      	cmp	r3, #3
 8005d30:	d10f      	bne.n	8005d52 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d009      	beq.n	8005d52 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	68f8      	ldr	r0, [r7, #12]
 8005d50:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005d52:	2180      	movs	r1, #128	; 0x80
 8005d54:	68f8      	ldr	r0, [r7, #12]
 8005d56:	f005 ff2d 	bl	800bbb4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	f001 f8b7 	bl	8006ece <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d03a      	beq.n	8005de0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005d6a:	68f8      	ldr	r0, [r7, #12]
 8005d6c:	f7ff fe42 	bl	80059f4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005d78:	e032      	b.n	8005de0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005d7a:	7afb      	ldrb	r3, [r7, #11]
 8005d7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	4619      	mov	r1, r3
 8005d84:	68f8      	ldr	r0, [r7, #12]
 8005d86:	f000 f97f 	bl	8006088 <USBD_CoreFindEP>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005d8e:	7dfb      	ldrb	r3, [r7, #23]
 8005d90:	2bff      	cmp	r3, #255	; 0xff
 8005d92:	d025      	beq.n	8005de0 <USBD_LL_DataInStage+0x15a>
 8005d94:	7dfb      	ldrb	r3, [r7, #23]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d122      	bne.n	8005de0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	2b03      	cmp	r3, #3
 8005da4:	d11c      	bne.n	8005de0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005da6:	7dfa      	ldrb	r2, [r7, #23]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	32ae      	adds	r2, #174	; 0xae
 8005dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d014      	beq.n	8005de0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005db6:	7dfa      	ldrb	r2, [r7, #23]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005dbe:	7dfa      	ldrb	r2, [r7, #23]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	32ae      	adds	r2, #174	; 0xae
 8005dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dc8:	695b      	ldr	r3, [r3, #20]
 8005dca:	7afa      	ldrb	r2, [r7, #11]
 8005dcc:	4611      	mov	r1, r2
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	4798      	blx	r3
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005dd6:	7dbb      	ldrb	r3, [r7, #22]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d001      	beq.n	8005de0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005ddc:	7dbb      	ldrb	r3, [r7, #22]
 8005dde:	e000      	b.n	8005de2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3718      	adds	r7, #24
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}

08005dea <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b084      	sub	sp, #16
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005df2:	2300      	movs	r3, #0
 8005df4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d014      	beq.n	8005e50 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00e      	beq.n	8005e50 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	6852      	ldr	r2, [r2, #4]
 8005e3e:	b2d2      	uxtb	r2, r2
 8005e40:	4611      	mov	r1, r2
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	4798      	blx	r3
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d001      	beq.n	8005e50 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005e50:	2340      	movs	r3, #64	; 0x40
 8005e52:	2200      	movs	r2, #0
 8005e54:	2100      	movs	r1, #0
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f005 fe67 	bl	800bb2a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2240      	movs	r2, #64	; 0x40
 8005e68:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005e6c:	2340      	movs	r3, #64	; 0x40
 8005e6e:	2200      	movs	r2, #0
 8005e70:	2180      	movs	r1, #128	; 0x80
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f005 fe59 	bl	800bb2a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2240      	movs	r2, #64	; 0x40
 8005e82:	621a      	str	r2, [r3, #32]

  return ret;
 8005e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005e8e:	b480      	push	{r7}
 8005e90:	b083      	sub	sp, #12
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
 8005e96:	460b      	mov	r3, r1
 8005e98:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	78fa      	ldrb	r2, [r7, #3]
 8005e9e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	370c      	adds	r7, #12
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr

08005eae <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005eae:	b480      	push	{r7}
 8005eb0:	b083      	sub	sp, #12
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ebc:	b2da      	uxtb	r2, r3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2204      	movs	r2, #4
 8005ec8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	370c      	adds	r7, #12
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr

08005eda <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005eda:	b480      	push	{r7}
 8005edc:	b083      	sub	sp, #12
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	2b04      	cmp	r3, #4
 8005eec:	d106      	bne.n	8005efc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005ef4:	b2da      	uxtb	r2, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	370c      	adds	r7, #12
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr

08005f0a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b082      	sub	sp, #8
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	2b03      	cmp	r3, #3
 8005f1c:	d110      	bne.n	8005f40 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d00b      	beq.n	8005f40 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f2e:	69db      	ldr	r3, [r3, #28]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d005      	beq.n	8005f40 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f3a:	69db      	ldr	r3, [r3, #28]
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3708      	adds	r7, #8
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}

08005f4a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005f4a:	b580      	push	{r7, lr}
 8005f4c:	b082      	sub	sp, #8
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
 8005f52:	460b      	mov	r3, r1
 8005f54:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	32ae      	adds	r2, #174	; 0xae
 8005f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d101      	bne.n	8005f6c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005f68:	2303      	movs	r3, #3
 8005f6a:	e01c      	b.n	8005fa6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	2b03      	cmp	r3, #3
 8005f76:	d115      	bne.n	8005fa4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	32ae      	adds	r2, #174	; 0xae
 8005f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f86:	6a1b      	ldr	r3, [r3, #32]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d00b      	beq.n	8005fa4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	32ae      	adds	r2, #174	; 0xae
 8005f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f9a:	6a1b      	ldr	r3, [r3, #32]
 8005f9c:	78fa      	ldrb	r2, [r7, #3]
 8005f9e:	4611      	mov	r1, r2
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3708      	adds	r7, #8
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b082      	sub	sp, #8
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	32ae      	adds	r2, #174	; 0xae
 8005fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d101      	bne.n	8005fd0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	e01c      	b.n	800600a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	2b03      	cmp	r3, #3
 8005fda:	d115      	bne.n	8006008 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	32ae      	adds	r2, #174	; 0xae
 8005fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00b      	beq.n	8006008 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	32ae      	adds	r2, #174	; 0xae
 8005ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006000:	78fa      	ldrb	r2, [r7, #3]
 8006002:	4611      	mov	r1, r2
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3708      	adds	r7, #8
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}

08006012 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006012:	b480      	push	{r7}
 8006014:	b083      	sub	sp, #12
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800601a:	2300      	movs	r3, #0
}
 800601c:	4618      	mov	r0, r3
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006030:	2300      	movs	r3, #0
 8006032:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00e      	beq.n	8006064 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	6852      	ldr	r2, [r2, #4]
 8006052:	b2d2      	uxtb	r2, r2
 8006054:	4611      	mov	r1, r2
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	4798      	blx	r3
 800605a:	4603      	mov	r3, r0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d001      	beq.n	8006064 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006060:	2303      	movs	r3, #3
 8006062:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006064:	7bfb      	ldrb	r3, [r7, #15]
}
 8006066:	4618      	mov	r0, r3
 8006068:	3710      	adds	r7, #16
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}

0800606e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800606e:	b480      	push	{r7}
 8006070:	b083      	sub	sp, #12
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
 8006076:	460b      	mov	r3, r1
 8006078:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800607a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800607c:	4618      	mov	r0, r3
 800607e:	370c      	adds	r7, #12
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr

08006088 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	460b      	mov	r3, r1
 8006092:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006094:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006096:	4618      	mov	r0, r3
 8006098:	370c      	adds	r7, #12
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr

080060a2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80060a2:	b580      	push	{r7, lr}
 80060a4:	b086      	sub	sp, #24
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	6078      	str	r0, [r7, #4]
 80060aa:	460b      	mov	r3, r1
 80060ac:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80060b6:	2300      	movs	r3, #0
 80060b8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	885b      	ldrh	r3, [r3, #2]
 80060be:	b29a      	uxth	r2, r3
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d920      	bls.n	800610c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80060d2:	e013      	b.n	80060fc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80060d4:	f107 030a 	add.w	r3, r7, #10
 80060d8:	4619      	mov	r1, r3
 80060da:	6978      	ldr	r0, [r7, #20]
 80060dc:	f000 f81b 	bl	8006116 <USBD_GetNextDesc>
 80060e0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	785b      	ldrb	r3, [r3, #1]
 80060e6:	2b05      	cmp	r3, #5
 80060e8:	d108      	bne.n	80060fc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	789b      	ldrb	r3, [r3, #2]
 80060f2:	78fa      	ldrb	r2, [r7, #3]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d008      	beq.n	800610a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80060f8:	2300      	movs	r3, #0
 80060fa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	885b      	ldrh	r3, [r3, #2]
 8006100:	b29a      	uxth	r2, r3
 8006102:	897b      	ldrh	r3, [r7, #10]
 8006104:	429a      	cmp	r2, r3
 8006106:	d8e5      	bhi.n	80060d4 <USBD_GetEpDesc+0x32>
 8006108:	e000      	b.n	800610c <USBD_GetEpDesc+0x6a>
          break;
 800610a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800610c:	693b      	ldr	r3, [r7, #16]
}
 800610e:	4618      	mov	r0, r3
 8006110:	3718      	adds	r7, #24
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}

08006116 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006116:	b480      	push	{r7}
 8006118:	b085      	sub	sp, #20
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
 800611e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	881a      	ldrh	r2, [r3, #0]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	b29b      	uxth	r3, r3
 800612e:	4413      	add	r3, r2
 8006130:	b29a      	uxth	r2, r3
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	461a      	mov	r2, r3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4413      	add	r3, r2
 8006140:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006142:	68fb      	ldr	r3, [r7, #12]
}
 8006144:	4618      	mov	r0, r3
 8006146:	3714      	adds	r7, #20
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006150:	b480      	push	{r7}
 8006152:	b087      	sub	sp, #28
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	3301      	adds	r3, #1
 8006166:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800616e:	8a3b      	ldrh	r3, [r7, #16]
 8006170:	021b      	lsls	r3, r3, #8
 8006172:	b21a      	sxth	r2, r3
 8006174:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006178:	4313      	orrs	r3, r2
 800617a:	b21b      	sxth	r3, r3
 800617c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800617e:	89fb      	ldrh	r3, [r7, #14]
}
 8006180:	4618      	mov	r0, r3
 8006182:	371c      	adds	r7, #28
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr

0800618c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006196:	2300      	movs	r3, #0
 8006198:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80061a2:	2b40      	cmp	r3, #64	; 0x40
 80061a4:	d005      	beq.n	80061b2 <USBD_StdDevReq+0x26>
 80061a6:	2b40      	cmp	r3, #64	; 0x40
 80061a8:	d857      	bhi.n	800625a <USBD_StdDevReq+0xce>
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00f      	beq.n	80061ce <USBD_StdDevReq+0x42>
 80061ae:	2b20      	cmp	r3, #32
 80061b0:	d153      	bne.n	800625a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	32ae      	adds	r2, #174	; 0xae
 80061bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	6839      	ldr	r1, [r7, #0]
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	4798      	blx	r3
 80061c8:	4603      	mov	r3, r0
 80061ca:	73fb      	strb	r3, [r7, #15]
      break;
 80061cc:	e04a      	b.n	8006264 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	785b      	ldrb	r3, [r3, #1]
 80061d2:	2b09      	cmp	r3, #9
 80061d4:	d83b      	bhi.n	800624e <USBD_StdDevReq+0xc2>
 80061d6:	a201      	add	r2, pc, #4	; (adr r2, 80061dc <USBD_StdDevReq+0x50>)
 80061d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061dc:	08006231 	.word	0x08006231
 80061e0:	08006245 	.word	0x08006245
 80061e4:	0800624f 	.word	0x0800624f
 80061e8:	0800623b 	.word	0x0800623b
 80061ec:	0800624f 	.word	0x0800624f
 80061f0:	0800620f 	.word	0x0800620f
 80061f4:	08006205 	.word	0x08006205
 80061f8:	0800624f 	.word	0x0800624f
 80061fc:	08006227 	.word	0x08006227
 8006200:	08006219 	.word	0x08006219
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006204:	6839      	ldr	r1, [r7, #0]
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 fa3c 	bl	8006684 <USBD_GetDescriptor>
          break;
 800620c:	e024      	b.n	8006258 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800620e:	6839      	ldr	r1, [r7, #0]
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 fba1 	bl	8006958 <USBD_SetAddress>
          break;
 8006216:	e01f      	b.n	8006258 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006218:	6839      	ldr	r1, [r7, #0]
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 fbe0 	bl	80069e0 <USBD_SetConfig>
 8006220:	4603      	mov	r3, r0
 8006222:	73fb      	strb	r3, [r7, #15]
          break;
 8006224:	e018      	b.n	8006258 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006226:	6839      	ldr	r1, [r7, #0]
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 fc83 	bl	8006b34 <USBD_GetConfig>
          break;
 800622e:	e013      	b.n	8006258 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006230:	6839      	ldr	r1, [r7, #0]
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 fcb4 	bl	8006ba0 <USBD_GetStatus>
          break;
 8006238:	e00e      	b.n	8006258 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800623a:	6839      	ldr	r1, [r7, #0]
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 fce3 	bl	8006c08 <USBD_SetFeature>
          break;
 8006242:	e009      	b.n	8006258 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006244:	6839      	ldr	r1, [r7, #0]
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 fd07 	bl	8006c5a <USBD_ClrFeature>
          break;
 800624c:	e004      	b.n	8006258 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800624e:	6839      	ldr	r1, [r7, #0]
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 fd5e 	bl	8006d12 <USBD_CtlError>
          break;
 8006256:	bf00      	nop
      }
      break;
 8006258:	e004      	b.n	8006264 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800625a:	6839      	ldr	r1, [r7, #0]
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 fd58 	bl	8006d12 <USBD_CtlError>
      break;
 8006262:	bf00      	nop
  }

  return ret;
 8006264:	7bfb      	ldrb	r3, [r7, #15]
}
 8006266:	4618      	mov	r0, r3
 8006268:	3710      	adds	r7, #16
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
 800626e:	bf00      	nop

08006270 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800627a:	2300      	movs	r3, #0
 800627c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006286:	2b40      	cmp	r3, #64	; 0x40
 8006288:	d005      	beq.n	8006296 <USBD_StdItfReq+0x26>
 800628a:	2b40      	cmp	r3, #64	; 0x40
 800628c:	d852      	bhi.n	8006334 <USBD_StdItfReq+0xc4>
 800628e:	2b00      	cmp	r3, #0
 8006290:	d001      	beq.n	8006296 <USBD_StdItfReq+0x26>
 8006292:	2b20      	cmp	r3, #32
 8006294:	d14e      	bne.n	8006334 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800629c:	b2db      	uxtb	r3, r3
 800629e:	3b01      	subs	r3, #1
 80062a0:	2b02      	cmp	r3, #2
 80062a2:	d840      	bhi.n	8006326 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	889b      	ldrh	r3, [r3, #4]
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d836      	bhi.n	800631c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	889b      	ldrh	r3, [r3, #4]
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	4619      	mov	r1, r3
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f7ff fed9 	bl	800606e <USBD_CoreFindIF>
 80062bc:	4603      	mov	r3, r0
 80062be:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80062c0:	7bbb      	ldrb	r3, [r7, #14]
 80062c2:	2bff      	cmp	r3, #255	; 0xff
 80062c4:	d01d      	beq.n	8006302 <USBD_StdItfReq+0x92>
 80062c6:	7bbb      	ldrb	r3, [r7, #14]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d11a      	bne.n	8006302 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80062cc:	7bba      	ldrb	r2, [r7, #14]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	32ae      	adds	r2, #174	; 0xae
 80062d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d00f      	beq.n	80062fc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80062dc:	7bba      	ldrb	r2, [r7, #14]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80062e4:	7bba      	ldrb	r2, [r7, #14]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	32ae      	adds	r2, #174	; 0xae
 80062ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	6839      	ldr	r1, [r7, #0]
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	4798      	blx	r3
 80062f6:	4603      	mov	r3, r0
 80062f8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80062fa:	e004      	b.n	8006306 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80062fc:	2303      	movs	r3, #3
 80062fe:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006300:	e001      	b.n	8006306 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006302:	2303      	movs	r3, #3
 8006304:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	88db      	ldrh	r3, [r3, #6]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d110      	bne.n	8006330 <USBD_StdItfReq+0xc0>
 800630e:	7bfb      	ldrb	r3, [r7, #15]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d10d      	bne.n	8006330 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 fdc7 	bl	8006ea8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800631a:	e009      	b.n	8006330 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800631c:	6839      	ldr	r1, [r7, #0]
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 fcf7 	bl	8006d12 <USBD_CtlError>
          break;
 8006324:	e004      	b.n	8006330 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006326:	6839      	ldr	r1, [r7, #0]
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 fcf2 	bl	8006d12 <USBD_CtlError>
          break;
 800632e:	e000      	b.n	8006332 <USBD_StdItfReq+0xc2>
          break;
 8006330:	bf00      	nop
      }
      break;
 8006332:	e004      	b.n	800633e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006334:	6839      	ldr	r1, [r7, #0]
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 fceb 	bl	8006d12 <USBD_CtlError>
      break;
 800633c:	bf00      	nop
  }

  return ret;
 800633e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006340:	4618      	mov	r0, r3
 8006342:	3710      	adds	r7, #16
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006352:	2300      	movs	r3, #0
 8006354:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	889b      	ldrh	r3, [r3, #4]
 800635a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006364:	2b40      	cmp	r3, #64	; 0x40
 8006366:	d007      	beq.n	8006378 <USBD_StdEPReq+0x30>
 8006368:	2b40      	cmp	r3, #64	; 0x40
 800636a:	f200 817f 	bhi.w	800666c <USBD_StdEPReq+0x324>
 800636e:	2b00      	cmp	r3, #0
 8006370:	d02a      	beq.n	80063c8 <USBD_StdEPReq+0x80>
 8006372:	2b20      	cmp	r3, #32
 8006374:	f040 817a 	bne.w	800666c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006378:	7bbb      	ldrb	r3, [r7, #14]
 800637a:	4619      	mov	r1, r3
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f7ff fe83 	bl	8006088 <USBD_CoreFindEP>
 8006382:	4603      	mov	r3, r0
 8006384:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006386:	7b7b      	ldrb	r3, [r7, #13]
 8006388:	2bff      	cmp	r3, #255	; 0xff
 800638a:	f000 8174 	beq.w	8006676 <USBD_StdEPReq+0x32e>
 800638e:	7b7b      	ldrb	r3, [r7, #13]
 8006390:	2b00      	cmp	r3, #0
 8006392:	f040 8170 	bne.w	8006676 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006396:	7b7a      	ldrb	r2, [r7, #13]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800639e:	7b7a      	ldrb	r2, [r7, #13]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	32ae      	adds	r2, #174	; 0xae
 80063a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	f000 8163 	beq.w	8006676 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80063b0:	7b7a      	ldrb	r2, [r7, #13]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	32ae      	adds	r2, #174	; 0xae
 80063b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	6839      	ldr	r1, [r7, #0]
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	4798      	blx	r3
 80063c2:	4603      	mov	r3, r0
 80063c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80063c6:	e156      	b.n	8006676 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	785b      	ldrb	r3, [r3, #1]
 80063cc:	2b03      	cmp	r3, #3
 80063ce:	d008      	beq.n	80063e2 <USBD_StdEPReq+0x9a>
 80063d0:	2b03      	cmp	r3, #3
 80063d2:	f300 8145 	bgt.w	8006660 <USBD_StdEPReq+0x318>
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	f000 809b 	beq.w	8006512 <USBD_StdEPReq+0x1ca>
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d03c      	beq.n	800645a <USBD_StdEPReq+0x112>
 80063e0:	e13e      	b.n	8006660 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d002      	beq.n	80063f4 <USBD_StdEPReq+0xac>
 80063ee:	2b03      	cmp	r3, #3
 80063f0:	d016      	beq.n	8006420 <USBD_StdEPReq+0xd8>
 80063f2:	e02c      	b.n	800644e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80063f4:	7bbb      	ldrb	r3, [r7, #14]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d00d      	beq.n	8006416 <USBD_StdEPReq+0xce>
 80063fa:	7bbb      	ldrb	r3, [r7, #14]
 80063fc:	2b80      	cmp	r3, #128	; 0x80
 80063fe:	d00a      	beq.n	8006416 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006400:	7bbb      	ldrb	r3, [r7, #14]
 8006402:	4619      	mov	r1, r3
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f005 fbd5 	bl	800bbb4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800640a:	2180      	movs	r1, #128	; 0x80
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f005 fbd1 	bl	800bbb4 <USBD_LL_StallEP>
 8006412:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006414:	e020      	b.n	8006458 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006416:	6839      	ldr	r1, [r7, #0]
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f000 fc7a 	bl	8006d12 <USBD_CtlError>
              break;
 800641e:	e01b      	b.n	8006458 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	885b      	ldrh	r3, [r3, #2]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d10e      	bne.n	8006446 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006428:	7bbb      	ldrb	r3, [r7, #14]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00b      	beq.n	8006446 <USBD_StdEPReq+0xfe>
 800642e:	7bbb      	ldrb	r3, [r7, #14]
 8006430:	2b80      	cmp	r3, #128	; 0x80
 8006432:	d008      	beq.n	8006446 <USBD_StdEPReq+0xfe>
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	88db      	ldrh	r3, [r3, #6]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d104      	bne.n	8006446 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800643c:	7bbb      	ldrb	r3, [r7, #14]
 800643e:	4619      	mov	r1, r3
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f005 fbb7 	bl	800bbb4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 fd2e 	bl	8006ea8 <USBD_CtlSendStatus>

              break;
 800644c:	e004      	b.n	8006458 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800644e:	6839      	ldr	r1, [r7, #0]
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 fc5e 	bl	8006d12 <USBD_CtlError>
              break;
 8006456:	bf00      	nop
          }
          break;
 8006458:	e107      	b.n	800666a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006460:	b2db      	uxtb	r3, r3
 8006462:	2b02      	cmp	r3, #2
 8006464:	d002      	beq.n	800646c <USBD_StdEPReq+0x124>
 8006466:	2b03      	cmp	r3, #3
 8006468:	d016      	beq.n	8006498 <USBD_StdEPReq+0x150>
 800646a:	e04b      	b.n	8006504 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800646c:	7bbb      	ldrb	r3, [r7, #14]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d00d      	beq.n	800648e <USBD_StdEPReq+0x146>
 8006472:	7bbb      	ldrb	r3, [r7, #14]
 8006474:	2b80      	cmp	r3, #128	; 0x80
 8006476:	d00a      	beq.n	800648e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006478:	7bbb      	ldrb	r3, [r7, #14]
 800647a:	4619      	mov	r1, r3
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f005 fb99 	bl	800bbb4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006482:	2180      	movs	r1, #128	; 0x80
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f005 fb95 	bl	800bbb4 <USBD_LL_StallEP>
 800648a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800648c:	e040      	b.n	8006510 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800648e:	6839      	ldr	r1, [r7, #0]
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 fc3e 	bl	8006d12 <USBD_CtlError>
              break;
 8006496:	e03b      	b.n	8006510 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	885b      	ldrh	r3, [r3, #2]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d136      	bne.n	800650e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80064a0:	7bbb      	ldrb	r3, [r7, #14]
 80064a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d004      	beq.n	80064b4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80064aa:	7bbb      	ldrb	r3, [r7, #14]
 80064ac:	4619      	mov	r1, r3
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f005 fb9f 	bl	800bbf2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 fcf7 	bl	8006ea8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80064ba:	7bbb      	ldrb	r3, [r7, #14]
 80064bc:	4619      	mov	r1, r3
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f7ff fde2 	bl	8006088 <USBD_CoreFindEP>
 80064c4:	4603      	mov	r3, r0
 80064c6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80064c8:	7b7b      	ldrb	r3, [r7, #13]
 80064ca:	2bff      	cmp	r3, #255	; 0xff
 80064cc:	d01f      	beq.n	800650e <USBD_StdEPReq+0x1c6>
 80064ce:	7b7b      	ldrb	r3, [r7, #13]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d11c      	bne.n	800650e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80064d4:	7b7a      	ldrb	r2, [r7, #13]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80064dc:	7b7a      	ldrb	r2, [r7, #13]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	32ae      	adds	r2, #174	; 0xae
 80064e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d010      	beq.n	800650e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80064ec:	7b7a      	ldrb	r2, [r7, #13]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	32ae      	adds	r2, #174	; 0xae
 80064f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	6839      	ldr	r1, [r7, #0]
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	4798      	blx	r3
 80064fe:	4603      	mov	r3, r0
 8006500:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006502:	e004      	b.n	800650e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006504:	6839      	ldr	r1, [r7, #0]
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 fc03 	bl	8006d12 <USBD_CtlError>
              break;
 800650c:	e000      	b.n	8006510 <USBD_StdEPReq+0x1c8>
              break;
 800650e:	bf00      	nop
          }
          break;
 8006510:	e0ab      	b.n	800666a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006518:	b2db      	uxtb	r3, r3
 800651a:	2b02      	cmp	r3, #2
 800651c:	d002      	beq.n	8006524 <USBD_StdEPReq+0x1dc>
 800651e:	2b03      	cmp	r3, #3
 8006520:	d032      	beq.n	8006588 <USBD_StdEPReq+0x240>
 8006522:	e097      	b.n	8006654 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006524:	7bbb      	ldrb	r3, [r7, #14]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d007      	beq.n	800653a <USBD_StdEPReq+0x1f2>
 800652a:	7bbb      	ldrb	r3, [r7, #14]
 800652c:	2b80      	cmp	r3, #128	; 0x80
 800652e:	d004      	beq.n	800653a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006530:	6839      	ldr	r1, [r7, #0]
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 fbed 	bl	8006d12 <USBD_CtlError>
                break;
 8006538:	e091      	b.n	800665e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800653a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800653e:	2b00      	cmp	r3, #0
 8006540:	da0b      	bge.n	800655a <USBD_StdEPReq+0x212>
 8006542:	7bbb      	ldrb	r3, [r7, #14]
 8006544:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006548:	4613      	mov	r3, r2
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	4413      	add	r3, r2
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	3310      	adds	r3, #16
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	4413      	add	r3, r2
 8006556:	3304      	adds	r3, #4
 8006558:	e00b      	b.n	8006572 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800655a:	7bbb      	ldrb	r3, [r7, #14]
 800655c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006560:	4613      	mov	r3, r2
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	4413      	add	r3, r2
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	4413      	add	r3, r2
 8006570:	3304      	adds	r3, #4
 8006572:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	2200      	movs	r2, #0
 8006578:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	2202      	movs	r2, #2
 800657e:	4619      	mov	r1, r3
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 fc37 	bl	8006df4 <USBD_CtlSendData>
              break;
 8006586:	e06a      	b.n	800665e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006588:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800658c:	2b00      	cmp	r3, #0
 800658e:	da11      	bge.n	80065b4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006590:	7bbb      	ldrb	r3, [r7, #14]
 8006592:	f003 020f 	and.w	r2, r3, #15
 8006596:	6879      	ldr	r1, [r7, #4]
 8006598:	4613      	mov	r3, r2
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	4413      	add	r3, r2
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	440b      	add	r3, r1
 80065a2:	3324      	adds	r3, #36	; 0x24
 80065a4:	881b      	ldrh	r3, [r3, #0]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d117      	bne.n	80065da <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80065aa:	6839      	ldr	r1, [r7, #0]
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 fbb0 	bl	8006d12 <USBD_CtlError>
                  break;
 80065b2:	e054      	b.n	800665e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80065b4:	7bbb      	ldrb	r3, [r7, #14]
 80065b6:	f003 020f 	and.w	r2, r3, #15
 80065ba:	6879      	ldr	r1, [r7, #4]
 80065bc:	4613      	mov	r3, r2
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	4413      	add	r3, r2
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	440b      	add	r3, r1
 80065c6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80065ca:	881b      	ldrh	r3, [r3, #0]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d104      	bne.n	80065da <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80065d0:	6839      	ldr	r1, [r7, #0]
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 fb9d 	bl	8006d12 <USBD_CtlError>
                  break;
 80065d8:	e041      	b.n	800665e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80065da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	da0b      	bge.n	80065fa <USBD_StdEPReq+0x2b2>
 80065e2:	7bbb      	ldrb	r3, [r7, #14]
 80065e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80065e8:	4613      	mov	r3, r2
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	4413      	add	r3, r2
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	3310      	adds	r3, #16
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	4413      	add	r3, r2
 80065f6:	3304      	adds	r3, #4
 80065f8:	e00b      	b.n	8006612 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80065fa:	7bbb      	ldrb	r3, [r7, #14]
 80065fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006600:	4613      	mov	r3, r2
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	4413      	add	r3, r2
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	4413      	add	r3, r2
 8006610:	3304      	adds	r3, #4
 8006612:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006614:	7bbb      	ldrb	r3, [r7, #14]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d002      	beq.n	8006620 <USBD_StdEPReq+0x2d8>
 800661a:	7bbb      	ldrb	r3, [r7, #14]
 800661c:	2b80      	cmp	r3, #128	; 0x80
 800661e:	d103      	bne.n	8006628 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	2200      	movs	r2, #0
 8006624:	601a      	str	r2, [r3, #0]
 8006626:	e00e      	b.n	8006646 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006628:	7bbb      	ldrb	r3, [r7, #14]
 800662a:	4619      	mov	r1, r3
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f005 faff 	bl	800bc30 <USBD_LL_IsStallEP>
 8006632:	4603      	mov	r3, r0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d003      	beq.n	8006640 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	2201      	movs	r2, #1
 800663c:	601a      	str	r2, [r3, #0]
 800663e:	e002      	b.n	8006646 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	2200      	movs	r2, #0
 8006644:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	2202      	movs	r2, #2
 800664a:	4619      	mov	r1, r3
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 fbd1 	bl	8006df4 <USBD_CtlSendData>
              break;
 8006652:	e004      	b.n	800665e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006654:	6839      	ldr	r1, [r7, #0]
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 fb5b 	bl	8006d12 <USBD_CtlError>
              break;
 800665c:	bf00      	nop
          }
          break;
 800665e:	e004      	b.n	800666a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006660:	6839      	ldr	r1, [r7, #0]
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 fb55 	bl	8006d12 <USBD_CtlError>
          break;
 8006668:	bf00      	nop
      }
      break;
 800666a:	e005      	b.n	8006678 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800666c:	6839      	ldr	r1, [r7, #0]
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 fb4f 	bl	8006d12 <USBD_CtlError>
      break;
 8006674:	e000      	b.n	8006678 <USBD_StdEPReq+0x330>
      break;
 8006676:	bf00      	nop
  }

  return ret;
 8006678:	7bfb      	ldrb	r3, [r7, #15]
}
 800667a:	4618      	mov	r0, r3
 800667c:	3710      	adds	r7, #16
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
	...

08006684 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b084      	sub	sp, #16
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800668e:	2300      	movs	r3, #0
 8006690:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006692:	2300      	movs	r3, #0
 8006694:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006696:	2300      	movs	r3, #0
 8006698:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	885b      	ldrh	r3, [r3, #2]
 800669e:	0a1b      	lsrs	r3, r3, #8
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	3b01      	subs	r3, #1
 80066a4:	2b06      	cmp	r3, #6
 80066a6:	f200 8128 	bhi.w	80068fa <USBD_GetDescriptor+0x276>
 80066aa:	a201      	add	r2, pc, #4	; (adr r2, 80066b0 <USBD_GetDescriptor+0x2c>)
 80066ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b0:	080066cd 	.word	0x080066cd
 80066b4:	080066e5 	.word	0x080066e5
 80066b8:	08006725 	.word	0x08006725
 80066bc:	080068fb 	.word	0x080068fb
 80066c0:	080068fb 	.word	0x080068fb
 80066c4:	0800689b 	.word	0x0800689b
 80066c8:	080068c7 	.word	0x080068c7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	7c12      	ldrb	r2, [r2, #16]
 80066d8:	f107 0108 	add.w	r1, r7, #8
 80066dc:	4610      	mov	r0, r2
 80066de:	4798      	blx	r3
 80066e0:	60f8      	str	r0, [r7, #12]
      break;
 80066e2:	e112      	b.n	800690a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	7c1b      	ldrb	r3, [r3, #16]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d10d      	bne.n	8006708 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f4:	f107 0208 	add.w	r2, r7, #8
 80066f8:	4610      	mov	r0, r2
 80066fa:	4798      	blx	r3
 80066fc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	3301      	adds	r3, #1
 8006702:	2202      	movs	r2, #2
 8006704:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006706:	e100      	b.n	800690a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800670e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006710:	f107 0208 	add.w	r2, r7, #8
 8006714:	4610      	mov	r0, r2
 8006716:	4798      	blx	r3
 8006718:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	3301      	adds	r3, #1
 800671e:	2202      	movs	r2, #2
 8006720:	701a      	strb	r2, [r3, #0]
      break;
 8006722:	e0f2      	b.n	800690a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	885b      	ldrh	r3, [r3, #2]
 8006728:	b2db      	uxtb	r3, r3
 800672a:	2b05      	cmp	r3, #5
 800672c:	f200 80ac 	bhi.w	8006888 <USBD_GetDescriptor+0x204>
 8006730:	a201      	add	r2, pc, #4	; (adr r2, 8006738 <USBD_GetDescriptor+0xb4>)
 8006732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006736:	bf00      	nop
 8006738:	08006751 	.word	0x08006751
 800673c:	08006785 	.word	0x08006785
 8006740:	080067b9 	.word	0x080067b9
 8006744:	080067ed 	.word	0x080067ed
 8006748:	08006821 	.word	0x08006821
 800674c:	08006855 	.word	0x08006855
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d00b      	beq.n	8006774 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	7c12      	ldrb	r2, [r2, #16]
 8006768:	f107 0108 	add.w	r1, r7, #8
 800676c:	4610      	mov	r0, r2
 800676e:	4798      	blx	r3
 8006770:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006772:	e091      	b.n	8006898 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006774:	6839      	ldr	r1, [r7, #0]
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 facb 	bl	8006d12 <USBD_CtlError>
            err++;
 800677c:	7afb      	ldrb	r3, [r7, #11]
 800677e:	3301      	adds	r3, #1
 8006780:	72fb      	strb	r3, [r7, #11]
          break;
 8006782:	e089      	b.n	8006898 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d00b      	beq.n	80067a8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	7c12      	ldrb	r2, [r2, #16]
 800679c:	f107 0108 	add.w	r1, r7, #8
 80067a0:	4610      	mov	r0, r2
 80067a2:	4798      	blx	r3
 80067a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067a6:	e077      	b.n	8006898 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067a8:	6839      	ldr	r1, [r7, #0]
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 fab1 	bl	8006d12 <USBD_CtlError>
            err++;
 80067b0:	7afb      	ldrb	r3, [r7, #11]
 80067b2:	3301      	adds	r3, #1
 80067b4:	72fb      	strb	r3, [r7, #11]
          break;
 80067b6:	e06f      	b.n	8006898 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d00b      	beq.n	80067dc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	7c12      	ldrb	r2, [r2, #16]
 80067d0:	f107 0108 	add.w	r1, r7, #8
 80067d4:	4610      	mov	r0, r2
 80067d6:	4798      	blx	r3
 80067d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067da:	e05d      	b.n	8006898 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067dc:	6839      	ldr	r1, [r7, #0]
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 fa97 	bl	8006d12 <USBD_CtlError>
            err++;
 80067e4:	7afb      	ldrb	r3, [r7, #11]
 80067e6:	3301      	adds	r3, #1
 80067e8:	72fb      	strb	r3, [r7, #11]
          break;
 80067ea:	e055      	b.n	8006898 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067f2:	691b      	ldr	r3, [r3, #16]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d00b      	beq.n	8006810 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	7c12      	ldrb	r2, [r2, #16]
 8006804:	f107 0108 	add.w	r1, r7, #8
 8006808:	4610      	mov	r0, r2
 800680a:	4798      	blx	r3
 800680c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800680e:	e043      	b.n	8006898 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006810:	6839      	ldr	r1, [r7, #0]
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 fa7d 	bl	8006d12 <USBD_CtlError>
            err++;
 8006818:	7afb      	ldrb	r3, [r7, #11]
 800681a:	3301      	adds	r3, #1
 800681c:	72fb      	strb	r3, [r7, #11]
          break;
 800681e:	e03b      	b.n	8006898 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006826:	695b      	ldr	r3, [r3, #20]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d00b      	beq.n	8006844 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006832:	695b      	ldr	r3, [r3, #20]
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	7c12      	ldrb	r2, [r2, #16]
 8006838:	f107 0108 	add.w	r1, r7, #8
 800683c:	4610      	mov	r0, r2
 800683e:	4798      	blx	r3
 8006840:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006842:	e029      	b.n	8006898 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006844:	6839      	ldr	r1, [r7, #0]
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 fa63 	bl	8006d12 <USBD_CtlError>
            err++;
 800684c:	7afb      	ldrb	r3, [r7, #11]
 800684e:	3301      	adds	r3, #1
 8006850:	72fb      	strb	r3, [r7, #11]
          break;
 8006852:	e021      	b.n	8006898 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800685a:	699b      	ldr	r3, [r3, #24]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d00b      	beq.n	8006878 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006866:	699b      	ldr	r3, [r3, #24]
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	7c12      	ldrb	r2, [r2, #16]
 800686c:	f107 0108 	add.w	r1, r7, #8
 8006870:	4610      	mov	r0, r2
 8006872:	4798      	blx	r3
 8006874:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006876:	e00f      	b.n	8006898 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006878:	6839      	ldr	r1, [r7, #0]
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 fa49 	bl	8006d12 <USBD_CtlError>
            err++;
 8006880:	7afb      	ldrb	r3, [r7, #11]
 8006882:	3301      	adds	r3, #1
 8006884:	72fb      	strb	r3, [r7, #11]
          break;
 8006886:	e007      	b.n	8006898 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006888:	6839      	ldr	r1, [r7, #0]
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 fa41 	bl	8006d12 <USBD_CtlError>
          err++;
 8006890:	7afb      	ldrb	r3, [r7, #11]
 8006892:	3301      	adds	r3, #1
 8006894:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006896:	bf00      	nop
      }
      break;
 8006898:	e037      	b.n	800690a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	7c1b      	ldrb	r3, [r3, #16]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d109      	bne.n	80068b6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068aa:	f107 0208 	add.w	r2, r7, #8
 80068ae:	4610      	mov	r0, r2
 80068b0:	4798      	blx	r3
 80068b2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80068b4:	e029      	b.n	800690a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80068b6:	6839      	ldr	r1, [r7, #0]
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 fa2a 	bl	8006d12 <USBD_CtlError>
        err++;
 80068be:	7afb      	ldrb	r3, [r7, #11]
 80068c0:	3301      	adds	r3, #1
 80068c2:	72fb      	strb	r3, [r7, #11]
      break;
 80068c4:	e021      	b.n	800690a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	7c1b      	ldrb	r3, [r3, #16]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d10d      	bne.n	80068ea <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d6:	f107 0208 	add.w	r2, r7, #8
 80068da:	4610      	mov	r0, r2
 80068dc:	4798      	blx	r3
 80068de:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	3301      	adds	r3, #1
 80068e4:	2207      	movs	r2, #7
 80068e6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80068e8:	e00f      	b.n	800690a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80068ea:	6839      	ldr	r1, [r7, #0]
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 fa10 	bl	8006d12 <USBD_CtlError>
        err++;
 80068f2:	7afb      	ldrb	r3, [r7, #11]
 80068f4:	3301      	adds	r3, #1
 80068f6:	72fb      	strb	r3, [r7, #11]
      break;
 80068f8:	e007      	b.n	800690a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80068fa:	6839      	ldr	r1, [r7, #0]
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 fa08 	bl	8006d12 <USBD_CtlError>
      err++;
 8006902:	7afb      	ldrb	r3, [r7, #11]
 8006904:	3301      	adds	r3, #1
 8006906:	72fb      	strb	r3, [r7, #11]
      break;
 8006908:	bf00      	nop
  }

  if (err != 0U)
 800690a:	7afb      	ldrb	r3, [r7, #11]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d11e      	bne.n	800694e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	88db      	ldrh	r3, [r3, #6]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d016      	beq.n	8006946 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006918:	893b      	ldrh	r3, [r7, #8]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00e      	beq.n	800693c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	88da      	ldrh	r2, [r3, #6]
 8006922:	893b      	ldrh	r3, [r7, #8]
 8006924:	4293      	cmp	r3, r2
 8006926:	bf28      	it	cs
 8006928:	4613      	movcs	r3, r2
 800692a:	b29b      	uxth	r3, r3
 800692c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800692e:	893b      	ldrh	r3, [r7, #8]
 8006930:	461a      	mov	r2, r3
 8006932:	68f9      	ldr	r1, [r7, #12]
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 fa5d 	bl	8006df4 <USBD_CtlSendData>
 800693a:	e009      	b.n	8006950 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800693c:	6839      	ldr	r1, [r7, #0]
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 f9e7 	bl	8006d12 <USBD_CtlError>
 8006944:	e004      	b.n	8006950 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 faae 	bl	8006ea8 <USBD_CtlSendStatus>
 800694c:	e000      	b.n	8006950 <USBD_GetDescriptor+0x2cc>
    return;
 800694e:	bf00      	nop
  }
}
 8006950:	3710      	adds	r7, #16
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop

08006958 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	889b      	ldrh	r3, [r3, #4]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d131      	bne.n	80069ce <USBD_SetAddress+0x76>
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	88db      	ldrh	r3, [r3, #6]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d12d      	bne.n	80069ce <USBD_SetAddress+0x76>
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	885b      	ldrh	r3, [r3, #2]
 8006976:	2b7f      	cmp	r3, #127	; 0x7f
 8006978:	d829      	bhi.n	80069ce <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	885b      	ldrh	r3, [r3, #2]
 800697e:	b2db      	uxtb	r3, r3
 8006980:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006984:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800698c:	b2db      	uxtb	r3, r3
 800698e:	2b03      	cmp	r3, #3
 8006990:	d104      	bne.n	800699c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006992:	6839      	ldr	r1, [r7, #0]
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 f9bc 	bl	8006d12 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800699a:	e01d      	b.n	80069d8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	7bfa      	ldrb	r2, [r7, #15]
 80069a0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80069a4:	7bfb      	ldrb	r3, [r7, #15]
 80069a6:	4619      	mov	r1, r3
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f005 f96d 	bl	800bc88 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 fa7a 	bl	8006ea8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80069b4:	7bfb      	ldrb	r3, [r7, #15]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d004      	beq.n	80069c4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2202      	movs	r2, #2
 80069be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069c2:	e009      	b.n	80069d8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069cc:	e004      	b.n	80069d8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80069ce:	6839      	ldr	r1, [r7, #0]
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f000 f99e 	bl	8006d12 <USBD_CtlError>
  }
}
 80069d6:	bf00      	nop
 80069d8:	bf00      	nop
 80069da:	3710      	adds	r7, #16
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80069ea:	2300      	movs	r3, #0
 80069ec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	885b      	ldrh	r3, [r3, #2]
 80069f2:	b2da      	uxtb	r2, r3
 80069f4:	4b4e      	ldr	r3, [pc, #312]	; (8006b30 <USBD_SetConfig+0x150>)
 80069f6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80069f8:	4b4d      	ldr	r3, [pc, #308]	; (8006b30 <USBD_SetConfig+0x150>)
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d905      	bls.n	8006a0c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006a00:	6839      	ldr	r1, [r7, #0]
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 f985 	bl	8006d12 <USBD_CtlError>
    return USBD_FAIL;
 8006a08:	2303      	movs	r3, #3
 8006a0a:	e08c      	b.n	8006b26 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	d002      	beq.n	8006a1e <USBD_SetConfig+0x3e>
 8006a18:	2b03      	cmp	r3, #3
 8006a1a:	d029      	beq.n	8006a70 <USBD_SetConfig+0x90>
 8006a1c:	e075      	b.n	8006b0a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006a1e:	4b44      	ldr	r3, [pc, #272]	; (8006b30 <USBD_SetConfig+0x150>)
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d020      	beq.n	8006a68 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006a26:	4b42      	ldr	r3, [pc, #264]	; (8006b30 <USBD_SetConfig+0x150>)
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006a30:	4b3f      	ldr	r3, [pc, #252]	; (8006b30 <USBD_SetConfig+0x150>)
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	4619      	mov	r1, r3
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f7fe ffe7 	bl	8005a0a <USBD_SetClassConfig>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006a40:	7bfb      	ldrb	r3, [r7, #15]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d008      	beq.n	8006a58 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006a46:	6839      	ldr	r1, [r7, #0]
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 f962 	bl	8006d12 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2202      	movs	r2, #2
 8006a52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006a56:	e065      	b.n	8006b24 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 fa25 	bl	8006ea8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2203      	movs	r2, #3
 8006a62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006a66:	e05d      	b.n	8006b24 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 fa1d 	bl	8006ea8 <USBD_CtlSendStatus>
      break;
 8006a6e:	e059      	b.n	8006b24 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006a70:	4b2f      	ldr	r3, [pc, #188]	; (8006b30 <USBD_SetConfig+0x150>)
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d112      	bne.n	8006a9e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2202      	movs	r2, #2
 8006a7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006a80:	4b2b      	ldr	r3, [pc, #172]	; (8006b30 <USBD_SetConfig+0x150>)
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	461a      	mov	r2, r3
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006a8a:	4b29      	ldr	r3, [pc, #164]	; (8006b30 <USBD_SetConfig+0x150>)
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	4619      	mov	r1, r3
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f7fe ffd6 	bl	8005a42 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 fa06 	bl	8006ea8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006a9c:	e042      	b.n	8006b24 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006a9e:	4b24      	ldr	r3, [pc, #144]	; (8006b30 <USBD_SetConfig+0x150>)
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d02a      	beq.n	8006b02 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f7fe ffc4 	bl	8005a42 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006aba:	4b1d      	ldr	r3, [pc, #116]	; (8006b30 <USBD_SetConfig+0x150>)
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	461a      	mov	r2, r3
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006ac4:	4b1a      	ldr	r3, [pc, #104]	; (8006b30 <USBD_SetConfig+0x150>)
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	4619      	mov	r1, r3
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f7fe ff9d 	bl	8005a0a <USBD_SetClassConfig>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006ad4:	7bfb      	ldrb	r3, [r7, #15]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d00f      	beq.n	8006afa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006ada:	6839      	ldr	r1, [r7, #0]
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 f918 	bl	8006d12 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	4619      	mov	r1, r3
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f7fe ffa9 	bl	8005a42 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2202      	movs	r2, #2
 8006af4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006af8:	e014      	b.n	8006b24 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 f9d4 	bl	8006ea8 <USBD_CtlSendStatus>
      break;
 8006b00:	e010      	b.n	8006b24 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 f9d0 	bl	8006ea8 <USBD_CtlSendStatus>
      break;
 8006b08:	e00c      	b.n	8006b24 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006b0a:	6839      	ldr	r1, [r7, #0]
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f000 f900 	bl	8006d12 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006b12:	4b07      	ldr	r3, [pc, #28]	; (8006b30 <USBD_SetConfig+0x150>)
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	4619      	mov	r1, r3
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f7fe ff92 	bl	8005a42 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006b1e:	2303      	movs	r3, #3
 8006b20:	73fb      	strb	r3, [r7, #15]
      break;
 8006b22:	bf00      	nop
  }

  return ret;
 8006b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3710      	adds	r7, #16
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	2000041c 	.word	0x2000041c

08006b34 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b082      	sub	sp, #8
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	88db      	ldrh	r3, [r3, #6]
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d004      	beq.n	8006b50 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006b46:	6839      	ldr	r1, [r7, #0]
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 f8e2 	bl	8006d12 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006b4e:	e023      	b.n	8006b98 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	2b02      	cmp	r3, #2
 8006b5a:	dc02      	bgt.n	8006b62 <USBD_GetConfig+0x2e>
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	dc03      	bgt.n	8006b68 <USBD_GetConfig+0x34>
 8006b60:	e015      	b.n	8006b8e <USBD_GetConfig+0x5a>
 8006b62:	2b03      	cmp	r3, #3
 8006b64:	d00b      	beq.n	8006b7e <USBD_GetConfig+0x4a>
 8006b66:	e012      	b.n	8006b8e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	3308      	adds	r3, #8
 8006b72:	2201      	movs	r2, #1
 8006b74:	4619      	mov	r1, r3
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 f93c 	bl	8006df4 <USBD_CtlSendData>
        break;
 8006b7c:	e00c      	b.n	8006b98 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	3304      	adds	r3, #4
 8006b82:	2201      	movs	r2, #1
 8006b84:	4619      	mov	r1, r3
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 f934 	bl	8006df4 <USBD_CtlSendData>
        break;
 8006b8c:	e004      	b.n	8006b98 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006b8e:	6839      	ldr	r1, [r7, #0]
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 f8be 	bl	8006d12 <USBD_CtlError>
        break;
 8006b96:	bf00      	nop
}
 8006b98:	bf00      	nop
 8006b9a:	3708      	adds	r7, #8
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b082      	sub	sp, #8
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	3b01      	subs	r3, #1
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	d81e      	bhi.n	8006bf6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	88db      	ldrh	r3, [r3, #6]
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	d004      	beq.n	8006bca <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006bc0:	6839      	ldr	r1, [r7, #0]
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 f8a5 	bl	8006d12 <USBD_CtlError>
        break;
 8006bc8:	e01a      	b.n	8006c00 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d005      	beq.n	8006be6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	f043 0202 	orr.w	r2, r3, #2
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	330c      	adds	r3, #12
 8006bea:	2202      	movs	r2, #2
 8006bec:	4619      	mov	r1, r3
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 f900 	bl	8006df4 <USBD_CtlSendData>
      break;
 8006bf4:	e004      	b.n	8006c00 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006bf6:	6839      	ldr	r1, [r7, #0]
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 f88a 	bl	8006d12 <USBD_CtlError>
      break;
 8006bfe:	bf00      	nop
  }
}
 8006c00:	bf00      	nop
 8006c02:	3708      	adds	r7, #8
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	885b      	ldrh	r3, [r3, #2]
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d107      	bne.n	8006c2a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 f940 	bl	8006ea8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006c28:	e013      	b.n	8006c52 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	885b      	ldrh	r3, [r3, #2]
 8006c2e:	2b02      	cmp	r3, #2
 8006c30:	d10b      	bne.n	8006c4a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	889b      	ldrh	r3, [r3, #4]
 8006c36:	0a1b      	lsrs	r3, r3, #8
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	b2da      	uxtb	r2, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 f930 	bl	8006ea8 <USBD_CtlSendStatus>
}
 8006c48:	e003      	b.n	8006c52 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006c4a:	6839      	ldr	r1, [r7, #0]
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 f860 	bl	8006d12 <USBD_CtlError>
}
 8006c52:	bf00      	nop
 8006c54:	3708      	adds	r7, #8
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}

08006c5a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c5a:	b580      	push	{r7, lr}
 8006c5c:	b082      	sub	sp, #8
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
 8006c62:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	3b01      	subs	r3, #1
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d80b      	bhi.n	8006c8a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	885b      	ldrh	r3, [r3, #2]
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d10c      	bne.n	8006c94 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 f910 	bl	8006ea8 <USBD_CtlSendStatus>
      }
      break;
 8006c88:	e004      	b.n	8006c94 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006c8a:	6839      	ldr	r1, [r7, #0]
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 f840 	bl	8006d12 <USBD_CtlError>
      break;
 8006c92:	e000      	b.n	8006c96 <USBD_ClrFeature+0x3c>
      break;
 8006c94:	bf00      	nop
  }
}
 8006c96:	bf00      	nop
 8006c98:	3708      	adds	r7, #8
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}

08006c9e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b084      	sub	sp, #16
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
 8006ca6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	781a      	ldrb	r2, [r3, #0]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	781a      	ldrb	r2, [r3, #0]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006cc8:	68f8      	ldr	r0, [r7, #12]
 8006cca:	f7ff fa41 	bl	8006150 <SWAPBYTE>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	3301      	adds	r3, #1
 8006cda:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006ce2:	68f8      	ldr	r0, [r7, #12]
 8006ce4:	f7ff fa34 	bl	8006150 <SWAPBYTE>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	461a      	mov	r2, r3
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006cfc:	68f8      	ldr	r0, [r7, #12]
 8006cfe:	f7ff fa27 	bl	8006150 <SWAPBYTE>
 8006d02:	4603      	mov	r3, r0
 8006d04:	461a      	mov	r2, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	80da      	strh	r2, [r3, #6]
}
 8006d0a:	bf00      	nop
 8006d0c:	3710      	adds	r7, #16
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}

08006d12 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d12:	b580      	push	{r7, lr}
 8006d14:	b082      	sub	sp, #8
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
 8006d1a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d1c:	2180      	movs	r1, #128	; 0x80
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f004 ff48 	bl	800bbb4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006d24:	2100      	movs	r1, #0
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f004 ff44 	bl	800bbb4 <USBD_LL_StallEP>
}
 8006d2c:	bf00      	nop
 8006d2e:	3708      	adds	r7, #8
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b086      	sub	sp, #24
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006d40:	2300      	movs	r3, #0
 8006d42:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d036      	beq.n	8006db8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006d4e:	6938      	ldr	r0, [r7, #16]
 8006d50:	f000 f836 	bl	8006dc0 <USBD_GetLen>
 8006d54:	4603      	mov	r3, r0
 8006d56:	3301      	adds	r3, #1
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	005b      	lsls	r3, r3, #1
 8006d5c:	b29a      	uxth	r2, r3
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006d62:	7dfb      	ldrb	r3, [r7, #23]
 8006d64:	68ba      	ldr	r2, [r7, #8]
 8006d66:	4413      	add	r3, r2
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	7812      	ldrb	r2, [r2, #0]
 8006d6c:	701a      	strb	r2, [r3, #0]
  idx++;
 8006d6e:	7dfb      	ldrb	r3, [r7, #23]
 8006d70:	3301      	adds	r3, #1
 8006d72:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006d74:	7dfb      	ldrb	r3, [r7, #23]
 8006d76:	68ba      	ldr	r2, [r7, #8]
 8006d78:	4413      	add	r3, r2
 8006d7a:	2203      	movs	r2, #3
 8006d7c:	701a      	strb	r2, [r3, #0]
  idx++;
 8006d7e:	7dfb      	ldrb	r3, [r7, #23]
 8006d80:	3301      	adds	r3, #1
 8006d82:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006d84:	e013      	b.n	8006dae <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006d86:	7dfb      	ldrb	r3, [r7, #23]
 8006d88:	68ba      	ldr	r2, [r7, #8]
 8006d8a:	4413      	add	r3, r2
 8006d8c:	693a      	ldr	r2, [r7, #16]
 8006d8e:	7812      	ldrb	r2, [r2, #0]
 8006d90:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	3301      	adds	r3, #1
 8006d96:	613b      	str	r3, [r7, #16]
    idx++;
 8006d98:	7dfb      	ldrb	r3, [r7, #23]
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006d9e:	7dfb      	ldrb	r3, [r7, #23]
 8006da0:	68ba      	ldr	r2, [r7, #8]
 8006da2:	4413      	add	r3, r2
 8006da4:	2200      	movs	r2, #0
 8006da6:	701a      	strb	r2, [r3, #0]
    idx++;
 8006da8:	7dfb      	ldrb	r3, [r7, #23]
 8006daa:	3301      	adds	r3, #1
 8006dac:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d1e7      	bne.n	8006d86 <USBD_GetString+0x52>
 8006db6:	e000      	b.n	8006dba <USBD_GetString+0x86>
    return;
 8006db8:	bf00      	nop
  }
}
 8006dba:	3718      	adds	r7, #24
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b085      	sub	sp, #20
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006dd0:	e005      	b.n	8006dde <USBD_GetLen+0x1e>
  {
    len++;
 8006dd2:	7bfb      	ldrb	r3, [r7, #15]
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	3301      	adds	r3, #1
 8006ddc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d1f5      	bne.n	8006dd2 <USBD_GetLen+0x12>
  }

  return len;
 8006de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3714      	adds	r7, #20
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	60f8      	str	r0, [r7, #12]
 8006dfc:	60b9      	str	r1, [r7, #8]
 8006dfe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2202      	movs	r2, #2
 8006e04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	68ba      	ldr	r2, [r7, #8]
 8006e18:	2100      	movs	r1, #0
 8006e1a:	68f8      	ldr	r0, [r7, #12]
 8006e1c:	f004 ff53 	bl	800bcc6 <USBD_LL_Transmit>

  return USBD_OK;
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3710      	adds	r7, #16
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}

08006e2a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006e2a:	b580      	push	{r7, lr}
 8006e2c:	b084      	sub	sp, #16
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	60f8      	str	r0, [r7, #12]
 8006e32:	60b9      	str	r1, [r7, #8]
 8006e34:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	68ba      	ldr	r2, [r7, #8]
 8006e3a:	2100      	movs	r1, #0
 8006e3c:	68f8      	ldr	r0, [r7, #12]
 8006e3e:	f004 ff42 	bl	800bcc6 <USBD_LL_Transmit>

  return USBD_OK;
 8006e42:	2300      	movs	r3, #0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3710      	adds	r7, #16
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2203      	movs	r2, #3
 8006e5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	68ba      	ldr	r2, [r7, #8]
 8006e74:	2100      	movs	r1, #0
 8006e76:	68f8      	ldr	r0, [r7, #12]
 8006e78:	f004 ff46 	bl	800bd08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3710      	adds	r7, #16
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}

08006e86 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006e86:	b580      	push	{r7, lr}
 8006e88:	b084      	sub	sp, #16
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	60f8      	str	r0, [r7, #12]
 8006e8e:	60b9      	str	r1, [r7, #8]
 8006e90:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	68ba      	ldr	r2, [r7, #8]
 8006e96:	2100      	movs	r1, #0
 8006e98:	68f8      	ldr	r0, [r7, #12]
 8006e9a:	f004 ff35 	bl	800bd08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e9e:	2300      	movs	r3, #0
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3710      	adds	r7, #16
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2204      	movs	r2, #4
 8006eb4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006eb8:	2300      	movs	r3, #0
 8006eba:	2200      	movs	r2, #0
 8006ebc:	2100      	movs	r1, #0
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f004 ff01 	bl	800bcc6 <USBD_LL_Transmit>

  return USBD_OK;
 8006ec4:	2300      	movs	r3, #0
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3708      	adds	r7, #8
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b082      	sub	sp, #8
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2205      	movs	r2, #5
 8006eda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ede:	2300      	movs	r3, #0
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	2100      	movs	r1, #0
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f004 ff0f 	bl	800bd08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006eea:	2300      	movs	r3, #0
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3708      	adds	r7, #8
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <__NVIC_SetPriority>:
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	4603      	mov	r3, r0
 8006efc:	6039      	str	r1, [r7, #0]
 8006efe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	db0a      	blt.n	8006f1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	b2da      	uxtb	r2, r3
 8006f0c:	490c      	ldr	r1, [pc, #48]	; (8006f40 <__NVIC_SetPriority+0x4c>)
 8006f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f12:	0112      	lsls	r2, r2, #4
 8006f14:	b2d2      	uxtb	r2, r2
 8006f16:	440b      	add	r3, r1
 8006f18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006f1c:	e00a      	b.n	8006f34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	b2da      	uxtb	r2, r3
 8006f22:	4908      	ldr	r1, [pc, #32]	; (8006f44 <__NVIC_SetPriority+0x50>)
 8006f24:	79fb      	ldrb	r3, [r7, #7]
 8006f26:	f003 030f 	and.w	r3, r3, #15
 8006f2a:	3b04      	subs	r3, #4
 8006f2c:	0112      	lsls	r2, r2, #4
 8006f2e:	b2d2      	uxtb	r2, r2
 8006f30:	440b      	add	r3, r1
 8006f32:	761a      	strb	r2, [r3, #24]
}
 8006f34:	bf00      	nop
 8006f36:	370c      	adds	r7, #12
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr
 8006f40:	e000e100 	.word	0xe000e100
 8006f44:	e000ed00 	.word	0xe000ed00

08006f48 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006f4c:	4b05      	ldr	r3, [pc, #20]	; (8006f64 <SysTick_Handler+0x1c>)
 8006f4e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006f50:	f002 fcea 	bl	8009928 <xTaskGetSchedulerState>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d001      	beq.n	8006f5e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006f5a:	f003 feb5 	bl	800acc8 <xPortSysTickHandler>
  }
}
 8006f5e:	bf00      	nop
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	e000e010 	.word	0xe000e010

08006f68 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006f6c:	2100      	movs	r1, #0
 8006f6e:	f06f 0004 	mvn.w	r0, #4
 8006f72:	f7ff ffbf 	bl	8006ef4 <__NVIC_SetPriority>
#endif
}
 8006f76:	bf00      	nop
 8006f78:	bd80      	pop	{r7, pc}
	...

08006f7c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f82:	f3ef 8305 	mrs	r3, IPSR
 8006f86:	603b      	str	r3, [r7, #0]
  return(result);
 8006f88:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d003      	beq.n	8006f96 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006f8e:	f06f 0305 	mvn.w	r3, #5
 8006f92:	607b      	str	r3, [r7, #4]
 8006f94:	e00c      	b.n	8006fb0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006f96:	4b0a      	ldr	r3, [pc, #40]	; (8006fc0 <osKernelInitialize+0x44>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d105      	bne.n	8006faa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006f9e:	4b08      	ldr	r3, [pc, #32]	; (8006fc0 <osKernelInitialize+0x44>)
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	607b      	str	r3, [r7, #4]
 8006fa8:	e002      	b.n	8006fb0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006faa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006fae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006fb0:	687b      	ldr	r3, [r7, #4]
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	370c      	adds	r7, #12
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr
 8006fbe:	bf00      	nop
 8006fc0:	20000420 	.word	0x20000420

08006fc4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b082      	sub	sp, #8
 8006fc8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006fca:	f3ef 8305 	mrs	r3, IPSR
 8006fce:	603b      	str	r3, [r7, #0]
  return(result);
 8006fd0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d003      	beq.n	8006fde <osKernelStart+0x1a>
    stat = osErrorISR;
 8006fd6:	f06f 0305 	mvn.w	r3, #5
 8006fda:	607b      	str	r3, [r7, #4]
 8006fdc:	e010      	b.n	8007000 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006fde:	4b0b      	ldr	r3, [pc, #44]	; (800700c <osKernelStart+0x48>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d109      	bne.n	8006ffa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006fe6:	f7ff ffbf 	bl	8006f68 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006fea:	4b08      	ldr	r3, [pc, #32]	; (800700c <osKernelStart+0x48>)
 8006fec:	2202      	movs	r2, #2
 8006fee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006ff0:	f001 fea6 	bl	8008d40 <vTaskStartScheduler>
      stat = osOK;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	607b      	str	r3, [r7, #4]
 8006ff8:	e002      	b.n	8007000 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006ffa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ffe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007000:	687b      	ldr	r3, [r7, #4]
}
 8007002:	4618      	mov	r0, r3
 8007004:	3708      	adds	r7, #8
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop
 800700c:	20000420 	.word	0x20000420

08007010 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007010:	b580      	push	{r7, lr}
 8007012:	b08e      	sub	sp, #56	; 0x38
 8007014:	af04      	add	r7, sp, #16
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	60b9      	str	r1, [r7, #8]
 800701a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800701c:	2300      	movs	r3, #0
 800701e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007020:	f3ef 8305 	mrs	r3, IPSR
 8007024:	617b      	str	r3, [r7, #20]
  return(result);
 8007026:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007028:	2b00      	cmp	r3, #0
 800702a:	d17e      	bne.n	800712a <osThreadNew+0x11a>
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d07b      	beq.n	800712a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007032:	2380      	movs	r3, #128	; 0x80
 8007034:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007036:	2318      	movs	r3, #24
 8007038:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800703a:	2300      	movs	r3, #0
 800703c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800703e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007042:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d045      	beq.n	80070d6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d002      	beq.n	8007058 <osThreadNew+0x48>
        name = attr->name;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	699b      	ldr	r3, [r3, #24]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d002      	beq.n	8007066 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	699b      	ldr	r3, [r3, #24]
 8007064:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007066:	69fb      	ldr	r3, [r7, #28]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d008      	beq.n	800707e <osThreadNew+0x6e>
 800706c:	69fb      	ldr	r3, [r7, #28]
 800706e:	2b38      	cmp	r3, #56	; 0x38
 8007070:	d805      	bhi.n	800707e <osThreadNew+0x6e>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	f003 0301 	and.w	r3, r3, #1
 800707a:	2b00      	cmp	r3, #0
 800707c:	d001      	beq.n	8007082 <osThreadNew+0x72>
        return (NULL);
 800707e:	2300      	movs	r3, #0
 8007080:	e054      	b.n	800712c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	695b      	ldr	r3, [r3, #20]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d003      	beq.n	8007092 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	695b      	ldr	r3, [r3, #20]
 800708e:	089b      	lsrs	r3, r3, #2
 8007090:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d00e      	beq.n	80070b8 <osThreadNew+0xa8>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	68db      	ldr	r3, [r3, #12]
 800709e:	2bbb      	cmp	r3, #187	; 0xbb
 80070a0:	d90a      	bls.n	80070b8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d006      	beq.n	80070b8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	695b      	ldr	r3, [r3, #20]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d002      	beq.n	80070b8 <osThreadNew+0xa8>
        mem = 1;
 80070b2:	2301      	movs	r3, #1
 80070b4:	61bb      	str	r3, [r7, #24]
 80070b6:	e010      	b.n	80070da <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d10c      	bne.n	80070da <osThreadNew+0xca>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d108      	bne.n	80070da <osThreadNew+0xca>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	691b      	ldr	r3, [r3, #16]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d104      	bne.n	80070da <osThreadNew+0xca>
          mem = 0;
 80070d0:	2300      	movs	r3, #0
 80070d2:	61bb      	str	r3, [r7, #24]
 80070d4:	e001      	b.n	80070da <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80070d6:	2300      	movs	r3, #0
 80070d8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80070da:	69bb      	ldr	r3, [r7, #24]
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d110      	bne.n	8007102 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80070e8:	9202      	str	r2, [sp, #8]
 80070ea:	9301      	str	r3, [sp, #4]
 80070ec:	69fb      	ldr	r3, [r7, #28]
 80070ee:	9300      	str	r3, [sp, #0]
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	6a3a      	ldr	r2, [r7, #32]
 80070f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80070f6:	68f8      	ldr	r0, [r7, #12]
 80070f8:	f001 fc03 	bl	8008902 <xTaskCreateStatic>
 80070fc:	4603      	mov	r3, r0
 80070fe:	613b      	str	r3, [r7, #16]
 8007100:	e013      	b.n	800712a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007102:	69bb      	ldr	r3, [r7, #24]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d110      	bne.n	800712a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007108:	6a3b      	ldr	r3, [r7, #32]
 800710a:	b29a      	uxth	r2, r3
 800710c:	f107 0310 	add.w	r3, r7, #16
 8007110:	9301      	str	r3, [sp, #4]
 8007112:	69fb      	ldr	r3, [r7, #28]
 8007114:	9300      	str	r3, [sp, #0]
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800711a:	68f8      	ldr	r0, [r7, #12]
 800711c:	f001 fc4e 	bl	80089bc <xTaskCreate>
 8007120:	4603      	mov	r3, r0
 8007122:	2b01      	cmp	r3, #1
 8007124:	d001      	beq.n	800712a <osThreadNew+0x11a>
            hTask = NULL;
 8007126:	2300      	movs	r3, #0
 8007128:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800712a:	693b      	ldr	r3, [r7, #16]
}
 800712c:	4618      	mov	r0, r3
 800712e:	3728      	adds	r7, #40	; 0x28
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007134:	b480      	push	{r7}
 8007136:	b085      	sub	sp, #20
 8007138:	af00      	add	r7, sp, #0
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	60b9      	str	r1, [r7, #8]
 800713e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	4a07      	ldr	r2, [pc, #28]	; (8007160 <vApplicationGetIdleTaskMemory+0x2c>)
 8007144:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	4a06      	ldr	r2, [pc, #24]	; (8007164 <vApplicationGetIdleTaskMemory+0x30>)
 800714a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2280      	movs	r2, #128	; 0x80
 8007150:	601a      	str	r2, [r3, #0]
}
 8007152:	bf00      	nop
 8007154:	3714      	adds	r7, #20
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr
 800715e:	bf00      	nop
 8007160:	20000424 	.word	0x20000424
 8007164:	200004e0 	.word	0x200004e0

08007168 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007168:	b480      	push	{r7}
 800716a:	b085      	sub	sp, #20
 800716c:	af00      	add	r7, sp, #0
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	4a07      	ldr	r2, [pc, #28]	; (8007194 <vApplicationGetTimerTaskMemory+0x2c>)
 8007178:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	4a06      	ldr	r2, [pc, #24]	; (8007198 <vApplicationGetTimerTaskMemory+0x30>)
 800717e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007186:	601a      	str	r2, [r3, #0]
}
 8007188:	bf00      	nop
 800718a:	3714      	adds	r7, #20
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr
 8007194:	200006e0 	.word	0x200006e0
 8007198:	2000079c 	.word	0x2000079c

0800719c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f103 0208 	add.w	r2, r3, #8
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80071b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f103 0208 	add.w	r2, r3, #8
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f103 0208 	add.w	r2, r3, #8
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80071d0:	bf00      	nop
 80071d2:	370c      	adds	r7, #12
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80071ea:	bf00      	nop
 80071ec:	370c      	adds	r7, #12
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr

080071f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80071f6:	b480      	push	{r7}
 80071f8:	b085      	sub	sp, #20
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
 80071fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	68fa      	ldr	r2, [r7, #12]
 800720a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	689a      	ldr	r2, [r3, #8]
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	683a      	ldr	r2, [r7, #0]
 800721a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	683a      	ldr	r2, [r7, #0]
 8007220:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	1c5a      	adds	r2, r3, #1
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	601a      	str	r2, [r3, #0]
}
 8007232:	bf00      	nop
 8007234:	3714      	adds	r7, #20
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr

0800723e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800723e:	b480      	push	{r7}
 8007240:	b085      	sub	sp, #20
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
 8007246:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007254:	d103      	bne.n	800725e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	60fb      	str	r3, [r7, #12]
 800725c:	e00c      	b.n	8007278 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	3308      	adds	r3, #8
 8007262:	60fb      	str	r3, [r7, #12]
 8007264:	e002      	b.n	800726c <vListInsert+0x2e>
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	60fb      	str	r3, [r7, #12]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68ba      	ldr	r2, [r7, #8]
 8007274:	429a      	cmp	r2, r3
 8007276:	d2f6      	bcs.n	8007266 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	685a      	ldr	r2, [r3, #4]
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	683a      	ldr	r2, [r7, #0]
 8007286:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	68fa      	ldr	r2, [r7, #12]
 800728c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	683a      	ldr	r2, [r7, #0]
 8007292:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	1c5a      	adds	r2, r3, #1
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	601a      	str	r2, [r3, #0]
}
 80072a4:	bf00      	nop
 80072a6:	3714      	adds	r7, #20
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80072b0:	b480      	push	{r7}
 80072b2:	b085      	sub	sp, #20
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	691b      	ldr	r3, [r3, #16]
 80072bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	6892      	ldr	r2, [r2, #8]
 80072c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	6852      	ldr	r2, [r2, #4]
 80072d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	429a      	cmp	r2, r3
 80072da:	d103      	bne.n	80072e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	689a      	ldr	r2, [r3, #8]
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	1e5a      	subs	r2, r3, #1
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3714      	adds	r7, #20
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d10a      	bne.n	800732e <xQueueGenericReset+0x2a>
	__asm volatile
 8007318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800731c:	f383 8811 	msr	BASEPRI, r3
 8007320:	f3bf 8f6f 	isb	sy
 8007324:	f3bf 8f4f 	dsb	sy
 8007328:	60bb      	str	r3, [r7, #8]
}
 800732a:	bf00      	nop
 800732c:	e7fe      	b.n	800732c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800732e:	f003 fc39 	bl	800aba4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800733a:	68f9      	ldr	r1, [r7, #12]
 800733c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800733e:	fb01 f303 	mul.w	r3, r1, r3
 8007342:	441a      	add	r2, r3
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2200      	movs	r2, #0
 800734c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800735e:	3b01      	subs	r3, #1
 8007360:	68f9      	ldr	r1, [r7, #12]
 8007362:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007364:	fb01 f303 	mul.w	r3, r1, r3
 8007368:	441a      	add	r2, r3
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	22ff      	movs	r2, #255	; 0xff
 8007372:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	22ff      	movs	r2, #255	; 0xff
 800737a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d114      	bne.n	80073ae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	691b      	ldr	r3, [r3, #16]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d01a      	beq.n	80073c2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	3310      	adds	r3, #16
 8007390:	4618      	mov	r0, r3
 8007392:	f001 fffd 	bl	8009390 <xTaskRemoveFromEventList>
 8007396:	4603      	mov	r3, r0
 8007398:	2b00      	cmp	r3, #0
 800739a:	d012      	beq.n	80073c2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800739c:	4b0c      	ldr	r3, [pc, #48]	; (80073d0 <xQueueGenericReset+0xcc>)
 800739e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073a2:	601a      	str	r2, [r3, #0]
 80073a4:	f3bf 8f4f 	dsb	sy
 80073a8:	f3bf 8f6f 	isb	sy
 80073ac:	e009      	b.n	80073c2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	3310      	adds	r3, #16
 80073b2:	4618      	mov	r0, r3
 80073b4:	f7ff fef2 	bl	800719c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	3324      	adds	r3, #36	; 0x24
 80073bc:	4618      	mov	r0, r3
 80073be:	f7ff feed 	bl	800719c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80073c2:	f003 fc1f 	bl	800ac04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80073c6:	2301      	movs	r3, #1
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3710      	adds	r7, #16
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}
 80073d0:	e000ed04 	.word	0xe000ed04

080073d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b08e      	sub	sp, #56	; 0x38
 80073d8:	af02      	add	r7, sp, #8
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	60b9      	str	r1, [r7, #8]
 80073de:	607a      	str	r2, [r7, #4]
 80073e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d10a      	bne.n	80073fe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80073e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ec:	f383 8811 	msr	BASEPRI, r3
 80073f0:	f3bf 8f6f 	isb	sy
 80073f4:	f3bf 8f4f 	dsb	sy
 80073f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80073fa:	bf00      	nop
 80073fc:	e7fe      	b.n	80073fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d10a      	bne.n	800741a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007408:	f383 8811 	msr	BASEPRI, r3
 800740c:	f3bf 8f6f 	isb	sy
 8007410:	f3bf 8f4f 	dsb	sy
 8007414:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007416:	bf00      	nop
 8007418:	e7fe      	b.n	8007418 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d002      	beq.n	8007426 <xQueueGenericCreateStatic+0x52>
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d001      	beq.n	800742a <xQueueGenericCreateStatic+0x56>
 8007426:	2301      	movs	r3, #1
 8007428:	e000      	b.n	800742c <xQueueGenericCreateStatic+0x58>
 800742a:	2300      	movs	r3, #0
 800742c:	2b00      	cmp	r3, #0
 800742e:	d10a      	bne.n	8007446 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007434:	f383 8811 	msr	BASEPRI, r3
 8007438:	f3bf 8f6f 	isb	sy
 800743c:	f3bf 8f4f 	dsb	sy
 8007440:	623b      	str	r3, [r7, #32]
}
 8007442:	bf00      	nop
 8007444:	e7fe      	b.n	8007444 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d102      	bne.n	8007452 <xQueueGenericCreateStatic+0x7e>
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d101      	bne.n	8007456 <xQueueGenericCreateStatic+0x82>
 8007452:	2301      	movs	r3, #1
 8007454:	e000      	b.n	8007458 <xQueueGenericCreateStatic+0x84>
 8007456:	2300      	movs	r3, #0
 8007458:	2b00      	cmp	r3, #0
 800745a:	d10a      	bne.n	8007472 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800745c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007460:	f383 8811 	msr	BASEPRI, r3
 8007464:	f3bf 8f6f 	isb	sy
 8007468:	f3bf 8f4f 	dsb	sy
 800746c:	61fb      	str	r3, [r7, #28]
}
 800746e:	bf00      	nop
 8007470:	e7fe      	b.n	8007470 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007472:	2350      	movs	r3, #80	; 0x50
 8007474:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	2b50      	cmp	r3, #80	; 0x50
 800747a:	d00a      	beq.n	8007492 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800747c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007480:	f383 8811 	msr	BASEPRI, r3
 8007484:	f3bf 8f6f 	isb	sy
 8007488:	f3bf 8f4f 	dsb	sy
 800748c:	61bb      	str	r3, [r7, #24]
}
 800748e:	bf00      	nop
 8007490:	e7fe      	b.n	8007490 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007492:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800749a:	2b00      	cmp	r3, #0
 800749c:	d00d      	beq.n	80074ba <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800749e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a0:	2201      	movs	r2, #1
 80074a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80074a6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80074aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ac:	9300      	str	r3, [sp, #0]
 80074ae:	4613      	mov	r3, r2
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	68b9      	ldr	r1, [r7, #8]
 80074b4:	68f8      	ldr	r0, [r7, #12]
 80074b6:	f000 f83f 	bl	8007538 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80074ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80074bc:	4618      	mov	r0, r3
 80074be:	3730      	adds	r7, #48	; 0x30
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b08a      	sub	sp, #40	; 0x28
 80074c8:	af02      	add	r7, sp, #8
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	4613      	mov	r3, r2
 80074d0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d10a      	bne.n	80074ee <xQueueGenericCreate+0x2a>
	__asm volatile
 80074d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074dc:	f383 8811 	msr	BASEPRI, r3
 80074e0:	f3bf 8f6f 	isb	sy
 80074e4:	f3bf 8f4f 	dsb	sy
 80074e8:	613b      	str	r3, [r7, #16]
}
 80074ea:	bf00      	nop
 80074ec:	e7fe      	b.n	80074ec <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	68ba      	ldr	r2, [r7, #8]
 80074f2:	fb02 f303 	mul.w	r3, r2, r3
 80074f6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	3350      	adds	r3, #80	; 0x50
 80074fc:	4618      	mov	r0, r3
 80074fe:	f003 fc73 	bl	800ade8 <pvPortMalloc>
 8007502:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007504:	69bb      	ldr	r3, [r7, #24]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d011      	beq.n	800752e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	3350      	adds	r3, #80	; 0x50
 8007512:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007514:	69bb      	ldr	r3, [r7, #24]
 8007516:	2200      	movs	r2, #0
 8007518:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800751c:	79fa      	ldrb	r2, [r7, #7]
 800751e:	69bb      	ldr	r3, [r7, #24]
 8007520:	9300      	str	r3, [sp, #0]
 8007522:	4613      	mov	r3, r2
 8007524:	697a      	ldr	r2, [r7, #20]
 8007526:	68b9      	ldr	r1, [r7, #8]
 8007528:	68f8      	ldr	r0, [r7, #12]
 800752a:	f000 f805 	bl	8007538 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800752e:	69bb      	ldr	r3, [r7, #24]
	}
 8007530:	4618      	mov	r0, r3
 8007532:	3720      	adds	r7, #32
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b084      	sub	sp, #16
 800753c:	af00      	add	r7, sp, #0
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	60b9      	str	r1, [r7, #8]
 8007542:	607a      	str	r2, [r7, #4]
 8007544:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d103      	bne.n	8007554 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800754c:	69bb      	ldr	r3, [r7, #24]
 800754e:	69ba      	ldr	r2, [r7, #24]
 8007550:	601a      	str	r2, [r3, #0]
 8007552:	e002      	b.n	800755a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007554:	69bb      	ldr	r3, [r7, #24]
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	68fa      	ldr	r2, [r7, #12]
 800755e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007560:	69bb      	ldr	r3, [r7, #24]
 8007562:	68ba      	ldr	r2, [r7, #8]
 8007564:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007566:	2101      	movs	r1, #1
 8007568:	69b8      	ldr	r0, [r7, #24]
 800756a:	f7ff fecb 	bl	8007304 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800756e:	69bb      	ldr	r3, [r7, #24]
 8007570:	78fa      	ldrb	r2, [r7, #3]
 8007572:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007576:	bf00      	nop
 8007578:	3710      	adds	r7, #16
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}

0800757e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800757e:	b580      	push	{r7, lr}
 8007580:	b082      	sub	sp, #8
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d00e      	beq.n	80075aa <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800759e:	2300      	movs	r3, #0
 80075a0:	2200      	movs	r2, #0
 80075a2:	2100      	movs	r1, #0
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 f81d 	bl	80075e4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80075aa:	bf00      	nop
 80075ac:	3708      	adds	r7, #8
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b086      	sub	sp, #24
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	4603      	mov	r3, r0
 80075ba:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80075bc:	2301      	movs	r3, #1
 80075be:	617b      	str	r3, [r7, #20]
 80075c0:	2300      	movs	r3, #0
 80075c2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80075c4:	79fb      	ldrb	r3, [r7, #7]
 80075c6:	461a      	mov	r2, r3
 80075c8:	6939      	ldr	r1, [r7, #16]
 80075ca:	6978      	ldr	r0, [r7, #20]
 80075cc:	f7ff ff7a 	bl	80074c4 <xQueueGenericCreate>
 80075d0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80075d2:	68f8      	ldr	r0, [r7, #12]
 80075d4:	f7ff ffd3 	bl	800757e <prvInitialiseMutex>

		return xNewQueue;
 80075d8:	68fb      	ldr	r3, [r7, #12]
	}
 80075da:	4618      	mov	r0, r3
 80075dc:	3718      	adds	r7, #24
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
	...

080075e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b08e      	sub	sp, #56	; 0x38
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	607a      	str	r2, [r7, #4]
 80075f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80075f2:	2300      	movs	r3, #0
 80075f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80075fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d10a      	bne.n	8007616 <xQueueGenericSend+0x32>
	__asm volatile
 8007600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007604:	f383 8811 	msr	BASEPRI, r3
 8007608:	f3bf 8f6f 	isb	sy
 800760c:	f3bf 8f4f 	dsb	sy
 8007610:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007612:	bf00      	nop
 8007614:	e7fe      	b.n	8007614 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d103      	bne.n	8007624 <xQueueGenericSend+0x40>
 800761c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800761e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007620:	2b00      	cmp	r3, #0
 8007622:	d101      	bne.n	8007628 <xQueueGenericSend+0x44>
 8007624:	2301      	movs	r3, #1
 8007626:	e000      	b.n	800762a <xQueueGenericSend+0x46>
 8007628:	2300      	movs	r3, #0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d10a      	bne.n	8007644 <xQueueGenericSend+0x60>
	__asm volatile
 800762e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007632:	f383 8811 	msr	BASEPRI, r3
 8007636:	f3bf 8f6f 	isb	sy
 800763a:	f3bf 8f4f 	dsb	sy
 800763e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007640:	bf00      	nop
 8007642:	e7fe      	b.n	8007642 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	2b02      	cmp	r3, #2
 8007648:	d103      	bne.n	8007652 <xQueueGenericSend+0x6e>
 800764a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800764c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800764e:	2b01      	cmp	r3, #1
 8007650:	d101      	bne.n	8007656 <xQueueGenericSend+0x72>
 8007652:	2301      	movs	r3, #1
 8007654:	e000      	b.n	8007658 <xQueueGenericSend+0x74>
 8007656:	2300      	movs	r3, #0
 8007658:	2b00      	cmp	r3, #0
 800765a:	d10a      	bne.n	8007672 <xQueueGenericSend+0x8e>
	__asm volatile
 800765c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007660:	f383 8811 	msr	BASEPRI, r3
 8007664:	f3bf 8f6f 	isb	sy
 8007668:	f3bf 8f4f 	dsb	sy
 800766c:	623b      	str	r3, [r7, #32]
}
 800766e:	bf00      	nop
 8007670:	e7fe      	b.n	8007670 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007672:	f002 f959 	bl	8009928 <xTaskGetSchedulerState>
 8007676:	4603      	mov	r3, r0
 8007678:	2b00      	cmp	r3, #0
 800767a:	d102      	bne.n	8007682 <xQueueGenericSend+0x9e>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d101      	bne.n	8007686 <xQueueGenericSend+0xa2>
 8007682:	2301      	movs	r3, #1
 8007684:	e000      	b.n	8007688 <xQueueGenericSend+0xa4>
 8007686:	2300      	movs	r3, #0
 8007688:	2b00      	cmp	r3, #0
 800768a:	d10a      	bne.n	80076a2 <xQueueGenericSend+0xbe>
	__asm volatile
 800768c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007690:	f383 8811 	msr	BASEPRI, r3
 8007694:	f3bf 8f6f 	isb	sy
 8007698:	f3bf 8f4f 	dsb	sy
 800769c:	61fb      	str	r3, [r7, #28]
}
 800769e:	bf00      	nop
 80076a0:	e7fe      	b.n	80076a0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80076a2:	f003 fa7f 	bl	800aba4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80076a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d302      	bcc.n	80076b8 <xQueueGenericSend+0xd4>
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	2b02      	cmp	r3, #2
 80076b6:	d129      	bne.n	800770c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80076b8:	683a      	ldr	r2, [r7, #0]
 80076ba:	68b9      	ldr	r1, [r7, #8]
 80076bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076be:	f000 fbbb 	bl	8007e38 <prvCopyDataToQueue>
 80076c2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d010      	beq.n	80076ee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ce:	3324      	adds	r3, #36	; 0x24
 80076d0:	4618      	mov	r0, r3
 80076d2:	f001 fe5d 	bl	8009390 <xTaskRemoveFromEventList>
 80076d6:	4603      	mov	r3, r0
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d013      	beq.n	8007704 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80076dc:	4b3f      	ldr	r3, [pc, #252]	; (80077dc <xQueueGenericSend+0x1f8>)
 80076de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076e2:	601a      	str	r2, [r3, #0]
 80076e4:	f3bf 8f4f 	dsb	sy
 80076e8:	f3bf 8f6f 	isb	sy
 80076ec:	e00a      	b.n	8007704 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80076ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d007      	beq.n	8007704 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80076f4:	4b39      	ldr	r3, [pc, #228]	; (80077dc <xQueueGenericSend+0x1f8>)
 80076f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076fa:	601a      	str	r2, [r3, #0]
 80076fc:	f3bf 8f4f 	dsb	sy
 8007700:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007704:	f003 fa7e 	bl	800ac04 <vPortExitCritical>
				return pdPASS;
 8007708:	2301      	movs	r3, #1
 800770a:	e063      	b.n	80077d4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d103      	bne.n	800771a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007712:	f003 fa77 	bl	800ac04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007716:	2300      	movs	r3, #0
 8007718:	e05c      	b.n	80077d4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800771a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800771c:	2b00      	cmp	r3, #0
 800771e:	d106      	bne.n	800772e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007720:	f107 0314 	add.w	r3, r7, #20
 8007724:	4618      	mov	r0, r3
 8007726:	f001 febd 	bl	80094a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800772a:	2301      	movs	r3, #1
 800772c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800772e:	f003 fa69 	bl	800ac04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007732:	f001 fb75 	bl	8008e20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007736:	f003 fa35 	bl	800aba4 <vPortEnterCritical>
 800773a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800773c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007740:	b25b      	sxtb	r3, r3
 8007742:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007746:	d103      	bne.n	8007750 <xQueueGenericSend+0x16c>
 8007748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800774a:	2200      	movs	r2, #0
 800774c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007752:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007756:	b25b      	sxtb	r3, r3
 8007758:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800775c:	d103      	bne.n	8007766 <xQueueGenericSend+0x182>
 800775e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007760:	2200      	movs	r2, #0
 8007762:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007766:	f003 fa4d 	bl	800ac04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800776a:	1d3a      	adds	r2, r7, #4
 800776c:	f107 0314 	add.w	r3, r7, #20
 8007770:	4611      	mov	r1, r2
 8007772:	4618      	mov	r0, r3
 8007774:	f001 feac 	bl	80094d0 <xTaskCheckForTimeOut>
 8007778:	4603      	mov	r3, r0
 800777a:	2b00      	cmp	r3, #0
 800777c:	d124      	bne.n	80077c8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800777e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007780:	f000 fc52 	bl	8008028 <prvIsQueueFull>
 8007784:	4603      	mov	r3, r0
 8007786:	2b00      	cmp	r3, #0
 8007788:	d018      	beq.n	80077bc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800778a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800778c:	3310      	adds	r3, #16
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	4611      	mov	r1, r2
 8007792:	4618      	mov	r0, r3
 8007794:	f001 fdac 	bl	80092f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007798:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800779a:	f000 fbdd 	bl	8007f58 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800779e:	f001 fb4d 	bl	8008e3c <xTaskResumeAll>
 80077a2:	4603      	mov	r3, r0
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	f47f af7c 	bne.w	80076a2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80077aa:	4b0c      	ldr	r3, [pc, #48]	; (80077dc <xQueueGenericSend+0x1f8>)
 80077ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077b0:	601a      	str	r2, [r3, #0]
 80077b2:	f3bf 8f4f 	dsb	sy
 80077b6:	f3bf 8f6f 	isb	sy
 80077ba:	e772      	b.n	80076a2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80077bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80077be:	f000 fbcb 	bl	8007f58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80077c2:	f001 fb3b 	bl	8008e3c <xTaskResumeAll>
 80077c6:	e76c      	b.n	80076a2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80077c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80077ca:	f000 fbc5 	bl	8007f58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80077ce:	f001 fb35 	bl	8008e3c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80077d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3738      	adds	r7, #56	; 0x38
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}
 80077dc:	e000ed04 	.word	0xe000ed04

080077e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b090      	sub	sp, #64	; 0x40
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	60b9      	str	r1, [r7, #8]
 80077ea:	607a      	str	r2, [r7, #4]
 80077ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80077f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d10a      	bne.n	800780e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80077f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077fc:	f383 8811 	msr	BASEPRI, r3
 8007800:	f3bf 8f6f 	isb	sy
 8007804:	f3bf 8f4f 	dsb	sy
 8007808:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800780a:	bf00      	nop
 800780c:	e7fe      	b.n	800780c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d103      	bne.n	800781c <xQueueGenericSendFromISR+0x3c>
 8007814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007818:	2b00      	cmp	r3, #0
 800781a:	d101      	bne.n	8007820 <xQueueGenericSendFromISR+0x40>
 800781c:	2301      	movs	r3, #1
 800781e:	e000      	b.n	8007822 <xQueueGenericSendFromISR+0x42>
 8007820:	2300      	movs	r3, #0
 8007822:	2b00      	cmp	r3, #0
 8007824:	d10a      	bne.n	800783c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800782a:	f383 8811 	msr	BASEPRI, r3
 800782e:	f3bf 8f6f 	isb	sy
 8007832:	f3bf 8f4f 	dsb	sy
 8007836:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007838:	bf00      	nop
 800783a:	e7fe      	b.n	800783a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	2b02      	cmp	r3, #2
 8007840:	d103      	bne.n	800784a <xQueueGenericSendFromISR+0x6a>
 8007842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007846:	2b01      	cmp	r3, #1
 8007848:	d101      	bne.n	800784e <xQueueGenericSendFromISR+0x6e>
 800784a:	2301      	movs	r3, #1
 800784c:	e000      	b.n	8007850 <xQueueGenericSendFromISR+0x70>
 800784e:	2300      	movs	r3, #0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d10a      	bne.n	800786a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007858:	f383 8811 	msr	BASEPRI, r3
 800785c:	f3bf 8f6f 	isb	sy
 8007860:	f3bf 8f4f 	dsb	sy
 8007864:	623b      	str	r3, [r7, #32]
}
 8007866:	bf00      	nop
 8007868:	e7fe      	b.n	8007868 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800786a:	f003 fa7d 	bl	800ad68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800786e:	f3ef 8211 	mrs	r2, BASEPRI
 8007872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007876:	f383 8811 	msr	BASEPRI, r3
 800787a:	f3bf 8f6f 	isb	sy
 800787e:	f3bf 8f4f 	dsb	sy
 8007882:	61fa      	str	r2, [r7, #28]
 8007884:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007886:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007888:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800788a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800788c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800788e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007892:	429a      	cmp	r2, r3
 8007894:	d302      	bcc.n	800789c <xQueueGenericSendFromISR+0xbc>
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	2b02      	cmp	r3, #2
 800789a:	d12f      	bne.n	80078fc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800789c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800789e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80078a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078aa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80078ac:	683a      	ldr	r2, [r7, #0]
 80078ae:	68b9      	ldr	r1, [r7, #8]
 80078b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80078b2:	f000 fac1 	bl	8007e38 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80078b6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80078ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078be:	d112      	bne.n	80078e6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d016      	beq.n	80078f6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ca:	3324      	adds	r3, #36	; 0x24
 80078cc:	4618      	mov	r0, r3
 80078ce:	f001 fd5f 	bl	8009390 <xTaskRemoveFromEventList>
 80078d2:	4603      	mov	r3, r0
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d00e      	beq.n	80078f6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d00b      	beq.n	80078f6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2201      	movs	r2, #1
 80078e2:	601a      	str	r2, [r3, #0]
 80078e4:	e007      	b.n	80078f6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80078e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80078ea:	3301      	adds	r3, #1
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	b25a      	sxtb	r2, r3
 80078f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80078f6:	2301      	movs	r3, #1
 80078f8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80078fa:	e001      	b.n	8007900 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80078fc:	2300      	movs	r3, #0
 80078fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007902:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800790a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800790c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800790e:	4618      	mov	r0, r3
 8007910:	3740      	adds	r7, #64	; 0x40
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007916:	b580      	push	{r7, lr}
 8007918:	b08e      	sub	sp, #56	; 0x38
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
 800791e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007926:	2b00      	cmp	r3, #0
 8007928:	d10a      	bne.n	8007940 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800792a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800792e:	f383 8811 	msr	BASEPRI, r3
 8007932:	f3bf 8f6f 	isb	sy
 8007936:	f3bf 8f4f 	dsb	sy
 800793a:	623b      	str	r3, [r7, #32]
}
 800793c:	bf00      	nop
 800793e:	e7fe      	b.n	800793e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007944:	2b00      	cmp	r3, #0
 8007946:	d00a      	beq.n	800795e <xQueueGiveFromISR+0x48>
	__asm volatile
 8007948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800794c:	f383 8811 	msr	BASEPRI, r3
 8007950:	f3bf 8f6f 	isb	sy
 8007954:	f3bf 8f4f 	dsb	sy
 8007958:	61fb      	str	r3, [r7, #28]
}
 800795a:	bf00      	nop
 800795c:	e7fe      	b.n	800795c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800795e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d103      	bne.n	800796e <xQueueGiveFromISR+0x58>
 8007966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d101      	bne.n	8007972 <xQueueGiveFromISR+0x5c>
 800796e:	2301      	movs	r3, #1
 8007970:	e000      	b.n	8007974 <xQueueGiveFromISR+0x5e>
 8007972:	2300      	movs	r3, #0
 8007974:	2b00      	cmp	r3, #0
 8007976:	d10a      	bne.n	800798e <xQueueGiveFromISR+0x78>
	__asm volatile
 8007978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800797c:	f383 8811 	msr	BASEPRI, r3
 8007980:	f3bf 8f6f 	isb	sy
 8007984:	f3bf 8f4f 	dsb	sy
 8007988:	61bb      	str	r3, [r7, #24]
}
 800798a:	bf00      	nop
 800798c:	e7fe      	b.n	800798c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800798e:	f003 f9eb 	bl	800ad68 <vPortValidateInterruptPriority>
	__asm volatile
 8007992:	f3ef 8211 	mrs	r2, BASEPRI
 8007996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800799a:	f383 8811 	msr	BASEPRI, r3
 800799e:	f3bf 8f6f 	isb	sy
 80079a2:	f3bf 8f4f 	dsb	sy
 80079a6:	617a      	str	r2, [r7, #20]
 80079a8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80079aa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80079ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80079b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d22b      	bcs.n	8007a16 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80079be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80079c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ca:	1c5a      	adds	r2, r3, #1
 80079cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ce:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80079d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80079d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079d8:	d112      	bne.n	8007a00 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80079da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d016      	beq.n	8007a10 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80079e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e4:	3324      	adds	r3, #36	; 0x24
 80079e6:	4618      	mov	r0, r3
 80079e8:	f001 fcd2 	bl	8009390 <xTaskRemoveFromEventList>
 80079ec:	4603      	mov	r3, r0
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d00e      	beq.n	8007a10 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d00b      	beq.n	8007a10 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	2201      	movs	r2, #1
 80079fc:	601a      	str	r2, [r3, #0]
 80079fe:	e007      	b.n	8007a10 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007a00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a04:	3301      	adds	r3, #1
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	b25a      	sxtb	r2, r3
 8007a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007a10:	2301      	movs	r3, #1
 8007a12:	637b      	str	r3, [r7, #52]	; 0x34
 8007a14:	e001      	b.n	8007a1a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007a16:	2300      	movs	r3, #0
 8007a18:	637b      	str	r3, [r7, #52]	; 0x34
 8007a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a1c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f383 8811 	msr	BASEPRI, r3
}
 8007a24:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3738      	adds	r7, #56	; 0x38
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b08c      	sub	sp, #48	; 0x30
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	60b9      	str	r1, [r7, #8]
 8007a3a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d10a      	bne.n	8007a60 <xQueueReceive+0x30>
	__asm volatile
 8007a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a4e:	f383 8811 	msr	BASEPRI, r3
 8007a52:	f3bf 8f6f 	isb	sy
 8007a56:	f3bf 8f4f 	dsb	sy
 8007a5a:	623b      	str	r3, [r7, #32]
}
 8007a5c:	bf00      	nop
 8007a5e:	e7fe      	b.n	8007a5e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d103      	bne.n	8007a6e <xQueueReceive+0x3e>
 8007a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d101      	bne.n	8007a72 <xQueueReceive+0x42>
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e000      	b.n	8007a74 <xQueueReceive+0x44>
 8007a72:	2300      	movs	r3, #0
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d10a      	bne.n	8007a8e <xQueueReceive+0x5e>
	__asm volatile
 8007a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a7c:	f383 8811 	msr	BASEPRI, r3
 8007a80:	f3bf 8f6f 	isb	sy
 8007a84:	f3bf 8f4f 	dsb	sy
 8007a88:	61fb      	str	r3, [r7, #28]
}
 8007a8a:	bf00      	nop
 8007a8c:	e7fe      	b.n	8007a8c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a8e:	f001 ff4b 	bl	8009928 <xTaskGetSchedulerState>
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d102      	bne.n	8007a9e <xQueueReceive+0x6e>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d101      	bne.n	8007aa2 <xQueueReceive+0x72>
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e000      	b.n	8007aa4 <xQueueReceive+0x74>
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d10a      	bne.n	8007abe <xQueueReceive+0x8e>
	__asm volatile
 8007aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aac:	f383 8811 	msr	BASEPRI, r3
 8007ab0:	f3bf 8f6f 	isb	sy
 8007ab4:	f3bf 8f4f 	dsb	sy
 8007ab8:	61bb      	str	r3, [r7, #24]
}
 8007aba:	bf00      	nop
 8007abc:	e7fe      	b.n	8007abc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007abe:	f003 f871 	bl	800aba4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d01f      	beq.n	8007b0e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007ace:	68b9      	ldr	r1, [r7, #8]
 8007ad0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ad2:	f000 fa1b 	bl	8007f0c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad8:	1e5a      	subs	r2, r3, #1
 8007ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007adc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae0:	691b      	ldr	r3, [r3, #16]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d00f      	beq.n	8007b06 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae8:	3310      	adds	r3, #16
 8007aea:	4618      	mov	r0, r3
 8007aec:	f001 fc50 	bl	8009390 <xTaskRemoveFromEventList>
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d007      	beq.n	8007b06 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007af6:	4b3d      	ldr	r3, [pc, #244]	; (8007bec <xQueueReceive+0x1bc>)
 8007af8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007afc:	601a      	str	r2, [r3, #0]
 8007afe:	f3bf 8f4f 	dsb	sy
 8007b02:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007b06:	f003 f87d 	bl	800ac04 <vPortExitCritical>
				return pdPASS;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e069      	b.n	8007be2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d103      	bne.n	8007b1c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007b14:	f003 f876 	bl	800ac04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	e062      	b.n	8007be2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d106      	bne.n	8007b30 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b22:	f107 0310 	add.w	r3, r7, #16
 8007b26:	4618      	mov	r0, r3
 8007b28:	f001 fcbc 	bl	80094a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007b30:	f003 f868 	bl	800ac04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007b34:	f001 f974 	bl	8008e20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b38:	f003 f834 	bl	800aba4 <vPortEnterCritical>
 8007b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b42:	b25b      	sxtb	r3, r3
 8007b44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b48:	d103      	bne.n	8007b52 <xQueueReceive+0x122>
 8007b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b58:	b25b      	sxtb	r3, r3
 8007b5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b5e:	d103      	bne.n	8007b68 <xQueueReceive+0x138>
 8007b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b62:	2200      	movs	r2, #0
 8007b64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b68:	f003 f84c 	bl	800ac04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b6c:	1d3a      	adds	r2, r7, #4
 8007b6e:	f107 0310 	add.w	r3, r7, #16
 8007b72:	4611      	mov	r1, r2
 8007b74:	4618      	mov	r0, r3
 8007b76:	f001 fcab 	bl	80094d0 <xTaskCheckForTimeOut>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d123      	bne.n	8007bc8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b82:	f000 fa3b 	bl	8007ffc <prvIsQueueEmpty>
 8007b86:	4603      	mov	r3, r0
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d017      	beq.n	8007bbc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b8e:	3324      	adds	r3, #36	; 0x24
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	4611      	mov	r1, r2
 8007b94:	4618      	mov	r0, r3
 8007b96:	f001 fbab 	bl	80092f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007b9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b9c:	f000 f9dc 	bl	8007f58 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007ba0:	f001 f94c 	bl	8008e3c <xTaskResumeAll>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d189      	bne.n	8007abe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007baa:	4b10      	ldr	r3, [pc, #64]	; (8007bec <xQueueReceive+0x1bc>)
 8007bac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bb0:	601a      	str	r2, [r3, #0]
 8007bb2:	f3bf 8f4f 	dsb	sy
 8007bb6:	f3bf 8f6f 	isb	sy
 8007bba:	e780      	b.n	8007abe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007bbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bbe:	f000 f9cb 	bl	8007f58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007bc2:	f001 f93b 	bl	8008e3c <xTaskResumeAll>
 8007bc6:	e77a      	b.n	8007abe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007bc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bca:	f000 f9c5 	bl	8007f58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007bce:	f001 f935 	bl	8008e3c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007bd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bd4:	f000 fa12 	bl	8007ffc <prvIsQueueEmpty>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	f43f af6f 	beq.w	8007abe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007be0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3730      	adds	r7, #48	; 0x30
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	e000ed04 	.word	0xe000ed04

08007bf0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b08e      	sub	sp, #56	; 0x38
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007c02:	2300      	movs	r3, #0
 8007c04:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d10a      	bne.n	8007c22 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c10:	f383 8811 	msr	BASEPRI, r3
 8007c14:	f3bf 8f6f 	isb	sy
 8007c18:	f3bf 8f4f 	dsb	sy
 8007c1c:	623b      	str	r3, [r7, #32]
}
 8007c1e:	bf00      	nop
 8007c20:	e7fe      	b.n	8007c20 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d00a      	beq.n	8007c40 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c2e:	f383 8811 	msr	BASEPRI, r3
 8007c32:	f3bf 8f6f 	isb	sy
 8007c36:	f3bf 8f4f 	dsb	sy
 8007c3a:	61fb      	str	r3, [r7, #28]
}
 8007c3c:	bf00      	nop
 8007c3e:	e7fe      	b.n	8007c3e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c40:	f001 fe72 	bl	8009928 <xTaskGetSchedulerState>
 8007c44:	4603      	mov	r3, r0
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d102      	bne.n	8007c50 <xQueueSemaphoreTake+0x60>
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d101      	bne.n	8007c54 <xQueueSemaphoreTake+0x64>
 8007c50:	2301      	movs	r3, #1
 8007c52:	e000      	b.n	8007c56 <xQueueSemaphoreTake+0x66>
 8007c54:	2300      	movs	r3, #0
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d10a      	bne.n	8007c70 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c5e:	f383 8811 	msr	BASEPRI, r3
 8007c62:	f3bf 8f6f 	isb	sy
 8007c66:	f3bf 8f4f 	dsb	sy
 8007c6a:	61bb      	str	r3, [r7, #24]
}
 8007c6c:	bf00      	nop
 8007c6e:	e7fe      	b.n	8007c6e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007c70:	f002 ff98 	bl	800aba4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c78:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d024      	beq.n	8007cca <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c82:	1e5a      	subs	r2, r3, #1
 8007c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c86:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d104      	bne.n	8007c9a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007c90:	f002 f87c 	bl	8009d8c <pvTaskIncrementMutexHeldCount>
 8007c94:	4602      	mov	r2, r0
 8007c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c98:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c9c:	691b      	ldr	r3, [r3, #16]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d00f      	beq.n	8007cc2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ca4:	3310      	adds	r3, #16
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f001 fb72 	bl	8009390 <xTaskRemoveFromEventList>
 8007cac:	4603      	mov	r3, r0
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d007      	beq.n	8007cc2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007cb2:	4b54      	ldr	r3, [pc, #336]	; (8007e04 <xQueueSemaphoreTake+0x214>)
 8007cb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cb8:	601a      	str	r2, [r3, #0]
 8007cba:	f3bf 8f4f 	dsb	sy
 8007cbe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007cc2:	f002 ff9f 	bl	800ac04 <vPortExitCritical>
				return pdPASS;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e097      	b.n	8007dfa <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d111      	bne.n	8007cf4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d00a      	beq.n	8007cec <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cda:	f383 8811 	msr	BASEPRI, r3
 8007cde:	f3bf 8f6f 	isb	sy
 8007ce2:	f3bf 8f4f 	dsb	sy
 8007ce6:	617b      	str	r3, [r7, #20]
}
 8007ce8:	bf00      	nop
 8007cea:	e7fe      	b.n	8007cea <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007cec:	f002 ff8a 	bl	800ac04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	e082      	b.n	8007dfa <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d106      	bne.n	8007d08 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007cfa:	f107 030c 	add.w	r3, r7, #12
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f001 fbd0 	bl	80094a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d04:	2301      	movs	r3, #1
 8007d06:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d08:	f002 ff7c 	bl	800ac04 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d0c:	f001 f888 	bl	8008e20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d10:	f002 ff48 	bl	800aba4 <vPortEnterCritical>
 8007d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d1a:	b25b      	sxtb	r3, r3
 8007d1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d20:	d103      	bne.n	8007d2a <xQueueSemaphoreTake+0x13a>
 8007d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d24:	2200      	movs	r2, #0
 8007d26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d30:	b25b      	sxtb	r3, r3
 8007d32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d36:	d103      	bne.n	8007d40 <xQueueSemaphoreTake+0x150>
 8007d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d40:	f002 ff60 	bl	800ac04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d44:	463a      	mov	r2, r7
 8007d46:	f107 030c 	add.w	r3, r7, #12
 8007d4a:	4611      	mov	r1, r2
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f001 fbbf 	bl	80094d0 <xTaskCheckForTimeOut>
 8007d52:	4603      	mov	r3, r0
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d132      	bne.n	8007dbe <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d5a:	f000 f94f 	bl	8007ffc <prvIsQueueEmpty>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d026      	beq.n	8007db2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d109      	bne.n	8007d80 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007d6c:	f002 ff1a 	bl	800aba4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	4618      	mov	r0, r3
 8007d76:	f001 fdf5 	bl	8009964 <xTaskPriorityInherit>
 8007d7a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007d7c:	f002 ff42 	bl	800ac04 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d82:	3324      	adds	r3, #36	; 0x24
 8007d84:	683a      	ldr	r2, [r7, #0]
 8007d86:	4611      	mov	r1, r2
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f001 fab1 	bl	80092f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007d8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d90:	f000 f8e2 	bl	8007f58 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007d94:	f001 f852 	bl	8008e3c <xTaskResumeAll>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	f47f af68 	bne.w	8007c70 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007da0:	4b18      	ldr	r3, [pc, #96]	; (8007e04 <xQueueSemaphoreTake+0x214>)
 8007da2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007da6:	601a      	str	r2, [r3, #0]
 8007da8:	f3bf 8f4f 	dsb	sy
 8007dac:	f3bf 8f6f 	isb	sy
 8007db0:	e75e      	b.n	8007c70 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007db2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007db4:	f000 f8d0 	bl	8007f58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007db8:	f001 f840 	bl	8008e3c <xTaskResumeAll>
 8007dbc:	e758      	b.n	8007c70 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007dbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007dc0:	f000 f8ca 	bl	8007f58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007dc4:	f001 f83a 	bl	8008e3c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007dc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007dca:	f000 f917 	bl	8007ffc <prvIsQueueEmpty>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	f43f af4d 	beq.w	8007c70 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d00d      	beq.n	8007df8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007ddc:	f002 fee2 	bl	800aba4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007de0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007de2:	f000 f811 	bl	8007e08 <prvGetDisinheritPriorityAfterTimeout>
 8007de6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007dee:	4618      	mov	r0, r3
 8007df0:	f001 fe8e 	bl	8009b10 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007df4:	f002 ff06 	bl	800ac04 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007df8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3738      	adds	r7, #56	; 0x38
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
 8007e02:	bf00      	nop
 8007e04:	e000ed04 	.word	0xe000ed04

08007e08 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d006      	beq.n	8007e26 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007e22:	60fb      	str	r3, [r7, #12]
 8007e24:	e001      	b.n	8007e2a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007e26:	2300      	movs	r3, #0
 8007e28:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
	}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3714      	adds	r7, #20
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr

08007e38 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b086      	sub	sp, #24
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	60b9      	str	r1, [r7, #8]
 8007e42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007e44:	2300      	movs	r3, #0
 8007e46:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e4c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d10d      	bne.n	8007e72 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d14d      	bne.n	8007efa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	4618      	mov	r0, r3
 8007e64:	f001 fde6 	bl	8009a34 <xTaskPriorityDisinherit>
 8007e68:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	609a      	str	r2, [r3, #8]
 8007e70:	e043      	b.n	8007efa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d119      	bne.n	8007eac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	6858      	ldr	r0, [r3, #4]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e80:	461a      	mov	r2, r3
 8007e82:	68b9      	ldr	r1, [r7, #8]
 8007e84:	f003 ffe4 	bl	800be50 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	685a      	ldr	r2, [r3, #4]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e90:	441a      	add	r2, r3
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	685a      	ldr	r2, [r3, #4]
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d32b      	bcc.n	8007efa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681a      	ldr	r2, [r3, #0]
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	605a      	str	r2, [r3, #4]
 8007eaa:	e026      	b.n	8007efa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	68d8      	ldr	r0, [r3, #12]
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	68b9      	ldr	r1, [r7, #8]
 8007eb8:	f003 ffca 	bl	800be50 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	68da      	ldr	r2, [r3, #12]
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec4:	425b      	negs	r3, r3
 8007ec6:	441a      	add	r2, r3
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	68da      	ldr	r2, [r3, #12]
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d207      	bcs.n	8007ee8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	689a      	ldr	r2, [r3, #8]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee0:	425b      	negs	r3, r3
 8007ee2:	441a      	add	r2, r3
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2b02      	cmp	r3, #2
 8007eec:	d105      	bne.n	8007efa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d002      	beq.n	8007efa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	3b01      	subs	r3, #1
 8007ef8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	1c5a      	adds	r2, r3, #1
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007f02:	697b      	ldr	r3, [r7, #20]
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3718      	adds	r7, #24
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b082      	sub	sp, #8
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d018      	beq.n	8007f50 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	68da      	ldr	r2, [r3, #12]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f26:	441a      	add	r2, r3
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	68da      	ldr	r2, [r3, #12]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	689b      	ldr	r3, [r3, #8]
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d303      	bcc.n	8007f40 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	68d9      	ldr	r1, [r3, #12]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f48:	461a      	mov	r2, r3
 8007f4a:	6838      	ldr	r0, [r7, #0]
 8007f4c:	f003 ff80 	bl	800be50 <memcpy>
	}
}
 8007f50:	bf00      	nop
 8007f52:	3708      	adds	r7, #8
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007f60:	f002 fe20 	bl	800aba4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f6a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007f6c:	e011      	b.n	8007f92 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d012      	beq.n	8007f9c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	3324      	adds	r3, #36	; 0x24
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f001 fa08 	bl	8009390 <xTaskRemoveFromEventList>
 8007f80:	4603      	mov	r3, r0
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d001      	beq.n	8007f8a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007f86:	f001 fb05 	bl	8009594 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007f8a:	7bfb      	ldrb	r3, [r7, #15]
 8007f8c:	3b01      	subs	r3, #1
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	dce9      	bgt.n	8007f6e <prvUnlockQueue+0x16>
 8007f9a:	e000      	b.n	8007f9e <prvUnlockQueue+0x46>
					break;
 8007f9c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	22ff      	movs	r2, #255	; 0xff
 8007fa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007fa6:	f002 fe2d 	bl	800ac04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007faa:	f002 fdfb 	bl	800aba4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007fb4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007fb6:	e011      	b.n	8007fdc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	691b      	ldr	r3, [r3, #16]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d012      	beq.n	8007fe6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	3310      	adds	r3, #16
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f001 f9e3 	bl	8009390 <xTaskRemoveFromEventList>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d001      	beq.n	8007fd4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007fd0:	f001 fae0 	bl	8009594 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007fd4:	7bbb      	ldrb	r3, [r7, #14]
 8007fd6:	3b01      	subs	r3, #1
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007fdc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	dce9      	bgt.n	8007fb8 <prvUnlockQueue+0x60>
 8007fe4:	e000      	b.n	8007fe8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007fe6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	22ff      	movs	r2, #255	; 0xff
 8007fec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007ff0:	f002 fe08 	bl	800ac04 <vPortExitCritical>
}
 8007ff4:	bf00      	nop
 8007ff6:	3710      	adds	r7, #16
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008004:	f002 fdce 	bl	800aba4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800800c:	2b00      	cmp	r3, #0
 800800e:	d102      	bne.n	8008016 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008010:	2301      	movs	r3, #1
 8008012:	60fb      	str	r3, [r7, #12]
 8008014:	e001      	b.n	800801a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008016:	2300      	movs	r3, #0
 8008018:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800801a:	f002 fdf3 	bl	800ac04 <vPortExitCritical>

	return xReturn;
 800801e:	68fb      	ldr	r3, [r7, #12]
}
 8008020:	4618      	mov	r0, r3
 8008022:	3710      	adds	r7, #16
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b084      	sub	sp, #16
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008030:	f002 fdb8 	bl	800aba4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800803c:	429a      	cmp	r2, r3
 800803e:	d102      	bne.n	8008046 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008040:	2301      	movs	r3, #1
 8008042:	60fb      	str	r3, [r7, #12]
 8008044:	e001      	b.n	800804a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008046:	2300      	movs	r3, #0
 8008048:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800804a:	f002 fddb 	bl	800ac04 <vPortExitCritical>

	return xReturn;
 800804e:	68fb      	ldr	r3, [r7, #12]
}
 8008050:	4618      	mov	r0, r3
 8008052:	3710      	adds	r7, #16
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008058:	b480      	push	{r7}
 800805a:	b085      	sub	sp, #20
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008062:	2300      	movs	r3, #0
 8008064:	60fb      	str	r3, [r7, #12]
 8008066:	e014      	b.n	8008092 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008068:	4a0f      	ldr	r2, [pc, #60]	; (80080a8 <vQueueAddToRegistry+0x50>)
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d10b      	bne.n	800808c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008074:	490c      	ldr	r1, [pc, #48]	; (80080a8 <vQueueAddToRegistry+0x50>)
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	683a      	ldr	r2, [r7, #0]
 800807a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800807e:	4a0a      	ldr	r2, [pc, #40]	; (80080a8 <vQueueAddToRegistry+0x50>)
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	00db      	lsls	r3, r3, #3
 8008084:	4413      	add	r3, r2
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800808a:	e006      	b.n	800809a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	3301      	adds	r3, #1
 8008090:	60fb      	str	r3, [r7, #12]
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2b07      	cmp	r3, #7
 8008096:	d9e7      	bls.n	8008068 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008098:	bf00      	nop
 800809a:	bf00      	nop
 800809c:	3714      	adds	r7, #20
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr
 80080a6:	bf00      	nop
 80080a8:	20000b9c 	.word	0x20000b9c

080080ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b086      	sub	sp, #24
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80080bc:	f002 fd72 	bl	800aba4 <vPortEnterCritical>
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80080c6:	b25b      	sxtb	r3, r3
 80080c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080cc:	d103      	bne.n	80080d6 <vQueueWaitForMessageRestricted+0x2a>
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	2200      	movs	r2, #0
 80080d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80080dc:	b25b      	sxtb	r3, r3
 80080de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080e2:	d103      	bne.n	80080ec <vQueueWaitForMessageRestricted+0x40>
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	2200      	movs	r2, #0
 80080e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80080ec:	f002 fd8a 	bl	800ac04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d106      	bne.n	8008106 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	3324      	adds	r3, #36	; 0x24
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	68b9      	ldr	r1, [r7, #8]
 8008100:	4618      	mov	r0, r3
 8008102:	f001 f919 	bl	8009338 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008106:	6978      	ldr	r0, [r7, #20]
 8008108:	f7ff ff26 	bl	8007f58 <prvUnlockQueue>
	}
 800810c:	bf00      	nop
 800810e:	3718      	adds	r7, #24
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 8008114:	b580      	push	{r7, lr}
 8008116:	b08c      	sub	sp, #48	; 0x30
 8008118:	af02      	add	r7, sp, #8
 800811a:	60f8      	str	r0, [r7, #12]
 800811c:	60b9      	str	r1, [r7, #8]
 800811e:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2b01      	cmp	r3, #1
 8008124:	d110      	bne.n	8008148 <xStreamBufferGenericCreate+0x34>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 8008126:	2301      	movs	r3, #1
 8008128:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2b04      	cmp	r3, #4
 8008130:	d81b      	bhi.n	800816a <xStreamBufferGenericCreate+0x56>
	__asm volatile
 8008132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008136:	f383 8811 	msr	BASEPRI, r3
 800813a:	f3bf 8f6f 	isb	sy
 800813e:	f3bf 8f4f 	dsb	sy
 8008142:	61fb      	str	r3, [r7, #28]
}
 8008144:	bf00      	nop
 8008146:	e7fe      	b.n	8008146 <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 8008148:	2300      	movs	r3, #0
 800814a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > 0 );
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d10a      	bne.n	800816a <xStreamBufferGenericCreate+0x56>
	__asm volatile
 8008154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008158:	f383 8811 	msr	BASEPRI, r3
 800815c:	f3bf 8f6f 	isb	sy
 8008160:	f3bf 8f4f 	dsb	sy
 8008164:	61bb      	str	r3, [r7, #24]
}
 8008166:	bf00      	nop
 8008168:	e7fe      	b.n	8008168 <xStreamBufferGenericCreate+0x54>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 800816a:	68ba      	ldr	r2, [r7, #8]
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	429a      	cmp	r2, r3
 8008170:	d90a      	bls.n	8008188 <xStreamBufferGenericCreate+0x74>
	__asm volatile
 8008172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008176:	f383 8811 	msr	BASEPRI, r3
 800817a:	f3bf 8f6f 	isb	sy
 800817e:	f3bf 8f4f 	dsb	sy
 8008182:	617b      	str	r3, [r7, #20]
}
 8008184:	bf00      	nop
 8008186:	e7fe      	b.n	8008186 <xStreamBufferGenericCreate+0x72>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d101      	bne.n	8008192 <xStreamBufferGenericCreate+0x7e>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 800818e:	2301      	movs	r3, #1
 8008190:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	3301      	adds	r3, #1
 8008196:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	3324      	adds	r3, #36	; 0x24
 800819c:	4618      	mov	r0, r3
 800819e:	f002 fe23 	bl	800ade8 <pvPortMalloc>
 80081a2:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 80081a4:	6a3b      	ldr	r3, [r7, #32]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d00a      	beq.n	80081c0 <xStreamBufferGenericCreate+0xac>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 80081aa:	6a3b      	ldr	r3, [r7, #32]
 80081ac:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80081b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80081b4:	9300      	str	r3, [sp, #0]
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	68fa      	ldr	r2, [r7, #12]
 80081ba:	6a38      	ldr	r0, [r7, #32]
 80081bc:	f000 fb6e 	bl	800889c <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 80081c0:	6a3b      	ldr	r3, [r7, #32]
	}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3728      	adds	r7, #40	; 0x28
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}

080081ca <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 80081ca:	b480      	push	{r7}
 80081cc:	b087      	sub	sp, #28
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d10a      	bne.n	80081f2 <xStreamBufferSpacesAvailable+0x28>
	__asm volatile
 80081dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e0:	f383 8811 	msr	BASEPRI, r3
 80081e4:	f3bf 8f6f 	isb	sy
 80081e8:	f3bf 8f4f 	dsb	sy
 80081ec:	60fb      	str	r3, [r7, #12]
}
 80081ee:	bf00      	nop
 80081f0:	e7fe      	b.n	80081f0 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	689a      	ldr	r2, [r3, #8]
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4413      	add	r3, r2
 80081fc:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	697a      	ldr	r2, [r7, #20]
 8008204:	1ad3      	subs	r3, r2, r3
 8008206:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	3b01      	subs	r3, #1
 800820c:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	697a      	ldr	r2, [r7, #20]
 8008214:	429a      	cmp	r2, r3
 8008216:	d304      	bcc.n	8008222 <xStreamBufferSpacesAvailable+0x58>
	{
		xSpace -= pxStreamBuffer->xLength;
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	697a      	ldr	r2, [r7, #20]
 800821e:	1ad3      	subs	r3, r2, r3
 8008220:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 8008222:	697b      	ldr	r3, [r7, #20]
}
 8008224:	4618      	mov	r0, r3
 8008226:	371c      	adds	r7, #28
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr

08008230 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b090      	sub	sp, #64	; 0x40
 8008234:	af02      	add	r7, sp, #8
 8008236:	60f8      	str	r0, [r7, #12]
 8008238:	60b9      	str	r1, [r7, #8]
 800823a:	607a      	str	r2, [r7, #4]
 800823c:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xReturn, xSpace = 0;
 8008242:	2300      	movs	r3, #0
 8008244:	637b      	str	r3, [r7, #52]	; 0x34
size_t xRequiredSpace = xDataLengthBytes;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	633b      	str	r3, [r7, #48]	; 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d10a      	bne.n	8008266 <xStreamBufferSend+0x36>
	__asm volatile
 8008250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008254:	f383 8811 	msr	BASEPRI, r3
 8008258:	f3bf 8f6f 	isb	sy
 800825c:	f3bf 8f4f 	dsb	sy
 8008260:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008262:	bf00      	nop
 8008264:	e7fe      	b.n	8008264 <xStreamBufferSend+0x34>
	configASSERT( pxStreamBuffer );
 8008266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008268:	2b00      	cmp	r3, #0
 800826a:	d10a      	bne.n	8008282 <xStreamBufferSend+0x52>
	__asm volatile
 800826c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008270:	f383 8811 	msr	BASEPRI, r3
 8008274:	f3bf 8f6f 	isb	sy
 8008278:	f3bf 8f4f 	dsb	sy
 800827c:	623b      	str	r3, [r7, #32]
}
 800827e:	bf00      	nop
 8008280:	e7fe      	b.n	8008280 <xStreamBufferSend+0x50>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8008282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008284:	7f1b      	ldrb	r3, [r3, #28]
 8008286:	f003 0301 	and.w	r3, r3, #1
 800828a:	2b00      	cmp	r3, #0
 800828c:	d011      	beq.n	80082b2 <xStreamBufferSend+0x82>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800828e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008290:	3304      	adds	r3, #4
 8008292:	633b      	str	r3, [r7, #48]	; 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 8008294:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	429a      	cmp	r2, r3
 800829a:	d80a      	bhi.n	80082b2 <xStreamBufferSend+0x82>
	__asm volatile
 800829c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a0:	f383 8811 	msr	BASEPRI, r3
 80082a4:	f3bf 8f6f 	isb	sy
 80082a8:	f3bf 8f4f 	dsb	sy
 80082ac:	61fb      	str	r3, [r7, #28]
}
 80082ae:	bf00      	nop
 80082b0:	e7fe      	b.n	80082b0 <xStreamBufferSend+0x80>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d03e      	beq.n	8008336 <xStreamBufferSend+0x106>
	{
		vTaskSetTimeOutState( &xTimeOut );
 80082b8:	f107 0310 	add.w	r3, r7, #16
 80082bc:	4618      	mov	r0, r3
 80082be:	f001 f8cb 	bl	8009458 <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 80082c2:	f002 fc6f 	bl	800aba4 <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 80082c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80082c8:	f7ff ff7f 	bl	80081ca <xStreamBufferSpacesAvailable>
 80082cc:	6378      	str	r0, [r7, #52]	; 0x34

				if( xSpace < xRequiredSpace )
 80082ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d217      	bcs.n	8008306 <xStreamBufferSend+0xd6>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 80082d6:	2000      	movs	r0, #0
 80082d8:	f001 ff6e 	bl	800a1b8 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 80082dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082de:	695b      	ldr	r3, [r3, #20]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d00a      	beq.n	80082fa <xStreamBufferSend+0xca>
	__asm volatile
 80082e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e8:	f383 8811 	msr	BASEPRI, r3
 80082ec:	f3bf 8f6f 	isb	sy
 80082f0:	f3bf 8f4f 	dsb	sy
 80082f4:	61bb      	str	r3, [r7, #24]
}
 80082f6:	bf00      	nop
 80082f8:	e7fe      	b.n	80082f8 <xStreamBufferSend+0xc8>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 80082fa:	f001 fb05 	bl	8009908 <xTaskGetCurrentTaskHandle>
 80082fe:	4602      	mov	r2, r0
 8008300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008302:	615a      	str	r2, [r3, #20]
 8008304:	e002      	b.n	800830c <xStreamBufferSend+0xdc>
				}
				else
				{
					taskEXIT_CRITICAL();
 8008306:	f002 fc7d 	bl	800ac04 <vPortExitCritical>
					break;
 800830a:	e014      	b.n	8008336 <xStreamBufferSend+0x106>
				}
			}
			taskEXIT_CRITICAL();
 800830c:	f002 fc7a 	bl	800ac04 <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	2200      	movs	r2, #0
 8008314:	2100      	movs	r1, #0
 8008316:	2000      	movs	r0, #0
 8008318:	f001 fd4c 	bl	8009db4 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 800831c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800831e:	2200      	movs	r2, #0
 8008320:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 8008322:	463a      	mov	r2, r7
 8008324:	f107 0310 	add.w	r3, r7, #16
 8008328:	4611      	mov	r1, r2
 800832a:	4618      	mov	r0, r3
 800832c:	f001 f8d0 	bl	80094d0 <xTaskCheckForTimeOut>
 8008330:	4603      	mov	r3, r0
 8008332:	2b00      	cmp	r3, #0
 8008334:	d0c5      	beq.n	80082c2 <xStreamBufferSend+0x92>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 8008336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008338:	2b00      	cmp	r3, #0
 800833a:	d103      	bne.n	8008344 <xStreamBufferSend+0x114>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 800833c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800833e:	f7ff ff44 	bl	80081ca <xStreamBufferSpacesAvailable>
 8008342:	6378      	str	r0, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8008344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008346:	9300      	str	r3, [sp, #0]
 8008348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	68b9      	ldr	r1, [r7, #8]
 800834e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008350:	f000 f894 	bl	800847c <prvWriteMessageToBuffer>
 8008354:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 8008356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008358:	2b00      	cmp	r3, #0
 800835a:	d019      	beq.n	8008390 <xStreamBufferSend+0x160>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 800835c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800835e:	f000 fa7d 	bl	800885c <prvBytesInBuffer>
 8008362:	4602      	mov	r2, r0
 8008364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008366:	68db      	ldr	r3, [r3, #12]
 8008368:	429a      	cmp	r2, r3
 800836a:	d311      	bcc.n	8008390 <xStreamBufferSend+0x160>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 800836c:	f000 fd58 	bl	8008e20 <vTaskSuspendAll>
 8008370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008372:	691b      	ldr	r3, [r3, #16]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d009      	beq.n	800838c <xStreamBufferSend+0x15c>
 8008378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800837a:	6918      	ldr	r0, [r3, #16]
 800837c:	2300      	movs	r3, #0
 800837e:	2200      	movs	r2, #0
 8008380:	2100      	movs	r1, #0
 8008382:	f001 fd77 	bl	8009e74 <xTaskGenericNotify>
 8008386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008388:	2200      	movs	r2, #0
 800838a:	611a      	str	r2, [r3, #16]
 800838c:	f000 fd56 	bl	8008e3c <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 8008390:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8008392:	4618      	mov	r0, r3
 8008394:	3738      	adds	r7, #56	; 0x38
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}

0800839a <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
 800839a:	b580      	push	{r7, lr}
 800839c:	b090      	sub	sp, #64	; 0x40
 800839e:	af02      	add	r7, sp, #8
 80083a0:	60f8      	str	r0, [r7, #12]
 80083a2:	60b9      	str	r1, [r7, #8]
 80083a4:	607a      	str	r2, [r7, #4]
 80083a6:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	633b      	str	r3, [r7, #48]	; 0x30
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	637b      	str	r3, [r7, #52]	; 0x34

	configASSERT( pvTxData );
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d10a      	bne.n	80083cc <xStreamBufferSendFromISR+0x32>
	__asm volatile
 80083b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ba:	f383 8811 	msr	BASEPRI, r3
 80083be:	f3bf 8f6f 	isb	sy
 80083c2:	f3bf 8f4f 	dsb	sy
 80083c6:	623b      	str	r3, [r7, #32]
}
 80083c8:	bf00      	nop
 80083ca:	e7fe      	b.n	80083ca <xStreamBufferSendFromISR+0x30>
	configASSERT( pxStreamBuffer );
 80083cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d10a      	bne.n	80083e8 <xStreamBufferSendFromISR+0x4e>
	__asm volatile
 80083d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d6:	f383 8811 	msr	BASEPRI, r3
 80083da:	f3bf 8f6f 	isb	sy
 80083de:	f3bf 8f4f 	dsb	sy
 80083e2:	61fb      	str	r3, [r7, #28]
}
 80083e4:	bf00      	nop
 80083e6:	e7fe      	b.n	80083e6 <xStreamBufferSendFromISR+0x4c>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 80083e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ea:	7f1b      	ldrb	r3, [r3, #28]
 80083ec:	f003 0301 	and.w	r3, r3, #1
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d002      	beq.n	80083fa <xStreamBufferSendFromISR+0x60>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80083f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083f6:	3304      	adds	r3, #4
 80083f8:	637b      	str	r3, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 80083fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083fc:	f7ff fee5 	bl	80081ca <xStreamBufferSpacesAvailable>
 8008400:	62f8      	str	r0, [r7, #44]	; 0x2c
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8008402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008404:	9300      	str	r3, [sp, #0]
 8008406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008408:	687a      	ldr	r2, [r7, #4]
 800840a:	68b9      	ldr	r1, [r7, #8]
 800840c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800840e:	f000 f835 	bl	800847c <prvWriteMessageToBuffer>
 8008412:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 8008414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008416:	2b00      	cmp	r3, #0
 8008418:	d02b      	beq.n	8008472 <xStreamBufferSendFromISR+0xd8>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 800841a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800841c:	f000 fa1e 	bl	800885c <prvBytesInBuffer>
 8008420:	4602      	mov	r2, r0
 8008422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008424:	68db      	ldr	r3, [r3, #12]
 8008426:	429a      	cmp	r2, r3
 8008428:	d323      	bcc.n	8008472 <xStreamBufferSendFromISR+0xd8>
	__asm volatile
 800842a:	f3ef 8211 	mrs	r2, BASEPRI
 800842e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008432:	f383 8811 	msr	BASEPRI, r3
 8008436:	f3bf 8f6f 	isb	sy
 800843a:	f3bf 8f4f 	dsb	sy
 800843e:	61ba      	str	r2, [r7, #24]
 8008440:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008442:	69bb      	ldr	r3, [r7, #24]
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 8008444:	627b      	str	r3, [r7, #36]	; 0x24
 8008446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008448:	691b      	ldr	r3, [r3, #16]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d00b      	beq.n	8008466 <xStreamBufferSendFromISR+0xcc>
 800844e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008450:	6918      	ldr	r0, [r3, #16]
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	9300      	str	r3, [sp, #0]
 8008456:	2300      	movs	r3, #0
 8008458:	2200      	movs	r2, #0
 800845a:	2100      	movs	r1, #0
 800845c:	f001 fdc8 	bl	8009ff0 <xTaskGenericNotifyFromISR>
 8008460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008462:	2200      	movs	r2, #0
 8008464:	611a      	str	r2, [r3, #16]
 8008466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008468:	613b      	str	r3, [r7, #16]
	__asm volatile
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	f383 8811 	msr	BASEPRI, r3
}
 8008470:	bf00      	nop
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
 8008472:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8008474:	4618      	mov	r0, r3
 8008476:	3738      	adds	r7, #56	; 0x38
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b086      	sub	sp, #24
 8008480:	af00      	add	r7, sp, #0
 8008482:	60f8      	str	r0, [r7, #12]
 8008484:	60b9      	str	r1, [r7, #8]
 8008486:	607a      	str	r2, [r7, #4]
 8008488:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d102      	bne.n	8008496 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 8008490:	2300      	movs	r3, #0
 8008492:	617b      	str	r3, [r7, #20]
 8008494:	e01d      	b.n	80084d2 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	7f1b      	ldrb	r3, [r3, #28]
 800849a:	f003 0301 	and.w	r3, r3, #1
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d108      	bne.n	80084b4 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 80084a2:	2301      	movs	r3, #1
 80084a4:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	4293      	cmp	r3, r2
 80084ac:	bf28      	it	cs
 80084ae:	4613      	movcs	r3, r2
 80084b0:	607b      	str	r3, [r7, #4]
 80084b2:	e00e      	b.n	80084d2 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 80084b4:	683a      	ldr	r2, [r7, #0]
 80084b6:	6a3b      	ldr	r3, [r7, #32]
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d308      	bcc.n	80084ce <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 80084bc:	2301      	movs	r3, #1
 80084be:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 80084c0:	1d3b      	adds	r3, r7, #4
 80084c2:	2204      	movs	r2, #4
 80084c4:	4619      	mov	r1, r3
 80084c6:	68f8      	ldr	r0, [r7, #12]
 80084c8:	f000 f8dc 	bl	8008684 <prvWriteBytesToBuffer>
 80084cc:	e001      	b.n	80084d2 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 80084ce:	2300      	movs	r3, #0
 80084d0:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d007      	beq.n	80084e8 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	461a      	mov	r2, r3
 80084dc:	68b9      	ldr	r1, [r7, #8]
 80084de:	68f8      	ldr	r0, [r7, #12]
 80084e0:	f000 f8d0 	bl	8008684 <prvWriteBytesToBuffer>
 80084e4:	6138      	str	r0, [r7, #16]
 80084e6:	e001      	b.n	80084ec <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 80084e8:	2300      	movs	r3, #0
 80084ea:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 80084ec:	693b      	ldr	r3, [r7, #16]
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3718      	adds	r7, #24
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}

080084f6 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 80084f6:	b580      	push	{r7, lr}
 80084f8:	b08e      	sub	sp, #56	; 0x38
 80084fa:	af02      	add	r7, sp, #8
 80084fc:	60f8      	str	r0, [r7, #12]
 80084fe:	60b9      	str	r1, [r7, #8]
 8008500:	607a      	str	r2, [r7, #4]
 8008502:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8008508:	2300      	movs	r3, #0
 800850a:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d10a      	bne.n	8008528 <xStreamBufferReceive+0x32>
	__asm volatile
 8008512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008516:	f383 8811 	msr	BASEPRI, r3
 800851a:	f3bf 8f6f 	isb	sy
 800851e:	f3bf 8f4f 	dsb	sy
 8008522:	61fb      	str	r3, [r7, #28]
}
 8008524:	bf00      	nop
 8008526:	e7fe      	b.n	8008526 <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 8008528:	6a3b      	ldr	r3, [r7, #32]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d10a      	bne.n	8008544 <xStreamBufferReceive+0x4e>
	__asm volatile
 800852e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008532:	f383 8811 	msr	BASEPRI, r3
 8008536:	f3bf 8f6f 	isb	sy
 800853a:	f3bf 8f4f 	dsb	sy
 800853e:	61bb      	str	r3, [r7, #24]
}
 8008540:	bf00      	nop
 8008542:	e7fe      	b.n	8008542 <xStreamBufferReceive+0x4c>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8008544:	6a3b      	ldr	r3, [r7, #32]
 8008546:	7f1b      	ldrb	r3, [r3, #28]
 8008548:	f003 0301 	and.w	r3, r3, #1
 800854c:	2b00      	cmp	r3, #0
 800854e:	d002      	beq.n	8008556 <xStreamBufferReceive+0x60>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8008550:	2304      	movs	r3, #4
 8008552:	627b      	str	r3, [r7, #36]	; 0x24
 8008554:	e001      	b.n	800855a <xStreamBufferReceive+0x64>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 8008556:	2300      	movs	r3, #0
 8008558:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d034      	beq.n	80085ca <xStreamBufferReceive+0xd4>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 8008560:	f002 fb20 	bl	800aba4 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8008564:	6a38      	ldr	r0, [r7, #32]
 8008566:	f000 f979 	bl	800885c <prvBytesInBuffer>
 800856a:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 800856c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800856e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008570:	429a      	cmp	r2, r3
 8008572:	d816      	bhi.n	80085a2 <xStreamBufferReceive+0xac>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 8008574:	2000      	movs	r0, #0
 8008576:	f001 fe1f 	bl	800a1b8 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 800857a:	6a3b      	ldr	r3, [r7, #32]
 800857c:	691b      	ldr	r3, [r3, #16]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d00a      	beq.n	8008598 <xStreamBufferReceive+0xa2>
	__asm volatile
 8008582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008586:	f383 8811 	msr	BASEPRI, r3
 800858a:	f3bf 8f6f 	isb	sy
 800858e:	f3bf 8f4f 	dsb	sy
 8008592:	617b      	str	r3, [r7, #20]
}
 8008594:	bf00      	nop
 8008596:	e7fe      	b.n	8008596 <xStreamBufferReceive+0xa0>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8008598:	f001 f9b6 	bl	8009908 <xTaskGetCurrentTaskHandle>
 800859c:	4602      	mov	r2, r0
 800859e:	6a3b      	ldr	r3, [r7, #32]
 80085a0:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80085a2:	f002 fb2f 	bl	800ac04 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 80085a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d811      	bhi.n	80085d2 <xStreamBufferReceive+0xdc>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	2200      	movs	r2, #0
 80085b2:	2100      	movs	r1, #0
 80085b4:	2000      	movs	r0, #0
 80085b6:	f001 fbfd 	bl	8009db4 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 80085ba:	6a3b      	ldr	r3, [r7, #32]
 80085bc:	2200      	movs	r2, #0
 80085be:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80085c0:	6a38      	ldr	r0, [r7, #32]
 80085c2:	f000 f94b 	bl	800885c <prvBytesInBuffer>
 80085c6:	62b8      	str	r0, [r7, #40]	; 0x28
 80085c8:	e003      	b.n	80085d2 <xStreamBufferReceive+0xdc>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80085ca:	6a38      	ldr	r0, [r7, #32]
 80085cc:	f000 f946 	bl	800885c <prvBytesInBuffer>
 80085d0:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 80085d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d91d      	bls.n	8008616 <xStreamBufferReceive+0x120>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 80085da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085dc:	9300      	str	r3, [sp, #0]
 80085de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	68b9      	ldr	r1, [r7, #8]
 80085e4:	6a38      	ldr	r0, [r7, #32]
 80085e6:	f000 f81b 	bl	8008620 <prvReadMessageFromBuffer>
 80085ea:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 80085ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d011      	beq.n	8008616 <xStreamBufferReceive+0x120>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 80085f2:	f000 fc15 	bl	8008e20 <vTaskSuspendAll>
 80085f6:	6a3b      	ldr	r3, [r7, #32]
 80085f8:	695b      	ldr	r3, [r3, #20]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d009      	beq.n	8008612 <xStreamBufferReceive+0x11c>
 80085fe:	6a3b      	ldr	r3, [r7, #32]
 8008600:	6958      	ldr	r0, [r3, #20]
 8008602:	2300      	movs	r3, #0
 8008604:	2200      	movs	r2, #0
 8008606:	2100      	movs	r1, #0
 8008608:	f001 fc34 	bl	8009e74 <xTaskGenericNotify>
 800860c:	6a3b      	ldr	r3, [r7, #32]
 800860e:	2200      	movs	r2, #0
 8008610:	615a      	str	r2, [r3, #20]
 8008612:	f000 fc13 	bl	8008e3c <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 8008616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008618:	4618      	mov	r0, r3
 800861a:	3730      	adds	r7, #48	; 0x30
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b088      	sub	sp, #32
 8008624:	af00      	add	r7, sp, #0
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	607a      	str	r2, [r7, #4]
 800862c:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 800862e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008630:	2b00      	cmp	r3, #0
 8008632:	d019      	beq.n	8008668 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 800863a:	f107 0110 	add.w	r1, r7, #16
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008642:	68f8      	ldr	r0, [r7, #12]
 8008644:	f000 f890 	bl	8008768 <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 800864c:	683a      	ldr	r2, [r7, #0]
 800864e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008650:	1ad3      	subs	r3, r2, r3
 8008652:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 8008654:	69fa      	ldr	r2, [r7, #28]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	429a      	cmp	r2, r3
 800865a:	d907      	bls.n	800866c <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	69ba      	ldr	r2, [r7, #24]
 8008660:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 8008662:	2300      	movs	r3, #0
 8008664:	61fb      	str	r3, [r7, #28]
 8008666:	e001      	b.n	800866c <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	69fa      	ldr	r2, [r7, #28]
 8008670:	68b9      	ldr	r1, [r7, #8]
 8008672:	68f8      	ldr	r0, [r7, #12]
 8008674:	f000 f878 	bl	8008768 <prvReadBytesFromBuffer>
 8008678:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 800867a:	697b      	ldr	r3, [r7, #20]
}
 800867c:	4618      	mov	r0, r3
 800867e:	3720      	adds	r7, #32
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b08a      	sub	sp, #40	; 0x28
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d10a      	bne.n	80086ac <prvWriteBytesToBuffer+0x28>
	__asm volatile
 8008696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800869a:	f383 8811 	msr	BASEPRI, r3
 800869e:	f3bf 8f6f 	isb	sy
 80086a2:	f3bf 8f4f 	dsb	sy
 80086a6:	61fb      	str	r3, [r7, #28]
}
 80086a8:	bf00      	nop
 80086aa:	e7fe      	b.n	80086aa <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	689a      	ldr	r2, [r3, #8]
 80086b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b8:	1ad3      	subs	r3, r2, r3
 80086ba:	687a      	ldr	r2, [r7, #4]
 80086bc:	4293      	cmp	r3, r2
 80086be:	bf28      	it	cs
 80086c0:	4613      	movcs	r3, r2
 80086c2:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 80086c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086c6:	6a3b      	ldr	r3, [r7, #32]
 80086c8:	441a      	add	r2, r3
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d90a      	bls.n	80086e8 <prvWriteBytesToBuffer+0x64>
	__asm volatile
 80086d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d6:	f383 8811 	msr	BASEPRI, r3
 80086da:	f3bf 8f6f 	isb	sy
 80086de:	f3bf 8f4f 	dsb	sy
 80086e2:	61bb      	str	r3, [r7, #24]
}
 80086e4:	bf00      	nop
 80086e6:	e7fe      	b.n	80086e6 <prvWriteBytesToBuffer+0x62>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	699a      	ldr	r2, [r3, #24]
 80086ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ee:	4413      	add	r3, r2
 80086f0:	6a3a      	ldr	r2, [r7, #32]
 80086f2:	68b9      	ldr	r1, [r7, #8]
 80086f4:	4618      	mov	r0, r3
 80086f6:	f003 fbab 	bl	800be50 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 80086fa:	687a      	ldr	r2, [r7, #4]
 80086fc:	6a3b      	ldr	r3, [r7, #32]
 80086fe:	429a      	cmp	r2, r3
 8008700:	d91c      	bls.n	800873c <prvWriteBytesToBuffer+0xb8>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	6a3b      	ldr	r3, [r7, #32]
 8008706:	1ad2      	subs	r2, r2, r3
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	689b      	ldr	r3, [r3, #8]
 800870c:	429a      	cmp	r2, r3
 800870e:	d90a      	bls.n	8008726 <prvWriteBytesToBuffer+0xa2>
	__asm volatile
 8008710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008714:	f383 8811 	msr	BASEPRI, r3
 8008718:	f3bf 8f6f 	isb	sy
 800871c:	f3bf 8f4f 	dsb	sy
 8008720:	617b      	str	r3, [r7, #20]
}
 8008722:	bf00      	nop
 8008724:	e7fe      	b.n	8008724 <prvWriteBytesToBuffer+0xa0>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	6998      	ldr	r0, [r3, #24]
 800872a:	68ba      	ldr	r2, [r7, #8]
 800872c:	6a3b      	ldr	r3, [r7, #32]
 800872e:	18d1      	adds	r1, r2, r3
 8008730:	687a      	ldr	r2, [r7, #4]
 8008732:	6a3b      	ldr	r3, [r7, #32]
 8008734:	1ad3      	subs	r3, r2, r3
 8008736:	461a      	mov	r2, r3
 8008738:	f003 fb8a 	bl	800be50 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 800873c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	4413      	add	r3, r2
 8008742:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	689b      	ldr	r3, [r3, #8]
 8008748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800874a:	429a      	cmp	r2, r3
 800874c:	d304      	bcc.n	8008758 <prvWriteBytesToBuffer+0xd4>
	{
		xNextHead -= pxStreamBuffer->xLength;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008754:	1ad3      	subs	r3, r2, r3
 8008756:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800875c:	605a      	str	r2, [r3, #4]

	return xCount;
 800875e:	687b      	ldr	r3, [r7, #4]
}
 8008760:	4618      	mov	r0, r3
 8008762:	3728      	adds	r7, #40	; 0x28
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b08a      	sub	sp, #40	; 0x28
 800876c:	af00      	add	r7, sp, #0
 800876e:	60f8      	str	r0, [r7, #12]
 8008770:	60b9      	str	r1, [r7, #8]
 8008772:	607a      	str	r2, [r7, #4]
 8008774:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	4293      	cmp	r3, r2
 800877c:	bf28      	it	cs
 800877e:	4613      	movcs	r3, r2
 8008780:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 8008782:	6a3b      	ldr	r3, [r7, #32]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d064      	beq.n	8008852 <prvReadBytesFromBuffer+0xea>
	{
		xNextTail = pxStreamBuffer->xTail;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	689a      	ldr	r2, [r3, #8]
 8008792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008794:	1ad3      	subs	r3, r2, r3
 8008796:	6a3a      	ldr	r2, [r7, #32]
 8008798:	4293      	cmp	r3, r2
 800879a:	bf28      	it	cs
 800879c:	4613      	movcs	r3, r2
 800879e:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 80087a0:	69fa      	ldr	r2, [r7, #28]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d90a      	bls.n	80087be <prvReadBytesFromBuffer+0x56>
	__asm volatile
 80087a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ac:	f383 8811 	msr	BASEPRI, r3
 80087b0:	f3bf 8f6f 	isb	sy
 80087b4:	f3bf 8f4f 	dsb	sy
 80087b8:	61bb      	str	r3, [r7, #24]
}
 80087ba:	bf00      	nop
 80087bc:	e7fe      	b.n	80087bc <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 80087be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087c0:	69fb      	ldr	r3, [r7, #28]
 80087c2:	441a      	add	r2, r3
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	689b      	ldr	r3, [r3, #8]
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d90a      	bls.n	80087e2 <prvReadBytesFromBuffer+0x7a>
	__asm volatile
 80087cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d0:	f383 8811 	msr	BASEPRI, r3
 80087d4:	f3bf 8f6f 	isb	sy
 80087d8:	f3bf 8f4f 	dsb	sy
 80087dc:	617b      	str	r3, [r7, #20]
}
 80087de:	bf00      	nop
 80087e0:	e7fe      	b.n	80087e0 <prvReadBytesFromBuffer+0x78>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	699a      	ldr	r2, [r3, #24]
 80087e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e8:	4413      	add	r3, r2
 80087ea:	69fa      	ldr	r2, [r7, #28]
 80087ec:	4619      	mov	r1, r3
 80087ee:	68b8      	ldr	r0, [r7, #8]
 80087f0:	f003 fb2e 	bl	800be50 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 80087f4:	6a3a      	ldr	r2, [r7, #32]
 80087f6:	69fb      	ldr	r3, [r7, #28]
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d919      	bls.n	8008830 <prvReadBytesFromBuffer+0xc8>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 80087fc:	6a3a      	ldr	r2, [r7, #32]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	429a      	cmp	r2, r3
 8008802:	d90a      	bls.n	800881a <prvReadBytesFromBuffer+0xb2>
	__asm volatile
 8008804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008808:	f383 8811 	msr	BASEPRI, r3
 800880c:	f3bf 8f6f 	isb	sy
 8008810:	f3bf 8f4f 	dsb	sy
 8008814:	613b      	str	r3, [r7, #16]
}
 8008816:	bf00      	nop
 8008818:	e7fe      	b.n	8008818 <prvReadBytesFromBuffer+0xb0>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800881a:	68ba      	ldr	r2, [r7, #8]
 800881c:	69fb      	ldr	r3, [r7, #28]
 800881e:	18d0      	adds	r0, r2, r3
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	6999      	ldr	r1, [r3, #24]
 8008824:	6a3a      	ldr	r2, [r7, #32]
 8008826:	69fb      	ldr	r3, [r7, #28]
 8008828:	1ad3      	subs	r3, r2, r3
 800882a:	461a      	mov	r2, r3
 800882c:	f003 fb10 	bl	800be50 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 8008830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008832:	6a3b      	ldr	r3, [r7, #32]
 8008834:	4413      	add	r3, r2
 8008836:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800883e:	429a      	cmp	r2, r3
 8008840:	d304      	bcc.n	800884c <prvReadBytesFromBuffer+0xe4>
		{
			xNextTail -= pxStreamBuffer->xLength;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	689b      	ldr	r3, [r3, #8]
 8008846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008848:	1ad3      	subs	r3, r2, r3
 800884a:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008850:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8008852:	6a3b      	ldr	r3, [r7, #32]
}
 8008854:	4618      	mov	r0, r3
 8008856:	3728      	adds	r7, #40	; 0x28
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 800885c:	b480      	push	{r7}
 800885e:	b085      	sub	sp, #20
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	689a      	ldr	r2, [r3, #8]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	4413      	add	r3, r2
 800886e:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	68fa      	ldr	r2, [r7, #12]
 8008876:	1ad3      	subs	r3, r2, r3
 8008878:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	689b      	ldr	r3, [r3, #8]
 800887e:	68fa      	ldr	r2, [r7, #12]
 8008880:	429a      	cmp	r2, r3
 8008882:	d304      	bcc.n	800888e <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	689b      	ldr	r3, [r3, #8]
 8008888:	68fa      	ldr	r2, [r7, #12]
 800888a:	1ad3      	subs	r3, r2, r3
 800888c:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800888e:	68fb      	ldr	r3, [r7, #12]
}
 8008890:	4618      	mov	r0, r3
 8008892:	3714      	adds	r7, #20
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr

0800889c <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b086      	sub	sp, #24
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	60f8      	str	r0, [r7, #12]
 80088a4:	60b9      	str	r1, [r7, #8]
 80088a6:	607a      	str	r2, [r7, #4]
 80088a8:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 80088aa:	2355      	movs	r3, #85	; 0x55
 80088ac:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	6979      	ldr	r1, [r7, #20]
 80088b2:	68b8      	ldr	r0, [r7, #8]
 80088b4:	f003 fada 	bl	800be6c <memset>
 80088b8:	4602      	mov	r2, r0
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	4293      	cmp	r3, r2
 80088be:	d00a      	beq.n	80088d6 <prvInitialiseNewStreamBuffer+0x3a>
	__asm volatile
 80088c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c4:	f383 8811 	msr	BASEPRI, r3
 80088c8:	f3bf 8f6f 	isb	sy
 80088cc:	f3bf 8f4f 	dsb	sy
 80088d0:	613b      	str	r3, [r7, #16]
}
 80088d2:	bf00      	nop
 80088d4:	e7fe      	b.n	80088d4 <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 80088d6:	2224      	movs	r2, #36	; 0x24
 80088d8:	2100      	movs	r1, #0
 80088da:	68f8      	ldr	r0, [r7, #12]
 80088dc:	f003 fac6 	bl	800be6c <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	68ba      	ldr	r2, [r7, #8]
 80088e4:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	683a      	ldr	r2, [r7, #0]
 80088f0:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80088f8:	771a      	strb	r2, [r3, #28]
}
 80088fa:	bf00      	nop
 80088fc:	3718      	adds	r7, #24
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}

08008902 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008902:	b580      	push	{r7, lr}
 8008904:	b08e      	sub	sp, #56	; 0x38
 8008906:	af04      	add	r7, sp, #16
 8008908:	60f8      	str	r0, [r7, #12]
 800890a:	60b9      	str	r1, [r7, #8]
 800890c:	607a      	str	r2, [r7, #4]
 800890e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008912:	2b00      	cmp	r3, #0
 8008914:	d10a      	bne.n	800892c <xTaskCreateStatic+0x2a>
	__asm volatile
 8008916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800891a:	f383 8811 	msr	BASEPRI, r3
 800891e:	f3bf 8f6f 	isb	sy
 8008922:	f3bf 8f4f 	dsb	sy
 8008926:	623b      	str	r3, [r7, #32]
}
 8008928:	bf00      	nop
 800892a:	e7fe      	b.n	800892a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800892c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800892e:	2b00      	cmp	r3, #0
 8008930:	d10a      	bne.n	8008948 <xTaskCreateStatic+0x46>
	__asm volatile
 8008932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008936:	f383 8811 	msr	BASEPRI, r3
 800893a:	f3bf 8f6f 	isb	sy
 800893e:	f3bf 8f4f 	dsb	sy
 8008942:	61fb      	str	r3, [r7, #28]
}
 8008944:	bf00      	nop
 8008946:	e7fe      	b.n	8008946 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008948:	23bc      	movs	r3, #188	; 0xbc
 800894a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	2bbc      	cmp	r3, #188	; 0xbc
 8008950:	d00a      	beq.n	8008968 <xTaskCreateStatic+0x66>
	__asm volatile
 8008952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008956:	f383 8811 	msr	BASEPRI, r3
 800895a:	f3bf 8f6f 	isb	sy
 800895e:	f3bf 8f4f 	dsb	sy
 8008962:	61bb      	str	r3, [r7, #24]
}
 8008964:	bf00      	nop
 8008966:	e7fe      	b.n	8008966 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008968:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800896a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800896c:	2b00      	cmp	r3, #0
 800896e:	d01e      	beq.n	80089ae <xTaskCreateStatic+0xac>
 8008970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008972:	2b00      	cmp	r3, #0
 8008974:	d01b      	beq.n	80089ae <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008978:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800897a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800897e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008982:	2202      	movs	r2, #2
 8008984:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008988:	2300      	movs	r3, #0
 800898a:	9303      	str	r3, [sp, #12]
 800898c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898e:	9302      	str	r3, [sp, #8]
 8008990:	f107 0314 	add.w	r3, r7, #20
 8008994:	9301      	str	r3, [sp, #4]
 8008996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008998:	9300      	str	r3, [sp, #0]
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	687a      	ldr	r2, [r7, #4]
 800899e:	68b9      	ldr	r1, [r7, #8]
 80089a0:	68f8      	ldr	r0, [r7, #12]
 80089a2:	f000 f851 	bl	8008a48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80089a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80089a8:	f000 f8f4 	bl	8008b94 <prvAddNewTaskToReadyList>
 80089ac:	e001      	b.n	80089b2 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80089ae:	2300      	movs	r3, #0
 80089b0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80089b2:	697b      	ldr	r3, [r7, #20]
	}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3728      	adds	r7, #40	; 0x28
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b08c      	sub	sp, #48	; 0x30
 80089c0:	af04      	add	r7, sp, #16
 80089c2:	60f8      	str	r0, [r7, #12]
 80089c4:	60b9      	str	r1, [r7, #8]
 80089c6:	603b      	str	r3, [r7, #0]
 80089c8:	4613      	mov	r3, r2
 80089ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80089cc:	88fb      	ldrh	r3, [r7, #6]
 80089ce:	009b      	lsls	r3, r3, #2
 80089d0:	4618      	mov	r0, r3
 80089d2:	f002 fa09 	bl	800ade8 <pvPortMalloc>
 80089d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d00e      	beq.n	80089fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80089de:	20bc      	movs	r0, #188	; 0xbc
 80089e0:	f002 fa02 	bl	800ade8 <pvPortMalloc>
 80089e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80089e6:	69fb      	ldr	r3, [r7, #28]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d003      	beq.n	80089f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80089ec:	69fb      	ldr	r3, [r7, #28]
 80089ee:	697a      	ldr	r2, [r7, #20]
 80089f0:	631a      	str	r2, [r3, #48]	; 0x30
 80089f2:	e005      	b.n	8008a00 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80089f4:	6978      	ldr	r0, [r7, #20]
 80089f6:	f002 fac3 	bl	800af80 <vPortFree>
 80089fa:	e001      	b.n	8008a00 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80089fc:	2300      	movs	r3, #0
 80089fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008a00:	69fb      	ldr	r3, [r7, #28]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d017      	beq.n	8008a36 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008a06:	69fb      	ldr	r3, [r7, #28]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008a0e:	88fa      	ldrh	r2, [r7, #6]
 8008a10:	2300      	movs	r3, #0
 8008a12:	9303      	str	r3, [sp, #12]
 8008a14:	69fb      	ldr	r3, [r7, #28]
 8008a16:	9302      	str	r3, [sp, #8]
 8008a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a1a:	9301      	str	r3, [sp, #4]
 8008a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a1e:	9300      	str	r3, [sp, #0]
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	68b9      	ldr	r1, [r7, #8]
 8008a24:	68f8      	ldr	r0, [r7, #12]
 8008a26:	f000 f80f 	bl	8008a48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a2a:	69f8      	ldr	r0, [r7, #28]
 8008a2c:	f000 f8b2 	bl	8008b94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008a30:	2301      	movs	r3, #1
 8008a32:	61bb      	str	r3, [r7, #24]
 8008a34:	e002      	b.n	8008a3c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008a36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a3a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008a3c:	69bb      	ldr	r3, [r7, #24]
	}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3720      	adds	r7, #32
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
	...

08008a48 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b088      	sub	sp, #32
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	60f8      	str	r0, [r7, #12]
 8008a50:	60b9      	str	r1, [r7, #8]
 8008a52:	607a      	str	r2, [r7, #4]
 8008a54:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a58:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	009b      	lsls	r3, r3, #2
 8008a5e:	461a      	mov	r2, r3
 8008a60:	21a5      	movs	r1, #165	; 0xa5
 8008a62:	f003 fa03 	bl	800be6c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008a70:	3b01      	subs	r3, #1
 8008a72:	009b      	lsls	r3, r3, #2
 8008a74:	4413      	add	r3, r2
 8008a76:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008a78:	69bb      	ldr	r3, [r7, #24]
 8008a7a:	f023 0307 	bic.w	r3, r3, #7
 8008a7e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008a80:	69bb      	ldr	r3, [r7, #24]
 8008a82:	f003 0307 	and.w	r3, r3, #7
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d00a      	beq.n	8008aa0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a8e:	f383 8811 	msr	BASEPRI, r3
 8008a92:	f3bf 8f6f 	isb	sy
 8008a96:	f3bf 8f4f 	dsb	sy
 8008a9a:	617b      	str	r3, [r7, #20]
}
 8008a9c:	bf00      	nop
 8008a9e:	e7fe      	b.n	8008a9e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d01f      	beq.n	8008ae6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	61fb      	str	r3, [r7, #28]
 8008aaa:	e012      	b.n	8008ad2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008aac:	68ba      	ldr	r2, [r7, #8]
 8008aae:	69fb      	ldr	r3, [r7, #28]
 8008ab0:	4413      	add	r3, r2
 8008ab2:	7819      	ldrb	r1, [r3, #0]
 8008ab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ab6:	69fb      	ldr	r3, [r7, #28]
 8008ab8:	4413      	add	r3, r2
 8008aba:	3334      	adds	r3, #52	; 0x34
 8008abc:	460a      	mov	r2, r1
 8008abe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008ac0:	68ba      	ldr	r2, [r7, #8]
 8008ac2:	69fb      	ldr	r3, [r7, #28]
 8008ac4:	4413      	add	r3, r2
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d006      	beq.n	8008ada <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008acc:	69fb      	ldr	r3, [r7, #28]
 8008ace:	3301      	adds	r3, #1
 8008ad0:	61fb      	str	r3, [r7, #28]
 8008ad2:	69fb      	ldr	r3, [r7, #28]
 8008ad4:	2b0f      	cmp	r3, #15
 8008ad6:	d9e9      	bls.n	8008aac <prvInitialiseNewTask+0x64>
 8008ad8:	e000      	b.n	8008adc <prvInitialiseNewTask+0x94>
			{
				break;
 8008ada:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ade:	2200      	movs	r2, #0
 8008ae0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008ae4:	e003      	b.n	8008aee <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae8:	2200      	movs	r2, #0
 8008aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af0:	2b37      	cmp	r3, #55	; 0x37
 8008af2:	d901      	bls.n	8008af8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008af4:	2337      	movs	r3, #55	; 0x37
 8008af6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008afa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008afc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b02:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b06:	2200      	movs	r2, #0
 8008b08:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0c:	3304      	adds	r3, #4
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7fe fb64 	bl	80071dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b16:	3318      	adds	r3, #24
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f7fe fb5f 	bl	80071dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b22:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b26:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b2c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b32:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b36:	2200      	movs	r2, #0
 8008b38:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b3e:	2200      	movs	r2, #0
 8008b40:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b46:	3354      	adds	r3, #84	; 0x54
 8008b48:	2260      	movs	r2, #96	; 0x60
 8008b4a:	2100      	movs	r1, #0
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f003 f98d 	bl	800be6c <memset>
 8008b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b54:	4a0c      	ldr	r2, [pc, #48]	; (8008b88 <prvInitialiseNewTask+0x140>)
 8008b56:	659a      	str	r2, [r3, #88]	; 0x58
 8008b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b5a:	4a0c      	ldr	r2, [pc, #48]	; (8008b8c <prvInitialiseNewTask+0x144>)
 8008b5c:	65da      	str	r2, [r3, #92]	; 0x5c
 8008b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b60:	4a0b      	ldr	r2, [pc, #44]	; (8008b90 <prvInitialiseNewTask+0x148>)
 8008b62:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008b64:	683a      	ldr	r2, [r7, #0]
 8008b66:	68f9      	ldr	r1, [r7, #12]
 8008b68:	69b8      	ldr	r0, [r7, #24]
 8008b6a:	f001 feed 	bl	800a948 <pxPortInitialiseStack>
 8008b6e:	4602      	mov	r2, r0
 8008b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b72:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d002      	beq.n	8008b80 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b7e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b80:	bf00      	nop
 8008b82:	3720      	adds	r7, #32
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}
 8008b88:	0800cb90 	.word	0x0800cb90
 8008b8c:	0800cbb0 	.word	0x0800cbb0
 8008b90:	0800cb70 	.word	0x0800cb70

08008b94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b082      	sub	sp, #8
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008b9c:	f002 f802 	bl	800aba4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008ba0:	4b2d      	ldr	r3, [pc, #180]	; (8008c58 <prvAddNewTaskToReadyList+0xc4>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	3301      	adds	r3, #1
 8008ba6:	4a2c      	ldr	r2, [pc, #176]	; (8008c58 <prvAddNewTaskToReadyList+0xc4>)
 8008ba8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008baa:	4b2c      	ldr	r3, [pc, #176]	; (8008c5c <prvAddNewTaskToReadyList+0xc8>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d109      	bne.n	8008bc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008bb2:	4a2a      	ldr	r2, [pc, #168]	; (8008c5c <prvAddNewTaskToReadyList+0xc8>)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008bb8:	4b27      	ldr	r3, [pc, #156]	; (8008c58 <prvAddNewTaskToReadyList+0xc4>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d110      	bne.n	8008be2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008bc0:	f000 fd0c 	bl	80095dc <prvInitialiseTaskLists>
 8008bc4:	e00d      	b.n	8008be2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008bc6:	4b26      	ldr	r3, [pc, #152]	; (8008c60 <prvAddNewTaskToReadyList+0xcc>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d109      	bne.n	8008be2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008bce:	4b23      	ldr	r3, [pc, #140]	; (8008c5c <prvAddNewTaskToReadyList+0xc8>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d802      	bhi.n	8008be2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008bdc:	4a1f      	ldr	r2, [pc, #124]	; (8008c5c <prvAddNewTaskToReadyList+0xc8>)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008be2:	4b20      	ldr	r3, [pc, #128]	; (8008c64 <prvAddNewTaskToReadyList+0xd0>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	3301      	adds	r3, #1
 8008be8:	4a1e      	ldr	r2, [pc, #120]	; (8008c64 <prvAddNewTaskToReadyList+0xd0>)
 8008bea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008bec:	4b1d      	ldr	r3, [pc, #116]	; (8008c64 <prvAddNewTaskToReadyList+0xd0>)
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bf8:	4b1b      	ldr	r3, [pc, #108]	; (8008c68 <prvAddNewTaskToReadyList+0xd4>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	d903      	bls.n	8008c08 <prvAddNewTaskToReadyList+0x74>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c04:	4a18      	ldr	r2, [pc, #96]	; (8008c68 <prvAddNewTaskToReadyList+0xd4>)
 8008c06:	6013      	str	r3, [r2, #0]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c0c:	4613      	mov	r3, r2
 8008c0e:	009b      	lsls	r3, r3, #2
 8008c10:	4413      	add	r3, r2
 8008c12:	009b      	lsls	r3, r3, #2
 8008c14:	4a15      	ldr	r2, [pc, #84]	; (8008c6c <prvAddNewTaskToReadyList+0xd8>)
 8008c16:	441a      	add	r2, r3
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	3304      	adds	r3, #4
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	4610      	mov	r0, r2
 8008c20:	f7fe fae9 	bl	80071f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008c24:	f001 ffee 	bl	800ac04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008c28:	4b0d      	ldr	r3, [pc, #52]	; (8008c60 <prvAddNewTaskToReadyList+0xcc>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d00e      	beq.n	8008c4e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008c30:	4b0a      	ldr	r3, [pc, #40]	; (8008c5c <prvAddNewTaskToReadyList+0xc8>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d207      	bcs.n	8008c4e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008c3e:	4b0c      	ldr	r3, [pc, #48]	; (8008c70 <prvAddNewTaskToReadyList+0xdc>)
 8008c40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c44:	601a      	str	r2, [r3, #0]
 8008c46:	f3bf 8f4f 	dsb	sy
 8008c4a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c4e:	bf00      	nop
 8008c50:	3708      	adds	r7, #8
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
 8008c56:	bf00      	nop
 8008c58:	200010b0 	.word	0x200010b0
 8008c5c:	20000bdc 	.word	0x20000bdc
 8008c60:	200010bc 	.word	0x200010bc
 8008c64:	200010cc 	.word	0x200010cc
 8008c68:	200010b8 	.word	0x200010b8
 8008c6c:	20000be0 	.word	0x20000be0
 8008c70:	e000ed04 	.word	0xe000ed04

08008c74 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b088      	sub	sp, #32
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8008c80:	69bb      	ldr	r3, [r7, #24]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d10a      	bne.n	8008c9c <eTaskGetState+0x28>
	__asm volatile
 8008c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c8a:	f383 8811 	msr	BASEPRI, r3
 8008c8e:	f3bf 8f6f 	isb	sy
 8008c92:	f3bf 8f4f 	dsb	sy
 8008c96:	60bb      	str	r3, [r7, #8]
}
 8008c98:	bf00      	nop
 8008c9a:	e7fe      	b.n	8008c9a <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8008c9c:	4b23      	ldr	r3, [pc, #140]	; (8008d2c <eTaskGetState+0xb8>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	69ba      	ldr	r2, [r7, #24]
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d102      	bne.n	8008cac <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	77fb      	strb	r3, [r7, #31]
 8008caa:	e03a      	b.n	8008d22 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 8008cac:	f001 ff7a 	bl	800aba4 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8008cb0:	69bb      	ldr	r3, [r7, #24]
 8008cb2:	695b      	ldr	r3, [r3, #20]
 8008cb4:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8008cb6:	4b1e      	ldr	r3, [pc, #120]	; (8008d30 <eTaskGetState+0xbc>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8008cbc:	4b1d      	ldr	r3, [pc, #116]	; (8008d34 <eTaskGetState+0xc0>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8008cc2:	f001 ff9f 	bl	800ac04 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8008cc6:	697a      	ldr	r2, [r7, #20]
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d003      	beq.n	8008cd6 <eTaskGetState+0x62>
 8008cce:	697a      	ldr	r2, [r7, #20]
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d102      	bne.n	8008cdc <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8008cd6:	2302      	movs	r3, #2
 8008cd8:	77fb      	strb	r3, [r7, #31]
 8008cda:	e022      	b.n	8008d22 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	4a16      	ldr	r2, [pc, #88]	; (8008d38 <eTaskGetState+0xc4>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d112      	bne.n	8008d0a <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8008ce4:	69bb      	ldr	r3, [r7, #24]
 8008ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d10b      	bne.n	8008d04 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8008cec:	69bb      	ldr	r3, [r7, #24]
 8008cee:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d102      	bne.n	8008cfe <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8008cf8:	2302      	movs	r3, #2
 8008cfa:	77fb      	strb	r3, [r7, #31]
 8008cfc:	e011      	b.n	8008d22 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 8008cfe:	2303      	movs	r3, #3
 8008d00:	77fb      	strb	r3, [r7, #31]
 8008d02:	e00e      	b.n	8008d22 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8008d04:	2302      	movs	r3, #2
 8008d06:	77fb      	strb	r3, [r7, #31]
 8008d08:	e00b      	b.n	8008d22 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	4a0b      	ldr	r2, [pc, #44]	; (8008d3c <eTaskGetState+0xc8>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d002      	beq.n	8008d18 <eTaskGetState+0xa4>
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d102      	bne.n	8008d1e <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8008d18:	2304      	movs	r3, #4
 8008d1a:	77fb      	strb	r3, [r7, #31]
 8008d1c:	e001      	b.n	8008d22 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8008d22:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8008d24:	4618      	mov	r0, r3
 8008d26:	3720      	adds	r7, #32
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}
 8008d2c:	20000bdc 	.word	0x20000bdc
 8008d30:	20001068 	.word	0x20001068
 8008d34:	2000106c 	.word	0x2000106c
 8008d38:	2000109c 	.word	0x2000109c
 8008d3c:	20001084 	.word	0x20001084

08008d40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b08a      	sub	sp, #40	; 0x28
 8008d44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008d46:	2300      	movs	r3, #0
 8008d48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008d4e:	463a      	mov	r2, r7
 8008d50:	1d39      	adds	r1, r7, #4
 8008d52:	f107 0308 	add.w	r3, r7, #8
 8008d56:	4618      	mov	r0, r3
 8008d58:	f7fe f9ec 	bl	8007134 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008d5c:	6839      	ldr	r1, [r7, #0]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	68ba      	ldr	r2, [r7, #8]
 8008d62:	9202      	str	r2, [sp, #8]
 8008d64:	9301      	str	r3, [sp, #4]
 8008d66:	2300      	movs	r3, #0
 8008d68:	9300      	str	r3, [sp, #0]
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	460a      	mov	r2, r1
 8008d6e:	4924      	ldr	r1, [pc, #144]	; (8008e00 <vTaskStartScheduler+0xc0>)
 8008d70:	4824      	ldr	r0, [pc, #144]	; (8008e04 <vTaskStartScheduler+0xc4>)
 8008d72:	f7ff fdc6 	bl	8008902 <xTaskCreateStatic>
 8008d76:	4603      	mov	r3, r0
 8008d78:	4a23      	ldr	r2, [pc, #140]	; (8008e08 <vTaskStartScheduler+0xc8>)
 8008d7a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008d7c:	4b22      	ldr	r3, [pc, #136]	; (8008e08 <vTaskStartScheduler+0xc8>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d002      	beq.n	8008d8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008d84:	2301      	movs	r3, #1
 8008d86:	617b      	str	r3, [r7, #20]
 8008d88:	e001      	b.n	8008d8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	d102      	bne.n	8008d9a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008d94:	f001 fa8a 	bl	800a2ac <xTimerCreateTimerTask>
 8008d98:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	d11b      	bne.n	8008dd8 <vTaskStartScheduler+0x98>
	__asm volatile
 8008da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da4:	f383 8811 	msr	BASEPRI, r3
 8008da8:	f3bf 8f6f 	isb	sy
 8008dac:	f3bf 8f4f 	dsb	sy
 8008db0:	613b      	str	r3, [r7, #16]
}
 8008db2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008db4:	4b15      	ldr	r3, [pc, #84]	; (8008e0c <vTaskStartScheduler+0xcc>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	3354      	adds	r3, #84	; 0x54
 8008dba:	4a15      	ldr	r2, [pc, #84]	; (8008e10 <vTaskStartScheduler+0xd0>)
 8008dbc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008dbe:	4b15      	ldr	r3, [pc, #84]	; (8008e14 <vTaskStartScheduler+0xd4>)
 8008dc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008dc4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008dc6:	4b14      	ldr	r3, [pc, #80]	; (8008e18 <vTaskStartScheduler+0xd8>)
 8008dc8:	2201      	movs	r2, #1
 8008dca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008dcc:	4b13      	ldr	r3, [pc, #76]	; (8008e1c <vTaskStartScheduler+0xdc>)
 8008dce:	2200      	movs	r2, #0
 8008dd0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008dd2:	f001 fe45 	bl	800aa60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008dd6:	e00e      	b.n	8008df6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008dde:	d10a      	bne.n	8008df6 <vTaskStartScheduler+0xb6>
	__asm volatile
 8008de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de4:	f383 8811 	msr	BASEPRI, r3
 8008de8:	f3bf 8f6f 	isb	sy
 8008dec:	f3bf 8f4f 	dsb	sy
 8008df0:	60fb      	str	r3, [r7, #12]
}
 8008df2:	bf00      	nop
 8008df4:	e7fe      	b.n	8008df4 <vTaskStartScheduler+0xb4>
}
 8008df6:	bf00      	nop
 8008df8:	3718      	adds	r7, #24
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}
 8008dfe:	bf00      	nop
 8008e00:	0800ca88 	.word	0x0800ca88
 8008e04:	080095ad 	.word	0x080095ad
 8008e08:	200010d4 	.word	0x200010d4
 8008e0c:	20000bdc 	.word	0x20000bdc
 8008e10:	2000010c 	.word	0x2000010c
 8008e14:	200010d0 	.word	0x200010d0
 8008e18:	200010bc 	.word	0x200010bc
 8008e1c:	200010b4 	.word	0x200010b4

08008e20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008e20:	b480      	push	{r7}
 8008e22:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008e24:	4b04      	ldr	r3, [pc, #16]	; (8008e38 <vTaskSuspendAll+0x18>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	3301      	adds	r3, #1
 8008e2a:	4a03      	ldr	r2, [pc, #12]	; (8008e38 <vTaskSuspendAll+0x18>)
 8008e2c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008e2e:	bf00      	nop
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr
 8008e38:	200010d8 	.word	0x200010d8

08008e3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b084      	sub	sp, #16
 8008e40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008e42:	2300      	movs	r3, #0
 8008e44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008e46:	2300      	movs	r3, #0
 8008e48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008e4a:	4b42      	ldr	r3, [pc, #264]	; (8008f54 <xTaskResumeAll+0x118>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d10a      	bne.n	8008e68 <xTaskResumeAll+0x2c>
	__asm volatile
 8008e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e56:	f383 8811 	msr	BASEPRI, r3
 8008e5a:	f3bf 8f6f 	isb	sy
 8008e5e:	f3bf 8f4f 	dsb	sy
 8008e62:	603b      	str	r3, [r7, #0]
}
 8008e64:	bf00      	nop
 8008e66:	e7fe      	b.n	8008e66 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008e68:	f001 fe9c 	bl	800aba4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008e6c:	4b39      	ldr	r3, [pc, #228]	; (8008f54 <xTaskResumeAll+0x118>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	3b01      	subs	r3, #1
 8008e72:	4a38      	ldr	r2, [pc, #224]	; (8008f54 <xTaskResumeAll+0x118>)
 8008e74:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e76:	4b37      	ldr	r3, [pc, #220]	; (8008f54 <xTaskResumeAll+0x118>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d162      	bne.n	8008f44 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008e7e:	4b36      	ldr	r3, [pc, #216]	; (8008f58 <xTaskResumeAll+0x11c>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d05e      	beq.n	8008f44 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e86:	e02f      	b.n	8008ee8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e88:	4b34      	ldr	r3, [pc, #208]	; (8008f5c <xTaskResumeAll+0x120>)
 8008e8a:	68db      	ldr	r3, [r3, #12]
 8008e8c:	68db      	ldr	r3, [r3, #12]
 8008e8e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	3318      	adds	r3, #24
 8008e94:	4618      	mov	r0, r3
 8008e96:	f7fe fa0b 	bl	80072b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	3304      	adds	r3, #4
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f7fe fa06 	bl	80072b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ea8:	4b2d      	ldr	r3, [pc, #180]	; (8008f60 <xTaskResumeAll+0x124>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d903      	bls.n	8008eb8 <xTaskResumeAll+0x7c>
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eb4:	4a2a      	ldr	r2, [pc, #168]	; (8008f60 <xTaskResumeAll+0x124>)
 8008eb6:	6013      	str	r3, [r2, #0]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ebc:	4613      	mov	r3, r2
 8008ebe:	009b      	lsls	r3, r3, #2
 8008ec0:	4413      	add	r3, r2
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	4a27      	ldr	r2, [pc, #156]	; (8008f64 <xTaskResumeAll+0x128>)
 8008ec6:	441a      	add	r2, r3
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	3304      	adds	r3, #4
 8008ecc:	4619      	mov	r1, r3
 8008ece:	4610      	mov	r0, r2
 8008ed0:	f7fe f991 	bl	80071f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ed8:	4b23      	ldr	r3, [pc, #140]	; (8008f68 <xTaskResumeAll+0x12c>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d302      	bcc.n	8008ee8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008ee2:	4b22      	ldr	r3, [pc, #136]	; (8008f6c <xTaskResumeAll+0x130>)
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008ee8:	4b1c      	ldr	r3, [pc, #112]	; (8008f5c <xTaskResumeAll+0x120>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d1cb      	bne.n	8008e88 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d001      	beq.n	8008efa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008ef6:	f000 fce7 	bl	80098c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008efa:	4b1d      	ldr	r3, [pc, #116]	; (8008f70 <xTaskResumeAll+0x134>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d010      	beq.n	8008f28 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008f06:	f000 f8d5 	bl	80090b4 <xTaskIncrementTick>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d002      	beq.n	8008f16 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008f10:	4b16      	ldr	r3, [pc, #88]	; (8008f6c <xTaskResumeAll+0x130>)
 8008f12:	2201      	movs	r2, #1
 8008f14:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	3b01      	subs	r3, #1
 8008f1a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d1f1      	bne.n	8008f06 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008f22:	4b13      	ldr	r3, [pc, #76]	; (8008f70 <xTaskResumeAll+0x134>)
 8008f24:	2200      	movs	r2, #0
 8008f26:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008f28:	4b10      	ldr	r3, [pc, #64]	; (8008f6c <xTaskResumeAll+0x130>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d009      	beq.n	8008f44 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008f30:	2301      	movs	r3, #1
 8008f32:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008f34:	4b0f      	ldr	r3, [pc, #60]	; (8008f74 <xTaskResumeAll+0x138>)
 8008f36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f3a:	601a      	str	r2, [r3, #0]
 8008f3c:	f3bf 8f4f 	dsb	sy
 8008f40:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008f44:	f001 fe5e 	bl	800ac04 <vPortExitCritical>

	return xAlreadyYielded;
 8008f48:	68bb      	ldr	r3, [r7, #8]
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3710      	adds	r7, #16
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
 8008f52:	bf00      	nop
 8008f54:	200010d8 	.word	0x200010d8
 8008f58:	200010b0 	.word	0x200010b0
 8008f5c:	20001070 	.word	0x20001070
 8008f60:	200010b8 	.word	0x200010b8
 8008f64:	20000be0 	.word	0x20000be0
 8008f68:	20000bdc 	.word	0x20000bdc
 8008f6c:	200010c4 	.word	0x200010c4
 8008f70:	200010c0 	.word	0x200010c0
 8008f74:	e000ed04 	.word	0xe000ed04

08008f78 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b083      	sub	sp, #12
 8008f7c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008f7e:	4b05      	ldr	r3, [pc, #20]	; (8008f94 <xTaskGetTickCount+0x1c>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008f84:	687b      	ldr	r3, [r7, #4]
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	370c      	adds	r7, #12
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr
 8008f92:	bf00      	nop
 8008f94:	200010b4 	.word	0x200010b4

08008f98 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b086      	sub	sp, #24
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	60f8      	str	r0, [r7, #12]
 8008fa0:	60b9      	str	r1, [r7, #8]
 8008fa2:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	617b      	str	r3, [r7, #20]
 8008fa8:	2338      	movs	r3, #56	; 0x38
 8008faa:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 8008fac:	f7ff ff38 	bl	8008e20 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8008fb0:	4b3a      	ldr	r3, [pc, #232]	; (800909c <uxTaskGetSystemState+0x104>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	68ba      	ldr	r2, [r7, #8]
 8008fb6:	429a      	cmp	r2, r3
 8008fb8:	d368      	bcc.n	800908c <uxTaskGetSystemState+0xf4>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	3b01      	subs	r3, #1
 8008fbe:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8008fc0:	697a      	ldr	r2, [r7, #20]
 8008fc2:	4613      	mov	r3, r2
 8008fc4:	00db      	lsls	r3, r3, #3
 8008fc6:	4413      	add	r3, r2
 8008fc8:	009b      	lsls	r3, r3, #2
 8008fca:	461a      	mov	r2, r3
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	1898      	adds	r0, r3, r2
 8008fd0:	693a      	ldr	r2, [r7, #16]
 8008fd2:	4613      	mov	r3, r2
 8008fd4:	009b      	lsls	r3, r3, #2
 8008fd6:	4413      	add	r3, r2
 8008fd8:	009b      	lsls	r3, r3, #2
 8008fda:	4a31      	ldr	r2, [pc, #196]	; (80090a0 <uxTaskGetSystemState+0x108>)
 8008fdc:	4413      	add	r3, r2
 8008fde:	2201      	movs	r2, #1
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	f000 fbcf 	bl	8009784 <prvListTasksWithinSingleList>
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	4413      	add	r3, r2
 8008fec:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d1e2      	bne.n	8008fba <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8008ff4:	697a      	ldr	r2, [r7, #20]
 8008ff6:	4613      	mov	r3, r2
 8008ff8:	00db      	lsls	r3, r3, #3
 8008ffa:	4413      	add	r3, r2
 8008ffc:	009b      	lsls	r3, r3, #2
 8008ffe:	461a      	mov	r2, r3
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	4413      	add	r3, r2
 8009004:	4a27      	ldr	r2, [pc, #156]	; (80090a4 <uxTaskGetSystemState+0x10c>)
 8009006:	6811      	ldr	r1, [r2, #0]
 8009008:	2202      	movs	r2, #2
 800900a:	4618      	mov	r0, r3
 800900c:	f000 fbba 	bl	8009784 <prvListTasksWithinSingleList>
 8009010:	4602      	mov	r2, r0
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	4413      	add	r3, r2
 8009016:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8009018:	697a      	ldr	r2, [r7, #20]
 800901a:	4613      	mov	r3, r2
 800901c:	00db      	lsls	r3, r3, #3
 800901e:	4413      	add	r3, r2
 8009020:	009b      	lsls	r3, r3, #2
 8009022:	461a      	mov	r2, r3
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	4413      	add	r3, r2
 8009028:	4a1f      	ldr	r2, [pc, #124]	; (80090a8 <uxTaskGetSystemState+0x110>)
 800902a:	6811      	ldr	r1, [r2, #0]
 800902c:	2202      	movs	r2, #2
 800902e:	4618      	mov	r0, r3
 8009030:	f000 fba8 	bl	8009784 <prvListTasksWithinSingleList>
 8009034:	4602      	mov	r2, r0
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	4413      	add	r3, r2
 800903a:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800903c:	697a      	ldr	r2, [r7, #20]
 800903e:	4613      	mov	r3, r2
 8009040:	00db      	lsls	r3, r3, #3
 8009042:	4413      	add	r3, r2
 8009044:	009b      	lsls	r3, r3, #2
 8009046:	461a      	mov	r2, r3
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	4413      	add	r3, r2
 800904c:	2204      	movs	r2, #4
 800904e:	4917      	ldr	r1, [pc, #92]	; (80090ac <uxTaskGetSystemState+0x114>)
 8009050:	4618      	mov	r0, r3
 8009052:	f000 fb97 	bl	8009784 <prvListTasksWithinSingleList>
 8009056:	4602      	mov	r2, r0
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	4413      	add	r3, r2
 800905c:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800905e:	697a      	ldr	r2, [r7, #20]
 8009060:	4613      	mov	r3, r2
 8009062:	00db      	lsls	r3, r3, #3
 8009064:	4413      	add	r3, r2
 8009066:	009b      	lsls	r3, r3, #2
 8009068:	461a      	mov	r2, r3
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	4413      	add	r3, r2
 800906e:	2203      	movs	r2, #3
 8009070:	490f      	ldr	r1, [pc, #60]	; (80090b0 <uxTaskGetSystemState+0x118>)
 8009072:	4618      	mov	r0, r3
 8009074:	f000 fb86 	bl	8009784 <prvListTasksWithinSingleList>
 8009078:	4602      	mov	r2, r0
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	4413      	add	r3, r2
 800907e:	617b      	str	r3, [r7, #20]
						#endif
					}
				}
				#else
				{
					if( pulTotalRunTime != NULL )
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d002      	beq.n	800908c <uxTaskGetSystemState+0xf4>
					{
						*pulTotalRunTime = 0;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2200      	movs	r2, #0
 800908a:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 800908c:	f7ff fed6 	bl	8008e3c <xTaskResumeAll>

		return uxTask;
 8009090:	697b      	ldr	r3, [r7, #20]
	}
 8009092:	4618      	mov	r0, r3
 8009094:	3718      	adds	r7, #24
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop
 800909c:	200010b0 	.word	0x200010b0
 80090a0:	20000be0 	.word	0x20000be0
 80090a4:	20001068 	.word	0x20001068
 80090a8:	2000106c 	.word	0x2000106c
 80090ac:	20001084 	.word	0x20001084
 80090b0:	2000109c 	.word	0x2000109c

080090b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b086      	sub	sp, #24
 80090b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80090ba:	2300      	movs	r3, #0
 80090bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090be:	4b4f      	ldr	r3, [pc, #316]	; (80091fc <xTaskIncrementTick+0x148>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	f040 808f 	bne.w	80091e6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80090c8:	4b4d      	ldr	r3, [pc, #308]	; (8009200 <xTaskIncrementTick+0x14c>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	3301      	adds	r3, #1
 80090ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80090d0:	4a4b      	ldr	r2, [pc, #300]	; (8009200 <xTaskIncrementTick+0x14c>)
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d120      	bne.n	800911e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80090dc:	4b49      	ldr	r3, [pc, #292]	; (8009204 <xTaskIncrementTick+0x150>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d00a      	beq.n	80090fc <xTaskIncrementTick+0x48>
	__asm volatile
 80090e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ea:	f383 8811 	msr	BASEPRI, r3
 80090ee:	f3bf 8f6f 	isb	sy
 80090f2:	f3bf 8f4f 	dsb	sy
 80090f6:	603b      	str	r3, [r7, #0]
}
 80090f8:	bf00      	nop
 80090fa:	e7fe      	b.n	80090fa <xTaskIncrementTick+0x46>
 80090fc:	4b41      	ldr	r3, [pc, #260]	; (8009204 <xTaskIncrementTick+0x150>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	60fb      	str	r3, [r7, #12]
 8009102:	4b41      	ldr	r3, [pc, #260]	; (8009208 <xTaskIncrementTick+0x154>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4a3f      	ldr	r2, [pc, #252]	; (8009204 <xTaskIncrementTick+0x150>)
 8009108:	6013      	str	r3, [r2, #0]
 800910a:	4a3f      	ldr	r2, [pc, #252]	; (8009208 <xTaskIncrementTick+0x154>)
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	6013      	str	r3, [r2, #0]
 8009110:	4b3e      	ldr	r3, [pc, #248]	; (800920c <xTaskIncrementTick+0x158>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	3301      	adds	r3, #1
 8009116:	4a3d      	ldr	r2, [pc, #244]	; (800920c <xTaskIncrementTick+0x158>)
 8009118:	6013      	str	r3, [r2, #0]
 800911a:	f000 fbd5 	bl	80098c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800911e:	4b3c      	ldr	r3, [pc, #240]	; (8009210 <xTaskIncrementTick+0x15c>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	693a      	ldr	r2, [r7, #16]
 8009124:	429a      	cmp	r2, r3
 8009126:	d349      	bcc.n	80091bc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009128:	4b36      	ldr	r3, [pc, #216]	; (8009204 <xTaskIncrementTick+0x150>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d104      	bne.n	800913c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009132:	4b37      	ldr	r3, [pc, #220]	; (8009210 <xTaskIncrementTick+0x15c>)
 8009134:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009138:	601a      	str	r2, [r3, #0]
					break;
 800913a:	e03f      	b.n	80091bc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800913c:	4b31      	ldr	r3, [pc, #196]	; (8009204 <xTaskIncrementTick+0x150>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	68db      	ldr	r3, [r3, #12]
 8009142:	68db      	ldr	r3, [r3, #12]
 8009144:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800914c:	693a      	ldr	r2, [r7, #16]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	429a      	cmp	r2, r3
 8009152:	d203      	bcs.n	800915c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009154:	4a2e      	ldr	r2, [pc, #184]	; (8009210 <xTaskIncrementTick+0x15c>)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800915a:	e02f      	b.n	80091bc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	3304      	adds	r3, #4
 8009160:	4618      	mov	r0, r3
 8009162:	f7fe f8a5 	bl	80072b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800916a:	2b00      	cmp	r3, #0
 800916c:	d004      	beq.n	8009178 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	3318      	adds	r3, #24
 8009172:	4618      	mov	r0, r3
 8009174:	f7fe f89c 	bl	80072b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800917c:	4b25      	ldr	r3, [pc, #148]	; (8009214 <xTaskIncrementTick+0x160>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	429a      	cmp	r2, r3
 8009182:	d903      	bls.n	800918c <xTaskIncrementTick+0xd8>
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009188:	4a22      	ldr	r2, [pc, #136]	; (8009214 <xTaskIncrementTick+0x160>)
 800918a:	6013      	str	r3, [r2, #0]
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009190:	4613      	mov	r3, r2
 8009192:	009b      	lsls	r3, r3, #2
 8009194:	4413      	add	r3, r2
 8009196:	009b      	lsls	r3, r3, #2
 8009198:	4a1f      	ldr	r2, [pc, #124]	; (8009218 <xTaskIncrementTick+0x164>)
 800919a:	441a      	add	r2, r3
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	3304      	adds	r3, #4
 80091a0:	4619      	mov	r1, r3
 80091a2:	4610      	mov	r0, r2
 80091a4:	f7fe f827 	bl	80071f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091ac:	4b1b      	ldr	r3, [pc, #108]	; (800921c <xTaskIncrementTick+0x168>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d3b8      	bcc.n	8009128 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80091b6:	2301      	movs	r3, #1
 80091b8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091ba:	e7b5      	b.n	8009128 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80091bc:	4b17      	ldr	r3, [pc, #92]	; (800921c <xTaskIncrementTick+0x168>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091c2:	4915      	ldr	r1, [pc, #84]	; (8009218 <xTaskIncrementTick+0x164>)
 80091c4:	4613      	mov	r3, r2
 80091c6:	009b      	lsls	r3, r3, #2
 80091c8:	4413      	add	r3, r2
 80091ca:	009b      	lsls	r3, r3, #2
 80091cc:	440b      	add	r3, r1
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d901      	bls.n	80091d8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80091d4:	2301      	movs	r3, #1
 80091d6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80091d8:	4b11      	ldr	r3, [pc, #68]	; (8009220 <xTaskIncrementTick+0x16c>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d007      	beq.n	80091f0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80091e0:	2301      	movs	r3, #1
 80091e2:	617b      	str	r3, [r7, #20]
 80091e4:	e004      	b.n	80091f0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80091e6:	4b0f      	ldr	r3, [pc, #60]	; (8009224 <xTaskIncrementTick+0x170>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	3301      	adds	r3, #1
 80091ec:	4a0d      	ldr	r2, [pc, #52]	; (8009224 <xTaskIncrementTick+0x170>)
 80091ee:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80091f0:	697b      	ldr	r3, [r7, #20]
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3718      	adds	r7, #24
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}
 80091fa:	bf00      	nop
 80091fc:	200010d8 	.word	0x200010d8
 8009200:	200010b4 	.word	0x200010b4
 8009204:	20001068 	.word	0x20001068
 8009208:	2000106c 	.word	0x2000106c
 800920c:	200010c8 	.word	0x200010c8
 8009210:	200010d0 	.word	0x200010d0
 8009214:	200010b8 	.word	0x200010b8
 8009218:	20000be0 	.word	0x20000be0
 800921c:	20000bdc 	.word	0x20000bdc
 8009220:	200010c4 	.word	0x200010c4
 8009224:	200010c0 	.word	0x200010c0

08009228 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009228:	b480      	push	{r7}
 800922a:	b085      	sub	sp, #20
 800922c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800922e:	4b2a      	ldr	r3, [pc, #168]	; (80092d8 <vTaskSwitchContext+0xb0>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d003      	beq.n	800923e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009236:	4b29      	ldr	r3, [pc, #164]	; (80092dc <vTaskSwitchContext+0xb4>)
 8009238:	2201      	movs	r2, #1
 800923a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800923c:	e046      	b.n	80092cc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800923e:	4b27      	ldr	r3, [pc, #156]	; (80092dc <vTaskSwitchContext+0xb4>)
 8009240:	2200      	movs	r2, #0
 8009242:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009244:	4b26      	ldr	r3, [pc, #152]	; (80092e0 <vTaskSwitchContext+0xb8>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	60fb      	str	r3, [r7, #12]
 800924a:	e010      	b.n	800926e <vTaskSwitchContext+0x46>
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d10a      	bne.n	8009268 <vTaskSwitchContext+0x40>
	__asm volatile
 8009252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009256:	f383 8811 	msr	BASEPRI, r3
 800925a:	f3bf 8f6f 	isb	sy
 800925e:	f3bf 8f4f 	dsb	sy
 8009262:	607b      	str	r3, [r7, #4]
}
 8009264:	bf00      	nop
 8009266:	e7fe      	b.n	8009266 <vTaskSwitchContext+0x3e>
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	3b01      	subs	r3, #1
 800926c:	60fb      	str	r3, [r7, #12]
 800926e:	491d      	ldr	r1, [pc, #116]	; (80092e4 <vTaskSwitchContext+0xbc>)
 8009270:	68fa      	ldr	r2, [r7, #12]
 8009272:	4613      	mov	r3, r2
 8009274:	009b      	lsls	r3, r3, #2
 8009276:	4413      	add	r3, r2
 8009278:	009b      	lsls	r3, r3, #2
 800927a:	440b      	add	r3, r1
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d0e4      	beq.n	800924c <vTaskSwitchContext+0x24>
 8009282:	68fa      	ldr	r2, [r7, #12]
 8009284:	4613      	mov	r3, r2
 8009286:	009b      	lsls	r3, r3, #2
 8009288:	4413      	add	r3, r2
 800928a:	009b      	lsls	r3, r3, #2
 800928c:	4a15      	ldr	r2, [pc, #84]	; (80092e4 <vTaskSwitchContext+0xbc>)
 800928e:	4413      	add	r3, r2
 8009290:	60bb      	str	r3, [r7, #8]
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	685a      	ldr	r2, [r3, #4]
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	605a      	str	r2, [r3, #4]
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	685a      	ldr	r2, [r3, #4]
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	3308      	adds	r3, #8
 80092a4:	429a      	cmp	r2, r3
 80092a6:	d104      	bne.n	80092b2 <vTaskSwitchContext+0x8a>
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	685a      	ldr	r2, [r3, #4]
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	605a      	str	r2, [r3, #4]
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	68db      	ldr	r3, [r3, #12]
 80092b8:	4a0b      	ldr	r2, [pc, #44]	; (80092e8 <vTaskSwitchContext+0xc0>)
 80092ba:	6013      	str	r3, [r2, #0]
 80092bc:	4a08      	ldr	r2, [pc, #32]	; (80092e0 <vTaskSwitchContext+0xb8>)
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80092c2:	4b09      	ldr	r3, [pc, #36]	; (80092e8 <vTaskSwitchContext+0xc0>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	3354      	adds	r3, #84	; 0x54
 80092c8:	4a08      	ldr	r2, [pc, #32]	; (80092ec <vTaskSwitchContext+0xc4>)
 80092ca:	6013      	str	r3, [r2, #0]
}
 80092cc:	bf00      	nop
 80092ce:	3714      	adds	r7, #20
 80092d0:	46bd      	mov	sp, r7
 80092d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d6:	4770      	bx	lr
 80092d8:	200010d8 	.word	0x200010d8
 80092dc:	200010c4 	.word	0x200010c4
 80092e0:	200010b8 	.word	0x200010b8
 80092e4:	20000be0 	.word	0x20000be0
 80092e8:	20000bdc 	.word	0x20000bdc
 80092ec:	2000010c 	.word	0x2000010c

080092f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b084      	sub	sp, #16
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d10a      	bne.n	8009316 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009304:	f383 8811 	msr	BASEPRI, r3
 8009308:	f3bf 8f6f 	isb	sy
 800930c:	f3bf 8f4f 	dsb	sy
 8009310:	60fb      	str	r3, [r7, #12]
}
 8009312:	bf00      	nop
 8009314:	e7fe      	b.n	8009314 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009316:	4b07      	ldr	r3, [pc, #28]	; (8009334 <vTaskPlaceOnEventList+0x44>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	3318      	adds	r3, #24
 800931c:	4619      	mov	r1, r3
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f7fd ff8d 	bl	800723e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009324:	2101      	movs	r1, #1
 8009326:	6838      	ldr	r0, [r7, #0]
 8009328:	f000 ff6c 	bl	800a204 <prvAddCurrentTaskToDelayedList>
}
 800932c:	bf00      	nop
 800932e:	3710      	adds	r7, #16
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}
 8009334:	20000bdc 	.word	0x20000bdc

08009338 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009338:	b580      	push	{r7, lr}
 800933a:	b086      	sub	sp, #24
 800933c:	af00      	add	r7, sp, #0
 800933e:	60f8      	str	r0, [r7, #12]
 8009340:	60b9      	str	r1, [r7, #8]
 8009342:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d10a      	bne.n	8009360 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800934a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800934e:	f383 8811 	msr	BASEPRI, r3
 8009352:	f3bf 8f6f 	isb	sy
 8009356:	f3bf 8f4f 	dsb	sy
 800935a:	617b      	str	r3, [r7, #20]
}
 800935c:	bf00      	nop
 800935e:	e7fe      	b.n	800935e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009360:	4b0a      	ldr	r3, [pc, #40]	; (800938c <vTaskPlaceOnEventListRestricted+0x54>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	3318      	adds	r3, #24
 8009366:	4619      	mov	r1, r3
 8009368:	68f8      	ldr	r0, [r7, #12]
 800936a:	f7fd ff44 	bl	80071f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d002      	beq.n	800937a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009374:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009378:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800937a:	6879      	ldr	r1, [r7, #4]
 800937c:	68b8      	ldr	r0, [r7, #8]
 800937e:	f000 ff41 	bl	800a204 <prvAddCurrentTaskToDelayedList>
	}
 8009382:	bf00      	nop
 8009384:	3718      	adds	r7, #24
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
 800938a:	bf00      	nop
 800938c:	20000bdc 	.word	0x20000bdc

08009390 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b086      	sub	sp, #24
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	68db      	ldr	r3, [r3, #12]
 800939c:	68db      	ldr	r3, [r3, #12]
 800939e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80093a0:	693b      	ldr	r3, [r7, #16]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d10a      	bne.n	80093bc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80093a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093aa:	f383 8811 	msr	BASEPRI, r3
 80093ae:	f3bf 8f6f 	isb	sy
 80093b2:	f3bf 8f4f 	dsb	sy
 80093b6:	60fb      	str	r3, [r7, #12]
}
 80093b8:	bf00      	nop
 80093ba:	e7fe      	b.n	80093ba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	3318      	adds	r3, #24
 80093c0:	4618      	mov	r0, r3
 80093c2:	f7fd ff75 	bl	80072b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093c6:	4b1e      	ldr	r3, [pc, #120]	; (8009440 <xTaskRemoveFromEventList+0xb0>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d11d      	bne.n	800940a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	3304      	adds	r3, #4
 80093d2:	4618      	mov	r0, r3
 80093d4:	f7fd ff6c 	bl	80072b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093dc:	4b19      	ldr	r3, [pc, #100]	; (8009444 <xTaskRemoveFromEventList+0xb4>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	429a      	cmp	r2, r3
 80093e2:	d903      	bls.n	80093ec <xTaskRemoveFromEventList+0x5c>
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093e8:	4a16      	ldr	r2, [pc, #88]	; (8009444 <xTaskRemoveFromEventList+0xb4>)
 80093ea:	6013      	str	r3, [r2, #0]
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093f0:	4613      	mov	r3, r2
 80093f2:	009b      	lsls	r3, r3, #2
 80093f4:	4413      	add	r3, r2
 80093f6:	009b      	lsls	r3, r3, #2
 80093f8:	4a13      	ldr	r2, [pc, #76]	; (8009448 <xTaskRemoveFromEventList+0xb8>)
 80093fa:	441a      	add	r2, r3
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	3304      	adds	r3, #4
 8009400:	4619      	mov	r1, r3
 8009402:	4610      	mov	r0, r2
 8009404:	f7fd fef7 	bl	80071f6 <vListInsertEnd>
 8009408:	e005      	b.n	8009416 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	3318      	adds	r3, #24
 800940e:	4619      	mov	r1, r3
 8009410:	480e      	ldr	r0, [pc, #56]	; (800944c <xTaskRemoveFromEventList+0xbc>)
 8009412:	f7fd fef0 	bl	80071f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800941a:	4b0d      	ldr	r3, [pc, #52]	; (8009450 <xTaskRemoveFromEventList+0xc0>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009420:	429a      	cmp	r2, r3
 8009422:	d905      	bls.n	8009430 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009424:	2301      	movs	r3, #1
 8009426:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009428:	4b0a      	ldr	r3, [pc, #40]	; (8009454 <xTaskRemoveFromEventList+0xc4>)
 800942a:	2201      	movs	r2, #1
 800942c:	601a      	str	r2, [r3, #0]
 800942e:	e001      	b.n	8009434 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009430:	2300      	movs	r3, #0
 8009432:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009434:	697b      	ldr	r3, [r7, #20]
}
 8009436:	4618      	mov	r0, r3
 8009438:	3718      	adds	r7, #24
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
 800943e:	bf00      	nop
 8009440:	200010d8 	.word	0x200010d8
 8009444:	200010b8 	.word	0x200010b8
 8009448:	20000be0 	.word	0x20000be0
 800944c:	20001070 	.word	0x20001070
 8009450:	20000bdc 	.word	0x20000bdc
 8009454:	200010c4 	.word	0x200010c4

08009458 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b084      	sub	sp, #16
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d10a      	bne.n	800947c <vTaskSetTimeOutState+0x24>
	__asm volatile
 8009466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800946a:	f383 8811 	msr	BASEPRI, r3
 800946e:	f3bf 8f6f 	isb	sy
 8009472:	f3bf 8f4f 	dsb	sy
 8009476:	60fb      	str	r3, [r7, #12]
}
 8009478:	bf00      	nop
 800947a:	e7fe      	b.n	800947a <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800947c:	f001 fb92 	bl	800aba4 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009480:	4b06      	ldr	r3, [pc, #24]	; (800949c <vTaskSetTimeOutState+0x44>)
 8009482:	681a      	ldr	r2, [r3, #0]
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8009488:	4b05      	ldr	r3, [pc, #20]	; (80094a0 <vTaskSetTimeOutState+0x48>)
 800948a:	681a      	ldr	r2, [r3, #0]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8009490:	f001 fbb8 	bl	800ac04 <vPortExitCritical>
}
 8009494:	bf00      	nop
 8009496:	3710      	adds	r7, #16
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}
 800949c:	200010c8 	.word	0x200010c8
 80094a0:	200010b4 	.word	0x200010b4

080094a4 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80094a4:	b480      	push	{r7}
 80094a6:	b083      	sub	sp, #12
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80094ac:	4b06      	ldr	r3, [pc, #24]	; (80094c8 <vTaskInternalSetTimeOutState+0x24>)
 80094ae:	681a      	ldr	r2, [r3, #0]
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80094b4:	4b05      	ldr	r3, [pc, #20]	; (80094cc <vTaskInternalSetTimeOutState+0x28>)
 80094b6:	681a      	ldr	r2, [r3, #0]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	605a      	str	r2, [r3, #4]
}
 80094bc:	bf00      	nop
 80094be:	370c      	adds	r7, #12
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr
 80094c8:	200010c8 	.word	0x200010c8
 80094cc:	200010b4 	.word	0x200010b4

080094d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b088      	sub	sp, #32
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d10a      	bne.n	80094f6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80094e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e4:	f383 8811 	msr	BASEPRI, r3
 80094e8:	f3bf 8f6f 	isb	sy
 80094ec:	f3bf 8f4f 	dsb	sy
 80094f0:	613b      	str	r3, [r7, #16]
}
 80094f2:	bf00      	nop
 80094f4:	e7fe      	b.n	80094f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d10a      	bne.n	8009512 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80094fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009500:	f383 8811 	msr	BASEPRI, r3
 8009504:	f3bf 8f6f 	isb	sy
 8009508:	f3bf 8f4f 	dsb	sy
 800950c:	60fb      	str	r3, [r7, #12]
}
 800950e:	bf00      	nop
 8009510:	e7fe      	b.n	8009510 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009512:	f001 fb47 	bl	800aba4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009516:	4b1d      	ldr	r3, [pc, #116]	; (800958c <xTaskCheckForTimeOut+0xbc>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	69ba      	ldr	r2, [r7, #24]
 8009522:	1ad3      	subs	r3, r2, r3
 8009524:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800952e:	d102      	bne.n	8009536 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009530:	2300      	movs	r3, #0
 8009532:	61fb      	str	r3, [r7, #28]
 8009534:	e023      	b.n	800957e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681a      	ldr	r2, [r3, #0]
 800953a:	4b15      	ldr	r3, [pc, #84]	; (8009590 <xTaskCheckForTimeOut+0xc0>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	429a      	cmp	r2, r3
 8009540:	d007      	beq.n	8009552 <xTaskCheckForTimeOut+0x82>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	69ba      	ldr	r2, [r7, #24]
 8009548:	429a      	cmp	r2, r3
 800954a:	d302      	bcc.n	8009552 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800954c:	2301      	movs	r3, #1
 800954e:	61fb      	str	r3, [r7, #28]
 8009550:	e015      	b.n	800957e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	697a      	ldr	r2, [r7, #20]
 8009558:	429a      	cmp	r2, r3
 800955a:	d20b      	bcs.n	8009574 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	681a      	ldr	r2, [r3, #0]
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	1ad2      	subs	r2, r2, r3
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f7ff ff9b 	bl	80094a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800956e:	2300      	movs	r3, #0
 8009570:	61fb      	str	r3, [r7, #28]
 8009572:	e004      	b.n	800957e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	2200      	movs	r2, #0
 8009578:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800957a:	2301      	movs	r3, #1
 800957c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800957e:	f001 fb41 	bl	800ac04 <vPortExitCritical>

	return xReturn;
 8009582:	69fb      	ldr	r3, [r7, #28]
}
 8009584:	4618      	mov	r0, r3
 8009586:	3720      	adds	r7, #32
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}
 800958c:	200010b4 	.word	0x200010b4
 8009590:	200010c8 	.word	0x200010c8

08009594 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009594:	b480      	push	{r7}
 8009596:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009598:	4b03      	ldr	r3, [pc, #12]	; (80095a8 <vTaskMissedYield+0x14>)
 800959a:	2201      	movs	r2, #1
 800959c:	601a      	str	r2, [r3, #0]
}
 800959e:	bf00      	nop
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr
 80095a8:	200010c4 	.word	0x200010c4

080095ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b082      	sub	sp, #8
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80095b4:	f000 f852 	bl	800965c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80095b8:	4b06      	ldr	r3, [pc, #24]	; (80095d4 <prvIdleTask+0x28>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d9f9      	bls.n	80095b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80095c0:	4b05      	ldr	r3, [pc, #20]	; (80095d8 <prvIdleTask+0x2c>)
 80095c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095c6:	601a      	str	r2, [r3, #0]
 80095c8:	f3bf 8f4f 	dsb	sy
 80095cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80095d0:	e7f0      	b.n	80095b4 <prvIdleTask+0x8>
 80095d2:	bf00      	nop
 80095d4:	20000be0 	.word	0x20000be0
 80095d8:	e000ed04 	.word	0xe000ed04

080095dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b082      	sub	sp, #8
 80095e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80095e2:	2300      	movs	r3, #0
 80095e4:	607b      	str	r3, [r7, #4]
 80095e6:	e00c      	b.n	8009602 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80095e8:	687a      	ldr	r2, [r7, #4]
 80095ea:	4613      	mov	r3, r2
 80095ec:	009b      	lsls	r3, r3, #2
 80095ee:	4413      	add	r3, r2
 80095f0:	009b      	lsls	r3, r3, #2
 80095f2:	4a12      	ldr	r2, [pc, #72]	; (800963c <prvInitialiseTaskLists+0x60>)
 80095f4:	4413      	add	r3, r2
 80095f6:	4618      	mov	r0, r3
 80095f8:	f7fd fdd0 	bl	800719c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	3301      	adds	r3, #1
 8009600:	607b      	str	r3, [r7, #4]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2b37      	cmp	r3, #55	; 0x37
 8009606:	d9ef      	bls.n	80095e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009608:	480d      	ldr	r0, [pc, #52]	; (8009640 <prvInitialiseTaskLists+0x64>)
 800960a:	f7fd fdc7 	bl	800719c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800960e:	480d      	ldr	r0, [pc, #52]	; (8009644 <prvInitialiseTaskLists+0x68>)
 8009610:	f7fd fdc4 	bl	800719c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009614:	480c      	ldr	r0, [pc, #48]	; (8009648 <prvInitialiseTaskLists+0x6c>)
 8009616:	f7fd fdc1 	bl	800719c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800961a:	480c      	ldr	r0, [pc, #48]	; (800964c <prvInitialiseTaskLists+0x70>)
 800961c:	f7fd fdbe 	bl	800719c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009620:	480b      	ldr	r0, [pc, #44]	; (8009650 <prvInitialiseTaskLists+0x74>)
 8009622:	f7fd fdbb 	bl	800719c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009626:	4b0b      	ldr	r3, [pc, #44]	; (8009654 <prvInitialiseTaskLists+0x78>)
 8009628:	4a05      	ldr	r2, [pc, #20]	; (8009640 <prvInitialiseTaskLists+0x64>)
 800962a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800962c:	4b0a      	ldr	r3, [pc, #40]	; (8009658 <prvInitialiseTaskLists+0x7c>)
 800962e:	4a05      	ldr	r2, [pc, #20]	; (8009644 <prvInitialiseTaskLists+0x68>)
 8009630:	601a      	str	r2, [r3, #0]
}
 8009632:	bf00      	nop
 8009634:	3708      	adds	r7, #8
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
 800963a:	bf00      	nop
 800963c:	20000be0 	.word	0x20000be0
 8009640:	20001040 	.word	0x20001040
 8009644:	20001054 	.word	0x20001054
 8009648:	20001070 	.word	0x20001070
 800964c:	20001084 	.word	0x20001084
 8009650:	2000109c 	.word	0x2000109c
 8009654:	20001068 	.word	0x20001068
 8009658:	2000106c 	.word	0x2000106c

0800965c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b082      	sub	sp, #8
 8009660:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009662:	e019      	b.n	8009698 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009664:	f001 fa9e 	bl	800aba4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009668:	4b10      	ldr	r3, [pc, #64]	; (80096ac <prvCheckTasksWaitingTermination+0x50>)
 800966a:	68db      	ldr	r3, [r3, #12]
 800966c:	68db      	ldr	r3, [r3, #12]
 800966e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	3304      	adds	r3, #4
 8009674:	4618      	mov	r0, r3
 8009676:	f7fd fe1b 	bl	80072b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800967a:	4b0d      	ldr	r3, [pc, #52]	; (80096b0 <prvCheckTasksWaitingTermination+0x54>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	3b01      	subs	r3, #1
 8009680:	4a0b      	ldr	r2, [pc, #44]	; (80096b0 <prvCheckTasksWaitingTermination+0x54>)
 8009682:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009684:	4b0b      	ldr	r3, [pc, #44]	; (80096b4 <prvCheckTasksWaitingTermination+0x58>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	3b01      	subs	r3, #1
 800968a:	4a0a      	ldr	r2, [pc, #40]	; (80096b4 <prvCheckTasksWaitingTermination+0x58>)
 800968c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800968e:	f001 fab9 	bl	800ac04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f000 f8e4 	bl	8009860 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009698:	4b06      	ldr	r3, [pc, #24]	; (80096b4 <prvCheckTasksWaitingTermination+0x58>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d1e1      	bne.n	8009664 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80096a0:	bf00      	nop
 80096a2:	bf00      	nop
 80096a4:	3708      	adds	r7, #8
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}
 80096aa:	bf00      	nop
 80096ac:	20001084 	.word	0x20001084
 80096b0:	200010b0 	.word	0x200010b0
 80096b4:	20001098 	.word	0x20001098

080096b8 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b086      	sub	sp, #24
 80096bc:	af00      	add	r7, sp, #0
 80096be:	60f8      	str	r0, [r7, #12]
 80096c0:	60b9      	str	r1, [r7, #8]
 80096c2:	607a      	str	r2, [r7, #4]
 80096c4:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d102      	bne.n	80096d2 <vTaskGetInfo+0x1a>
 80096cc:	4b2c      	ldr	r3, [pc, #176]	; (8009780 <vTaskGetInfo+0xc8>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	e000      	b.n	80096d4 <vTaskGetInfo+0x1c>
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	697a      	ldr	r2, [r7, #20]
 80096da:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	615a      	str	r2, [r3, #20]
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
		}
		#else
		{
			pxTaskStatus->ulRunTimeCounter = 0;
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	2200      	movs	r2, #0
 800970a:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800970c:	78fb      	ldrb	r3, [r7, #3]
 800970e:	2b05      	cmp	r3, #5
 8009710:	d01a      	beq.n	8009748 <vTaskGetInfo+0x90>
		{
			if( pxTCB == pxCurrentTCB )
 8009712:	4b1b      	ldr	r3, [pc, #108]	; (8009780 <vTaskGetInfo+0xc8>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	697a      	ldr	r2, [r7, #20]
 8009718:	429a      	cmp	r2, r3
 800971a:	d103      	bne.n	8009724 <vTaskGetInfo+0x6c>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	2200      	movs	r2, #0
 8009720:	731a      	strb	r2, [r3, #12]
 8009722:	e018      	b.n	8009756 <vTaskGetInfo+0x9e>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	78fa      	ldrb	r2, [r7, #3]
 8009728:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800972a:	78fb      	ldrb	r3, [r7, #3]
 800972c:	2b03      	cmp	r3, #3
 800972e:	d112      	bne.n	8009756 <vTaskGetInfo+0x9e>
					{
						vTaskSuspendAll();
 8009730:	f7ff fb76 	bl	8008e20 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009738:	2b00      	cmp	r3, #0
 800973a:	d002      	beq.n	8009742 <vTaskGetInfo+0x8a>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	2202      	movs	r2, #2
 8009740:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 8009742:	f7ff fb7b 	bl	8008e3c <xTaskResumeAll>
 8009746:	e006      	b.n	8009756 <vTaskGetInfo+0x9e>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8009748:	6978      	ldr	r0, [r7, #20]
 800974a:	f7ff fa93 	bl	8008c74 <eTaskGetState>
 800974e:	4603      	mov	r3, r0
 8009750:	461a      	mov	r2, r3
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d009      	beq.n	8009770 <vTaskGetInfo+0xb8>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009760:	4618      	mov	r0, r3
 8009762:	f000 f861 	bl	8009828 <prvTaskCheckFreeStackSpace>
 8009766:	4603      	mov	r3, r0
 8009768:	461a      	mov	r2, r3
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800976e:	e002      	b.n	8009776 <vTaskGetInfo+0xbe>
			pxTaskStatus->usStackHighWaterMark = 0;
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	2200      	movs	r2, #0
 8009774:	841a      	strh	r2, [r3, #32]
	}
 8009776:	bf00      	nop
 8009778:	3718      	adds	r7, #24
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
 800977e:	bf00      	nop
 8009780:	20000bdc 	.word	0x20000bdc

08009784 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 8009784:	b580      	push	{r7, lr}
 8009786:	b08a      	sub	sp, #40	; 0x28
 8009788:	af00      	add	r7, sp, #0
 800978a:	60f8      	str	r0, [r7, #12]
 800978c:	60b9      	str	r1, [r7, #8]
 800978e:	4613      	mov	r3, r2
 8009790:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 8009792:	2300      	movs	r3, #0
 8009794:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d03f      	beq.n	800981e <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	623b      	str	r3, [r7, #32]
 80097a2:	6a3b      	ldr	r3, [r7, #32]
 80097a4:	685b      	ldr	r3, [r3, #4]
 80097a6:	685a      	ldr	r2, [r3, #4]
 80097a8:	6a3b      	ldr	r3, [r7, #32]
 80097aa:	605a      	str	r2, [r3, #4]
 80097ac:	6a3b      	ldr	r3, [r7, #32]
 80097ae:	685a      	ldr	r2, [r3, #4]
 80097b0:	6a3b      	ldr	r3, [r7, #32]
 80097b2:	3308      	adds	r3, #8
 80097b4:	429a      	cmp	r2, r3
 80097b6:	d104      	bne.n	80097c2 <prvListTasksWithinSingleList+0x3e>
 80097b8:	6a3b      	ldr	r3, [r7, #32]
 80097ba:	685b      	ldr	r3, [r3, #4]
 80097bc:	685a      	ldr	r2, [r3, #4]
 80097be:	6a3b      	ldr	r3, [r7, #32]
 80097c0:	605a      	str	r2, [r3, #4]
 80097c2:	6a3b      	ldr	r3, [r7, #32]
 80097c4:	685b      	ldr	r3, [r3, #4]
 80097c6:	68db      	ldr	r3, [r3, #12]
 80097c8:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	61bb      	str	r3, [r7, #24]
 80097ce:	69bb      	ldr	r3, [r7, #24]
 80097d0:	685b      	ldr	r3, [r3, #4]
 80097d2:	685a      	ldr	r2, [r3, #4]
 80097d4:	69bb      	ldr	r3, [r7, #24]
 80097d6:	605a      	str	r2, [r3, #4]
 80097d8:	69bb      	ldr	r3, [r7, #24]
 80097da:	685a      	ldr	r2, [r3, #4]
 80097dc:	69bb      	ldr	r3, [r7, #24]
 80097de:	3308      	adds	r3, #8
 80097e0:	429a      	cmp	r2, r3
 80097e2:	d104      	bne.n	80097ee <prvListTasksWithinSingleList+0x6a>
 80097e4:	69bb      	ldr	r3, [r7, #24]
 80097e6:	685b      	ldr	r3, [r3, #4]
 80097e8:	685a      	ldr	r2, [r3, #4]
 80097ea:	69bb      	ldr	r3, [r7, #24]
 80097ec:	605a      	str	r2, [r3, #4]
 80097ee:	69bb      	ldr	r3, [r7, #24]
 80097f0:	685b      	ldr	r3, [r3, #4]
 80097f2:	68db      	ldr	r3, [r3, #12]
 80097f4:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 80097f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097f8:	4613      	mov	r3, r2
 80097fa:	00db      	lsls	r3, r3, #3
 80097fc:	4413      	add	r3, r2
 80097fe:	009b      	lsls	r3, r3, #2
 8009800:	461a      	mov	r2, r3
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	1899      	adds	r1, r3, r2
 8009806:	79fb      	ldrb	r3, [r7, #7]
 8009808:	2201      	movs	r2, #1
 800980a:	6978      	ldr	r0, [r7, #20]
 800980c:	f7ff ff54 	bl	80096b8 <vTaskGetInfo>
				uxTask++;
 8009810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009812:	3301      	adds	r3, #1
 8009814:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 8009816:	697a      	ldr	r2, [r7, #20]
 8009818:	69fb      	ldr	r3, [r7, #28]
 800981a:	429a      	cmp	r2, r3
 800981c:	d1d5      	bne.n	80097ca <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 800981e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8009820:	4618      	mov	r0, r3
 8009822:	3728      	adds	r7, #40	; 0x28
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}

08009828 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8009828:	b480      	push	{r7}
 800982a:	b085      	sub	sp, #20
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8009830:	2300      	movs	r3, #0
 8009832:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8009834:	e005      	b.n	8009842 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	3301      	adds	r3, #1
 800983a:	607b      	str	r3, [r7, #4]
			ulCount++;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	3301      	adds	r3, #1
 8009840:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	781b      	ldrb	r3, [r3, #0]
 8009846:	2ba5      	cmp	r3, #165	; 0xa5
 8009848:	d0f5      	beq.n	8009836 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	089b      	lsrs	r3, r3, #2
 800984e:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	b29b      	uxth	r3, r3
	}
 8009854:	4618      	mov	r0, r3
 8009856:	3714      	adds	r7, #20
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr

08009860 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009860:	b580      	push	{r7, lr}
 8009862:	b084      	sub	sp, #16
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	3354      	adds	r3, #84	; 0x54
 800986c:	4618      	mov	r0, r3
 800986e:	f002 fba7 	bl	800bfc0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009878:	2b00      	cmp	r3, #0
 800987a:	d108      	bne.n	800988e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009880:	4618      	mov	r0, r3
 8009882:	f001 fb7d 	bl	800af80 <vPortFree>
				vPortFree( pxTCB );
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f001 fb7a 	bl	800af80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800988c:	e018      	b.n	80098c0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009894:	2b01      	cmp	r3, #1
 8009896:	d103      	bne.n	80098a0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f001 fb71 	bl	800af80 <vPortFree>
	}
 800989e:	e00f      	b.n	80098c0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80098a6:	2b02      	cmp	r3, #2
 80098a8:	d00a      	beq.n	80098c0 <prvDeleteTCB+0x60>
	__asm volatile
 80098aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ae:	f383 8811 	msr	BASEPRI, r3
 80098b2:	f3bf 8f6f 	isb	sy
 80098b6:	f3bf 8f4f 	dsb	sy
 80098ba:	60fb      	str	r3, [r7, #12]
}
 80098bc:	bf00      	nop
 80098be:	e7fe      	b.n	80098be <prvDeleteTCB+0x5e>
	}
 80098c0:	bf00      	nop
 80098c2:	3710      	adds	r7, #16
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}

080098c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80098c8:	b480      	push	{r7}
 80098ca:	b083      	sub	sp, #12
 80098cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80098ce:	4b0c      	ldr	r3, [pc, #48]	; (8009900 <prvResetNextTaskUnblockTime+0x38>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d104      	bne.n	80098e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80098d8:	4b0a      	ldr	r3, [pc, #40]	; (8009904 <prvResetNextTaskUnblockTime+0x3c>)
 80098da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80098de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80098e0:	e008      	b.n	80098f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098e2:	4b07      	ldr	r3, [pc, #28]	; (8009900 <prvResetNextTaskUnblockTime+0x38>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	68db      	ldr	r3, [r3, #12]
 80098e8:	68db      	ldr	r3, [r3, #12]
 80098ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	4a04      	ldr	r2, [pc, #16]	; (8009904 <prvResetNextTaskUnblockTime+0x3c>)
 80098f2:	6013      	str	r3, [r2, #0]
}
 80098f4:	bf00      	nop
 80098f6:	370c      	adds	r7, #12
 80098f8:	46bd      	mov	sp, r7
 80098fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fe:	4770      	bx	lr
 8009900:	20001068 	.word	0x20001068
 8009904:	200010d0 	.word	0x200010d0

08009908 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009908:	b480      	push	{r7}
 800990a:	b083      	sub	sp, #12
 800990c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800990e:	4b05      	ldr	r3, [pc, #20]	; (8009924 <xTaskGetCurrentTaskHandle+0x1c>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009914:	687b      	ldr	r3, [r7, #4]
	}
 8009916:	4618      	mov	r0, r3
 8009918:	370c      	adds	r7, #12
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr
 8009922:	bf00      	nop
 8009924:	20000bdc 	.word	0x20000bdc

08009928 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009928:	b480      	push	{r7}
 800992a:	b083      	sub	sp, #12
 800992c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800992e:	4b0b      	ldr	r3, [pc, #44]	; (800995c <xTaskGetSchedulerState+0x34>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d102      	bne.n	800993c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009936:	2301      	movs	r3, #1
 8009938:	607b      	str	r3, [r7, #4]
 800993a:	e008      	b.n	800994e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800993c:	4b08      	ldr	r3, [pc, #32]	; (8009960 <xTaskGetSchedulerState+0x38>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d102      	bne.n	800994a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009944:	2302      	movs	r3, #2
 8009946:	607b      	str	r3, [r7, #4]
 8009948:	e001      	b.n	800994e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800994a:	2300      	movs	r3, #0
 800994c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800994e:	687b      	ldr	r3, [r7, #4]
	}
 8009950:	4618      	mov	r0, r3
 8009952:	370c      	adds	r7, #12
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr
 800995c:	200010bc 	.word	0x200010bc
 8009960:	200010d8 	.word	0x200010d8

08009964 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009964:	b580      	push	{r7, lr}
 8009966:	b084      	sub	sp, #16
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009970:	2300      	movs	r3, #0
 8009972:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d051      	beq.n	8009a1e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800997e:	4b2a      	ldr	r3, [pc, #168]	; (8009a28 <xTaskPriorityInherit+0xc4>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009984:	429a      	cmp	r2, r3
 8009986:	d241      	bcs.n	8009a0c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	699b      	ldr	r3, [r3, #24]
 800998c:	2b00      	cmp	r3, #0
 800998e:	db06      	blt.n	800999e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009990:	4b25      	ldr	r3, [pc, #148]	; (8009a28 <xTaskPriorityInherit+0xc4>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009996:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	6959      	ldr	r1, [r3, #20]
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099a6:	4613      	mov	r3, r2
 80099a8:	009b      	lsls	r3, r3, #2
 80099aa:	4413      	add	r3, r2
 80099ac:	009b      	lsls	r3, r3, #2
 80099ae:	4a1f      	ldr	r2, [pc, #124]	; (8009a2c <xTaskPriorityInherit+0xc8>)
 80099b0:	4413      	add	r3, r2
 80099b2:	4299      	cmp	r1, r3
 80099b4:	d122      	bne.n	80099fc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	3304      	adds	r3, #4
 80099ba:	4618      	mov	r0, r3
 80099bc:	f7fd fc78 	bl	80072b0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80099c0:	4b19      	ldr	r3, [pc, #100]	; (8009a28 <xTaskPriorityInherit+0xc4>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099ce:	4b18      	ldr	r3, [pc, #96]	; (8009a30 <xTaskPriorityInherit+0xcc>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	429a      	cmp	r2, r3
 80099d4:	d903      	bls.n	80099de <xTaskPriorityInherit+0x7a>
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099da:	4a15      	ldr	r2, [pc, #84]	; (8009a30 <xTaskPriorityInherit+0xcc>)
 80099dc:	6013      	str	r3, [r2, #0]
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099e2:	4613      	mov	r3, r2
 80099e4:	009b      	lsls	r3, r3, #2
 80099e6:	4413      	add	r3, r2
 80099e8:	009b      	lsls	r3, r3, #2
 80099ea:	4a10      	ldr	r2, [pc, #64]	; (8009a2c <xTaskPriorityInherit+0xc8>)
 80099ec:	441a      	add	r2, r3
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	3304      	adds	r3, #4
 80099f2:	4619      	mov	r1, r3
 80099f4:	4610      	mov	r0, r2
 80099f6:	f7fd fbfe 	bl	80071f6 <vListInsertEnd>
 80099fa:	e004      	b.n	8009a06 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80099fc:	4b0a      	ldr	r3, [pc, #40]	; (8009a28 <xTaskPriorityInherit+0xc4>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009a06:	2301      	movs	r3, #1
 8009a08:	60fb      	str	r3, [r7, #12]
 8009a0a:	e008      	b.n	8009a1e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009a10:	4b05      	ldr	r3, [pc, #20]	; (8009a28 <xTaskPriorityInherit+0xc4>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a16:	429a      	cmp	r2, r3
 8009a18:	d201      	bcs.n	8009a1e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
	}
 8009a20:	4618      	mov	r0, r3
 8009a22:	3710      	adds	r7, #16
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}
 8009a28:	20000bdc 	.word	0x20000bdc
 8009a2c:	20000be0 	.word	0x20000be0
 8009a30:	200010b8 	.word	0x200010b8

08009a34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b086      	sub	sp, #24
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009a40:	2300      	movs	r3, #0
 8009a42:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d056      	beq.n	8009af8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009a4a:	4b2e      	ldr	r3, [pc, #184]	; (8009b04 <xTaskPriorityDisinherit+0xd0>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	693a      	ldr	r2, [r7, #16]
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d00a      	beq.n	8009a6a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a58:	f383 8811 	msr	BASEPRI, r3
 8009a5c:	f3bf 8f6f 	isb	sy
 8009a60:	f3bf 8f4f 	dsb	sy
 8009a64:	60fb      	str	r3, [r7, #12]
}
 8009a66:	bf00      	nop
 8009a68:	e7fe      	b.n	8009a68 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d10a      	bne.n	8009a88 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a76:	f383 8811 	msr	BASEPRI, r3
 8009a7a:	f3bf 8f6f 	isb	sy
 8009a7e:	f3bf 8f4f 	dsb	sy
 8009a82:	60bb      	str	r3, [r7, #8]
}
 8009a84:	bf00      	nop
 8009a86:	e7fe      	b.n	8009a86 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a8c:	1e5a      	subs	r2, r3, #1
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a9a:	429a      	cmp	r2, r3
 8009a9c:	d02c      	beq.n	8009af8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d128      	bne.n	8009af8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	3304      	adds	r3, #4
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f7fd fc00 	bl	80072b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009abc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ac8:	4b0f      	ldr	r3, [pc, #60]	; (8009b08 <xTaskPriorityDisinherit+0xd4>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d903      	bls.n	8009ad8 <xTaskPriorityDisinherit+0xa4>
 8009ad0:	693b      	ldr	r3, [r7, #16]
 8009ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ad4:	4a0c      	ldr	r2, [pc, #48]	; (8009b08 <xTaskPriorityDisinherit+0xd4>)
 8009ad6:	6013      	str	r3, [r2, #0]
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009adc:	4613      	mov	r3, r2
 8009ade:	009b      	lsls	r3, r3, #2
 8009ae0:	4413      	add	r3, r2
 8009ae2:	009b      	lsls	r3, r3, #2
 8009ae4:	4a09      	ldr	r2, [pc, #36]	; (8009b0c <xTaskPriorityDisinherit+0xd8>)
 8009ae6:	441a      	add	r2, r3
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	3304      	adds	r3, #4
 8009aec:	4619      	mov	r1, r3
 8009aee:	4610      	mov	r0, r2
 8009af0:	f7fd fb81 	bl	80071f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009af4:	2301      	movs	r3, #1
 8009af6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009af8:	697b      	ldr	r3, [r7, #20]
	}
 8009afa:	4618      	mov	r0, r3
 8009afc:	3718      	adds	r7, #24
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}
 8009b02:	bf00      	nop
 8009b04:	20000bdc 	.word	0x20000bdc
 8009b08:	200010b8 	.word	0x200010b8
 8009b0c:	20000be0 	.word	0x20000be0

08009b10 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b088      	sub	sp, #32
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
 8009b18:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009b1e:	2301      	movs	r3, #1
 8009b20:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d06a      	beq.n	8009bfe <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009b28:	69bb      	ldr	r3, [r7, #24]
 8009b2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d10a      	bne.n	8009b46 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b34:	f383 8811 	msr	BASEPRI, r3
 8009b38:	f3bf 8f6f 	isb	sy
 8009b3c:	f3bf 8f4f 	dsb	sy
 8009b40:	60fb      	str	r3, [r7, #12]
}
 8009b42:	bf00      	nop
 8009b44:	e7fe      	b.n	8009b44 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009b46:	69bb      	ldr	r3, [r7, #24]
 8009b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b4a:	683a      	ldr	r2, [r7, #0]
 8009b4c:	429a      	cmp	r2, r3
 8009b4e:	d902      	bls.n	8009b56 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	61fb      	str	r3, [r7, #28]
 8009b54:	e002      	b.n	8009b5c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009b56:	69bb      	ldr	r3, [r7, #24]
 8009b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b5a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009b5c:	69bb      	ldr	r3, [r7, #24]
 8009b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b60:	69fa      	ldr	r2, [r7, #28]
 8009b62:	429a      	cmp	r2, r3
 8009b64:	d04b      	beq.n	8009bfe <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009b66:	69bb      	ldr	r3, [r7, #24]
 8009b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b6a:	697a      	ldr	r2, [r7, #20]
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	d146      	bne.n	8009bfe <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009b70:	4b25      	ldr	r3, [pc, #148]	; (8009c08 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	69ba      	ldr	r2, [r7, #24]
 8009b76:	429a      	cmp	r2, r3
 8009b78:	d10a      	bne.n	8009b90 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8009b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b7e:	f383 8811 	msr	BASEPRI, r3
 8009b82:	f3bf 8f6f 	isb	sy
 8009b86:	f3bf 8f4f 	dsb	sy
 8009b8a:	60bb      	str	r3, [r7, #8]
}
 8009b8c:	bf00      	nop
 8009b8e:	e7fe      	b.n	8009b8e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009b90:	69bb      	ldr	r3, [r7, #24]
 8009b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b94:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009b96:	69bb      	ldr	r3, [r7, #24]
 8009b98:	69fa      	ldr	r2, [r7, #28]
 8009b9a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009b9c:	69bb      	ldr	r3, [r7, #24]
 8009b9e:	699b      	ldr	r3, [r3, #24]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	db04      	blt.n	8009bae <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ba4:	69fb      	ldr	r3, [r7, #28]
 8009ba6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009baa:	69bb      	ldr	r3, [r7, #24]
 8009bac:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009bae:	69bb      	ldr	r3, [r7, #24]
 8009bb0:	6959      	ldr	r1, [r3, #20]
 8009bb2:	693a      	ldr	r2, [r7, #16]
 8009bb4:	4613      	mov	r3, r2
 8009bb6:	009b      	lsls	r3, r3, #2
 8009bb8:	4413      	add	r3, r2
 8009bba:	009b      	lsls	r3, r3, #2
 8009bbc:	4a13      	ldr	r2, [pc, #76]	; (8009c0c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009bbe:	4413      	add	r3, r2
 8009bc0:	4299      	cmp	r1, r3
 8009bc2:	d11c      	bne.n	8009bfe <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009bc4:	69bb      	ldr	r3, [r7, #24]
 8009bc6:	3304      	adds	r3, #4
 8009bc8:	4618      	mov	r0, r3
 8009bca:	f7fd fb71 	bl	80072b0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009bce:	69bb      	ldr	r3, [r7, #24]
 8009bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bd2:	4b0f      	ldr	r3, [pc, #60]	; (8009c10 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	429a      	cmp	r2, r3
 8009bd8:	d903      	bls.n	8009be2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8009bda:	69bb      	ldr	r3, [r7, #24]
 8009bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bde:	4a0c      	ldr	r2, [pc, #48]	; (8009c10 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009be0:	6013      	str	r3, [r2, #0]
 8009be2:	69bb      	ldr	r3, [r7, #24]
 8009be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009be6:	4613      	mov	r3, r2
 8009be8:	009b      	lsls	r3, r3, #2
 8009bea:	4413      	add	r3, r2
 8009bec:	009b      	lsls	r3, r3, #2
 8009bee:	4a07      	ldr	r2, [pc, #28]	; (8009c0c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009bf0:	441a      	add	r2, r3
 8009bf2:	69bb      	ldr	r3, [r7, #24]
 8009bf4:	3304      	adds	r3, #4
 8009bf6:	4619      	mov	r1, r3
 8009bf8:	4610      	mov	r0, r2
 8009bfa:	f7fd fafc 	bl	80071f6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009bfe:	bf00      	nop
 8009c00:	3720      	adds	r7, #32
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}
 8009c06:	bf00      	nop
 8009c08:	20000bdc 	.word	0x20000bdc
 8009c0c:	20000be0 	.word	0x20000be0
 8009c10:	200010b8 	.word	0x200010b8

08009c14 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b084      	sub	sp, #16
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 8009c1e:	6839      	ldr	r1, [r7, #0]
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f002 fa59 	bl	800c0d8 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f7f6 fad2 	bl	80001d0 <strlen>
 8009c2c:	60f8      	str	r0, [r7, #12]
 8009c2e:	e007      	b.n	8009c40 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 8009c30:	687a      	ldr	r2, [r7, #4]
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	4413      	add	r3, r2
 8009c36:	2220      	movs	r2, #32
 8009c38:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	3301      	adds	r3, #1
 8009c3e:	60fb      	str	r3, [r7, #12]
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	2b0e      	cmp	r3, #14
 8009c44:	d9f4      	bls.n	8009c30 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 8009c46:	687a      	ldr	r2, [r7, #4]
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	4413      	add	r3, r2
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 8009c50:	687a      	ldr	r2, [r7, #4]
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	4413      	add	r3, r2
	}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3710      	adds	r7, #16
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}
	...

08009c60 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 8009c60:	b590      	push	{r4, r7, lr}
 8009c62:	b089      	sub	sp, #36	; 0x24
 8009c64:	af02      	add	r7, sp, #8
 8009c66:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 8009c6e:	4b45      	ldr	r3, [pc, #276]	; (8009d84 <vTaskList+0x124>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8009c74:	4b43      	ldr	r3, [pc, #268]	; (8009d84 <vTaskList+0x124>)
 8009c76:	681a      	ldr	r2, [r3, #0]
 8009c78:	4613      	mov	r3, r2
 8009c7a:	00db      	lsls	r3, r3, #3
 8009c7c:	4413      	add	r3, r2
 8009c7e:	009b      	lsls	r3, r3, #2
 8009c80:	4618      	mov	r0, r3
 8009c82:	f001 f8b1 	bl	800ade8 <pvPortMalloc>
 8009c86:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d076      	beq.n	8009d7c <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 8009c8e:	2200      	movs	r2, #0
 8009c90:	68f9      	ldr	r1, [r7, #12]
 8009c92:	68b8      	ldr	r0, [r7, #8]
 8009c94:	f7ff f980 	bl	8008f98 <uxTaskGetSystemState>
 8009c98:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	617b      	str	r3, [r7, #20]
 8009c9e:	e066      	b.n	8009d6e <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 8009ca0:	697a      	ldr	r2, [r7, #20]
 8009ca2:	4613      	mov	r3, r2
 8009ca4:	00db      	lsls	r3, r3, #3
 8009ca6:	4413      	add	r3, r2
 8009ca8:	009b      	lsls	r3, r3, #2
 8009caa:	461a      	mov	r2, r3
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	4413      	add	r3, r2
 8009cb0:	7b1b      	ldrb	r3, [r3, #12]
 8009cb2:	2b04      	cmp	r3, #4
 8009cb4:	d81b      	bhi.n	8009cee <vTaskList+0x8e>
 8009cb6:	a201      	add	r2, pc, #4	; (adr r2, 8009cbc <vTaskList+0x5c>)
 8009cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cbc:	08009cd1 	.word	0x08009cd1
 8009cc0:	08009cd7 	.word	0x08009cd7
 8009cc4:	08009cdd 	.word	0x08009cdd
 8009cc8:	08009ce3 	.word	0x08009ce3
 8009ccc:	08009ce9 	.word	0x08009ce9
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 8009cd0:	2358      	movs	r3, #88	; 0x58
 8009cd2:	74fb      	strb	r3, [r7, #19]
										break;
 8009cd4:	e00e      	b.n	8009cf4 <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 8009cd6:	2352      	movs	r3, #82	; 0x52
 8009cd8:	74fb      	strb	r3, [r7, #19]
										break;
 8009cda:	e00b      	b.n	8009cf4 <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 8009cdc:	2342      	movs	r3, #66	; 0x42
 8009cde:	74fb      	strb	r3, [r7, #19]
										break;
 8009ce0:	e008      	b.n	8009cf4 <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 8009ce2:	2353      	movs	r3, #83	; 0x53
 8009ce4:	74fb      	strb	r3, [r7, #19]
										break;
 8009ce6:	e005      	b.n	8009cf4 <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 8009ce8:	2344      	movs	r3, #68	; 0x44
 8009cea:	74fb      	strb	r3, [r7, #19]
										break;
 8009cec:	e002      	b.n	8009cf4 <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	74fb      	strb	r3, [r7, #19]
										break;
 8009cf2:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8009cf4:	697a      	ldr	r2, [r7, #20]
 8009cf6:	4613      	mov	r3, r2
 8009cf8:	00db      	lsls	r3, r3, #3
 8009cfa:	4413      	add	r3, r2
 8009cfc:	009b      	lsls	r3, r3, #2
 8009cfe:	461a      	mov	r2, r3
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	4413      	add	r3, r2
 8009d04:	685b      	ldr	r3, [r3, #4]
 8009d06:	4619      	mov	r1, r3
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f7ff ff83 	bl	8009c14 <prvWriteNameToBuffer>
 8009d0e:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8009d10:	7cf9      	ldrb	r1, [r7, #19]
 8009d12:	697a      	ldr	r2, [r7, #20]
 8009d14:	4613      	mov	r3, r2
 8009d16:	00db      	lsls	r3, r3, #3
 8009d18:	4413      	add	r3, r2
 8009d1a:	009b      	lsls	r3, r3, #2
 8009d1c:	461a      	mov	r2, r3
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	4413      	add	r3, r2
 8009d22:	6918      	ldr	r0, [r3, #16]
 8009d24:	697a      	ldr	r2, [r7, #20]
 8009d26:	4613      	mov	r3, r2
 8009d28:	00db      	lsls	r3, r3, #3
 8009d2a:	4413      	add	r3, r2
 8009d2c:	009b      	lsls	r3, r3, #2
 8009d2e:	461a      	mov	r2, r3
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	4413      	add	r3, r2
 8009d34:	8c1b      	ldrh	r3, [r3, #32]
 8009d36:	461c      	mov	r4, r3
 8009d38:	697a      	ldr	r2, [r7, #20]
 8009d3a:	4613      	mov	r3, r2
 8009d3c:	00db      	lsls	r3, r3, #3
 8009d3e:	4413      	add	r3, r2
 8009d40:	009b      	lsls	r3, r3, #2
 8009d42:	461a      	mov	r2, r3
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	4413      	add	r3, r2
 8009d48:	689b      	ldr	r3, [r3, #8]
 8009d4a:	9301      	str	r3, [sp, #4]
 8009d4c:	9400      	str	r4, [sp, #0]
 8009d4e:	4603      	mov	r3, r0
 8009d50:	460a      	mov	r2, r1
 8009d52:	490d      	ldr	r1, [pc, #52]	; (8009d88 <vTaskList+0x128>)
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f002 f99f 	bl	800c098 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f7f6 fa38 	bl	80001d0 <strlen>
 8009d60:	4602      	mov	r2, r0
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	4413      	add	r3, r2
 8009d66:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	3301      	adds	r3, #1
 8009d6c:	617b      	str	r3, [r7, #20]
 8009d6e:	697a      	ldr	r2, [r7, #20]
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	429a      	cmp	r2, r3
 8009d74:	d394      	bcc.n	8009ca0 <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 8009d76:	68b8      	ldr	r0, [r7, #8]
 8009d78:	f001 f902 	bl	800af80 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009d7c:	bf00      	nop
 8009d7e:	371c      	adds	r7, #28
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd90      	pop	{r4, r7, pc}
 8009d84:	200010b0 	.word	0x200010b0
 8009d88:	0800ca90 	.word	0x0800ca90

08009d8c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009d8c:	b480      	push	{r7}
 8009d8e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009d90:	4b07      	ldr	r3, [pc, #28]	; (8009db0 <pvTaskIncrementMutexHeldCount+0x24>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d004      	beq.n	8009da2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009d98:	4b05      	ldr	r3, [pc, #20]	; (8009db0 <pvTaskIncrementMutexHeldCount+0x24>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009d9e:	3201      	adds	r2, #1
 8009da0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009da2:	4b03      	ldr	r3, [pc, #12]	; (8009db0 <pvTaskIncrementMutexHeldCount+0x24>)
 8009da4:	681b      	ldr	r3, [r3, #0]
	}
 8009da6:	4618      	mov	r0, r3
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr
 8009db0:	20000bdc 	.word	0x20000bdc

08009db4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b086      	sub	sp, #24
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	60f8      	str	r0, [r7, #12]
 8009dbc:	60b9      	str	r1, [r7, #8]
 8009dbe:	607a      	str	r2, [r7, #4]
 8009dc0:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8009dc2:	f000 feef 	bl	800aba4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009dc6:	4b29      	ldr	r3, [pc, #164]	; (8009e6c <xTaskNotifyWait+0xb8>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8009dce:	b2db      	uxtb	r3, r3
 8009dd0:	2b02      	cmp	r3, #2
 8009dd2:	d01c      	beq.n	8009e0e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8009dd4:	4b25      	ldr	r3, [pc, #148]	; (8009e6c <xTaskNotifyWait+0xb8>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8009ddc:	68fa      	ldr	r2, [r7, #12]
 8009dde:	43d2      	mvns	r2, r2
 8009de0:	400a      	ands	r2, r1
 8009de2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009de6:	4b21      	ldr	r3, [pc, #132]	; (8009e6c <xTaskNotifyWait+0xb8>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	2201      	movs	r2, #1
 8009dec:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d00b      	beq.n	8009e0e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009df6:	2101      	movs	r1, #1
 8009df8:	6838      	ldr	r0, [r7, #0]
 8009dfa:	f000 fa03 	bl	800a204 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8009dfe:	4b1c      	ldr	r3, [pc, #112]	; (8009e70 <xTaskNotifyWait+0xbc>)
 8009e00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e04:	601a      	str	r2, [r3, #0]
 8009e06:	f3bf 8f4f 	dsb	sy
 8009e0a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009e0e:	f000 fef9 	bl	800ac04 <vPortExitCritical>

		taskENTER_CRITICAL();
 8009e12:	f000 fec7 	bl	800aba4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d005      	beq.n	8009e28 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8009e1c:	4b13      	ldr	r3, [pc, #76]	; (8009e6c <xTaskNotifyWait+0xb8>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009e28:	4b10      	ldr	r3, [pc, #64]	; (8009e6c <xTaskNotifyWait+0xb8>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8009e30:	b2db      	uxtb	r3, r3
 8009e32:	2b02      	cmp	r3, #2
 8009e34:	d002      	beq.n	8009e3c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8009e36:	2300      	movs	r3, #0
 8009e38:	617b      	str	r3, [r7, #20]
 8009e3a:	e00a      	b.n	8009e52 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8009e3c:	4b0b      	ldr	r3, [pc, #44]	; (8009e6c <xTaskNotifyWait+0xb8>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8009e44:	68ba      	ldr	r2, [r7, #8]
 8009e46:	43d2      	mvns	r2, r2
 8009e48:	400a      	ands	r2, r1
 8009e4a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009e52:	4b06      	ldr	r3, [pc, #24]	; (8009e6c <xTaskNotifyWait+0xb8>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	2200      	movs	r2, #0
 8009e58:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 8009e5c:	f000 fed2 	bl	800ac04 <vPortExitCritical>

		return xReturn;
 8009e60:	697b      	ldr	r3, [r7, #20]
	}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3718      	adds	r7, #24
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}
 8009e6a:	bf00      	nop
 8009e6c:	20000bdc 	.word	0x20000bdc
 8009e70:	e000ed04 	.word	0xe000ed04

08009e74 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b08a      	sub	sp, #40	; 0x28
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	60f8      	str	r0, [r7, #12]
 8009e7c:	60b9      	str	r1, [r7, #8]
 8009e7e:	603b      	str	r3, [r7, #0]
 8009e80:	4613      	mov	r3, r2
 8009e82:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8009e84:	2301      	movs	r3, #1
 8009e86:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d10a      	bne.n	8009ea4 <xTaskGenericNotify+0x30>
	__asm volatile
 8009e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e92:	f383 8811 	msr	BASEPRI, r3
 8009e96:	f3bf 8f6f 	isb	sy
 8009e9a:	f3bf 8f4f 	dsb	sy
 8009e9e:	61bb      	str	r3, [r7, #24]
}
 8009ea0:	bf00      	nop
 8009ea2:	e7fe      	b.n	8009ea2 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8009ea8:	f000 fe7c 	bl	800aba4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d004      	beq.n	8009ebc <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009eb2:	6a3b      	ldr	r3, [r7, #32]
 8009eb4:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009ebc:	6a3b      	ldr	r3, [r7, #32]
 8009ebe:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8009ec2:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009ec4:	6a3b      	ldr	r3, [r7, #32]
 8009ec6:	2202      	movs	r2, #2
 8009ec8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8009ecc:	79fb      	ldrb	r3, [r7, #7]
 8009ece:	2b04      	cmp	r3, #4
 8009ed0:	d82d      	bhi.n	8009f2e <xTaskGenericNotify+0xba>
 8009ed2:	a201      	add	r2, pc, #4	; (adr r2, 8009ed8 <xTaskGenericNotify+0x64>)
 8009ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ed8:	08009f51 	.word	0x08009f51
 8009edc:	08009eed 	.word	0x08009eed
 8009ee0:	08009eff 	.word	0x08009eff
 8009ee4:	08009f0f 	.word	0x08009f0f
 8009ee8:	08009f19 	.word	0x08009f19
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009eec:	6a3b      	ldr	r3, [r7, #32]
 8009eee:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	431a      	orrs	r2, r3
 8009ef6:	6a3b      	ldr	r3, [r7, #32]
 8009ef8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8009efc:	e02b      	b.n	8009f56 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009efe:	6a3b      	ldr	r3, [r7, #32]
 8009f00:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009f04:	1c5a      	adds	r2, r3, #1
 8009f06:	6a3b      	ldr	r3, [r7, #32]
 8009f08:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8009f0c:	e023      	b.n	8009f56 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009f0e:	6a3b      	ldr	r3, [r7, #32]
 8009f10:	68ba      	ldr	r2, [r7, #8]
 8009f12:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8009f16:	e01e      	b.n	8009f56 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009f18:	7ffb      	ldrb	r3, [r7, #31]
 8009f1a:	2b02      	cmp	r3, #2
 8009f1c:	d004      	beq.n	8009f28 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009f1e:	6a3b      	ldr	r3, [r7, #32]
 8009f20:	68ba      	ldr	r2, [r7, #8]
 8009f22:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009f26:	e016      	b.n	8009f56 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8009f2c:	e013      	b.n	8009f56 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009f2e:	6a3b      	ldr	r3, [r7, #32]
 8009f30:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009f34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f38:	d00c      	beq.n	8009f54 <xTaskGenericNotify+0xe0>
	__asm volatile
 8009f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f3e:	f383 8811 	msr	BASEPRI, r3
 8009f42:	f3bf 8f6f 	isb	sy
 8009f46:	f3bf 8f4f 	dsb	sy
 8009f4a:	617b      	str	r3, [r7, #20]
}
 8009f4c:	bf00      	nop
 8009f4e:	e7fe      	b.n	8009f4e <xTaskGenericNotify+0xda>
					break;
 8009f50:	bf00      	nop
 8009f52:	e000      	b.n	8009f56 <xTaskGenericNotify+0xe2>

					break;
 8009f54:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009f56:	7ffb      	ldrb	r3, [r7, #31]
 8009f58:	2b01      	cmp	r3, #1
 8009f5a:	d13a      	bne.n	8009fd2 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f5c:	6a3b      	ldr	r3, [r7, #32]
 8009f5e:	3304      	adds	r3, #4
 8009f60:	4618      	mov	r0, r3
 8009f62:	f7fd f9a5 	bl	80072b0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8009f66:	6a3b      	ldr	r3, [r7, #32]
 8009f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f6a:	4b1d      	ldr	r3, [pc, #116]	; (8009fe0 <xTaskGenericNotify+0x16c>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	429a      	cmp	r2, r3
 8009f70:	d903      	bls.n	8009f7a <xTaskGenericNotify+0x106>
 8009f72:	6a3b      	ldr	r3, [r7, #32]
 8009f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f76:	4a1a      	ldr	r2, [pc, #104]	; (8009fe0 <xTaskGenericNotify+0x16c>)
 8009f78:	6013      	str	r3, [r2, #0]
 8009f7a:	6a3b      	ldr	r3, [r7, #32]
 8009f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f7e:	4613      	mov	r3, r2
 8009f80:	009b      	lsls	r3, r3, #2
 8009f82:	4413      	add	r3, r2
 8009f84:	009b      	lsls	r3, r3, #2
 8009f86:	4a17      	ldr	r2, [pc, #92]	; (8009fe4 <xTaskGenericNotify+0x170>)
 8009f88:	441a      	add	r2, r3
 8009f8a:	6a3b      	ldr	r3, [r7, #32]
 8009f8c:	3304      	adds	r3, #4
 8009f8e:	4619      	mov	r1, r3
 8009f90:	4610      	mov	r0, r2
 8009f92:	f7fd f930 	bl	80071f6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009f96:	6a3b      	ldr	r3, [r7, #32]
 8009f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d00a      	beq.n	8009fb4 <xTaskGenericNotify+0x140>
	__asm volatile
 8009f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa2:	f383 8811 	msr	BASEPRI, r3
 8009fa6:	f3bf 8f6f 	isb	sy
 8009faa:	f3bf 8f4f 	dsb	sy
 8009fae:	613b      	str	r3, [r7, #16]
}
 8009fb0:	bf00      	nop
 8009fb2:	e7fe      	b.n	8009fb2 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009fb4:	6a3b      	ldr	r3, [r7, #32]
 8009fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fb8:	4b0b      	ldr	r3, [pc, #44]	; (8009fe8 <xTaskGenericNotify+0x174>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fbe:	429a      	cmp	r2, r3
 8009fc0:	d907      	bls.n	8009fd2 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8009fc2:	4b0a      	ldr	r3, [pc, #40]	; (8009fec <xTaskGenericNotify+0x178>)
 8009fc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fc8:	601a      	str	r2, [r3, #0]
 8009fca:	f3bf 8f4f 	dsb	sy
 8009fce:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009fd2:	f000 fe17 	bl	800ac04 <vPortExitCritical>

		return xReturn;
 8009fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3728      	adds	r7, #40	; 0x28
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}
 8009fe0:	200010b8 	.word	0x200010b8
 8009fe4:	20000be0 	.word	0x20000be0
 8009fe8:	20000bdc 	.word	0x20000bdc
 8009fec:	e000ed04 	.word	0xe000ed04

08009ff0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b08e      	sub	sp, #56	; 0x38
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	60f8      	str	r0, [r7, #12]
 8009ff8:	60b9      	str	r1, [r7, #8]
 8009ffa:	603b      	str	r3, [r7, #0]
 8009ffc:	4613      	mov	r3, r2
 8009ffe:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800a000:	2301      	movs	r3, #1
 800a002:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d10a      	bne.n	800a020 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800a00a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a00e:	f383 8811 	msr	BASEPRI, r3
 800a012:	f3bf 8f6f 	isb	sy
 800a016:	f3bf 8f4f 	dsb	sy
 800a01a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a01c:	bf00      	nop
 800a01e:	e7fe      	b.n	800a01e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a020:	f000 fea2 	bl	800ad68 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800a028:	f3ef 8211 	mrs	r2, BASEPRI
 800a02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a030:	f383 8811 	msr	BASEPRI, r3
 800a034:	f3bf 8f6f 	isb	sy
 800a038:	f3bf 8f4f 	dsb	sy
 800a03c:	623a      	str	r2, [r7, #32]
 800a03e:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800a040:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a042:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d004      	beq.n	800a054 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a04c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a056:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800a05a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a05e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a060:	2202      	movs	r2, #2
 800a062:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800a066:	79fb      	ldrb	r3, [r7, #7]
 800a068:	2b04      	cmp	r3, #4
 800a06a:	d82f      	bhi.n	800a0cc <xTaskGenericNotifyFromISR+0xdc>
 800a06c:	a201      	add	r2, pc, #4	; (adr r2, 800a074 <xTaskGenericNotifyFromISR+0x84>)
 800a06e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a072:	bf00      	nop
 800a074:	0800a0ef 	.word	0x0800a0ef
 800a078:	0800a089 	.word	0x0800a089
 800a07c:	0800a09b 	.word	0x0800a09b
 800a080:	0800a0ab 	.word	0x0800a0ab
 800a084:	0800a0b5 	.word	0x0800a0b5
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800a088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a08a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	431a      	orrs	r2, r3
 800a092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a094:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800a098:	e02c      	b.n	800a0f4 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800a09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a09c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a0a0:	1c5a      	adds	r2, r3, #1
 800a0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800a0a8:	e024      	b.n	800a0f4 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800a0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ac:	68ba      	ldr	r2, [r7, #8]
 800a0ae:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800a0b2:	e01f      	b.n	800a0f4 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a0b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a0b8:	2b02      	cmp	r3, #2
 800a0ba:	d004      	beq.n	800a0c6 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800a0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0be:	68ba      	ldr	r2, [r7, #8]
 800a0c0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800a0c4:	e016      	b.n	800a0f4 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800a0ca:	e013      	b.n	800a0f4 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800a0cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a0d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a0d6:	d00c      	beq.n	800a0f2 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800a0d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0dc:	f383 8811 	msr	BASEPRI, r3
 800a0e0:	f3bf 8f6f 	isb	sy
 800a0e4:	f3bf 8f4f 	dsb	sy
 800a0e8:	61bb      	str	r3, [r7, #24]
}
 800a0ea:	bf00      	nop
 800a0ec:	e7fe      	b.n	800a0ec <xTaskGenericNotifyFromISR+0xfc>
					break;
 800a0ee:	bf00      	nop
 800a0f0:	e000      	b.n	800a0f4 <xTaskGenericNotifyFromISR+0x104>
					break;
 800a0f2:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a0f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a0f8:	2b01      	cmp	r3, #1
 800a0fa:	d146      	bne.n	800a18a <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a100:	2b00      	cmp	r3, #0
 800a102:	d00a      	beq.n	800a11a <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800a104:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a108:	f383 8811 	msr	BASEPRI, r3
 800a10c:	f3bf 8f6f 	isb	sy
 800a110:	f3bf 8f4f 	dsb	sy
 800a114:	617b      	str	r3, [r7, #20]
}
 800a116:	bf00      	nop
 800a118:	e7fe      	b.n	800a118 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a11a:	4b21      	ldr	r3, [pc, #132]	; (800a1a0 <xTaskGenericNotifyFromISR+0x1b0>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d11d      	bne.n	800a15e <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a124:	3304      	adds	r3, #4
 800a126:	4618      	mov	r0, r3
 800a128:	f7fd f8c2 	bl	80072b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a12e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a130:	4b1c      	ldr	r3, [pc, #112]	; (800a1a4 <xTaskGenericNotifyFromISR+0x1b4>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	429a      	cmp	r2, r3
 800a136:	d903      	bls.n	800a140 <xTaskGenericNotifyFromISR+0x150>
 800a138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a13a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a13c:	4a19      	ldr	r2, [pc, #100]	; (800a1a4 <xTaskGenericNotifyFromISR+0x1b4>)
 800a13e:	6013      	str	r3, [r2, #0]
 800a140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a144:	4613      	mov	r3, r2
 800a146:	009b      	lsls	r3, r3, #2
 800a148:	4413      	add	r3, r2
 800a14a:	009b      	lsls	r3, r3, #2
 800a14c:	4a16      	ldr	r2, [pc, #88]	; (800a1a8 <xTaskGenericNotifyFromISR+0x1b8>)
 800a14e:	441a      	add	r2, r3
 800a150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a152:	3304      	adds	r3, #4
 800a154:	4619      	mov	r1, r3
 800a156:	4610      	mov	r0, r2
 800a158:	f7fd f84d 	bl	80071f6 <vListInsertEnd>
 800a15c:	e005      	b.n	800a16a <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800a15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a160:	3318      	adds	r3, #24
 800a162:	4619      	mov	r1, r3
 800a164:	4811      	ldr	r0, [pc, #68]	; (800a1ac <xTaskGenericNotifyFromISR+0x1bc>)
 800a166:	f7fd f846 	bl	80071f6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a16c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a16e:	4b10      	ldr	r3, [pc, #64]	; (800a1b0 <xTaskGenericNotifyFromISR+0x1c0>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a174:	429a      	cmp	r2, r3
 800a176:	d908      	bls.n	800a18a <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800a178:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d002      	beq.n	800a184 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800a17e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a180:	2201      	movs	r2, #1
 800a182:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800a184:	4b0b      	ldr	r3, [pc, #44]	; (800a1b4 <xTaskGenericNotifyFromISR+0x1c4>)
 800a186:	2201      	movs	r2, #1
 800a188:	601a      	str	r2, [r3, #0]
 800a18a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a18c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	f383 8811 	msr	BASEPRI, r3
}
 800a194:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800a196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800a198:	4618      	mov	r0, r3
 800a19a:	3738      	adds	r7, #56	; 0x38
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}
 800a1a0:	200010d8 	.word	0x200010d8
 800a1a4:	200010b8 	.word	0x200010b8
 800a1a8:	20000be0 	.word	0x20000be0
 800a1ac:	20001070 	.word	0x20001070
 800a1b0:	20000bdc 	.word	0x20000bdc
 800a1b4:	200010c4 	.word	0x200010c4

0800a1b8 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b084      	sub	sp, #16
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d102      	bne.n	800a1cc <xTaskNotifyStateClear+0x14>
 800a1c6:	4b0e      	ldr	r3, [pc, #56]	; (800a200 <xTaskNotifyStateClear+0x48>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	e000      	b.n	800a1ce <xTaskNotifyStateClear+0x16>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 800a1d0:	f000 fce8 	bl	800aba4 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800a1da:	b2db      	uxtb	r3, r3
 800a1dc:	2b02      	cmp	r3, #2
 800a1de:	d106      	bne.n	800a1ee <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
				xReturn = pdPASS;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	60fb      	str	r3, [r7, #12]
 800a1ec:	e001      	b.n	800a1f2 <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 800a1f2:	f000 fd07 	bl	800ac04 <vPortExitCritical>

		return xReturn;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
	}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3710      	adds	r7, #16
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}
 800a200:	20000bdc 	.word	0x20000bdc

0800a204 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b084      	sub	sp, #16
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a20e:	4b21      	ldr	r3, [pc, #132]	; (800a294 <prvAddCurrentTaskToDelayedList+0x90>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a214:	4b20      	ldr	r3, [pc, #128]	; (800a298 <prvAddCurrentTaskToDelayedList+0x94>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	3304      	adds	r3, #4
 800a21a:	4618      	mov	r0, r3
 800a21c:	f7fd f848 	bl	80072b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a226:	d10a      	bne.n	800a23e <prvAddCurrentTaskToDelayedList+0x3a>
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d007      	beq.n	800a23e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a22e:	4b1a      	ldr	r3, [pc, #104]	; (800a298 <prvAddCurrentTaskToDelayedList+0x94>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	3304      	adds	r3, #4
 800a234:	4619      	mov	r1, r3
 800a236:	4819      	ldr	r0, [pc, #100]	; (800a29c <prvAddCurrentTaskToDelayedList+0x98>)
 800a238:	f7fc ffdd 	bl	80071f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a23c:	e026      	b.n	800a28c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a23e:	68fa      	ldr	r2, [r7, #12]
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	4413      	add	r3, r2
 800a244:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a246:	4b14      	ldr	r3, [pc, #80]	; (800a298 <prvAddCurrentTaskToDelayedList+0x94>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	68ba      	ldr	r2, [r7, #8]
 800a24c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a24e:	68ba      	ldr	r2, [r7, #8]
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	429a      	cmp	r2, r3
 800a254:	d209      	bcs.n	800a26a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a256:	4b12      	ldr	r3, [pc, #72]	; (800a2a0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a258:	681a      	ldr	r2, [r3, #0]
 800a25a:	4b0f      	ldr	r3, [pc, #60]	; (800a298 <prvAddCurrentTaskToDelayedList+0x94>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	3304      	adds	r3, #4
 800a260:	4619      	mov	r1, r3
 800a262:	4610      	mov	r0, r2
 800a264:	f7fc ffeb 	bl	800723e <vListInsert>
}
 800a268:	e010      	b.n	800a28c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a26a:	4b0e      	ldr	r3, [pc, #56]	; (800a2a4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a26c:	681a      	ldr	r2, [r3, #0]
 800a26e:	4b0a      	ldr	r3, [pc, #40]	; (800a298 <prvAddCurrentTaskToDelayedList+0x94>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	3304      	adds	r3, #4
 800a274:	4619      	mov	r1, r3
 800a276:	4610      	mov	r0, r2
 800a278:	f7fc ffe1 	bl	800723e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a27c:	4b0a      	ldr	r3, [pc, #40]	; (800a2a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	68ba      	ldr	r2, [r7, #8]
 800a282:	429a      	cmp	r2, r3
 800a284:	d202      	bcs.n	800a28c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a286:	4a08      	ldr	r2, [pc, #32]	; (800a2a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	6013      	str	r3, [r2, #0]
}
 800a28c:	bf00      	nop
 800a28e:	3710      	adds	r7, #16
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}
 800a294:	200010b4 	.word	0x200010b4
 800a298:	20000bdc 	.word	0x20000bdc
 800a29c:	2000109c 	.word	0x2000109c
 800a2a0:	2000106c 	.word	0x2000106c
 800a2a4:	20001068 	.word	0x20001068
 800a2a8:	200010d0 	.word	0x200010d0

0800a2ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b08a      	sub	sp, #40	; 0x28
 800a2b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a2b6:	f000 fb07 	bl	800a8c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a2ba:	4b1c      	ldr	r3, [pc, #112]	; (800a32c <xTimerCreateTimerTask+0x80>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d021      	beq.n	800a306 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a2ca:	1d3a      	adds	r2, r7, #4
 800a2cc:	f107 0108 	add.w	r1, r7, #8
 800a2d0:	f107 030c 	add.w	r3, r7, #12
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f7fc ff47 	bl	8007168 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a2da:	6879      	ldr	r1, [r7, #4]
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	68fa      	ldr	r2, [r7, #12]
 800a2e0:	9202      	str	r2, [sp, #8]
 800a2e2:	9301      	str	r3, [sp, #4]
 800a2e4:	2302      	movs	r3, #2
 800a2e6:	9300      	str	r3, [sp, #0]
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	460a      	mov	r2, r1
 800a2ec:	4910      	ldr	r1, [pc, #64]	; (800a330 <xTimerCreateTimerTask+0x84>)
 800a2ee:	4811      	ldr	r0, [pc, #68]	; (800a334 <xTimerCreateTimerTask+0x88>)
 800a2f0:	f7fe fb07 	bl	8008902 <xTaskCreateStatic>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	4a10      	ldr	r2, [pc, #64]	; (800a338 <xTimerCreateTimerTask+0x8c>)
 800a2f8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a2fa:	4b0f      	ldr	r3, [pc, #60]	; (800a338 <xTimerCreateTimerTask+0x8c>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d001      	beq.n	800a306 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a302:	2301      	movs	r3, #1
 800a304:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d10a      	bne.n	800a322 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a310:	f383 8811 	msr	BASEPRI, r3
 800a314:	f3bf 8f6f 	isb	sy
 800a318:	f3bf 8f4f 	dsb	sy
 800a31c:	613b      	str	r3, [r7, #16]
}
 800a31e:	bf00      	nop
 800a320:	e7fe      	b.n	800a320 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a322:	697b      	ldr	r3, [r7, #20]
}
 800a324:	4618      	mov	r0, r3
 800a326:	3718      	adds	r7, #24
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}
 800a32c:	2000110c 	.word	0x2000110c
 800a330:	0800caa0 	.word	0x0800caa0
 800a334:	0800a471 	.word	0x0800a471
 800a338:	20001110 	.word	0x20001110

0800a33c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b08a      	sub	sp, #40	; 0x28
 800a340:	af00      	add	r7, sp, #0
 800a342:	60f8      	str	r0, [r7, #12]
 800a344:	60b9      	str	r1, [r7, #8]
 800a346:	607a      	str	r2, [r7, #4]
 800a348:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a34a:	2300      	movs	r3, #0
 800a34c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d10a      	bne.n	800a36a <xTimerGenericCommand+0x2e>
	__asm volatile
 800a354:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a358:	f383 8811 	msr	BASEPRI, r3
 800a35c:	f3bf 8f6f 	isb	sy
 800a360:	f3bf 8f4f 	dsb	sy
 800a364:	623b      	str	r3, [r7, #32]
}
 800a366:	bf00      	nop
 800a368:	e7fe      	b.n	800a368 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a36a:	4b1a      	ldr	r3, [pc, #104]	; (800a3d4 <xTimerGenericCommand+0x98>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d02a      	beq.n	800a3c8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	2b05      	cmp	r3, #5
 800a382:	dc18      	bgt.n	800a3b6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a384:	f7ff fad0 	bl	8009928 <xTaskGetSchedulerState>
 800a388:	4603      	mov	r3, r0
 800a38a:	2b02      	cmp	r3, #2
 800a38c:	d109      	bne.n	800a3a2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a38e:	4b11      	ldr	r3, [pc, #68]	; (800a3d4 <xTimerGenericCommand+0x98>)
 800a390:	6818      	ldr	r0, [r3, #0]
 800a392:	f107 0110 	add.w	r1, r7, #16
 800a396:	2300      	movs	r3, #0
 800a398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a39a:	f7fd f923 	bl	80075e4 <xQueueGenericSend>
 800a39e:	6278      	str	r0, [r7, #36]	; 0x24
 800a3a0:	e012      	b.n	800a3c8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a3a2:	4b0c      	ldr	r3, [pc, #48]	; (800a3d4 <xTimerGenericCommand+0x98>)
 800a3a4:	6818      	ldr	r0, [r3, #0]
 800a3a6:	f107 0110 	add.w	r1, r7, #16
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	f7fd f919 	bl	80075e4 <xQueueGenericSend>
 800a3b2:	6278      	str	r0, [r7, #36]	; 0x24
 800a3b4:	e008      	b.n	800a3c8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a3b6:	4b07      	ldr	r3, [pc, #28]	; (800a3d4 <xTimerGenericCommand+0x98>)
 800a3b8:	6818      	ldr	r0, [r3, #0]
 800a3ba:	f107 0110 	add.w	r1, r7, #16
 800a3be:	2300      	movs	r3, #0
 800a3c0:	683a      	ldr	r2, [r7, #0]
 800a3c2:	f7fd fa0d 	bl	80077e0 <xQueueGenericSendFromISR>
 800a3c6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3728      	adds	r7, #40	; 0x28
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}
 800a3d2:	bf00      	nop
 800a3d4:	2000110c 	.word	0x2000110c

0800a3d8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b088      	sub	sp, #32
 800a3dc:	af02      	add	r7, sp, #8
 800a3de:	6078      	str	r0, [r7, #4]
 800a3e0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3e2:	4b22      	ldr	r3, [pc, #136]	; (800a46c <prvProcessExpiredTimer+0x94>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	68db      	ldr	r3, [r3, #12]
 800a3e8:	68db      	ldr	r3, [r3, #12]
 800a3ea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	3304      	adds	r3, #4
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f7fc ff5d 	bl	80072b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a3fc:	f003 0304 	and.w	r3, r3, #4
 800a400:	2b00      	cmp	r3, #0
 800a402:	d022      	beq.n	800a44a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	699a      	ldr	r2, [r3, #24]
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	18d1      	adds	r1, r2, r3
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	683a      	ldr	r2, [r7, #0]
 800a410:	6978      	ldr	r0, [r7, #20]
 800a412:	f000 f8d1 	bl	800a5b8 <prvInsertTimerInActiveList>
 800a416:	4603      	mov	r3, r0
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d01f      	beq.n	800a45c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a41c:	2300      	movs	r3, #0
 800a41e:	9300      	str	r3, [sp, #0]
 800a420:	2300      	movs	r3, #0
 800a422:	687a      	ldr	r2, [r7, #4]
 800a424:	2100      	movs	r1, #0
 800a426:	6978      	ldr	r0, [r7, #20]
 800a428:	f7ff ff88 	bl	800a33c <xTimerGenericCommand>
 800a42c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d113      	bne.n	800a45c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a434:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a438:	f383 8811 	msr	BASEPRI, r3
 800a43c:	f3bf 8f6f 	isb	sy
 800a440:	f3bf 8f4f 	dsb	sy
 800a444:	60fb      	str	r3, [r7, #12]
}
 800a446:	bf00      	nop
 800a448:	e7fe      	b.n	800a448 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a44a:	697b      	ldr	r3, [r7, #20]
 800a44c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a450:	f023 0301 	bic.w	r3, r3, #1
 800a454:	b2da      	uxtb	r2, r3
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	6a1b      	ldr	r3, [r3, #32]
 800a460:	6978      	ldr	r0, [r7, #20]
 800a462:	4798      	blx	r3
}
 800a464:	bf00      	nop
 800a466:	3718      	adds	r7, #24
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}
 800a46c:	20001104 	.word	0x20001104

0800a470 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b084      	sub	sp, #16
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a478:	f107 0308 	add.w	r3, r7, #8
 800a47c:	4618      	mov	r0, r3
 800a47e:	f000 f857 	bl	800a530 <prvGetNextExpireTime>
 800a482:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	4619      	mov	r1, r3
 800a488:	68f8      	ldr	r0, [r7, #12]
 800a48a:	f000 f803 	bl	800a494 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a48e:	f000 f8d5 	bl	800a63c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a492:	e7f1      	b.n	800a478 <prvTimerTask+0x8>

0800a494 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b084      	sub	sp, #16
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
 800a49c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a49e:	f7fe fcbf 	bl	8008e20 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a4a2:	f107 0308 	add.w	r3, r7, #8
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f000 f866 	bl	800a578 <prvSampleTimeNow>
 800a4ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d130      	bne.n	800a516 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d10a      	bne.n	800a4d0 <prvProcessTimerOrBlockTask+0x3c>
 800a4ba:	687a      	ldr	r2, [r7, #4]
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	429a      	cmp	r2, r3
 800a4c0:	d806      	bhi.n	800a4d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a4c2:	f7fe fcbb 	bl	8008e3c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a4c6:	68f9      	ldr	r1, [r7, #12]
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f7ff ff85 	bl	800a3d8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a4ce:	e024      	b.n	800a51a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d008      	beq.n	800a4e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a4d6:	4b13      	ldr	r3, [pc, #76]	; (800a524 <prvProcessTimerOrBlockTask+0x90>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d101      	bne.n	800a4e4 <prvProcessTimerOrBlockTask+0x50>
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	e000      	b.n	800a4e6 <prvProcessTimerOrBlockTask+0x52>
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a4e8:	4b0f      	ldr	r3, [pc, #60]	; (800a528 <prvProcessTimerOrBlockTask+0x94>)
 800a4ea:	6818      	ldr	r0, [r3, #0]
 800a4ec:	687a      	ldr	r2, [r7, #4]
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	1ad3      	subs	r3, r2, r3
 800a4f2:	683a      	ldr	r2, [r7, #0]
 800a4f4:	4619      	mov	r1, r3
 800a4f6:	f7fd fdd9 	bl	80080ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a4fa:	f7fe fc9f 	bl	8008e3c <xTaskResumeAll>
 800a4fe:	4603      	mov	r3, r0
 800a500:	2b00      	cmp	r3, #0
 800a502:	d10a      	bne.n	800a51a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a504:	4b09      	ldr	r3, [pc, #36]	; (800a52c <prvProcessTimerOrBlockTask+0x98>)
 800a506:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a50a:	601a      	str	r2, [r3, #0]
 800a50c:	f3bf 8f4f 	dsb	sy
 800a510:	f3bf 8f6f 	isb	sy
}
 800a514:	e001      	b.n	800a51a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a516:	f7fe fc91 	bl	8008e3c <xTaskResumeAll>
}
 800a51a:	bf00      	nop
 800a51c:	3710      	adds	r7, #16
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}
 800a522:	bf00      	nop
 800a524:	20001108 	.word	0x20001108
 800a528:	2000110c 	.word	0x2000110c
 800a52c:	e000ed04 	.word	0xe000ed04

0800a530 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a530:	b480      	push	{r7}
 800a532:	b085      	sub	sp, #20
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a538:	4b0e      	ldr	r3, [pc, #56]	; (800a574 <prvGetNextExpireTime+0x44>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d101      	bne.n	800a546 <prvGetNextExpireTime+0x16>
 800a542:	2201      	movs	r2, #1
 800a544:	e000      	b.n	800a548 <prvGetNextExpireTime+0x18>
 800a546:	2200      	movs	r2, #0
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d105      	bne.n	800a560 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a554:	4b07      	ldr	r3, [pc, #28]	; (800a574 <prvGetNextExpireTime+0x44>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	68db      	ldr	r3, [r3, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	60fb      	str	r3, [r7, #12]
 800a55e:	e001      	b.n	800a564 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a560:	2300      	movs	r3, #0
 800a562:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a564:	68fb      	ldr	r3, [r7, #12]
}
 800a566:	4618      	mov	r0, r3
 800a568:	3714      	adds	r7, #20
 800a56a:	46bd      	mov	sp, r7
 800a56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a570:	4770      	bx	lr
 800a572:	bf00      	nop
 800a574:	20001104 	.word	0x20001104

0800a578 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b084      	sub	sp, #16
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a580:	f7fe fcfa 	bl	8008f78 <xTaskGetTickCount>
 800a584:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a586:	4b0b      	ldr	r3, [pc, #44]	; (800a5b4 <prvSampleTimeNow+0x3c>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	68fa      	ldr	r2, [r7, #12]
 800a58c:	429a      	cmp	r2, r3
 800a58e:	d205      	bcs.n	800a59c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a590:	f000 f936 	bl	800a800 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2201      	movs	r2, #1
 800a598:	601a      	str	r2, [r3, #0]
 800a59a:	e002      	b.n	800a5a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a5a2:	4a04      	ldr	r2, [pc, #16]	; (800a5b4 <prvSampleTimeNow+0x3c>)
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3710      	adds	r7, #16
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}
 800a5b2:	bf00      	nop
 800a5b4:	20001114 	.word	0x20001114

0800a5b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b086      	sub	sp, #24
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	60f8      	str	r0, [r7, #12]
 800a5c0:	60b9      	str	r1, [r7, #8]
 800a5c2:	607a      	str	r2, [r7, #4]
 800a5c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	68ba      	ldr	r2, [r7, #8]
 800a5ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	68fa      	ldr	r2, [r7, #12]
 800a5d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a5d6:	68ba      	ldr	r2, [r7, #8]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	429a      	cmp	r2, r3
 800a5dc:	d812      	bhi.n	800a604 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5de:	687a      	ldr	r2, [r7, #4]
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	1ad2      	subs	r2, r2, r3
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	699b      	ldr	r3, [r3, #24]
 800a5e8:	429a      	cmp	r2, r3
 800a5ea:	d302      	bcc.n	800a5f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	617b      	str	r3, [r7, #20]
 800a5f0:	e01b      	b.n	800a62a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a5f2:	4b10      	ldr	r3, [pc, #64]	; (800a634 <prvInsertTimerInActiveList+0x7c>)
 800a5f4:	681a      	ldr	r2, [r3, #0]
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	3304      	adds	r3, #4
 800a5fa:	4619      	mov	r1, r3
 800a5fc:	4610      	mov	r0, r2
 800a5fe:	f7fc fe1e 	bl	800723e <vListInsert>
 800a602:	e012      	b.n	800a62a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a604:	687a      	ldr	r2, [r7, #4]
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	429a      	cmp	r2, r3
 800a60a:	d206      	bcs.n	800a61a <prvInsertTimerInActiveList+0x62>
 800a60c:	68ba      	ldr	r2, [r7, #8]
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	429a      	cmp	r2, r3
 800a612:	d302      	bcc.n	800a61a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a614:	2301      	movs	r3, #1
 800a616:	617b      	str	r3, [r7, #20]
 800a618:	e007      	b.n	800a62a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a61a:	4b07      	ldr	r3, [pc, #28]	; (800a638 <prvInsertTimerInActiveList+0x80>)
 800a61c:	681a      	ldr	r2, [r3, #0]
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	3304      	adds	r3, #4
 800a622:	4619      	mov	r1, r3
 800a624:	4610      	mov	r0, r2
 800a626:	f7fc fe0a 	bl	800723e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a62a:	697b      	ldr	r3, [r7, #20]
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3718      	adds	r7, #24
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}
 800a634:	20001108 	.word	0x20001108
 800a638:	20001104 	.word	0x20001104

0800a63c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b08e      	sub	sp, #56	; 0x38
 800a640:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a642:	e0ca      	b.n	800a7da <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2b00      	cmp	r3, #0
 800a648:	da18      	bge.n	800a67c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a64a:	1d3b      	adds	r3, r7, #4
 800a64c:	3304      	adds	r3, #4
 800a64e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a652:	2b00      	cmp	r3, #0
 800a654:	d10a      	bne.n	800a66c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a65a:	f383 8811 	msr	BASEPRI, r3
 800a65e:	f3bf 8f6f 	isb	sy
 800a662:	f3bf 8f4f 	dsb	sy
 800a666:	61fb      	str	r3, [r7, #28]
}
 800a668:	bf00      	nop
 800a66a:	e7fe      	b.n	800a66a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a672:	6850      	ldr	r0, [r2, #4]
 800a674:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a676:	6892      	ldr	r2, [r2, #8]
 800a678:	4611      	mov	r1, r2
 800a67a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	f2c0 80aa 	blt.w	800a7d8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a68a:	695b      	ldr	r3, [r3, #20]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d004      	beq.n	800a69a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a692:	3304      	adds	r3, #4
 800a694:	4618      	mov	r0, r3
 800a696:	f7fc fe0b 	bl	80072b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a69a:	463b      	mov	r3, r7
 800a69c:	4618      	mov	r0, r3
 800a69e:	f7ff ff6b 	bl	800a578 <prvSampleTimeNow>
 800a6a2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2b09      	cmp	r3, #9
 800a6a8:	f200 8097 	bhi.w	800a7da <prvProcessReceivedCommands+0x19e>
 800a6ac:	a201      	add	r2, pc, #4	; (adr r2, 800a6b4 <prvProcessReceivedCommands+0x78>)
 800a6ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6b2:	bf00      	nop
 800a6b4:	0800a6dd 	.word	0x0800a6dd
 800a6b8:	0800a6dd 	.word	0x0800a6dd
 800a6bc:	0800a6dd 	.word	0x0800a6dd
 800a6c0:	0800a751 	.word	0x0800a751
 800a6c4:	0800a765 	.word	0x0800a765
 800a6c8:	0800a7af 	.word	0x0800a7af
 800a6cc:	0800a6dd 	.word	0x0800a6dd
 800a6d0:	0800a6dd 	.word	0x0800a6dd
 800a6d4:	0800a751 	.word	0x0800a751
 800a6d8:	0800a765 	.word	0x0800a765
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6e2:	f043 0301 	orr.w	r3, r3, #1
 800a6e6:	b2da      	uxtb	r2, r3
 800a6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a6ee:	68ba      	ldr	r2, [r7, #8]
 800a6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f2:	699b      	ldr	r3, [r3, #24]
 800a6f4:	18d1      	adds	r1, r2, r3
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6fc:	f7ff ff5c 	bl	800a5b8 <prvInsertTimerInActiveList>
 800a700:	4603      	mov	r3, r0
 800a702:	2b00      	cmp	r3, #0
 800a704:	d069      	beq.n	800a7da <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a708:	6a1b      	ldr	r3, [r3, #32]
 800a70a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a70c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a710:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a714:	f003 0304 	and.w	r3, r3, #4
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d05e      	beq.n	800a7da <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a71c:	68ba      	ldr	r2, [r7, #8]
 800a71e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a720:	699b      	ldr	r3, [r3, #24]
 800a722:	441a      	add	r2, r3
 800a724:	2300      	movs	r3, #0
 800a726:	9300      	str	r3, [sp, #0]
 800a728:	2300      	movs	r3, #0
 800a72a:	2100      	movs	r1, #0
 800a72c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a72e:	f7ff fe05 	bl	800a33c <xTimerGenericCommand>
 800a732:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a734:	6a3b      	ldr	r3, [r7, #32]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d14f      	bne.n	800a7da <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a73e:	f383 8811 	msr	BASEPRI, r3
 800a742:	f3bf 8f6f 	isb	sy
 800a746:	f3bf 8f4f 	dsb	sy
 800a74a:	61bb      	str	r3, [r7, #24]
}
 800a74c:	bf00      	nop
 800a74e:	e7fe      	b.n	800a74e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a752:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a756:	f023 0301 	bic.w	r3, r3, #1
 800a75a:	b2da      	uxtb	r2, r3
 800a75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a75e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a762:	e03a      	b.n	800a7da <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a766:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a76a:	f043 0301 	orr.w	r3, r3, #1
 800a76e:	b2da      	uxtb	r2, r3
 800a770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a772:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a776:	68ba      	ldr	r2, [r7, #8]
 800a778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a77a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a77c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a77e:	699b      	ldr	r3, [r3, #24]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d10a      	bne.n	800a79a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a784:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a788:	f383 8811 	msr	BASEPRI, r3
 800a78c:	f3bf 8f6f 	isb	sy
 800a790:	f3bf 8f4f 	dsb	sy
 800a794:	617b      	str	r3, [r7, #20]
}
 800a796:	bf00      	nop
 800a798:	e7fe      	b.n	800a798 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a79a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a79c:	699a      	ldr	r2, [r3, #24]
 800a79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a0:	18d1      	adds	r1, r2, r3
 800a7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7a8:	f7ff ff06 	bl	800a5b8 <prvInsertTimerInActiveList>
					break;
 800a7ac:	e015      	b.n	800a7da <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7b4:	f003 0302 	and.w	r3, r3, #2
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d103      	bne.n	800a7c4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a7bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7be:	f000 fbdf 	bl	800af80 <vPortFree>
 800a7c2:	e00a      	b.n	800a7da <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7ca:	f023 0301 	bic.w	r3, r3, #1
 800a7ce:	b2da      	uxtb	r2, r3
 800a7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a7d6:	e000      	b.n	800a7da <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a7d8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a7da:	4b08      	ldr	r3, [pc, #32]	; (800a7fc <prvProcessReceivedCommands+0x1c0>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	1d39      	adds	r1, r7, #4
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f7fd f924 	bl	8007a30 <xQueueReceive>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	f47f af2a 	bne.w	800a644 <prvProcessReceivedCommands+0x8>
	}
}
 800a7f0:	bf00      	nop
 800a7f2:	bf00      	nop
 800a7f4:	3730      	adds	r7, #48	; 0x30
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}
 800a7fa:	bf00      	nop
 800a7fc:	2000110c 	.word	0x2000110c

0800a800 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b088      	sub	sp, #32
 800a804:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a806:	e048      	b.n	800a89a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a808:	4b2d      	ldr	r3, [pc, #180]	; (800a8c0 <prvSwitchTimerLists+0xc0>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	68db      	ldr	r3, [r3, #12]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a812:	4b2b      	ldr	r3, [pc, #172]	; (800a8c0 <prvSwitchTimerLists+0xc0>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	68db      	ldr	r3, [r3, #12]
 800a818:	68db      	ldr	r3, [r3, #12]
 800a81a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	3304      	adds	r3, #4
 800a820:	4618      	mov	r0, r3
 800a822:	f7fc fd45 	bl	80072b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	6a1b      	ldr	r3, [r3, #32]
 800a82a:	68f8      	ldr	r0, [r7, #12]
 800a82c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a834:	f003 0304 	and.w	r3, r3, #4
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d02e      	beq.n	800a89a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	699b      	ldr	r3, [r3, #24]
 800a840:	693a      	ldr	r2, [r7, #16]
 800a842:	4413      	add	r3, r2
 800a844:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a846:	68ba      	ldr	r2, [r7, #8]
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	429a      	cmp	r2, r3
 800a84c:	d90e      	bls.n	800a86c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	68ba      	ldr	r2, [r7, #8]
 800a852:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	68fa      	ldr	r2, [r7, #12]
 800a858:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a85a:	4b19      	ldr	r3, [pc, #100]	; (800a8c0 <prvSwitchTimerLists+0xc0>)
 800a85c:	681a      	ldr	r2, [r3, #0]
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	3304      	adds	r3, #4
 800a862:	4619      	mov	r1, r3
 800a864:	4610      	mov	r0, r2
 800a866:	f7fc fcea 	bl	800723e <vListInsert>
 800a86a:	e016      	b.n	800a89a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a86c:	2300      	movs	r3, #0
 800a86e:	9300      	str	r3, [sp, #0]
 800a870:	2300      	movs	r3, #0
 800a872:	693a      	ldr	r2, [r7, #16]
 800a874:	2100      	movs	r1, #0
 800a876:	68f8      	ldr	r0, [r7, #12]
 800a878:	f7ff fd60 	bl	800a33c <xTimerGenericCommand>
 800a87c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d10a      	bne.n	800a89a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a884:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a888:	f383 8811 	msr	BASEPRI, r3
 800a88c:	f3bf 8f6f 	isb	sy
 800a890:	f3bf 8f4f 	dsb	sy
 800a894:	603b      	str	r3, [r7, #0]
}
 800a896:	bf00      	nop
 800a898:	e7fe      	b.n	800a898 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a89a:	4b09      	ldr	r3, [pc, #36]	; (800a8c0 <prvSwitchTimerLists+0xc0>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d1b1      	bne.n	800a808 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a8a4:	4b06      	ldr	r3, [pc, #24]	; (800a8c0 <prvSwitchTimerLists+0xc0>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a8aa:	4b06      	ldr	r3, [pc, #24]	; (800a8c4 <prvSwitchTimerLists+0xc4>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	4a04      	ldr	r2, [pc, #16]	; (800a8c0 <prvSwitchTimerLists+0xc0>)
 800a8b0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a8b2:	4a04      	ldr	r2, [pc, #16]	; (800a8c4 <prvSwitchTimerLists+0xc4>)
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	6013      	str	r3, [r2, #0]
}
 800a8b8:	bf00      	nop
 800a8ba:	3718      	adds	r7, #24
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}
 800a8c0:	20001104 	.word	0x20001104
 800a8c4:	20001108 	.word	0x20001108

0800a8c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b082      	sub	sp, #8
 800a8cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a8ce:	f000 f969 	bl	800aba4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a8d2:	4b15      	ldr	r3, [pc, #84]	; (800a928 <prvCheckForValidListAndQueue+0x60>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d120      	bne.n	800a91c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a8da:	4814      	ldr	r0, [pc, #80]	; (800a92c <prvCheckForValidListAndQueue+0x64>)
 800a8dc:	f7fc fc5e 	bl	800719c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a8e0:	4813      	ldr	r0, [pc, #76]	; (800a930 <prvCheckForValidListAndQueue+0x68>)
 800a8e2:	f7fc fc5b 	bl	800719c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a8e6:	4b13      	ldr	r3, [pc, #76]	; (800a934 <prvCheckForValidListAndQueue+0x6c>)
 800a8e8:	4a10      	ldr	r2, [pc, #64]	; (800a92c <prvCheckForValidListAndQueue+0x64>)
 800a8ea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a8ec:	4b12      	ldr	r3, [pc, #72]	; (800a938 <prvCheckForValidListAndQueue+0x70>)
 800a8ee:	4a10      	ldr	r2, [pc, #64]	; (800a930 <prvCheckForValidListAndQueue+0x68>)
 800a8f0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	9300      	str	r3, [sp, #0]
 800a8f6:	4b11      	ldr	r3, [pc, #68]	; (800a93c <prvCheckForValidListAndQueue+0x74>)
 800a8f8:	4a11      	ldr	r2, [pc, #68]	; (800a940 <prvCheckForValidListAndQueue+0x78>)
 800a8fa:	2110      	movs	r1, #16
 800a8fc:	200a      	movs	r0, #10
 800a8fe:	f7fc fd69 	bl	80073d4 <xQueueGenericCreateStatic>
 800a902:	4603      	mov	r3, r0
 800a904:	4a08      	ldr	r2, [pc, #32]	; (800a928 <prvCheckForValidListAndQueue+0x60>)
 800a906:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a908:	4b07      	ldr	r3, [pc, #28]	; (800a928 <prvCheckForValidListAndQueue+0x60>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d005      	beq.n	800a91c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a910:	4b05      	ldr	r3, [pc, #20]	; (800a928 <prvCheckForValidListAndQueue+0x60>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	490b      	ldr	r1, [pc, #44]	; (800a944 <prvCheckForValidListAndQueue+0x7c>)
 800a916:	4618      	mov	r0, r3
 800a918:	f7fd fb9e 	bl	8008058 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a91c:	f000 f972 	bl	800ac04 <vPortExitCritical>
}
 800a920:	bf00      	nop
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}
 800a926:	bf00      	nop
 800a928:	2000110c 	.word	0x2000110c
 800a92c:	200010dc 	.word	0x200010dc
 800a930:	200010f0 	.word	0x200010f0
 800a934:	20001104 	.word	0x20001104
 800a938:	20001108 	.word	0x20001108
 800a93c:	200011b8 	.word	0x200011b8
 800a940:	20001118 	.word	0x20001118
 800a944:	0800caa8 	.word	0x0800caa8

0800a948 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a948:	b480      	push	{r7}
 800a94a:	b085      	sub	sp, #20
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	60f8      	str	r0, [r7, #12]
 800a950:	60b9      	str	r1, [r7, #8]
 800a952:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	3b04      	subs	r3, #4
 800a958:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a960:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	3b04      	subs	r3, #4
 800a966:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	f023 0201 	bic.w	r2, r3, #1
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	3b04      	subs	r3, #4
 800a976:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a978:	4a0c      	ldr	r2, [pc, #48]	; (800a9ac <pxPortInitialiseStack+0x64>)
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	3b14      	subs	r3, #20
 800a982:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a984:	687a      	ldr	r2, [r7, #4]
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	3b04      	subs	r3, #4
 800a98e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	f06f 0202 	mvn.w	r2, #2
 800a996:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	3b20      	subs	r3, #32
 800a99c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a99e:	68fb      	ldr	r3, [r7, #12]
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3714      	adds	r7, #20
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr
 800a9ac:	0800a9b1 	.word	0x0800a9b1

0800a9b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b085      	sub	sp, #20
 800a9b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a9ba:	4b12      	ldr	r3, [pc, #72]	; (800aa04 <prvTaskExitError+0x54>)
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9c2:	d00a      	beq.n	800a9da <prvTaskExitError+0x2a>
	__asm volatile
 800a9c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c8:	f383 8811 	msr	BASEPRI, r3
 800a9cc:	f3bf 8f6f 	isb	sy
 800a9d0:	f3bf 8f4f 	dsb	sy
 800a9d4:	60fb      	str	r3, [r7, #12]
}
 800a9d6:	bf00      	nop
 800a9d8:	e7fe      	b.n	800a9d8 <prvTaskExitError+0x28>
	__asm volatile
 800a9da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9de:	f383 8811 	msr	BASEPRI, r3
 800a9e2:	f3bf 8f6f 	isb	sy
 800a9e6:	f3bf 8f4f 	dsb	sy
 800a9ea:	60bb      	str	r3, [r7, #8]
}
 800a9ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a9ee:	bf00      	nop
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d0fc      	beq.n	800a9f0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a9f6:	bf00      	nop
 800a9f8:	bf00      	nop
 800a9fa:	3714      	adds	r7, #20
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa02:	4770      	bx	lr
 800aa04:	200000a4 	.word	0x200000a4
	...

0800aa10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800aa10:	4b07      	ldr	r3, [pc, #28]	; (800aa30 <pxCurrentTCBConst2>)
 800aa12:	6819      	ldr	r1, [r3, #0]
 800aa14:	6808      	ldr	r0, [r1, #0]
 800aa16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa1a:	f380 8809 	msr	PSP, r0
 800aa1e:	f3bf 8f6f 	isb	sy
 800aa22:	f04f 0000 	mov.w	r0, #0
 800aa26:	f380 8811 	msr	BASEPRI, r0
 800aa2a:	4770      	bx	lr
 800aa2c:	f3af 8000 	nop.w

0800aa30 <pxCurrentTCBConst2>:
 800aa30:	20000bdc 	.word	0x20000bdc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800aa34:	bf00      	nop
 800aa36:	bf00      	nop

0800aa38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800aa38:	4808      	ldr	r0, [pc, #32]	; (800aa5c <prvPortStartFirstTask+0x24>)
 800aa3a:	6800      	ldr	r0, [r0, #0]
 800aa3c:	6800      	ldr	r0, [r0, #0]
 800aa3e:	f380 8808 	msr	MSP, r0
 800aa42:	f04f 0000 	mov.w	r0, #0
 800aa46:	f380 8814 	msr	CONTROL, r0
 800aa4a:	b662      	cpsie	i
 800aa4c:	b661      	cpsie	f
 800aa4e:	f3bf 8f4f 	dsb	sy
 800aa52:	f3bf 8f6f 	isb	sy
 800aa56:	df00      	svc	0
 800aa58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800aa5a:	bf00      	nop
 800aa5c:	e000ed08 	.word	0xe000ed08

0800aa60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b086      	sub	sp, #24
 800aa64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800aa66:	4b46      	ldr	r3, [pc, #280]	; (800ab80 <xPortStartScheduler+0x120>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	4a46      	ldr	r2, [pc, #280]	; (800ab84 <xPortStartScheduler+0x124>)
 800aa6c:	4293      	cmp	r3, r2
 800aa6e:	d10a      	bne.n	800aa86 <xPortStartScheduler+0x26>
	__asm volatile
 800aa70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa74:	f383 8811 	msr	BASEPRI, r3
 800aa78:	f3bf 8f6f 	isb	sy
 800aa7c:	f3bf 8f4f 	dsb	sy
 800aa80:	613b      	str	r3, [r7, #16]
}
 800aa82:	bf00      	nop
 800aa84:	e7fe      	b.n	800aa84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800aa86:	4b3e      	ldr	r3, [pc, #248]	; (800ab80 <xPortStartScheduler+0x120>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	4a3f      	ldr	r2, [pc, #252]	; (800ab88 <xPortStartScheduler+0x128>)
 800aa8c:	4293      	cmp	r3, r2
 800aa8e:	d10a      	bne.n	800aaa6 <xPortStartScheduler+0x46>
	__asm volatile
 800aa90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa94:	f383 8811 	msr	BASEPRI, r3
 800aa98:	f3bf 8f6f 	isb	sy
 800aa9c:	f3bf 8f4f 	dsb	sy
 800aaa0:	60fb      	str	r3, [r7, #12]
}
 800aaa2:	bf00      	nop
 800aaa4:	e7fe      	b.n	800aaa4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800aaa6:	4b39      	ldr	r3, [pc, #228]	; (800ab8c <xPortStartScheduler+0x12c>)
 800aaa8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	781b      	ldrb	r3, [r3, #0]
 800aaae:	b2db      	uxtb	r3, r3
 800aab0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aab2:	697b      	ldr	r3, [r7, #20]
 800aab4:	22ff      	movs	r2, #255	; 0xff
 800aab6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aab8:	697b      	ldr	r3, [r7, #20]
 800aaba:	781b      	ldrb	r3, [r3, #0]
 800aabc:	b2db      	uxtb	r3, r3
 800aabe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800aac0:	78fb      	ldrb	r3, [r7, #3]
 800aac2:	b2db      	uxtb	r3, r3
 800aac4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800aac8:	b2da      	uxtb	r2, r3
 800aaca:	4b31      	ldr	r3, [pc, #196]	; (800ab90 <xPortStartScheduler+0x130>)
 800aacc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800aace:	4b31      	ldr	r3, [pc, #196]	; (800ab94 <xPortStartScheduler+0x134>)
 800aad0:	2207      	movs	r2, #7
 800aad2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aad4:	e009      	b.n	800aaea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800aad6:	4b2f      	ldr	r3, [pc, #188]	; (800ab94 <xPortStartScheduler+0x134>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	3b01      	subs	r3, #1
 800aadc:	4a2d      	ldr	r2, [pc, #180]	; (800ab94 <xPortStartScheduler+0x134>)
 800aade:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800aae0:	78fb      	ldrb	r3, [r7, #3]
 800aae2:	b2db      	uxtb	r3, r3
 800aae4:	005b      	lsls	r3, r3, #1
 800aae6:	b2db      	uxtb	r3, r3
 800aae8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aaea:	78fb      	ldrb	r3, [r7, #3]
 800aaec:	b2db      	uxtb	r3, r3
 800aaee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aaf2:	2b80      	cmp	r3, #128	; 0x80
 800aaf4:	d0ef      	beq.n	800aad6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800aaf6:	4b27      	ldr	r3, [pc, #156]	; (800ab94 <xPortStartScheduler+0x134>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f1c3 0307 	rsb	r3, r3, #7
 800aafe:	2b04      	cmp	r3, #4
 800ab00:	d00a      	beq.n	800ab18 <xPortStartScheduler+0xb8>
	__asm volatile
 800ab02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab06:	f383 8811 	msr	BASEPRI, r3
 800ab0a:	f3bf 8f6f 	isb	sy
 800ab0e:	f3bf 8f4f 	dsb	sy
 800ab12:	60bb      	str	r3, [r7, #8]
}
 800ab14:	bf00      	nop
 800ab16:	e7fe      	b.n	800ab16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ab18:	4b1e      	ldr	r3, [pc, #120]	; (800ab94 <xPortStartScheduler+0x134>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	021b      	lsls	r3, r3, #8
 800ab1e:	4a1d      	ldr	r2, [pc, #116]	; (800ab94 <xPortStartScheduler+0x134>)
 800ab20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ab22:	4b1c      	ldr	r3, [pc, #112]	; (800ab94 <xPortStartScheduler+0x134>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ab2a:	4a1a      	ldr	r2, [pc, #104]	; (800ab94 <xPortStartScheduler+0x134>)
 800ab2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	b2da      	uxtb	r2, r3
 800ab32:	697b      	ldr	r3, [r7, #20]
 800ab34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ab36:	4b18      	ldr	r3, [pc, #96]	; (800ab98 <xPortStartScheduler+0x138>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	4a17      	ldr	r2, [pc, #92]	; (800ab98 <xPortStartScheduler+0x138>)
 800ab3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ab40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ab42:	4b15      	ldr	r3, [pc, #84]	; (800ab98 <xPortStartScheduler+0x138>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	4a14      	ldr	r2, [pc, #80]	; (800ab98 <xPortStartScheduler+0x138>)
 800ab48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ab4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ab4e:	f000 f8dd 	bl	800ad0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ab52:	4b12      	ldr	r3, [pc, #72]	; (800ab9c <xPortStartScheduler+0x13c>)
 800ab54:	2200      	movs	r2, #0
 800ab56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ab58:	f000 f8fc 	bl	800ad54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ab5c:	4b10      	ldr	r3, [pc, #64]	; (800aba0 <xPortStartScheduler+0x140>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	4a0f      	ldr	r2, [pc, #60]	; (800aba0 <xPortStartScheduler+0x140>)
 800ab62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ab66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ab68:	f7ff ff66 	bl	800aa38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ab6c:	f7fe fb5c 	bl	8009228 <vTaskSwitchContext>
	prvTaskExitError();
 800ab70:	f7ff ff1e 	bl	800a9b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ab74:	2300      	movs	r3, #0
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	3718      	adds	r7, #24
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}
 800ab7e:	bf00      	nop
 800ab80:	e000ed00 	.word	0xe000ed00
 800ab84:	410fc271 	.word	0x410fc271
 800ab88:	410fc270 	.word	0x410fc270
 800ab8c:	e000e400 	.word	0xe000e400
 800ab90:	20001208 	.word	0x20001208
 800ab94:	2000120c 	.word	0x2000120c
 800ab98:	e000ed20 	.word	0xe000ed20
 800ab9c:	200000a4 	.word	0x200000a4
 800aba0:	e000ef34 	.word	0xe000ef34

0800aba4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aba4:	b480      	push	{r7}
 800aba6:	b083      	sub	sp, #12
 800aba8:	af00      	add	r7, sp, #0
	__asm volatile
 800abaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abae:	f383 8811 	msr	BASEPRI, r3
 800abb2:	f3bf 8f6f 	isb	sy
 800abb6:	f3bf 8f4f 	dsb	sy
 800abba:	607b      	str	r3, [r7, #4]
}
 800abbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800abbe:	4b0f      	ldr	r3, [pc, #60]	; (800abfc <vPortEnterCritical+0x58>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	3301      	adds	r3, #1
 800abc4:	4a0d      	ldr	r2, [pc, #52]	; (800abfc <vPortEnterCritical+0x58>)
 800abc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800abc8:	4b0c      	ldr	r3, [pc, #48]	; (800abfc <vPortEnterCritical+0x58>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	2b01      	cmp	r3, #1
 800abce:	d10f      	bne.n	800abf0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800abd0:	4b0b      	ldr	r3, [pc, #44]	; (800ac00 <vPortEnterCritical+0x5c>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	b2db      	uxtb	r3, r3
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d00a      	beq.n	800abf0 <vPortEnterCritical+0x4c>
	__asm volatile
 800abda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abde:	f383 8811 	msr	BASEPRI, r3
 800abe2:	f3bf 8f6f 	isb	sy
 800abe6:	f3bf 8f4f 	dsb	sy
 800abea:	603b      	str	r3, [r7, #0]
}
 800abec:	bf00      	nop
 800abee:	e7fe      	b.n	800abee <vPortEnterCritical+0x4a>
	}
}
 800abf0:	bf00      	nop
 800abf2:	370c      	adds	r7, #12
 800abf4:	46bd      	mov	sp, r7
 800abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfa:	4770      	bx	lr
 800abfc:	200000a4 	.word	0x200000a4
 800ac00:	e000ed04 	.word	0xe000ed04

0800ac04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ac04:	b480      	push	{r7}
 800ac06:	b083      	sub	sp, #12
 800ac08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ac0a:	4b12      	ldr	r3, [pc, #72]	; (800ac54 <vPortExitCritical+0x50>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d10a      	bne.n	800ac28 <vPortExitCritical+0x24>
	__asm volatile
 800ac12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac16:	f383 8811 	msr	BASEPRI, r3
 800ac1a:	f3bf 8f6f 	isb	sy
 800ac1e:	f3bf 8f4f 	dsb	sy
 800ac22:	607b      	str	r3, [r7, #4]
}
 800ac24:	bf00      	nop
 800ac26:	e7fe      	b.n	800ac26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ac28:	4b0a      	ldr	r3, [pc, #40]	; (800ac54 <vPortExitCritical+0x50>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	3b01      	subs	r3, #1
 800ac2e:	4a09      	ldr	r2, [pc, #36]	; (800ac54 <vPortExitCritical+0x50>)
 800ac30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ac32:	4b08      	ldr	r3, [pc, #32]	; (800ac54 <vPortExitCritical+0x50>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d105      	bne.n	800ac46 <vPortExitCritical+0x42>
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	f383 8811 	msr	BASEPRI, r3
}
 800ac44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ac46:	bf00      	nop
 800ac48:	370c      	adds	r7, #12
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac50:	4770      	bx	lr
 800ac52:	bf00      	nop
 800ac54:	200000a4 	.word	0x200000a4
	...

0800ac60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ac60:	f3ef 8009 	mrs	r0, PSP
 800ac64:	f3bf 8f6f 	isb	sy
 800ac68:	4b15      	ldr	r3, [pc, #84]	; (800acc0 <pxCurrentTCBConst>)
 800ac6a:	681a      	ldr	r2, [r3, #0]
 800ac6c:	f01e 0f10 	tst.w	lr, #16
 800ac70:	bf08      	it	eq
 800ac72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ac76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac7a:	6010      	str	r0, [r2, #0]
 800ac7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ac80:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ac84:	f380 8811 	msr	BASEPRI, r0
 800ac88:	f3bf 8f4f 	dsb	sy
 800ac8c:	f3bf 8f6f 	isb	sy
 800ac90:	f7fe faca 	bl	8009228 <vTaskSwitchContext>
 800ac94:	f04f 0000 	mov.w	r0, #0
 800ac98:	f380 8811 	msr	BASEPRI, r0
 800ac9c:	bc09      	pop	{r0, r3}
 800ac9e:	6819      	ldr	r1, [r3, #0]
 800aca0:	6808      	ldr	r0, [r1, #0]
 800aca2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aca6:	f01e 0f10 	tst.w	lr, #16
 800acaa:	bf08      	it	eq
 800acac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800acb0:	f380 8809 	msr	PSP, r0
 800acb4:	f3bf 8f6f 	isb	sy
 800acb8:	4770      	bx	lr
 800acba:	bf00      	nop
 800acbc:	f3af 8000 	nop.w

0800acc0 <pxCurrentTCBConst>:
 800acc0:	20000bdc 	.word	0x20000bdc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800acc4:	bf00      	nop
 800acc6:	bf00      	nop

0800acc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b082      	sub	sp, #8
 800accc:	af00      	add	r7, sp, #0
	__asm volatile
 800acce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd2:	f383 8811 	msr	BASEPRI, r3
 800acd6:	f3bf 8f6f 	isb	sy
 800acda:	f3bf 8f4f 	dsb	sy
 800acde:	607b      	str	r3, [r7, #4]
}
 800ace0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ace2:	f7fe f9e7 	bl	80090b4 <xTaskIncrementTick>
 800ace6:	4603      	mov	r3, r0
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d003      	beq.n	800acf4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800acec:	4b06      	ldr	r3, [pc, #24]	; (800ad08 <xPortSysTickHandler+0x40>)
 800acee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acf2:	601a      	str	r2, [r3, #0]
 800acf4:	2300      	movs	r3, #0
 800acf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	f383 8811 	msr	BASEPRI, r3
}
 800acfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ad00:	bf00      	nop
 800ad02:	3708      	adds	r7, #8
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}
 800ad08:	e000ed04 	.word	0xe000ed04

0800ad0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ad0c:	b480      	push	{r7}
 800ad0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ad10:	4b0b      	ldr	r3, [pc, #44]	; (800ad40 <vPortSetupTimerInterrupt+0x34>)
 800ad12:	2200      	movs	r2, #0
 800ad14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ad16:	4b0b      	ldr	r3, [pc, #44]	; (800ad44 <vPortSetupTimerInterrupt+0x38>)
 800ad18:	2200      	movs	r2, #0
 800ad1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ad1c:	4b0a      	ldr	r3, [pc, #40]	; (800ad48 <vPortSetupTimerInterrupt+0x3c>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	4a0a      	ldr	r2, [pc, #40]	; (800ad4c <vPortSetupTimerInterrupt+0x40>)
 800ad22:	fba2 2303 	umull	r2, r3, r2, r3
 800ad26:	099b      	lsrs	r3, r3, #6
 800ad28:	4a09      	ldr	r2, [pc, #36]	; (800ad50 <vPortSetupTimerInterrupt+0x44>)
 800ad2a:	3b01      	subs	r3, #1
 800ad2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ad2e:	4b04      	ldr	r3, [pc, #16]	; (800ad40 <vPortSetupTimerInterrupt+0x34>)
 800ad30:	2207      	movs	r2, #7
 800ad32:	601a      	str	r2, [r3, #0]
}
 800ad34:	bf00      	nop
 800ad36:	46bd      	mov	sp, r7
 800ad38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3c:	4770      	bx	lr
 800ad3e:	bf00      	nop
 800ad40:	e000e010 	.word	0xe000e010
 800ad44:	e000e018 	.word	0xe000e018
 800ad48:	2000000c 	.word	0x2000000c
 800ad4c:	10624dd3 	.word	0x10624dd3
 800ad50:	e000e014 	.word	0xe000e014

0800ad54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ad54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ad64 <vPortEnableVFP+0x10>
 800ad58:	6801      	ldr	r1, [r0, #0]
 800ad5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ad5e:	6001      	str	r1, [r0, #0]
 800ad60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ad62:	bf00      	nop
 800ad64:	e000ed88 	.word	0xe000ed88

0800ad68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ad68:	b480      	push	{r7}
 800ad6a:	b085      	sub	sp, #20
 800ad6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ad6e:	f3ef 8305 	mrs	r3, IPSR
 800ad72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	2b0f      	cmp	r3, #15
 800ad78:	d914      	bls.n	800ada4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ad7a:	4a17      	ldr	r2, [pc, #92]	; (800add8 <vPortValidateInterruptPriority+0x70>)
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	4413      	add	r3, r2
 800ad80:	781b      	ldrb	r3, [r3, #0]
 800ad82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ad84:	4b15      	ldr	r3, [pc, #84]	; (800addc <vPortValidateInterruptPriority+0x74>)
 800ad86:	781b      	ldrb	r3, [r3, #0]
 800ad88:	7afa      	ldrb	r2, [r7, #11]
 800ad8a:	429a      	cmp	r2, r3
 800ad8c:	d20a      	bcs.n	800ada4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ad8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad92:	f383 8811 	msr	BASEPRI, r3
 800ad96:	f3bf 8f6f 	isb	sy
 800ad9a:	f3bf 8f4f 	dsb	sy
 800ad9e:	607b      	str	r3, [r7, #4]
}
 800ada0:	bf00      	nop
 800ada2:	e7fe      	b.n	800ada2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ada4:	4b0e      	ldr	r3, [pc, #56]	; (800ade0 <vPortValidateInterruptPriority+0x78>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800adac:	4b0d      	ldr	r3, [pc, #52]	; (800ade4 <vPortValidateInterruptPriority+0x7c>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	429a      	cmp	r2, r3
 800adb2:	d90a      	bls.n	800adca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800adb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb8:	f383 8811 	msr	BASEPRI, r3
 800adbc:	f3bf 8f6f 	isb	sy
 800adc0:	f3bf 8f4f 	dsb	sy
 800adc4:	603b      	str	r3, [r7, #0]
}
 800adc6:	bf00      	nop
 800adc8:	e7fe      	b.n	800adc8 <vPortValidateInterruptPriority+0x60>
	}
 800adca:	bf00      	nop
 800adcc:	3714      	adds	r7, #20
 800adce:	46bd      	mov	sp, r7
 800add0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add4:	4770      	bx	lr
 800add6:	bf00      	nop
 800add8:	e000e3f0 	.word	0xe000e3f0
 800addc:	20001208 	.word	0x20001208
 800ade0:	e000ed0c 	.word	0xe000ed0c
 800ade4:	2000120c 	.word	0x2000120c

0800ade8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b08a      	sub	sp, #40	; 0x28
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800adf0:	2300      	movs	r3, #0
 800adf2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800adf4:	f7fe f814 	bl	8008e20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800adf8:	4b5b      	ldr	r3, [pc, #364]	; (800af68 <pvPortMalloc+0x180>)
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d101      	bne.n	800ae04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ae00:	f000 f920 	bl	800b044 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ae04:	4b59      	ldr	r3, [pc, #356]	; (800af6c <pvPortMalloc+0x184>)
 800ae06:	681a      	ldr	r2, [r3, #0]
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	4013      	ands	r3, r2
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	f040 8093 	bne.w	800af38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d01d      	beq.n	800ae54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ae18:	2208      	movs	r2, #8
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	4413      	add	r3, r2
 800ae1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f003 0307 	and.w	r3, r3, #7
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d014      	beq.n	800ae54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f023 0307 	bic.w	r3, r3, #7
 800ae30:	3308      	adds	r3, #8
 800ae32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f003 0307 	and.w	r3, r3, #7
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d00a      	beq.n	800ae54 <pvPortMalloc+0x6c>
	__asm volatile
 800ae3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae42:	f383 8811 	msr	BASEPRI, r3
 800ae46:	f3bf 8f6f 	isb	sy
 800ae4a:	f3bf 8f4f 	dsb	sy
 800ae4e:	617b      	str	r3, [r7, #20]
}
 800ae50:	bf00      	nop
 800ae52:	e7fe      	b.n	800ae52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d06e      	beq.n	800af38 <pvPortMalloc+0x150>
 800ae5a:	4b45      	ldr	r3, [pc, #276]	; (800af70 <pvPortMalloc+0x188>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	687a      	ldr	r2, [r7, #4]
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d869      	bhi.n	800af38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ae64:	4b43      	ldr	r3, [pc, #268]	; (800af74 <pvPortMalloc+0x18c>)
 800ae66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ae68:	4b42      	ldr	r3, [pc, #264]	; (800af74 <pvPortMalloc+0x18c>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ae6e:	e004      	b.n	800ae7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ae70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ae74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ae7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae7c:	685b      	ldr	r3, [r3, #4]
 800ae7e:	687a      	ldr	r2, [r7, #4]
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d903      	bls.n	800ae8c <pvPortMalloc+0xa4>
 800ae84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d1f1      	bne.n	800ae70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ae8c:	4b36      	ldr	r3, [pc, #216]	; (800af68 <pvPortMalloc+0x180>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae92:	429a      	cmp	r2, r3
 800ae94:	d050      	beq.n	800af38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ae96:	6a3b      	ldr	r3, [r7, #32]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	2208      	movs	r2, #8
 800ae9c:	4413      	add	r3, r2
 800ae9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aea2:	681a      	ldr	r2, [r3, #0]
 800aea4:	6a3b      	ldr	r3, [r7, #32]
 800aea6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800aea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeaa:	685a      	ldr	r2, [r3, #4]
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	1ad2      	subs	r2, r2, r3
 800aeb0:	2308      	movs	r3, #8
 800aeb2:	005b      	lsls	r3, r3, #1
 800aeb4:	429a      	cmp	r2, r3
 800aeb6:	d91f      	bls.n	800aef8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aeb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	4413      	add	r3, r2
 800aebe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aec0:	69bb      	ldr	r3, [r7, #24]
 800aec2:	f003 0307 	and.w	r3, r3, #7
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d00a      	beq.n	800aee0 <pvPortMalloc+0xf8>
	__asm volatile
 800aeca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aece:	f383 8811 	msr	BASEPRI, r3
 800aed2:	f3bf 8f6f 	isb	sy
 800aed6:	f3bf 8f4f 	dsb	sy
 800aeda:	613b      	str	r3, [r7, #16]
}
 800aedc:	bf00      	nop
 800aede:	e7fe      	b.n	800aede <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee2:	685a      	ldr	r2, [r3, #4]
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	1ad2      	subs	r2, r2, r3
 800aee8:	69bb      	ldr	r3, [r7, #24]
 800aeea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aeec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeee:	687a      	ldr	r2, [r7, #4]
 800aef0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aef2:	69b8      	ldr	r0, [r7, #24]
 800aef4:	f000 f908 	bl	800b108 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aef8:	4b1d      	ldr	r3, [pc, #116]	; (800af70 <pvPortMalloc+0x188>)
 800aefa:	681a      	ldr	r2, [r3, #0]
 800aefc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aefe:	685b      	ldr	r3, [r3, #4]
 800af00:	1ad3      	subs	r3, r2, r3
 800af02:	4a1b      	ldr	r2, [pc, #108]	; (800af70 <pvPortMalloc+0x188>)
 800af04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800af06:	4b1a      	ldr	r3, [pc, #104]	; (800af70 <pvPortMalloc+0x188>)
 800af08:	681a      	ldr	r2, [r3, #0]
 800af0a:	4b1b      	ldr	r3, [pc, #108]	; (800af78 <pvPortMalloc+0x190>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	429a      	cmp	r2, r3
 800af10:	d203      	bcs.n	800af1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800af12:	4b17      	ldr	r3, [pc, #92]	; (800af70 <pvPortMalloc+0x188>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	4a18      	ldr	r2, [pc, #96]	; (800af78 <pvPortMalloc+0x190>)
 800af18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800af1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af1c:	685a      	ldr	r2, [r3, #4]
 800af1e:	4b13      	ldr	r3, [pc, #76]	; (800af6c <pvPortMalloc+0x184>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	431a      	orrs	r2, r3
 800af24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800af28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af2a:	2200      	movs	r2, #0
 800af2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800af2e:	4b13      	ldr	r3, [pc, #76]	; (800af7c <pvPortMalloc+0x194>)
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	3301      	adds	r3, #1
 800af34:	4a11      	ldr	r2, [pc, #68]	; (800af7c <pvPortMalloc+0x194>)
 800af36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800af38:	f7fd ff80 	bl	8008e3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800af3c:	69fb      	ldr	r3, [r7, #28]
 800af3e:	f003 0307 	and.w	r3, r3, #7
 800af42:	2b00      	cmp	r3, #0
 800af44:	d00a      	beq.n	800af5c <pvPortMalloc+0x174>
	__asm volatile
 800af46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af4a:	f383 8811 	msr	BASEPRI, r3
 800af4e:	f3bf 8f6f 	isb	sy
 800af52:	f3bf 8f4f 	dsb	sy
 800af56:	60fb      	str	r3, [r7, #12]
}
 800af58:	bf00      	nop
 800af5a:	e7fe      	b.n	800af5a <pvPortMalloc+0x172>
	return pvReturn;
 800af5c:	69fb      	ldr	r3, [r7, #28]
}
 800af5e:	4618      	mov	r0, r3
 800af60:	3728      	adds	r7, #40	; 0x28
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}
 800af66:	bf00      	nop
 800af68:	20009218 	.word	0x20009218
 800af6c:	2000922c 	.word	0x2000922c
 800af70:	2000921c 	.word	0x2000921c
 800af74:	20009210 	.word	0x20009210
 800af78:	20009220 	.word	0x20009220
 800af7c:	20009224 	.word	0x20009224

0800af80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b086      	sub	sp, #24
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d04d      	beq.n	800b02e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800af92:	2308      	movs	r3, #8
 800af94:	425b      	negs	r3, r3
 800af96:	697a      	ldr	r2, [r7, #20]
 800af98:	4413      	add	r3, r2
 800af9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800af9c:	697b      	ldr	r3, [r7, #20]
 800af9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800afa0:	693b      	ldr	r3, [r7, #16]
 800afa2:	685a      	ldr	r2, [r3, #4]
 800afa4:	4b24      	ldr	r3, [pc, #144]	; (800b038 <vPortFree+0xb8>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	4013      	ands	r3, r2
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d10a      	bne.n	800afc4 <vPortFree+0x44>
	__asm volatile
 800afae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afb2:	f383 8811 	msr	BASEPRI, r3
 800afb6:	f3bf 8f6f 	isb	sy
 800afba:	f3bf 8f4f 	dsb	sy
 800afbe:	60fb      	str	r3, [r7, #12]
}
 800afc0:	bf00      	nop
 800afc2:	e7fe      	b.n	800afc2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800afc4:	693b      	ldr	r3, [r7, #16]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d00a      	beq.n	800afe2 <vPortFree+0x62>
	__asm volatile
 800afcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd0:	f383 8811 	msr	BASEPRI, r3
 800afd4:	f3bf 8f6f 	isb	sy
 800afd8:	f3bf 8f4f 	dsb	sy
 800afdc:	60bb      	str	r3, [r7, #8]
}
 800afde:	bf00      	nop
 800afe0:	e7fe      	b.n	800afe0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800afe2:	693b      	ldr	r3, [r7, #16]
 800afe4:	685a      	ldr	r2, [r3, #4]
 800afe6:	4b14      	ldr	r3, [pc, #80]	; (800b038 <vPortFree+0xb8>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	4013      	ands	r3, r2
 800afec:	2b00      	cmp	r3, #0
 800afee:	d01e      	beq.n	800b02e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d11a      	bne.n	800b02e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aff8:	693b      	ldr	r3, [r7, #16]
 800affa:	685a      	ldr	r2, [r3, #4]
 800affc:	4b0e      	ldr	r3, [pc, #56]	; (800b038 <vPortFree+0xb8>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	43db      	mvns	r3, r3
 800b002:	401a      	ands	r2, r3
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b008:	f7fd ff0a 	bl	8008e20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	685a      	ldr	r2, [r3, #4]
 800b010:	4b0a      	ldr	r3, [pc, #40]	; (800b03c <vPortFree+0xbc>)
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	4413      	add	r3, r2
 800b016:	4a09      	ldr	r2, [pc, #36]	; (800b03c <vPortFree+0xbc>)
 800b018:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b01a:	6938      	ldr	r0, [r7, #16]
 800b01c:	f000 f874 	bl	800b108 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b020:	4b07      	ldr	r3, [pc, #28]	; (800b040 <vPortFree+0xc0>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	3301      	adds	r3, #1
 800b026:	4a06      	ldr	r2, [pc, #24]	; (800b040 <vPortFree+0xc0>)
 800b028:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b02a:	f7fd ff07 	bl	8008e3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b02e:	bf00      	nop
 800b030:	3718      	adds	r7, #24
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}
 800b036:	bf00      	nop
 800b038:	2000922c 	.word	0x2000922c
 800b03c:	2000921c 	.word	0x2000921c
 800b040:	20009228 	.word	0x20009228

0800b044 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b044:	b480      	push	{r7}
 800b046:	b085      	sub	sp, #20
 800b048:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b04a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b04e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b050:	4b27      	ldr	r3, [pc, #156]	; (800b0f0 <prvHeapInit+0xac>)
 800b052:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	f003 0307 	and.w	r3, r3, #7
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d00c      	beq.n	800b078 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	3307      	adds	r3, #7
 800b062:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	f023 0307 	bic.w	r3, r3, #7
 800b06a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b06c:	68ba      	ldr	r2, [r7, #8]
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	1ad3      	subs	r3, r2, r3
 800b072:	4a1f      	ldr	r2, [pc, #124]	; (800b0f0 <prvHeapInit+0xac>)
 800b074:	4413      	add	r3, r2
 800b076:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b07c:	4a1d      	ldr	r2, [pc, #116]	; (800b0f4 <prvHeapInit+0xb0>)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b082:	4b1c      	ldr	r3, [pc, #112]	; (800b0f4 <prvHeapInit+0xb0>)
 800b084:	2200      	movs	r2, #0
 800b086:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	68ba      	ldr	r2, [r7, #8]
 800b08c:	4413      	add	r3, r2
 800b08e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b090:	2208      	movs	r2, #8
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	1a9b      	subs	r3, r3, r2
 800b096:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	f023 0307 	bic.w	r3, r3, #7
 800b09e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	4a15      	ldr	r2, [pc, #84]	; (800b0f8 <prvHeapInit+0xb4>)
 800b0a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b0a6:	4b14      	ldr	r3, [pc, #80]	; (800b0f8 <prvHeapInit+0xb4>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b0ae:	4b12      	ldr	r3, [pc, #72]	; (800b0f8 <prvHeapInit+0xb4>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	68fa      	ldr	r2, [r7, #12]
 800b0be:	1ad2      	subs	r2, r2, r3
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b0c4:	4b0c      	ldr	r3, [pc, #48]	; (800b0f8 <prvHeapInit+0xb4>)
 800b0c6:	681a      	ldr	r2, [r3, #0]
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	685b      	ldr	r3, [r3, #4]
 800b0d0:	4a0a      	ldr	r2, [pc, #40]	; (800b0fc <prvHeapInit+0xb8>)
 800b0d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	685b      	ldr	r3, [r3, #4]
 800b0d8:	4a09      	ldr	r2, [pc, #36]	; (800b100 <prvHeapInit+0xbc>)
 800b0da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b0dc:	4b09      	ldr	r3, [pc, #36]	; (800b104 <prvHeapInit+0xc0>)
 800b0de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b0e2:	601a      	str	r2, [r3, #0]
}
 800b0e4:	bf00      	nop
 800b0e6:	3714      	adds	r7, #20
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ee:	4770      	bx	lr
 800b0f0:	20001210 	.word	0x20001210
 800b0f4:	20009210 	.word	0x20009210
 800b0f8:	20009218 	.word	0x20009218
 800b0fc:	20009220 	.word	0x20009220
 800b100:	2000921c 	.word	0x2000921c
 800b104:	2000922c 	.word	0x2000922c

0800b108 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b108:	b480      	push	{r7}
 800b10a:	b085      	sub	sp, #20
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b110:	4b28      	ldr	r3, [pc, #160]	; (800b1b4 <prvInsertBlockIntoFreeList+0xac>)
 800b112:	60fb      	str	r3, [r7, #12]
 800b114:	e002      	b.n	800b11c <prvInsertBlockIntoFreeList+0x14>
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	60fb      	str	r3, [r7, #12]
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	687a      	ldr	r2, [r7, #4]
 800b122:	429a      	cmp	r2, r3
 800b124:	d8f7      	bhi.n	800b116 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	685b      	ldr	r3, [r3, #4]
 800b12e:	68ba      	ldr	r2, [r7, #8]
 800b130:	4413      	add	r3, r2
 800b132:	687a      	ldr	r2, [r7, #4]
 800b134:	429a      	cmp	r2, r3
 800b136:	d108      	bne.n	800b14a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	685a      	ldr	r2, [r3, #4]
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	685b      	ldr	r3, [r3, #4]
 800b140:	441a      	add	r2, r3
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	68ba      	ldr	r2, [r7, #8]
 800b154:	441a      	add	r2, r3
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	429a      	cmp	r2, r3
 800b15c:	d118      	bne.n	800b190 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681a      	ldr	r2, [r3, #0]
 800b162:	4b15      	ldr	r3, [pc, #84]	; (800b1b8 <prvInsertBlockIntoFreeList+0xb0>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	429a      	cmp	r2, r3
 800b168:	d00d      	beq.n	800b186 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	685a      	ldr	r2, [r3, #4]
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	685b      	ldr	r3, [r3, #4]
 800b174:	441a      	add	r2, r3
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	681a      	ldr	r2, [r3, #0]
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	601a      	str	r2, [r3, #0]
 800b184:	e008      	b.n	800b198 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b186:	4b0c      	ldr	r3, [pc, #48]	; (800b1b8 <prvInsertBlockIntoFreeList+0xb0>)
 800b188:	681a      	ldr	r2, [r3, #0]
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	601a      	str	r2, [r3, #0]
 800b18e:	e003      	b.n	800b198 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	681a      	ldr	r2, [r3, #0]
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b198:	68fa      	ldr	r2, [r7, #12]
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	429a      	cmp	r2, r3
 800b19e:	d002      	beq.n	800b1a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	687a      	ldr	r2, [r7, #4]
 800b1a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b1a6:	bf00      	nop
 800b1a8:	3714      	adds	r7, #20
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b0:	4770      	bx	lr
 800b1b2:	bf00      	nop
 800b1b4:	20009210 	.word	0x20009210
 800b1b8:	20009218 	.word	0x20009218

0800b1bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	4912      	ldr	r1, [pc, #72]	; (800b20c <MX_USB_DEVICE_Init+0x50>)
 800b1c4:	4812      	ldr	r0, [pc, #72]	; (800b210 <MX_USB_DEVICE_Init+0x54>)
 800b1c6:	f7fa fba3 	bl	8005910 <USBD_Init>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d001      	beq.n	800b1d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b1d0:	f7f5 fc72 	bl	8000ab8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b1d4:	490f      	ldr	r1, [pc, #60]	; (800b214 <MX_USB_DEVICE_Init+0x58>)
 800b1d6:	480e      	ldr	r0, [pc, #56]	; (800b210 <MX_USB_DEVICE_Init+0x54>)
 800b1d8:	f7fa fbca 	bl	8005970 <USBD_RegisterClass>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d001      	beq.n	800b1e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b1e2:	f7f5 fc69 	bl	8000ab8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b1e6:	490c      	ldr	r1, [pc, #48]	; (800b218 <MX_USB_DEVICE_Init+0x5c>)
 800b1e8:	4809      	ldr	r0, [pc, #36]	; (800b210 <MX_USB_DEVICE_Init+0x54>)
 800b1ea:	f7fa fabb 	bl	8005764 <USBD_CDC_RegisterInterface>
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d001      	beq.n	800b1f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b1f4:	f7f5 fc60 	bl	8000ab8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b1f8:	4805      	ldr	r0, [pc, #20]	; (800b210 <MX_USB_DEVICE_Init+0x54>)
 800b1fa:	f7fa fbef 	bl	80059dc <USBD_Start>
 800b1fe:	4603      	mov	r3, r0
 800b200:	2b00      	cmp	r3, #0
 800b202:	d001      	beq.n	800b208 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b204:	f7f5 fc58 	bl	8000ab8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b208:	bf00      	nop
 800b20a:	bd80      	pop	{r7, pc}
 800b20c:	200000bc 	.word	0x200000bc
 800b210:	20009230 	.word	0x20009230
 800b214:	20000024 	.word	0x20000024
 800b218:	200000a8 	.word	0x200000a8

0800b21c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b220:	2200      	movs	r2, #0
 800b222:	4905      	ldr	r1, [pc, #20]	; (800b238 <CDC_Init_FS+0x1c>)
 800b224:	4805      	ldr	r0, [pc, #20]	; (800b23c <CDC_Init_FS+0x20>)
 800b226:	f7fa fab7 	bl	8005798 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b22a:	4905      	ldr	r1, [pc, #20]	; (800b240 <CDC_Init_FS+0x24>)
 800b22c:	4803      	ldr	r0, [pc, #12]	; (800b23c <CDC_Init_FS+0x20>)
 800b22e:	f7fa fad5 	bl	80057dc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b232:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b234:	4618      	mov	r0, r3
 800b236:	bd80      	pop	{r7, pc}
 800b238:	20009d14 	.word	0x20009d14
 800b23c:	20009230 	.word	0x20009230
 800b240:	20009514 	.word	0x20009514

0800b244 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b244:	b480      	push	{r7}
 800b246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b248:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	46bd      	mov	sp, r7
 800b24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b252:	4770      	bx	lr

0800b254 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b254:	b480      	push	{r7}
 800b256:	b083      	sub	sp, #12
 800b258:	af00      	add	r7, sp, #0
 800b25a:	4603      	mov	r3, r0
 800b25c:	6039      	str	r1, [r7, #0]
 800b25e:	71fb      	strb	r3, [r7, #7]
 800b260:	4613      	mov	r3, r2
 800b262:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b264:	79fb      	ldrb	r3, [r7, #7]
 800b266:	2b23      	cmp	r3, #35	; 0x23
 800b268:	d84a      	bhi.n	800b300 <CDC_Control_FS+0xac>
 800b26a:	a201      	add	r2, pc, #4	; (adr r2, 800b270 <CDC_Control_FS+0x1c>)
 800b26c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b270:	0800b301 	.word	0x0800b301
 800b274:	0800b301 	.word	0x0800b301
 800b278:	0800b301 	.word	0x0800b301
 800b27c:	0800b301 	.word	0x0800b301
 800b280:	0800b301 	.word	0x0800b301
 800b284:	0800b301 	.word	0x0800b301
 800b288:	0800b301 	.word	0x0800b301
 800b28c:	0800b301 	.word	0x0800b301
 800b290:	0800b301 	.word	0x0800b301
 800b294:	0800b301 	.word	0x0800b301
 800b298:	0800b301 	.word	0x0800b301
 800b29c:	0800b301 	.word	0x0800b301
 800b2a0:	0800b301 	.word	0x0800b301
 800b2a4:	0800b301 	.word	0x0800b301
 800b2a8:	0800b301 	.word	0x0800b301
 800b2ac:	0800b301 	.word	0x0800b301
 800b2b0:	0800b301 	.word	0x0800b301
 800b2b4:	0800b301 	.word	0x0800b301
 800b2b8:	0800b301 	.word	0x0800b301
 800b2bc:	0800b301 	.word	0x0800b301
 800b2c0:	0800b301 	.word	0x0800b301
 800b2c4:	0800b301 	.word	0x0800b301
 800b2c8:	0800b301 	.word	0x0800b301
 800b2cc:	0800b301 	.word	0x0800b301
 800b2d0:	0800b301 	.word	0x0800b301
 800b2d4:	0800b301 	.word	0x0800b301
 800b2d8:	0800b301 	.word	0x0800b301
 800b2dc:	0800b301 	.word	0x0800b301
 800b2e0:	0800b301 	.word	0x0800b301
 800b2e4:	0800b301 	.word	0x0800b301
 800b2e8:	0800b301 	.word	0x0800b301
 800b2ec:	0800b301 	.word	0x0800b301
 800b2f0:	0800b301 	.word	0x0800b301
 800b2f4:	0800b301 	.word	0x0800b301
 800b2f8:	0800b301 	.word	0x0800b301
 800b2fc:	0800b301 	.word	0x0800b301
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b300:	bf00      	nop
  }

  return (USBD_OK);
 800b302:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b304:	4618      	mov	r0, r3
 800b306:	370c      	adds	r7, #12
 800b308:	46bd      	mov	sp, r7
 800b30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30e:	4770      	bx	lr

0800b310 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b084      	sub	sp, #16
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
 800b318:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  portBASE_TYPE yield = pdFALSE;
 800b31a:	2300      	movs	r3, #0
 800b31c:	60fb      	str	r3, [r7, #12]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b31e:	6879      	ldr	r1, [r7, #4]
 800b320:	480f      	ldr	r0, [pc, #60]	; (800b360 <CDC_Receive_FS+0x50>)
 800b322:	f7fa fa5b 	bl	80057dc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b326:	480e      	ldr	r0, [pc, #56]	; (800b360 <CDC_Receive_FS+0x50>)
 800b328:	f7fa fabc 	bl	80058a4 <USBD_CDC_ReceivePacket>

  xMessageBufferSendFromISR(rMessageBuffer, Buf, *Len, &yield);
 800b32c:	4b0d      	ldr	r3, [pc, #52]	; (800b364 <CDC_Receive_FS+0x54>)
 800b32e:	6818      	ldr	r0, [r3, #0]
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	681a      	ldr	r2, [r3, #0]
 800b334:	f107 030c 	add.w	r3, r7, #12
 800b338:	6879      	ldr	r1, [r7, #4]
 800b33a:	f7fd f82e 	bl	800839a <xStreamBufferSendFromISR>
  portYIELD_FROM_ISR(yield);
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d007      	beq.n	800b354 <CDC_Receive_FS+0x44>
 800b344:	4b08      	ldr	r3, [pc, #32]	; (800b368 <CDC_Receive_FS+0x58>)
 800b346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b34a:	601a      	str	r2, [r3, #0]
 800b34c:	f3bf 8f4f 	dsb	sy
 800b350:	f3bf 8f6f 	isb	sy

  return (USBD_OK);
 800b354:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b356:	4618      	mov	r0, r3
 800b358:	3710      	adds	r7, #16
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}
 800b35e:	bf00      	nop
 800b360:	20009230 	.word	0x20009230
 800b364:	2000a518 	.word	0x2000a518
 800b368:	e000ed04 	.word	0xe000ed04

0800b36c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b084      	sub	sp, #16
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
 800b374:	460b      	mov	r3, r1
 800b376:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b378:	2300      	movs	r3, #0
 800b37a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  if (xSemaphoreTake(mutex_usb, portMAX_DELAY) == pdTRUE){
 800b37c:	4b1c      	ldr	r3, [pc, #112]	; (800b3f0 <CDC_Transmit_FS+0x84>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b384:	4618      	mov	r0, r3
 800b386:	f7fc fc33 	bl	8007bf0 <xQueueSemaphoreTake>
 800b38a:	4603      	mov	r3, r0
 800b38c:	2b01      	cmp	r3, #1
 800b38e:	d12a      	bne.n	800b3e6 <CDC_Transmit_FS+0x7a>
	  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b390:	4b18      	ldr	r3, [pc, #96]	; (800b3f4 <CDC_Transmit_FS+0x88>)
 800b392:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b396:	60bb      	str	r3, [r7, #8]
	  if (hcdc->TxState != 0){
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d008      	beq.n	800b3b4 <CDC_Transmit_FS+0x48>
		xSemaphoreGive(mutex_usb);
 800b3a2:	4b13      	ldr	r3, [pc, #76]	; (800b3f0 <CDC_Transmit_FS+0x84>)
 800b3a4:	6818      	ldr	r0, [r3, #0]
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	2100      	movs	r1, #0
 800b3ac:	f7fc f91a 	bl	80075e4 <xQueueGenericSend>
		return USBD_BUSY;
 800b3b0:	2301      	movs	r3, #1
 800b3b2:	e019      	b.n	800b3e8 <CDC_Transmit_FS+0x7c>
	  }
	  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b3b4:	887b      	ldrh	r3, [r7, #2]
 800b3b6:	461a      	mov	r2, r3
 800b3b8:	6879      	ldr	r1, [r7, #4]
 800b3ba:	480e      	ldr	r0, [pc, #56]	; (800b3f4 <CDC_Transmit_FS+0x88>)
 800b3bc:	f7fa f9ec 	bl	8005798 <USBD_CDC_SetTxBuffer>
	  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b3c0:	480c      	ldr	r0, [pc, #48]	; (800b3f4 <CDC_Transmit_FS+0x88>)
 800b3c2:	f7fa fa29 	bl	8005818 <USBD_CDC_TransmitPacket>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	73fb      	strb	r3, [r7, #15]
	  xSemaphoreTake(sem_usb_tx, portMAX_DELAY);
 800b3ca:	4b0b      	ldr	r3, [pc, #44]	; (800b3f8 <CDC_Transmit_FS+0x8c>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	f7fc fc0c 	bl	8007bf0 <xQueueSemaphoreTake>
	  xSemaphoreGive(mutex_usb);
 800b3d8:	4b05      	ldr	r3, [pc, #20]	; (800b3f0 <CDC_Transmit_FS+0x84>)
 800b3da:	6818      	ldr	r0, [r3, #0]
 800b3dc:	2300      	movs	r3, #0
 800b3de:	2200      	movs	r2, #0
 800b3e0:	2100      	movs	r1, #0
 800b3e2:	f7fc f8ff 	bl	80075e4 <xQueueGenericSend>
  }
  /* USER CODE END 7 */
  return result;
 800b3e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3710      	adds	r7, #16
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}
 800b3f0:	20009510 	.word	0x20009510
 800b3f4:	20009230 	.word	0x20009230
 800b3f8:	2000950c 	.word	0x2000950c

0800b3fc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b086      	sub	sp, #24
 800b400:	af00      	add	r7, sp, #0
 800b402:	60f8      	str	r0, [r7, #12]
 800b404:	60b9      	str	r1, [r7, #8]
 800b406:	4613      	mov	r3, r2
 800b408:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b40a:	2300      	movs	r3, #0
 800b40c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  portBASE_TYPE tmp = pdFALSE;
 800b40e:	2300      	movs	r3, #0
 800b410:	613b      	str	r3, [r7, #16]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  xSemaphoreGiveFromISR(sem_usb_tx, &tmp);
 800b412:	4b0c      	ldr	r3, [pc, #48]	; (800b444 <CDC_TransmitCplt_FS+0x48>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	f107 0210 	add.w	r2, r7, #16
 800b41a:	4611      	mov	r1, r2
 800b41c:	4618      	mov	r0, r3
 800b41e:	f7fc fa7a 	bl	8007916 <xQueueGiveFromISR>
  portYIELD_FROM_ISR(tmp);
 800b422:	693b      	ldr	r3, [r7, #16]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d007      	beq.n	800b438 <CDC_TransmitCplt_FS+0x3c>
 800b428:	4b07      	ldr	r3, [pc, #28]	; (800b448 <CDC_TransmitCplt_FS+0x4c>)
 800b42a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b42e:	601a      	str	r2, [r3, #0]
 800b430:	f3bf 8f4f 	dsb	sy
 800b434:	f3bf 8f6f 	isb	sy
  /* USER CODE END 13 */
  return result;
 800b438:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b43c:	4618      	mov	r0, r3
 800b43e:	3718      	adds	r7, #24
 800b440:	46bd      	mov	sp, r7
 800b442:	bd80      	pop	{r7, pc}
 800b444:	2000950c 	.word	0x2000950c
 800b448:	e000ed04 	.word	0xe000ed04

0800b44c <init_usb_rtos_obj>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
volatile uint32_t usb_is_on = 0;
void init_usb_rtos_obj(void){
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b082      	sub	sp, #8
 800b450:	af02      	add	r7, sp, #8

	sem_usb_tx = xSemaphoreCreateBinary();
 800b452:	2203      	movs	r2, #3
 800b454:	2100      	movs	r1, #0
 800b456:	2001      	movs	r0, #1
 800b458:	f7fc f834 	bl	80074c4 <xQueueGenericCreate>
 800b45c:	4603      	mov	r3, r0
 800b45e:	4a15      	ldr	r2, [pc, #84]	; (800b4b4 <init_usb_rtos_obj+0x68>)
 800b460:	6013      	str	r3, [r2, #0]
	mutex_usb = xSemaphoreCreateMutex();
 800b462:	2001      	movs	r0, #1
 800b464:	f7fc f8a5 	bl	80075b2 <xQueueCreateMutex>
 800b468:	4603      	mov	r3, r0
 800b46a:	4a13      	ldr	r2, [pc, #76]	; (800b4b8 <init_usb_rtos_obj+0x6c>)
 800b46c:	6013      	str	r3, [r2, #0]
	//queue_usb = xQueueCreate(768, sizeof(char));
	xMessageBuffer = xMessageBufferCreate(768);
 800b46e:	2201      	movs	r2, #1
 800b470:	2100      	movs	r1, #0
 800b472:	f44f 7040 	mov.w	r0, #768	; 0x300
 800b476:	f7fc fe4d 	bl	8008114 <xStreamBufferGenericCreate>
 800b47a:	4603      	mov	r3, r0
 800b47c:	4a0f      	ldr	r2, [pc, #60]	; (800b4bc <init_usb_rtos_obj+0x70>)
 800b47e:	6013      	str	r3, [r2, #0]
	rMessageBuffer = xMessageBufferCreate(768);
 800b480:	2201      	movs	r2, #1
 800b482:	2100      	movs	r1, #0
 800b484:	f44f 7040 	mov.w	r0, #768	; 0x300
 800b488:	f7fc fe44 	bl	8008114 <xStreamBufferGenericCreate>
 800b48c:	4603      	mov	r3, r0
 800b48e:	4a0c      	ldr	r2, [pc, #48]	; (800b4c0 <init_usb_rtos_obj+0x74>)
 800b490:	6013      	str	r3, [r2, #0]
	usb_is_on = 1;
 800b492:	4b0c      	ldr	r3, [pc, #48]	; (800b4c4 <init_usb_rtos_obj+0x78>)
 800b494:	2201      	movs	r2, #1
 800b496:	601a      	str	r2, [r3, #0]

	xTaskCreate(Print_Task, "print_task", 512, NULL, 2, NULL);
 800b498:	2300      	movs	r3, #0
 800b49a:	9301      	str	r3, [sp, #4]
 800b49c:	2302      	movs	r3, #2
 800b49e:	9300      	str	r3, [sp, #0]
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b4a6:	4908      	ldr	r1, [pc, #32]	; (800b4c8 <init_usb_rtos_obj+0x7c>)
 800b4a8:	4808      	ldr	r0, [pc, #32]	; (800b4cc <init_usb_rtos_obj+0x80>)
 800b4aa:	f7fd fa87 	bl	80089bc <xTaskCreate>
}
 800b4ae:	bf00      	nop
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}
 800b4b4:	2000950c 	.word	0x2000950c
 800b4b8:	20009510 	.word	0x20009510
 800b4bc:	2000a514 	.word	0x2000a514
 800b4c0:	2000a518 	.word	0x2000a518
 800b4c4:	2000a51c 	.word	0x2000a51c
 800b4c8:	0800cab0 	.word	0x0800cab0
 800b4cc:	0800b549 	.word	0x0800b549

0800b4d0 <receive_usb_data>:
    // The entire table was written directly to the output buffer.  Execution
    of this command is complete, so return pdFALSE.
    //return pdFALSE;
}*/

size_t receive_usb_data(uint8_t *data, int size, TickType_t timeout){
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b084      	sub	sp, #16
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	60f8      	str	r0, [r7, #12]
 800b4d8:	60b9      	str	r1, [r7, #8]
 800b4da:	607a      	str	r2, [r7, #4]
	return xMessageBufferReceive(rMessageBuffer, (void *)data, size, timeout);
 800b4dc:	4b05      	ldr	r3, [pc, #20]	; (800b4f4 <receive_usb_data+0x24>)
 800b4de:	6818      	ldr	r0, [r3, #0]
 800b4e0:	68ba      	ldr	r2, [r7, #8]
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	68f9      	ldr	r1, [r7, #12]
 800b4e6:	f7fd f806 	bl	80084f6 <xStreamBufferReceive>
 800b4ea:	4603      	mov	r3, r0
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3710      	adds	r7, #16
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}
 800b4f4:	2000a518 	.word	0x2000a518

0800b4f8 <queue_print_usb>:

void queue_print_usb(uint8_t *data, int size, TickType_t timeout){
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b084      	sub	sp, #16
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	60f8      	str	r0, [r7, #12]
 800b500:	60b9      	str	r1, [r7, #8]
 800b502:	607a      	str	r2, [r7, #4]
	if(xSemaphoreTake(mutex_usb, portMAX_DELAY) == pdTRUE) {
 800b504:	4b0e      	ldr	r3, [pc, #56]	; (800b540 <queue_print_usb+0x48>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b50c:	4618      	mov	r0, r3
 800b50e:	f7fc fb6f 	bl	8007bf0 <xQueueSemaphoreTake>
 800b512:	4603      	mov	r3, r0
 800b514:	2b01      	cmp	r3, #1
 800b516:	d10e      	bne.n	800b536 <queue_print_usb+0x3e>
		xMessageBufferSend(xMessageBuffer, data, size, portMAX_DELAY);
 800b518:	4b0a      	ldr	r3, [pc, #40]	; (800b544 <queue_print_usb+0x4c>)
 800b51a:	6818      	ldr	r0, [r3, #0]
 800b51c:	68ba      	ldr	r2, [r7, #8]
 800b51e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b522:	68f9      	ldr	r1, [r7, #12]
 800b524:	f7fc fe84 	bl	8008230 <xStreamBufferSend>
		xSemaphoreGive(mutex_usb);
 800b528:	4b05      	ldr	r3, [pc, #20]	; (800b540 <queue_print_usb+0x48>)
 800b52a:	6818      	ldr	r0, [r3, #0]
 800b52c:	2300      	movs	r3, #0
 800b52e:	2200      	movs	r2, #0
 800b530:	2100      	movs	r1, #0
 800b532:	f7fc f857 	bl	80075e4 <xQueueGenericSend>
	}
}
 800b536:	bf00      	nop
 800b538:	3710      	adds	r7, #16
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}
 800b53e:	bf00      	nop
 800b540:	20009510 	.word	0x20009510
 800b544:	2000a514 	.word	0x2000a514

0800b548 <Print_Task>:

//void queue_print(char *data, int size){
//	xMessageBufferSend(xMessageBuffer, data, size, portMAX_DELAY);
//}

void Print_Task(void *param){
 800b548:	b580      	push	{r7, lr}
 800b54a:	f5ad 7d44 	sub.w	sp, sp, #784	; 0x310
 800b54e:	af00      	add	r7, sp, #0
 800b550:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800b554:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 800b558:	6018      	str	r0, [r3, #0]
	char buffer[768];
	uint8_t qtd = 0;
 800b55a:	2300      	movs	r3, #0
 800b55c:	f887 330f 	strb.w	r3, [r7, #783]	; 0x30f
	while(1){
		qtd = xMessageBufferReceive(xMessageBuffer, (void*)buffer, sizeof(buffer), portMAX_DELAY);
 800b560:	4b0b      	ldr	r3, [pc, #44]	; (800b590 <Print_Task+0x48>)
 800b562:	6818      	ldr	r0, [r3, #0]
 800b564:	f107 010c 	add.w	r1, r7, #12
 800b568:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b56c:	f44f 7240 	mov.w	r2, #768	; 0x300
 800b570:	f7fc ffc1 	bl	80084f6 <xStreamBufferReceive>
 800b574:	4603      	mov	r3, r0
 800b576:	f887 330f 	strb.w	r3, [r7, #783]	; 0x30f
		(void)qtd;
		CDC_Transmit_FS((uint8_t *)buffer, qtd);
 800b57a:	f897 330f 	ldrb.w	r3, [r7, #783]	; 0x30f
 800b57e:	b29a      	uxth	r2, r3
 800b580:	f107 030c 	add.w	r3, r7, #12
 800b584:	4611      	mov	r1, r2
 800b586:	4618      	mov	r0, r3
 800b588:	f7ff fef0 	bl	800b36c <CDC_Transmit_FS>
		qtd = xMessageBufferReceive(xMessageBuffer, (void*)buffer, sizeof(buffer), portMAX_DELAY);
 800b58c:	e7e8      	b.n	800b560 <Print_Task+0x18>
 800b58e:	bf00      	nop
 800b590:	2000a514 	.word	0x2000a514

0800b594 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b594:	b480      	push	{r7}
 800b596:	b083      	sub	sp, #12
 800b598:	af00      	add	r7, sp, #0
 800b59a:	4603      	mov	r3, r0
 800b59c:	6039      	str	r1, [r7, #0]
 800b59e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	2212      	movs	r2, #18
 800b5a4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b5a6:	4b03      	ldr	r3, [pc, #12]	; (800b5b4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	370c      	adds	r7, #12
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b2:	4770      	bx	lr
 800b5b4:	200000d8 	.word	0x200000d8

0800b5b8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	b083      	sub	sp, #12
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	4603      	mov	r3, r0
 800b5c0:	6039      	str	r1, [r7, #0]
 800b5c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	2204      	movs	r2, #4
 800b5c8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b5ca:	4b03      	ldr	r3, [pc, #12]	; (800b5d8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	370c      	adds	r7, #12
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d6:	4770      	bx	lr
 800b5d8:	200000ec 	.word	0x200000ec

0800b5dc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b082      	sub	sp, #8
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	6039      	str	r1, [r7, #0]
 800b5e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b5e8:	79fb      	ldrb	r3, [r7, #7]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d105      	bne.n	800b5fa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b5ee:	683a      	ldr	r2, [r7, #0]
 800b5f0:	4907      	ldr	r1, [pc, #28]	; (800b610 <USBD_FS_ProductStrDescriptor+0x34>)
 800b5f2:	4808      	ldr	r0, [pc, #32]	; (800b614 <USBD_FS_ProductStrDescriptor+0x38>)
 800b5f4:	f7fb fb9e 	bl	8006d34 <USBD_GetString>
 800b5f8:	e004      	b.n	800b604 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b5fa:	683a      	ldr	r2, [r7, #0]
 800b5fc:	4904      	ldr	r1, [pc, #16]	; (800b610 <USBD_FS_ProductStrDescriptor+0x34>)
 800b5fe:	4805      	ldr	r0, [pc, #20]	; (800b614 <USBD_FS_ProductStrDescriptor+0x38>)
 800b600:	f7fb fb98 	bl	8006d34 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b604:	4b02      	ldr	r3, [pc, #8]	; (800b610 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b606:	4618      	mov	r0, r3
 800b608:	3708      	adds	r7, #8
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}
 800b60e:	bf00      	nop
 800b610:	2000a520 	.word	0x2000a520
 800b614:	0800cabc 	.word	0x0800cabc

0800b618 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b082      	sub	sp, #8
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	4603      	mov	r3, r0
 800b620:	6039      	str	r1, [r7, #0]
 800b622:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b624:	683a      	ldr	r2, [r7, #0]
 800b626:	4904      	ldr	r1, [pc, #16]	; (800b638 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b628:	4804      	ldr	r0, [pc, #16]	; (800b63c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b62a:	f7fb fb83 	bl	8006d34 <USBD_GetString>
  return USBD_StrDesc;
 800b62e:	4b02      	ldr	r3, [pc, #8]	; (800b638 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b630:	4618      	mov	r0, r3
 800b632:	3708      	adds	r7, #8
 800b634:	46bd      	mov	sp, r7
 800b636:	bd80      	pop	{r7, pc}
 800b638:	2000a520 	.word	0x2000a520
 800b63c:	0800cad4 	.word	0x0800cad4

0800b640 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b082      	sub	sp, #8
 800b644:	af00      	add	r7, sp, #0
 800b646:	4603      	mov	r3, r0
 800b648:	6039      	str	r1, [r7, #0]
 800b64a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	221a      	movs	r2, #26
 800b650:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b652:	f000 f843 	bl	800b6dc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b656:	4b02      	ldr	r3, [pc, #8]	; (800b660 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b658:	4618      	mov	r0, r3
 800b65a:	3708      	adds	r7, #8
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}
 800b660:	200000f0 	.word	0x200000f0

0800b664 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b082      	sub	sp, #8
 800b668:	af00      	add	r7, sp, #0
 800b66a:	4603      	mov	r3, r0
 800b66c:	6039      	str	r1, [r7, #0]
 800b66e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b670:	79fb      	ldrb	r3, [r7, #7]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d105      	bne.n	800b682 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b676:	683a      	ldr	r2, [r7, #0]
 800b678:	4907      	ldr	r1, [pc, #28]	; (800b698 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b67a:	4808      	ldr	r0, [pc, #32]	; (800b69c <USBD_FS_ConfigStrDescriptor+0x38>)
 800b67c:	f7fb fb5a 	bl	8006d34 <USBD_GetString>
 800b680:	e004      	b.n	800b68c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b682:	683a      	ldr	r2, [r7, #0]
 800b684:	4904      	ldr	r1, [pc, #16]	; (800b698 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b686:	4805      	ldr	r0, [pc, #20]	; (800b69c <USBD_FS_ConfigStrDescriptor+0x38>)
 800b688:	f7fb fb54 	bl	8006d34 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b68c:	4b02      	ldr	r3, [pc, #8]	; (800b698 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3708      	adds	r7, #8
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}
 800b696:	bf00      	nop
 800b698:	2000a520 	.word	0x2000a520
 800b69c:	0800cae8 	.word	0x0800cae8

0800b6a0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b082      	sub	sp, #8
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	6039      	str	r1, [r7, #0]
 800b6aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b6ac:	79fb      	ldrb	r3, [r7, #7]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d105      	bne.n	800b6be <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b6b2:	683a      	ldr	r2, [r7, #0]
 800b6b4:	4907      	ldr	r1, [pc, #28]	; (800b6d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b6b6:	4808      	ldr	r0, [pc, #32]	; (800b6d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b6b8:	f7fb fb3c 	bl	8006d34 <USBD_GetString>
 800b6bc:	e004      	b.n	800b6c8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b6be:	683a      	ldr	r2, [r7, #0]
 800b6c0:	4904      	ldr	r1, [pc, #16]	; (800b6d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b6c2:	4805      	ldr	r0, [pc, #20]	; (800b6d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b6c4:	f7fb fb36 	bl	8006d34 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b6c8:	4b02      	ldr	r3, [pc, #8]	; (800b6d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	3708      	adds	r7, #8
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}
 800b6d2:	bf00      	nop
 800b6d4:	2000a520 	.word	0x2000a520
 800b6d8:	0800caf4 	.word	0x0800caf4

0800b6dc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b084      	sub	sp, #16
 800b6e0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b6e2:	4b0f      	ldr	r3, [pc, #60]	; (800b720 <Get_SerialNum+0x44>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b6e8:	4b0e      	ldr	r3, [pc, #56]	; (800b724 <Get_SerialNum+0x48>)
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b6ee:	4b0e      	ldr	r3, [pc, #56]	; (800b728 <Get_SerialNum+0x4c>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b6f4:	68fa      	ldr	r2, [r7, #12]
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	4413      	add	r3, r2
 800b6fa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d009      	beq.n	800b716 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b702:	2208      	movs	r2, #8
 800b704:	4909      	ldr	r1, [pc, #36]	; (800b72c <Get_SerialNum+0x50>)
 800b706:	68f8      	ldr	r0, [r7, #12]
 800b708:	f000 f814 	bl	800b734 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b70c:	2204      	movs	r2, #4
 800b70e:	4908      	ldr	r1, [pc, #32]	; (800b730 <Get_SerialNum+0x54>)
 800b710:	68b8      	ldr	r0, [r7, #8]
 800b712:	f000 f80f 	bl	800b734 <IntToUnicode>
  }
}
 800b716:	bf00      	nop
 800b718:	3710      	adds	r7, #16
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}
 800b71e:	bf00      	nop
 800b720:	1fff7a10 	.word	0x1fff7a10
 800b724:	1fff7a14 	.word	0x1fff7a14
 800b728:	1fff7a18 	.word	0x1fff7a18
 800b72c:	200000f2 	.word	0x200000f2
 800b730:	20000102 	.word	0x20000102

0800b734 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b734:	b480      	push	{r7}
 800b736:	b087      	sub	sp, #28
 800b738:	af00      	add	r7, sp, #0
 800b73a:	60f8      	str	r0, [r7, #12]
 800b73c:	60b9      	str	r1, [r7, #8]
 800b73e:	4613      	mov	r3, r2
 800b740:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b742:	2300      	movs	r3, #0
 800b744:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b746:	2300      	movs	r3, #0
 800b748:	75fb      	strb	r3, [r7, #23]
 800b74a:	e027      	b.n	800b79c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	0f1b      	lsrs	r3, r3, #28
 800b750:	2b09      	cmp	r3, #9
 800b752:	d80b      	bhi.n	800b76c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	0f1b      	lsrs	r3, r3, #28
 800b758:	b2da      	uxtb	r2, r3
 800b75a:	7dfb      	ldrb	r3, [r7, #23]
 800b75c:	005b      	lsls	r3, r3, #1
 800b75e:	4619      	mov	r1, r3
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	440b      	add	r3, r1
 800b764:	3230      	adds	r2, #48	; 0x30
 800b766:	b2d2      	uxtb	r2, r2
 800b768:	701a      	strb	r2, [r3, #0]
 800b76a:	e00a      	b.n	800b782 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	0f1b      	lsrs	r3, r3, #28
 800b770:	b2da      	uxtb	r2, r3
 800b772:	7dfb      	ldrb	r3, [r7, #23]
 800b774:	005b      	lsls	r3, r3, #1
 800b776:	4619      	mov	r1, r3
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	440b      	add	r3, r1
 800b77c:	3237      	adds	r2, #55	; 0x37
 800b77e:	b2d2      	uxtb	r2, r2
 800b780:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	011b      	lsls	r3, r3, #4
 800b786:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b788:	7dfb      	ldrb	r3, [r7, #23]
 800b78a:	005b      	lsls	r3, r3, #1
 800b78c:	3301      	adds	r3, #1
 800b78e:	68ba      	ldr	r2, [r7, #8]
 800b790:	4413      	add	r3, r2
 800b792:	2200      	movs	r2, #0
 800b794:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b796:	7dfb      	ldrb	r3, [r7, #23]
 800b798:	3301      	adds	r3, #1
 800b79a:	75fb      	strb	r3, [r7, #23]
 800b79c:	7dfa      	ldrb	r2, [r7, #23]
 800b79e:	79fb      	ldrb	r3, [r7, #7]
 800b7a0:	429a      	cmp	r2, r3
 800b7a2:	d3d3      	bcc.n	800b74c <IntToUnicode+0x18>
  }
}
 800b7a4:	bf00      	nop
 800b7a6:	bf00      	nop
 800b7a8:	371c      	adds	r7, #28
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b0:	4770      	bx	lr
	...

0800b7b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b08a      	sub	sp, #40	; 0x28
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b7bc:	f107 0314 	add.w	r3, r7, #20
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	601a      	str	r2, [r3, #0]
 800b7c4:	605a      	str	r2, [r3, #4]
 800b7c6:	609a      	str	r2, [r3, #8]
 800b7c8:	60da      	str	r2, [r3, #12]
 800b7ca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b7d4:	d147      	bne.n	800b866 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	613b      	str	r3, [r7, #16]
 800b7da:	4b25      	ldr	r3, [pc, #148]	; (800b870 <HAL_PCD_MspInit+0xbc>)
 800b7dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7de:	4a24      	ldr	r2, [pc, #144]	; (800b870 <HAL_PCD_MspInit+0xbc>)
 800b7e0:	f043 0301 	orr.w	r3, r3, #1
 800b7e4:	6313      	str	r3, [r2, #48]	; 0x30
 800b7e6:	4b22      	ldr	r3, [pc, #136]	; (800b870 <HAL_PCD_MspInit+0xbc>)
 800b7e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7ea:	f003 0301 	and.w	r3, r3, #1
 800b7ee:	613b      	str	r3, [r7, #16]
 800b7f0:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800b7f2:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800b7f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b7f8:	2302      	movs	r3, #2
 800b7fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b800:	2303      	movs	r3, #3
 800b802:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b804:	230a      	movs	r3, #10
 800b806:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b808:	f107 0314 	add.w	r3, r7, #20
 800b80c:	4619      	mov	r1, r3
 800b80e:	4819      	ldr	r0, [pc, #100]	; (800b874 <HAL_PCD_MspInit+0xc0>)
 800b810:	f7f5 fbdc 	bl	8000fcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800b814:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b818:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b81a:	2300      	movs	r3, #0
 800b81c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b81e:	2300      	movs	r3, #0
 800b820:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b822:	f107 0314 	add.w	r3, r7, #20
 800b826:	4619      	mov	r1, r3
 800b828:	4812      	ldr	r0, [pc, #72]	; (800b874 <HAL_PCD_MspInit+0xc0>)
 800b82a:	f7f5 fbcf 	bl	8000fcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b82e:	4b10      	ldr	r3, [pc, #64]	; (800b870 <HAL_PCD_MspInit+0xbc>)
 800b830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b832:	4a0f      	ldr	r2, [pc, #60]	; (800b870 <HAL_PCD_MspInit+0xbc>)
 800b834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b838:	6353      	str	r3, [r2, #52]	; 0x34
 800b83a:	2300      	movs	r3, #0
 800b83c:	60fb      	str	r3, [r7, #12]
 800b83e:	4b0c      	ldr	r3, [pc, #48]	; (800b870 <HAL_PCD_MspInit+0xbc>)
 800b840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b842:	4a0b      	ldr	r2, [pc, #44]	; (800b870 <HAL_PCD_MspInit+0xbc>)
 800b844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b848:	6453      	str	r3, [r2, #68]	; 0x44
 800b84a:	4b09      	ldr	r3, [pc, #36]	; (800b870 <HAL_PCD_MspInit+0xbc>)
 800b84c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b84e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b852:	60fb      	str	r3, [r7, #12]
 800b854:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800b856:	2200      	movs	r2, #0
 800b858:	2105      	movs	r1, #5
 800b85a:	2043      	movs	r0, #67	; 0x43
 800b85c:	f7f5 fb8c 	bl	8000f78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b860:	2043      	movs	r0, #67	; 0x43
 800b862:	f7f5 fba5 	bl	8000fb0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b866:	bf00      	nop
 800b868:	3728      	adds	r7, #40	; 0x28
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}
 800b86e:	bf00      	nop
 800b870:	40023800 	.word	0x40023800
 800b874:	40020000 	.word	0x40020000

0800b878 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b082      	sub	sp, #8
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b88c:	4619      	mov	r1, r3
 800b88e:	4610      	mov	r0, r2
 800b890:	f7fa f8f1 	bl	8005a76 <USBD_LL_SetupStage>
}
 800b894:	bf00      	nop
 800b896:	3708      	adds	r7, #8
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}

0800b89c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b082      	sub	sp, #8
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
 800b8a4:	460b      	mov	r3, r1
 800b8a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b8ae:	78fa      	ldrb	r2, [r7, #3]
 800b8b0:	6879      	ldr	r1, [r7, #4]
 800b8b2:	4613      	mov	r3, r2
 800b8b4:	00db      	lsls	r3, r3, #3
 800b8b6:	4413      	add	r3, r2
 800b8b8:	009b      	lsls	r3, r3, #2
 800b8ba:	440b      	add	r3, r1
 800b8bc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800b8c0:	681a      	ldr	r2, [r3, #0]
 800b8c2:	78fb      	ldrb	r3, [r7, #3]
 800b8c4:	4619      	mov	r1, r3
 800b8c6:	f7fa f92b 	bl	8005b20 <USBD_LL_DataOutStage>
}
 800b8ca:	bf00      	nop
 800b8cc:	3708      	adds	r7, #8
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}

0800b8d2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8d2:	b580      	push	{r7, lr}
 800b8d4:	b082      	sub	sp, #8
 800b8d6:	af00      	add	r7, sp, #0
 800b8d8:	6078      	str	r0, [r7, #4]
 800b8da:	460b      	mov	r3, r1
 800b8dc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b8e4:	78fa      	ldrb	r2, [r7, #3]
 800b8e6:	6879      	ldr	r1, [r7, #4]
 800b8e8:	4613      	mov	r3, r2
 800b8ea:	00db      	lsls	r3, r3, #3
 800b8ec:	4413      	add	r3, r2
 800b8ee:	009b      	lsls	r3, r3, #2
 800b8f0:	440b      	add	r3, r1
 800b8f2:	334c      	adds	r3, #76	; 0x4c
 800b8f4:	681a      	ldr	r2, [r3, #0]
 800b8f6:	78fb      	ldrb	r3, [r7, #3]
 800b8f8:	4619      	mov	r1, r3
 800b8fa:	f7fa f9c4 	bl	8005c86 <USBD_LL_DataInStage>
}
 800b8fe:	bf00      	nop
 800b900:	3708      	adds	r7, #8
 800b902:	46bd      	mov	sp, r7
 800b904:	bd80      	pop	{r7, pc}

0800b906 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b906:	b580      	push	{r7, lr}
 800b908:	b082      	sub	sp, #8
 800b90a:	af00      	add	r7, sp, #0
 800b90c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b914:	4618      	mov	r0, r3
 800b916:	f7fa faf8 	bl	8005f0a <USBD_LL_SOF>
}
 800b91a:	bf00      	nop
 800b91c:	3708      	adds	r7, #8
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}

0800b922 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b922:	b580      	push	{r7, lr}
 800b924:	b084      	sub	sp, #16
 800b926:	af00      	add	r7, sp, #0
 800b928:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b92a:	2301      	movs	r3, #1
 800b92c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	68db      	ldr	r3, [r3, #12]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d102      	bne.n	800b93c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b936:	2300      	movs	r3, #0
 800b938:	73fb      	strb	r3, [r7, #15]
 800b93a:	e008      	b.n	800b94e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	68db      	ldr	r3, [r3, #12]
 800b940:	2b02      	cmp	r3, #2
 800b942:	d102      	bne.n	800b94a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b944:	2301      	movs	r3, #1
 800b946:	73fb      	strb	r3, [r7, #15]
 800b948:	e001      	b.n	800b94e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b94a:	f7f5 f8b5 	bl	8000ab8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b954:	7bfa      	ldrb	r2, [r7, #15]
 800b956:	4611      	mov	r1, r2
 800b958:	4618      	mov	r0, r3
 800b95a:	f7fa fa98 	bl	8005e8e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b964:	4618      	mov	r0, r3
 800b966:	f7fa fa40 	bl	8005dea <USBD_LL_Reset>
}
 800b96a:	bf00      	nop
 800b96c:	3710      	adds	r7, #16
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd80      	pop	{r7, pc}
	...

0800b974 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b082      	sub	sp, #8
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b982:	4618      	mov	r0, r3
 800b984:	f7fa fa93 	bl	8005eae <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	687a      	ldr	r2, [r7, #4]
 800b994:	6812      	ldr	r2, [r2, #0]
 800b996:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b99a:	f043 0301 	orr.w	r3, r3, #1
 800b99e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6a1b      	ldr	r3, [r3, #32]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d005      	beq.n	800b9b4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b9a8:	4b04      	ldr	r3, [pc, #16]	; (800b9bc <HAL_PCD_SuspendCallback+0x48>)
 800b9aa:	691b      	ldr	r3, [r3, #16]
 800b9ac:	4a03      	ldr	r2, [pc, #12]	; (800b9bc <HAL_PCD_SuspendCallback+0x48>)
 800b9ae:	f043 0306 	orr.w	r3, r3, #6
 800b9b2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b9b4:	bf00      	nop
 800b9b6:	3708      	adds	r7, #8
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}
 800b9bc:	e000ed00 	.word	0xe000ed00

0800b9c0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b082      	sub	sp, #8
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f7fa fa83 	bl	8005eda <USBD_LL_Resume>
}
 800b9d4:	bf00      	nop
 800b9d6:	3708      	adds	r7, #8
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	bd80      	pop	{r7, pc}

0800b9dc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b082      	sub	sp, #8
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
 800b9e4:	460b      	mov	r3, r1
 800b9e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b9ee:	78fa      	ldrb	r2, [r7, #3]
 800b9f0:	4611      	mov	r1, r2
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	f7fa fadb 	bl	8005fae <USBD_LL_IsoOUTIncomplete>
}
 800b9f8:	bf00      	nop
 800b9fa:	3708      	adds	r7, #8
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}

0800ba00 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b082      	sub	sp, #8
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
 800ba08:	460b      	mov	r3, r1
 800ba0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ba12:	78fa      	ldrb	r2, [r7, #3]
 800ba14:	4611      	mov	r1, r2
 800ba16:	4618      	mov	r0, r3
 800ba18:	f7fa fa97 	bl	8005f4a <USBD_LL_IsoINIncomplete>
}
 800ba1c:	bf00      	nop
 800ba1e:	3708      	adds	r7, #8
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bd80      	pop	{r7, pc}

0800ba24 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b082      	sub	sp, #8
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ba32:	4618      	mov	r0, r3
 800ba34:	f7fa faed 	bl	8006012 <USBD_LL_DevConnected>
}
 800ba38:	bf00      	nop
 800ba3a:	3708      	adds	r7, #8
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}

0800ba40 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b082      	sub	sp, #8
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f7fa faea 	bl	8006028 <USBD_LL_DevDisconnected>
}
 800ba54:	bf00      	nop
 800ba56:	3708      	adds	r7, #8
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bd80      	pop	{r7, pc}

0800ba5c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b082      	sub	sp, #8
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	781b      	ldrb	r3, [r3, #0]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d13c      	bne.n	800bae6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ba6c:	4a20      	ldr	r2, [pc, #128]	; (800baf0 <USBD_LL_Init+0x94>)
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	4a1e      	ldr	r2, [pc, #120]	; (800baf0 <USBD_LL_Init+0x94>)
 800ba78:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ba7c:	4b1c      	ldr	r3, [pc, #112]	; (800baf0 <USBD_LL_Init+0x94>)
 800ba7e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ba82:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ba84:	4b1a      	ldr	r3, [pc, #104]	; (800baf0 <USBD_LL_Init+0x94>)
 800ba86:	2204      	movs	r2, #4
 800ba88:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ba8a:	4b19      	ldr	r3, [pc, #100]	; (800baf0 <USBD_LL_Init+0x94>)
 800ba8c:	2202      	movs	r2, #2
 800ba8e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ba90:	4b17      	ldr	r3, [pc, #92]	; (800baf0 <USBD_LL_Init+0x94>)
 800ba92:	2200      	movs	r2, #0
 800ba94:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ba96:	4b16      	ldr	r3, [pc, #88]	; (800baf0 <USBD_LL_Init+0x94>)
 800ba98:	2202      	movs	r2, #2
 800ba9a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800ba9c:	4b14      	ldr	r3, [pc, #80]	; (800baf0 <USBD_LL_Init+0x94>)
 800ba9e:	2201      	movs	r2, #1
 800baa0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800baa2:	4b13      	ldr	r3, [pc, #76]	; (800baf0 <USBD_LL_Init+0x94>)
 800baa4:	2200      	movs	r2, #0
 800baa6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800baa8:	4b11      	ldr	r3, [pc, #68]	; (800baf0 <USBD_LL_Init+0x94>)
 800baaa:	2200      	movs	r2, #0
 800baac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800baae:	4b10      	ldr	r3, [pc, #64]	; (800baf0 <USBD_LL_Init+0x94>)
 800bab0:	2201      	movs	r2, #1
 800bab2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bab4:	4b0e      	ldr	r3, [pc, #56]	; (800baf0 <USBD_LL_Init+0x94>)
 800bab6:	2200      	movs	r2, #0
 800bab8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800baba:	480d      	ldr	r0, [pc, #52]	; (800baf0 <USBD_LL_Init+0x94>)
 800babc:	f7f5 fc22 	bl	8001304 <HAL_PCD_Init>
 800bac0:	4603      	mov	r3, r0
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d001      	beq.n	800baca <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800bac6:	f7f4 fff7 	bl	8000ab8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800baca:	2180      	movs	r1, #128	; 0x80
 800bacc:	4808      	ldr	r0, [pc, #32]	; (800baf0 <USBD_LL_Init+0x94>)
 800bace:	f7f6 fe7a 	bl	80027c6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bad2:	2240      	movs	r2, #64	; 0x40
 800bad4:	2100      	movs	r1, #0
 800bad6:	4806      	ldr	r0, [pc, #24]	; (800baf0 <USBD_LL_Init+0x94>)
 800bad8:	f7f6 fe2e 	bl	8002738 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800badc:	2280      	movs	r2, #128	; 0x80
 800bade:	2101      	movs	r1, #1
 800bae0:	4803      	ldr	r0, [pc, #12]	; (800baf0 <USBD_LL_Init+0x94>)
 800bae2:	f7f6 fe29 	bl	8002738 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bae6:	2300      	movs	r3, #0
}
 800bae8:	4618      	mov	r0, r3
 800baea:	3708      	adds	r7, #8
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}
 800baf0:	2000a720 	.word	0x2000a720

0800baf4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b084      	sub	sp, #16
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bafc:	2300      	movs	r3, #0
 800bafe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb00:	2300      	movs	r3, #0
 800bb02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f7f5 fd17 	bl	800153e <HAL_PCD_Start>
 800bb10:	4603      	mov	r3, r0
 800bb12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb14:	7bfb      	ldrb	r3, [r7, #15]
 800bb16:	4618      	mov	r0, r3
 800bb18:	f000 f942 	bl	800bda0 <USBD_Get_USB_Status>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb20:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb22:	4618      	mov	r0, r3
 800bb24:	3710      	adds	r7, #16
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}

0800bb2a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bb2a:	b580      	push	{r7, lr}
 800bb2c:	b084      	sub	sp, #16
 800bb2e:	af00      	add	r7, sp, #0
 800bb30:	6078      	str	r0, [r7, #4]
 800bb32:	4608      	mov	r0, r1
 800bb34:	4611      	mov	r1, r2
 800bb36:	461a      	mov	r2, r3
 800bb38:	4603      	mov	r3, r0
 800bb3a:	70fb      	strb	r3, [r7, #3]
 800bb3c:	460b      	mov	r3, r1
 800bb3e:	70bb      	strb	r3, [r7, #2]
 800bb40:	4613      	mov	r3, r2
 800bb42:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb44:	2300      	movs	r3, #0
 800bb46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb48:	2300      	movs	r3, #0
 800bb4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bb52:	78bb      	ldrb	r3, [r7, #2]
 800bb54:	883a      	ldrh	r2, [r7, #0]
 800bb56:	78f9      	ldrb	r1, [r7, #3]
 800bb58:	f7f6 f9e8 	bl	8001f2c <HAL_PCD_EP_Open>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb60:	7bfb      	ldrb	r3, [r7, #15]
 800bb62:	4618      	mov	r0, r3
 800bb64:	f000 f91c 	bl	800bda0 <USBD_Get_USB_Status>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb6c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	3710      	adds	r7, #16
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}

0800bb76 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb76:	b580      	push	{r7, lr}
 800bb78:	b084      	sub	sp, #16
 800bb7a:	af00      	add	r7, sp, #0
 800bb7c:	6078      	str	r0, [r7, #4]
 800bb7e:	460b      	mov	r3, r1
 800bb80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb82:	2300      	movs	r3, #0
 800bb84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb86:	2300      	movs	r3, #0
 800bb88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bb90:	78fa      	ldrb	r2, [r7, #3]
 800bb92:	4611      	mov	r1, r2
 800bb94:	4618      	mov	r0, r3
 800bb96:	f7f6 fa31 	bl	8001ffc <HAL_PCD_EP_Close>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb9e:	7bfb      	ldrb	r3, [r7, #15]
 800bba0:	4618      	mov	r0, r3
 800bba2:	f000 f8fd 	bl	800bda0 <USBD_Get_USB_Status>
 800bba6:	4603      	mov	r3, r0
 800bba8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bbaa:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbac:	4618      	mov	r0, r3
 800bbae:	3710      	adds	r7, #16
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd80      	pop	{r7, pc}

0800bbb4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b084      	sub	sp, #16
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
 800bbbc:	460b      	mov	r3, r1
 800bbbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bbce:	78fa      	ldrb	r2, [r7, #3]
 800bbd0:	4611      	mov	r1, r2
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f7f6 fb09 	bl	80021ea <HAL_PCD_EP_SetStall>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbdc:	7bfb      	ldrb	r3, [r7, #15]
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f000 f8de 	bl	800bda0 <USBD_Get_USB_Status>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bbe8:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbea:	4618      	mov	r0, r3
 800bbec:	3710      	adds	r7, #16
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	bd80      	pop	{r7, pc}

0800bbf2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbf2:	b580      	push	{r7, lr}
 800bbf4:	b084      	sub	sp, #16
 800bbf6:	af00      	add	r7, sp, #0
 800bbf8:	6078      	str	r0, [r7, #4]
 800bbfa:	460b      	mov	r3, r1
 800bbfc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbfe:	2300      	movs	r3, #0
 800bc00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc02:	2300      	movs	r3, #0
 800bc04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bc0c:	78fa      	ldrb	r2, [r7, #3]
 800bc0e:	4611      	mov	r1, r2
 800bc10:	4618      	mov	r0, r3
 800bc12:	f7f6 fb4e 	bl	80022b2 <HAL_PCD_EP_ClrStall>
 800bc16:	4603      	mov	r3, r0
 800bc18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc1a:	7bfb      	ldrb	r3, [r7, #15]
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f000 f8bf 	bl	800bda0 <USBD_Get_USB_Status>
 800bc22:	4603      	mov	r3, r0
 800bc24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc26:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	3710      	adds	r7, #16
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}

0800bc30 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc30:	b480      	push	{r7}
 800bc32:	b085      	sub	sp, #20
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
 800bc38:	460b      	mov	r3, r1
 800bc3a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bc42:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bc44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	da0b      	bge.n	800bc64 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bc4c:	78fb      	ldrb	r3, [r7, #3]
 800bc4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bc52:	68f9      	ldr	r1, [r7, #12]
 800bc54:	4613      	mov	r3, r2
 800bc56:	00db      	lsls	r3, r3, #3
 800bc58:	4413      	add	r3, r2
 800bc5a:	009b      	lsls	r3, r3, #2
 800bc5c:	440b      	add	r3, r1
 800bc5e:	333e      	adds	r3, #62	; 0x3e
 800bc60:	781b      	ldrb	r3, [r3, #0]
 800bc62:	e00b      	b.n	800bc7c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bc64:	78fb      	ldrb	r3, [r7, #3]
 800bc66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bc6a:	68f9      	ldr	r1, [r7, #12]
 800bc6c:	4613      	mov	r3, r2
 800bc6e:	00db      	lsls	r3, r3, #3
 800bc70:	4413      	add	r3, r2
 800bc72:	009b      	lsls	r3, r3, #2
 800bc74:	440b      	add	r3, r1
 800bc76:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800bc7a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	3714      	adds	r7, #20
 800bc80:	46bd      	mov	sp, r7
 800bc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc86:	4770      	bx	lr

0800bc88 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b084      	sub	sp, #16
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
 800bc90:	460b      	mov	r3, r1
 800bc92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc94:	2300      	movs	r3, #0
 800bc96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc98:	2300      	movs	r3, #0
 800bc9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bca2:	78fa      	ldrb	r2, [r7, #3]
 800bca4:	4611      	mov	r1, r2
 800bca6:	4618      	mov	r0, r3
 800bca8:	f7f6 f91b 	bl	8001ee2 <HAL_PCD_SetAddress>
 800bcac:	4603      	mov	r3, r0
 800bcae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bcb0:	7bfb      	ldrb	r3, [r7, #15]
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	f000 f874 	bl	800bda0 <USBD_Get_USB_Status>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bcbc:	7bbb      	ldrb	r3, [r7, #14]
}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	3710      	adds	r7, #16
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	bd80      	pop	{r7, pc}

0800bcc6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bcc6:	b580      	push	{r7, lr}
 800bcc8:	b086      	sub	sp, #24
 800bcca:	af00      	add	r7, sp, #0
 800bccc:	60f8      	str	r0, [r7, #12]
 800bcce:	607a      	str	r2, [r7, #4]
 800bcd0:	603b      	str	r3, [r7, #0]
 800bcd2:	460b      	mov	r3, r1
 800bcd4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bce4:	7af9      	ldrb	r1, [r7, #11]
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	687a      	ldr	r2, [r7, #4]
 800bcea:	f7f6 fa34 	bl	8002156 <HAL_PCD_EP_Transmit>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bcf2:	7dfb      	ldrb	r3, [r7, #23]
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	f000 f853 	bl	800bda0 <USBD_Get_USB_Status>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bcfe:	7dbb      	ldrb	r3, [r7, #22]
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	3718      	adds	r7, #24
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}

0800bd08 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b086      	sub	sp, #24
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	60f8      	str	r0, [r7, #12]
 800bd10:	607a      	str	r2, [r7, #4]
 800bd12:	603b      	str	r3, [r7, #0]
 800bd14:	460b      	mov	r3, r1
 800bd16:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd18:	2300      	movs	r3, #0
 800bd1a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bd26:	7af9      	ldrb	r1, [r7, #11]
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	687a      	ldr	r2, [r7, #4]
 800bd2c:	f7f6 f9b0 	bl	8002090 <HAL_PCD_EP_Receive>
 800bd30:	4603      	mov	r3, r0
 800bd32:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd34:	7dfb      	ldrb	r3, [r7, #23]
 800bd36:	4618      	mov	r0, r3
 800bd38:	f000 f832 	bl	800bda0 <USBD_Get_USB_Status>
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bd40:	7dbb      	ldrb	r3, [r7, #22]
}
 800bd42:	4618      	mov	r0, r3
 800bd44:	3718      	adds	r7, #24
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bd80      	pop	{r7, pc}

0800bd4a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd4a:	b580      	push	{r7, lr}
 800bd4c:	b082      	sub	sp, #8
 800bd4e:	af00      	add	r7, sp, #0
 800bd50:	6078      	str	r0, [r7, #4]
 800bd52:	460b      	mov	r3, r1
 800bd54:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bd5c:	78fa      	ldrb	r2, [r7, #3]
 800bd5e:	4611      	mov	r1, r2
 800bd60:	4618      	mov	r0, r3
 800bd62:	f7f6 f9e0 	bl	8002126 <HAL_PCD_EP_GetRxCount>
 800bd66:	4603      	mov	r3, r0
}
 800bd68:	4618      	mov	r0, r3
 800bd6a:	3708      	adds	r7, #8
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bd80      	pop	{r7, pc}

0800bd70 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bd70:	b480      	push	{r7}
 800bd72:	b083      	sub	sp, #12
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bd78:	4b03      	ldr	r3, [pc, #12]	; (800bd88 <USBD_static_malloc+0x18>)
}
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	370c      	adds	r7, #12
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd84:	4770      	bx	lr
 800bd86:	bf00      	nop
 800bd88:	2000ac2c 	.word	0x2000ac2c

0800bd8c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bd8c:	b480      	push	{r7}
 800bd8e:	b083      	sub	sp, #12
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]

}
 800bd94:	bf00      	nop
 800bd96:	370c      	adds	r7, #12
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9e:	4770      	bx	lr

0800bda0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bda0:	b480      	push	{r7}
 800bda2:	b085      	sub	sp, #20
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	4603      	mov	r3, r0
 800bda8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdaa:	2300      	movs	r3, #0
 800bdac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bdae:	79fb      	ldrb	r3, [r7, #7]
 800bdb0:	2b03      	cmp	r3, #3
 800bdb2:	d817      	bhi.n	800bde4 <USBD_Get_USB_Status+0x44>
 800bdb4:	a201      	add	r2, pc, #4	; (adr r2, 800bdbc <USBD_Get_USB_Status+0x1c>)
 800bdb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdba:	bf00      	nop
 800bdbc:	0800bdcd 	.word	0x0800bdcd
 800bdc0:	0800bdd3 	.word	0x0800bdd3
 800bdc4:	0800bdd9 	.word	0x0800bdd9
 800bdc8:	0800bddf 	.word	0x0800bddf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bdcc:	2300      	movs	r3, #0
 800bdce:	73fb      	strb	r3, [r7, #15]
    break;
 800bdd0:	e00b      	b.n	800bdea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bdd2:	2303      	movs	r3, #3
 800bdd4:	73fb      	strb	r3, [r7, #15]
    break;
 800bdd6:	e008      	b.n	800bdea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bdd8:	2301      	movs	r3, #1
 800bdda:	73fb      	strb	r3, [r7, #15]
    break;
 800bddc:	e005      	b.n	800bdea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bdde:	2303      	movs	r3, #3
 800bde0:	73fb      	strb	r3, [r7, #15]
    break;
 800bde2:	e002      	b.n	800bdea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bde4:	2303      	movs	r3, #3
 800bde6:	73fb      	strb	r3, [r7, #15]
    break;
 800bde8:	bf00      	nop
  }
  return usb_status;
 800bdea:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	3714      	adds	r7, #20
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf6:	4770      	bx	lr

0800bdf8 <__errno>:
 800bdf8:	4b01      	ldr	r3, [pc, #4]	; (800be00 <__errno+0x8>)
 800bdfa:	6818      	ldr	r0, [r3, #0]
 800bdfc:	4770      	bx	lr
 800bdfe:	bf00      	nop
 800be00:	2000010c 	.word	0x2000010c

0800be04 <__libc_init_array>:
 800be04:	b570      	push	{r4, r5, r6, lr}
 800be06:	4d0d      	ldr	r5, [pc, #52]	; (800be3c <__libc_init_array+0x38>)
 800be08:	4c0d      	ldr	r4, [pc, #52]	; (800be40 <__libc_init_array+0x3c>)
 800be0a:	1b64      	subs	r4, r4, r5
 800be0c:	10a4      	asrs	r4, r4, #2
 800be0e:	2600      	movs	r6, #0
 800be10:	42a6      	cmp	r6, r4
 800be12:	d109      	bne.n	800be28 <__libc_init_array+0x24>
 800be14:	4d0b      	ldr	r5, [pc, #44]	; (800be44 <__libc_init_array+0x40>)
 800be16:	4c0c      	ldr	r4, [pc, #48]	; (800be48 <__libc_init_array+0x44>)
 800be18:	f000 fd28 	bl	800c86c <_init>
 800be1c:	1b64      	subs	r4, r4, r5
 800be1e:	10a4      	asrs	r4, r4, #2
 800be20:	2600      	movs	r6, #0
 800be22:	42a6      	cmp	r6, r4
 800be24:	d105      	bne.n	800be32 <__libc_init_array+0x2e>
 800be26:	bd70      	pop	{r4, r5, r6, pc}
 800be28:	f855 3b04 	ldr.w	r3, [r5], #4
 800be2c:	4798      	blx	r3
 800be2e:	3601      	adds	r6, #1
 800be30:	e7ee      	b.n	800be10 <__libc_init_array+0xc>
 800be32:	f855 3b04 	ldr.w	r3, [r5], #4
 800be36:	4798      	blx	r3
 800be38:	3601      	adds	r6, #1
 800be3a:	e7f2      	b.n	800be22 <__libc_init_array+0x1e>
 800be3c:	0800cc0c 	.word	0x0800cc0c
 800be40:	0800cc0c 	.word	0x0800cc0c
 800be44:	0800cc0c 	.word	0x0800cc0c
 800be48:	0800cc10 	.word	0x0800cc10

0800be4c <__retarget_lock_acquire_recursive>:
 800be4c:	4770      	bx	lr

0800be4e <__retarget_lock_release_recursive>:
 800be4e:	4770      	bx	lr

0800be50 <memcpy>:
 800be50:	440a      	add	r2, r1
 800be52:	4291      	cmp	r1, r2
 800be54:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800be58:	d100      	bne.n	800be5c <memcpy+0xc>
 800be5a:	4770      	bx	lr
 800be5c:	b510      	push	{r4, lr}
 800be5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be62:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be66:	4291      	cmp	r1, r2
 800be68:	d1f9      	bne.n	800be5e <memcpy+0xe>
 800be6a:	bd10      	pop	{r4, pc}

0800be6c <memset>:
 800be6c:	4402      	add	r2, r0
 800be6e:	4603      	mov	r3, r0
 800be70:	4293      	cmp	r3, r2
 800be72:	d100      	bne.n	800be76 <memset+0xa>
 800be74:	4770      	bx	lr
 800be76:	f803 1b01 	strb.w	r1, [r3], #1
 800be7a:	e7f9      	b.n	800be70 <memset+0x4>

0800be7c <sbrk_aligned>:
 800be7c:	b570      	push	{r4, r5, r6, lr}
 800be7e:	4e0e      	ldr	r6, [pc, #56]	; (800beb8 <sbrk_aligned+0x3c>)
 800be80:	460c      	mov	r4, r1
 800be82:	6831      	ldr	r1, [r6, #0]
 800be84:	4605      	mov	r5, r0
 800be86:	b911      	cbnz	r1, 800be8e <sbrk_aligned+0x12>
 800be88:	f000 f8f6 	bl	800c078 <_sbrk_r>
 800be8c:	6030      	str	r0, [r6, #0]
 800be8e:	4621      	mov	r1, r4
 800be90:	4628      	mov	r0, r5
 800be92:	f000 f8f1 	bl	800c078 <_sbrk_r>
 800be96:	1c43      	adds	r3, r0, #1
 800be98:	d00a      	beq.n	800beb0 <sbrk_aligned+0x34>
 800be9a:	1cc4      	adds	r4, r0, #3
 800be9c:	f024 0403 	bic.w	r4, r4, #3
 800bea0:	42a0      	cmp	r0, r4
 800bea2:	d007      	beq.n	800beb4 <sbrk_aligned+0x38>
 800bea4:	1a21      	subs	r1, r4, r0
 800bea6:	4628      	mov	r0, r5
 800bea8:	f000 f8e6 	bl	800c078 <_sbrk_r>
 800beac:	3001      	adds	r0, #1
 800beae:	d101      	bne.n	800beb4 <sbrk_aligned+0x38>
 800beb0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800beb4:	4620      	mov	r0, r4
 800beb6:	bd70      	pop	{r4, r5, r6, pc}
 800beb8:	2000ae54 	.word	0x2000ae54

0800bebc <_malloc_r>:
 800bebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bec0:	1ccd      	adds	r5, r1, #3
 800bec2:	f025 0503 	bic.w	r5, r5, #3
 800bec6:	3508      	adds	r5, #8
 800bec8:	2d0c      	cmp	r5, #12
 800beca:	bf38      	it	cc
 800becc:	250c      	movcc	r5, #12
 800bece:	2d00      	cmp	r5, #0
 800bed0:	4607      	mov	r7, r0
 800bed2:	db01      	blt.n	800bed8 <_malloc_r+0x1c>
 800bed4:	42a9      	cmp	r1, r5
 800bed6:	d905      	bls.n	800bee4 <_malloc_r+0x28>
 800bed8:	230c      	movs	r3, #12
 800beda:	603b      	str	r3, [r7, #0]
 800bedc:	2600      	movs	r6, #0
 800bede:	4630      	mov	r0, r6
 800bee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bee4:	4e2e      	ldr	r6, [pc, #184]	; (800bfa0 <_malloc_r+0xe4>)
 800bee6:	f000 f927 	bl	800c138 <__malloc_lock>
 800beea:	6833      	ldr	r3, [r6, #0]
 800beec:	461c      	mov	r4, r3
 800beee:	bb34      	cbnz	r4, 800bf3e <_malloc_r+0x82>
 800bef0:	4629      	mov	r1, r5
 800bef2:	4638      	mov	r0, r7
 800bef4:	f7ff ffc2 	bl	800be7c <sbrk_aligned>
 800bef8:	1c43      	adds	r3, r0, #1
 800befa:	4604      	mov	r4, r0
 800befc:	d14d      	bne.n	800bf9a <_malloc_r+0xde>
 800befe:	6834      	ldr	r4, [r6, #0]
 800bf00:	4626      	mov	r6, r4
 800bf02:	2e00      	cmp	r6, #0
 800bf04:	d140      	bne.n	800bf88 <_malloc_r+0xcc>
 800bf06:	6823      	ldr	r3, [r4, #0]
 800bf08:	4631      	mov	r1, r6
 800bf0a:	4638      	mov	r0, r7
 800bf0c:	eb04 0803 	add.w	r8, r4, r3
 800bf10:	f000 f8b2 	bl	800c078 <_sbrk_r>
 800bf14:	4580      	cmp	r8, r0
 800bf16:	d13a      	bne.n	800bf8e <_malloc_r+0xd2>
 800bf18:	6821      	ldr	r1, [r4, #0]
 800bf1a:	3503      	adds	r5, #3
 800bf1c:	1a6d      	subs	r5, r5, r1
 800bf1e:	f025 0503 	bic.w	r5, r5, #3
 800bf22:	3508      	adds	r5, #8
 800bf24:	2d0c      	cmp	r5, #12
 800bf26:	bf38      	it	cc
 800bf28:	250c      	movcc	r5, #12
 800bf2a:	4629      	mov	r1, r5
 800bf2c:	4638      	mov	r0, r7
 800bf2e:	f7ff ffa5 	bl	800be7c <sbrk_aligned>
 800bf32:	3001      	adds	r0, #1
 800bf34:	d02b      	beq.n	800bf8e <_malloc_r+0xd2>
 800bf36:	6823      	ldr	r3, [r4, #0]
 800bf38:	442b      	add	r3, r5
 800bf3a:	6023      	str	r3, [r4, #0]
 800bf3c:	e00e      	b.n	800bf5c <_malloc_r+0xa0>
 800bf3e:	6822      	ldr	r2, [r4, #0]
 800bf40:	1b52      	subs	r2, r2, r5
 800bf42:	d41e      	bmi.n	800bf82 <_malloc_r+0xc6>
 800bf44:	2a0b      	cmp	r2, #11
 800bf46:	d916      	bls.n	800bf76 <_malloc_r+0xba>
 800bf48:	1961      	adds	r1, r4, r5
 800bf4a:	42a3      	cmp	r3, r4
 800bf4c:	6025      	str	r5, [r4, #0]
 800bf4e:	bf18      	it	ne
 800bf50:	6059      	strne	r1, [r3, #4]
 800bf52:	6863      	ldr	r3, [r4, #4]
 800bf54:	bf08      	it	eq
 800bf56:	6031      	streq	r1, [r6, #0]
 800bf58:	5162      	str	r2, [r4, r5]
 800bf5a:	604b      	str	r3, [r1, #4]
 800bf5c:	4638      	mov	r0, r7
 800bf5e:	f104 060b 	add.w	r6, r4, #11
 800bf62:	f000 f8ef 	bl	800c144 <__malloc_unlock>
 800bf66:	f026 0607 	bic.w	r6, r6, #7
 800bf6a:	1d23      	adds	r3, r4, #4
 800bf6c:	1af2      	subs	r2, r6, r3
 800bf6e:	d0b6      	beq.n	800bede <_malloc_r+0x22>
 800bf70:	1b9b      	subs	r3, r3, r6
 800bf72:	50a3      	str	r3, [r4, r2]
 800bf74:	e7b3      	b.n	800bede <_malloc_r+0x22>
 800bf76:	6862      	ldr	r2, [r4, #4]
 800bf78:	42a3      	cmp	r3, r4
 800bf7a:	bf0c      	ite	eq
 800bf7c:	6032      	streq	r2, [r6, #0]
 800bf7e:	605a      	strne	r2, [r3, #4]
 800bf80:	e7ec      	b.n	800bf5c <_malloc_r+0xa0>
 800bf82:	4623      	mov	r3, r4
 800bf84:	6864      	ldr	r4, [r4, #4]
 800bf86:	e7b2      	b.n	800beee <_malloc_r+0x32>
 800bf88:	4634      	mov	r4, r6
 800bf8a:	6876      	ldr	r6, [r6, #4]
 800bf8c:	e7b9      	b.n	800bf02 <_malloc_r+0x46>
 800bf8e:	230c      	movs	r3, #12
 800bf90:	603b      	str	r3, [r7, #0]
 800bf92:	4638      	mov	r0, r7
 800bf94:	f000 f8d6 	bl	800c144 <__malloc_unlock>
 800bf98:	e7a1      	b.n	800bede <_malloc_r+0x22>
 800bf9a:	6025      	str	r5, [r4, #0]
 800bf9c:	e7de      	b.n	800bf5c <_malloc_r+0xa0>
 800bf9e:	bf00      	nop
 800bfa0:	2000ae50 	.word	0x2000ae50

0800bfa4 <cleanup_glue>:
 800bfa4:	b538      	push	{r3, r4, r5, lr}
 800bfa6:	460c      	mov	r4, r1
 800bfa8:	6809      	ldr	r1, [r1, #0]
 800bfaa:	4605      	mov	r5, r0
 800bfac:	b109      	cbz	r1, 800bfb2 <cleanup_glue+0xe>
 800bfae:	f7ff fff9 	bl	800bfa4 <cleanup_glue>
 800bfb2:	4621      	mov	r1, r4
 800bfb4:	4628      	mov	r0, r5
 800bfb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bfba:	f000 b8c9 	b.w	800c150 <_free_r>
	...

0800bfc0 <_reclaim_reent>:
 800bfc0:	4b2c      	ldr	r3, [pc, #176]	; (800c074 <_reclaim_reent+0xb4>)
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	4283      	cmp	r3, r0
 800bfc6:	b570      	push	{r4, r5, r6, lr}
 800bfc8:	4604      	mov	r4, r0
 800bfca:	d051      	beq.n	800c070 <_reclaim_reent+0xb0>
 800bfcc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bfce:	b143      	cbz	r3, 800bfe2 <_reclaim_reent+0x22>
 800bfd0:	68db      	ldr	r3, [r3, #12]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d14a      	bne.n	800c06c <_reclaim_reent+0xac>
 800bfd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bfd8:	6819      	ldr	r1, [r3, #0]
 800bfda:	b111      	cbz	r1, 800bfe2 <_reclaim_reent+0x22>
 800bfdc:	4620      	mov	r0, r4
 800bfde:	f000 f8b7 	bl	800c150 <_free_r>
 800bfe2:	6961      	ldr	r1, [r4, #20]
 800bfe4:	b111      	cbz	r1, 800bfec <_reclaim_reent+0x2c>
 800bfe6:	4620      	mov	r0, r4
 800bfe8:	f000 f8b2 	bl	800c150 <_free_r>
 800bfec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bfee:	b111      	cbz	r1, 800bff6 <_reclaim_reent+0x36>
 800bff0:	4620      	mov	r0, r4
 800bff2:	f000 f8ad 	bl	800c150 <_free_r>
 800bff6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bff8:	b111      	cbz	r1, 800c000 <_reclaim_reent+0x40>
 800bffa:	4620      	mov	r0, r4
 800bffc:	f000 f8a8 	bl	800c150 <_free_r>
 800c000:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c002:	b111      	cbz	r1, 800c00a <_reclaim_reent+0x4a>
 800c004:	4620      	mov	r0, r4
 800c006:	f000 f8a3 	bl	800c150 <_free_r>
 800c00a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c00c:	b111      	cbz	r1, 800c014 <_reclaim_reent+0x54>
 800c00e:	4620      	mov	r0, r4
 800c010:	f000 f89e 	bl	800c150 <_free_r>
 800c014:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c016:	b111      	cbz	r1, 800c01e <_reclaim_reent+0x5e>
 800c018:	4620      	mov	r0, r4
 800c01a:	f000 f899 	bl	800c150 <_free_r>
 800c01e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c020:	b111      	cbz	r1, 800c028 <_reclaim_reent+0x68>
 800c022:	4620      	mov	r0, r4
 800c024:	f000 f894 	bl	800c150 <_free_r>
 800c028:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c02a:	b111      	cbz	r1, 800c032 <_reclaim_reent+0x72>
 800c02c:	4620      	mov	r0, r4
 800c02e:	f000 f88f 	bl	800c150 <_free_r>
 800c032:	69a3      	ldr	r3, [r4, #24]
 800c034:	b1e3      	cbz	r3, 800c070 <_reclaim_reent+0xb0>
 800c036:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c038:	4620      	mov	r0, r4
 800c03a:	4798      	blx	r3
 800c03c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c03e:	b1b9      	cbz	r1, 800c070 <_reclaim_reent+0xb0>
 800c040:	4620      	mov	r0, r4
 800c042:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c046:	f7ff bfad 	b.w	800bfa4 <cleanup_glue>
 800c04a:	5949      	ldr	r1, [r1, r5]
 800c04c:	b941      	cbnz	r1, 800c060 <_reclaim_reent+0xa0>
 800c04e:	3504      	adds	r5, #4
 800c050:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c052:	2d80      	cmp	r5, #128	; 0x80
 800c054:	68d9      	ldr	r1, [r3, #12]
 800c056:	d1f8      	bne.n	800c04a <_reclaim_reent+0x8a>
 800c058:	4620      	mov	r0, r4
 800c05a:	f000 f879 	bl	800c150 <_free_r>
 800c05e:	e7ba      	b.n	800bfd6 <_reclaim_reent+0x16>
 800c060:	680e      	ldr	r6, [r1, #0]
 800c062:	4620      	mov	r0, r4
 800c064:	f000 f874 	bl	800c150 <_free_r>
 800c068:	4631      	mov	r1, r6
 800c06a:	e7ef      	b.n	800c04c <_reclaim_reent+0x8c>
 800c06c:	2500      	movs	r5, #0
 800c06e:	e7ef      	b.n	800c050 <_reclaim_reent+0x90>
 800c070:	bd70      	pop	{r4, r5, r6, pc}
 800c072:	bf00      	nop
 800c074:	2000010c 	.word	0x2000010c

0800c078 <_sbrk_r>:
 800c078:	b538      	push	{r3, r4, r5, lr}
 800c07a:	4d06      	ldr	r5, [pc, #24]	; (800c094 <_sbrk_r+0x1c>)
 800c07c:	2300      	movs	r3, #0
 800c07e:	4604      	mov	r4, r0
 800c080:	4608      	mov	r0, r1
 800c082:	602b      	str	r3, [r5, #0]
 800c084:	f7f4 fde8 	bl	8000c58 <_sbrk>
 800c088:	1c43      	adds	r3, r0, #1
 800c08a:	d102      	bne.n	800c092 <_sbrk_r+0x1a>
 800c08c:	682b      	ldr	r3, [r5, #0]
 800c08e:	b103      	cbz	r3, 800c092 <_sbrk_r+0x1a>
 800c090:	6023      	str	r3, [r4, #0]
 800c092:	bd38      	pop	{r3, r4, r5, pc}
 800c094:	2000ae58 	.word	0x2000ae58

0800c098 <siprintf>:
 800c098:	b40e      	push	{r1, r2, r3}
 800c09a:	b500      	push	{lr}
 800c09c:	b09c      	sub	sp, #112	; 0x70
 800c09e:	ab1d      	add	r3, sp, #116	; 0x74
 800c0a0:	9002      	str	r0, [sp, #8]
 800c0a2:	9006      	str	r0, [sp, #24]
 800c0a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c0a8:	4809      	ldr	r0, [pc, #36]	; (800c0d0 <siprintf+0x38>)
 800c0aa:	9107      	str	r1, [sp, #28]
 800c0ac:	9104      	str	r1, [sp, #16]
 800c0ae:	4909      	ldr	r1, [pc, #36]	; (800c0d4 <siprintf+0x3c>)
 800c0b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0b4:	9105      	str	r1, [sp, #20]
 800c0b6:	6800      	ldr	r0, [r0, #0]
 800c0b8:	9301      	str	r3, [sp, #4]
 800c0ba:	a902      	add	r1, sp, #8
 800c0bc:	f000 f8f0 	bl	800c2a0 <_svfiprintf_r>
 800c0c0:	9b02      	ldr	r3, [sp, #8]
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	701a      	strb	r2, [r3, #0]
 800c0c6:	b01c      	add	sp, #112	; 0x70
 800c0c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c0cc:	b003      	add	sp, #12
 800c0ce:	4770      	bx	lr
 800c0d0:	2000010c 	.word	0x2000010c
 800c0d4:	ffff0208 	.word	0xffff0208

0800c0d8 <strcpy>:
 800c0d8:	4603      	mov	r3, r0
 800c0da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c0de:	f803 2b01 	strb.w	r2, [r3], #1
 800c0e2:	2a00      	cmp	r2, #0
 800c0e4:	d1f9      	bne.n	800c0da <strcpy+0x2>
 800c0e6:	4770      	bx	lr

0800c0e8 <strncmp>:
 800c0e8:	b510      	push	{r4, lr}
 800c0ea:	b17a      	cbz	r2, 800c10c <strncmp+0x24>
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	3901      	subs	r1, #1
 800c0f0:	1884      	adds	r4, r0, r2
 800c0f2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c0f6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c0fa:	4290      	cmp	r0, r2
 800c0fc:	d101      	bne.n	800c102 <strncmp+0x1a>
 800c0fe:	42a3      	cmp	r3, r4
 800c100:	d101      	bne.n	800c106 <strncmp+0x1e>
 800c102:	1a80      	subs	r0, r0, r2
 800c104:	bd10      	pop	{r4, pc}
 800c106:	2800      	cmp	r0, #0
 800c108:	d1f3      	bne.n	800c0f2 <strncmp+0xa>
 800c10a:	e7fa      	b.n	800c102 <strncmp+0x1a>
 800c10c:	4610      	mov	r0, r2
 800c10e:	e7f9      	b.n	800c104 <strncmp+0x1c>

0800c110 <strncpy>:
 800c110:	b510      	push	{r4, lr}
 800c112:	3901      	subs	r1, #1
 800c114:	4603      	mov	r3, r0
 800c116:	b132      	cbz	r2, 800c126 <strncpy+0x16>
 800c118:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c11c:	f803 4b01 	strb.w	r4, [r3], #1
 800c120:	3a01      	subs	r2, #1
 800c122:	2c00      	cmp	r4, #0
 800c124:	d1f7      	bne.n	800c116 <strncpy+0x6>
 800c126:	441a      	add	r2, r3
 800c128:	2100      	movs	r1, #0
 800c12a:	4293      	cmp	r3, r2
 800c12c:	d100      	bne.n	800c130 <strncpy+0x20>
 800c12e:	bd10      	pop	{r4, pc}
 800c130:	f803 1b01 	strb.w	r1, [r3], #1
 800c134:	e7f9      	b.n	800c12a <strncpy+0x1a>
	...

0800c138 <__malloc_lock>:
 800c138:	4801      	ldr	r0, [pc, #4]	; (800c140 <__malloc_lock+0x8>)
 800c13a:	f7ff be87 	b.w	800be4c <__retarget_lock_acquire_recursive>
 800c13e:	bf00      	nop
 800c140:	2000ae4c 	.word	0x2000ae4c

0800c144 <__malloc_unlock>:
 800c144:	4801      	ldr	r0, [pc, #4]	; (800c14c <__malloc_unlock+0x8>)
 800c146:	f7ff be82 	b.w	800be4e <__retarget_lock_release_recursive>
 800c14a:	bf00      	nop
 800c14c:	2000ae4c 	.word	0x2000ae4c

0800c150 <_free_r>:
 800c150:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c152:	2900      	cmp	r1, #0
 800c154:	d044      	beq.n	800c1e0 <_free_r+0x90>
 800c156:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c15a:	9001      	str	r0, [sp, #4]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	f1a1 0404 	sub.w	r4, r1, #4
 800c162:	bfb8      	it	lt
 800c164:	18e4      	addlt	r4, r4, r3
 800c166:	f7ff ffe7 	bl	800c138 <__malloc_lock>
 800c16a:	4a1e      	ldr	r2, [pc, #120]	; (800c1e4 <_free_r+0x94>)
 800c16c:	9801      	ldr	r0, [sp, #4]
 800c16e:	6813      	ldr	r3, [r2, #0]
 800c170:	b933      	cbnz	r3, 800c180 <_free_r+0x30>
 800c172:	6063      	str	r3, [r4, #4]
 800c174:	6014      	str	r4, [r2, #0]
 800c176:	b003      	add	sp, #12
 800c178:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c17c:	f7ff bfe2 	b.w	800c144 <__malloc_unlock>
 800c180:	42a3      	cmp	r3, r4
 800c182:	d908      	bls.n	800c196 <_free_r+0x46>
 800c184:	6825      	ldr	r5, [r4, #0]
 800c186:	1961      	adds	r1, r4, r5
 800c188:	428b      	cmp	r3, r1
 800c18a:	bf01      	itttt	eq
 800c18c:	6819      	ldreq	r1, [r3, #0]
 800c18e:	685b      	ldreq	r3, [r3, #4]
 800c190:	1949      	addeq	r1, r1, r5
 800c192:	6021      	streq	r1, [r4, #0]
 800c194:	e7ed      	b.n	800c172 <_free_r+0x22>
 800c196:	461a      	mov	r2, r3
 800c198:	685b      	ldr	r3, [r3, #4]
 800c19a:	b10b      	cbz	r3, 800c1a0 <_free_r+0x50>
 800c19c:	42a3      	cmp	r3, r4
 800c19e:	d9fa      	bls.n	800c196 <_free_r+0x46>
 800c1a0:	6811      	ldr	r1, [r2, #0]
 800c1a2:	1855      	adds	r5, r2, r1
 800c1a4:	42a5      	cmp	r5, r4
 800c1a6:	d10b      	bne.n	800c1c0 <_free_r+0x70>
 800c1a8:	6824      	ldr	r4, [r4, #0]
 800c1aa:	4421      	add	r1, r4
 800c1ac:	1854      	adds	r4, r2, r1
 800c1ae:	42a3      	cmp	r3, r4
 800c1b0:	6011      	str	r1, [r2, #0]
 800c1b2:	d1e0      	bne.n	800c176 <_free_r+0x26>
 800c1b4:	681c      	ldr	r4, [r3, #0]
 800c1b6:	685b      	ldr	r3, [r3, #4]
 800c1b8:	6053      	str	r3, [r2, #4]
 800c1ba:	4421      	add	r1, r4
 800c1bc:	6011      	str	r1, [r2, #0]
 800c1be:	e7da      	b.n	800c176 <_free_r+0x26>
 800c1c0:	d902      	bls.n	800c1c8 <_free_r+0x78>
 800c1c2:	230c      	movs	r3, #12
 800c1c4:	6003      	str	r3, [r0, #0]
 800c1c6:	e7d6      	b.n	800c176 <_free_r+0x26>
 800c1c8:	6825      	ldr	r5, [r4, #0]
 800c1ca:	1961      	adds	r1, r4, r5
 800c1cc:	428b      	cmp	r3, r1
 800c1ce:	bf04      	itt	eq
 800c1d0:	6819      	ldreq	r1, [r3, #0]
 800c1d2:	685b      	ldreq	r3, [r3, #4]
 800c1d4:	6063      	str	r3, [r4, #4]
 800c1d6:	bf04      	itt	eq
 800c1d8:	1949      	addeq	r1, r1, r5
 800c1da:	6021      	streq	r1, [r4, #0]
 800c1dc:	6054      	str	r4, [r2, #4]
 800c1de:	e7ca      	b.n	800c176 <_free_r+0x26>
 800c1e0:	b003      	add	sp, #12
 800c1e2:	bd30      	pop	{r4, r5, pc}
 800c1e4:	2000ae50 	.word	0x2000ae50

0800c1e8 <__ssputs_r>:
 800c1e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1ec:	688e      	ldr	r6, [r1, #8]
 800c1ee:	429e      	cmp	r6, r3
 800c1f0:	4682      	mov	sl, r0
 800c1f2:	460c      	mov	r4, r1
 800c1f4:	4690      	mov	r8, r2
 800c1f6:	461f      	mov	r7, r3
 800c1f8:	d838      	bhi.n	800c26c <__ssputs_r+0x84>
 800c1fa:	898a      	ldrh	r2, [r1, #12]
 800c1fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c200:	d032      	beq.n	800c268 <__ssputs_r+0x80>
 800c202:	6825      	ldr	r5, [r4, #0]
 800c204:	6909      	ldr	r1, [r1, #16]
 800c206:	eba5 0901 	sub.w	r9, r5, r1
 800c20a:	6965      	ldr	r5, [r4, #20]
 800c20c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c210:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c214:	3301      	adds	r3, #1
 800c216:	444b      	add	r3, r9
 800c218:	106d      	asrs	r5, r5, #1
 800c21a:	429d      	cmp	r5, r3
 800c21c:	bf38      	it	cc
 800c21e:	461d      	movcc	r5, r3
 800c220:	0553      	lsls	r3, r2, #21
 800c222:	d531      	bpl.n	800c288 <__ssputs_r+0xa0>
 800c224:	4629      	mov	r1, r5
 800c226:	f7ff fe49 	bl	800bebc <_malloc_r>
 800c22a:	4606      	mov	r6, r0
 800c22c:	b950      	cbnz	r0, 800c244 <__ssputs_r+0x5c>
 800c22e:	230c      	movs	r3, #12
 800c230:	f8ca 3000 	str.w	r3, [sl]
 800c234:	89a3      	ldrh	r3, [r4, #12]
 800c236:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c23a:	81a3      	strh	r3, [r4, #12]
 800c23c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c244:	6921      	ldr	r1, [r4, #16]
 800c246:	464a      	mov	r2, r9
 800c248:	f7ff fe02 	bl	800be50 <memcpy>
 800c24c:	89a3      	ldrh	r3, [r4, #12]
 800c24e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c256:	81a3      	strh	r3, [r4, #12]
 800c258:	6126      	str	r6, [r4, #16]
 800c25a:	6165      	str	r5, [r4, #20]
 800c25c:	444e      	add	r6, r9
 800c25e:	eba5 0509 	sub.w	r5, r5, r9
 800c262:	6026      	str	r6, [r4, #0]
 800c264:	60a5      	str	r5, [r4, #8]
 800c266:	463e      	mov	r6, r7
 800c268:	42be      	cmp	r6, r7
 800c26a:	d900      	bls.n	800c26e <__ssputs_r+0x86>
 800c26c:	463e      	mov	r6, r7
 800c26e:	6820      	ldr	r0, [r4, #0]
 800c270:	4632      	mov	r2, r6
 800c272:	4641      	mov	r1, r8
 800c274:	f000 faa8 	bl	800c7c8 <memmove>
 800c278:	68a3      	ldr	r3, [r4, #8]
 800c27a:	1b9b      	subs	r3, r3, r6
 800c27c:	60a3      	str	r3, [r4, #8]
 800c27e:	6823      	ldr	r3, [r4, #0]
 800c280:	4433      	add	r3, r6
 800c282:	6023      	str	r3, [r4, #0]
 800c284:	2000      	movs	r0, #0
 800c286:	e7db      	b.n	800c240 <__ssputs_r+0x58>
 800c288:	462a      	mov	r2, r5
 800c28a:	f000 fab7 	bl	800c7fc <_realloc_r>
 800c28e:	4606      	mov	r6, r0
 800c290:	2800      	cmp	r0, #0
 800c292:	d1e1      	bne.n	800c258 <__ssputs_r+0x70>
 800c294:	6921      	ldr	r1, [r4, #16]
 800c296:	4650      	mov	r0, sl
 800c298:	f7ff ff5a 	bl	800c150 <_free_r>
 800c29c:	e7c7      	b.n	800c22e <__ssputs_r+0x46>
	...

0800c2a0 <_svfiprintf_r>:
 800c2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2a4:	4698      	mov	r8, r3
 800c2a6:	898b      	ldrh	r3, [r1, #12]
 800c2a8:	061b      	lsls	r3, r3, #24
 800c2aa:	b09d      	sub	sp, #116	; 0x74
 800c2ac:	4607      	mov	r7, r0
 800c2ae:	460d      	mov	r5, r1
 800c2b0:	4614      	mov	r4, r2
 800c2b2:	d50e      	bpl.n	800c2d2 <_svfiprintf_r+0x32>
 800c2b4:	690b      	ldr	r3, [r1, #16]
 800c2b6:	b963      	cbnz	r3, 800c2d2 <_svfiprintf_r+0x32>
 800c2b8:	2140      	movs	r1, #64	; 0x40
 800c2ba:	f7ff fdff 	bl	800bebc <_malloc_r>
 800c2be:	6028      	str	r0, [r5, #0]
 800c2c0:	6128      	str	r0, [r5, #16]
 800c2c2:	b920      	cbnz	r0, 800c2ce <_svfiprintf_r+0x2e>
 800c2c4:	230c      	movs	r3, #12
 800c2c6:	603b      	str	r3, [r7, #0]
 800c2c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c2cc:	e0d1      	b.n	800c472 <_svfiprintf_r+0x1d2>
 800c2ce:	2340      	movs	r3, #64	; 0x40
 800c2d0:	616b      	str	r3, [r5, #20]
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	9309      	str	r3, [sp, #36]	; 0x24
 800c2d6:	2320      	movs	r3, #32
 800c2d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c2dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2e0:	2330      	movs	r3, #48	; 0x30
 800c2e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c48c <_svfiprintf_r+0x1ec>
 800c2e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c2ea:	f04f 0901 	mov.w	r9, #1
 800c2ee:	4623      	mov	r3, r4
 800c2f0:	469a      	mov	sl, r3
 800c2f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2f6:	b10a      	cbz	r2, 800c2fc <_svfiprintf_r+0x5c>
 800c2f8:	2a25      	cmp	r2, #37	; 0x25
 800c2fa:	d1f9      	bne.n	800c2f0 <_svfiprintf_r+0x50>
 800c2fc:	ebba 0b04 	subs.w	fp, sl, r4
 800c300:	d00b      	beq.n	800c31a <_svfiprintf_r+0x7a>
 800c302:	465b      	mov	r3, fp
 800c304:	4622      	mov	r2, r4
 800c306:	4629      	mov	r1, r5
 800c308:	4638      	mov	r0, r7
 800c30a:	f7ff ff6d 	bl	800c1e8 <__ssputs_r>
 800c30e:	3001      	adds	r0, #1
 800c310:	f000 80aa 	beq.w	800c468 <_svfiprintf_r+0x1c8>
 800c314:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c316:	445a      	add	r2, fp
 800c318:	9209      	str	r2, [sp, #36]	; 0x24
 800c31a:	f89a 3000 	ldrb.w	r3, [sl]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	f000 80a2 	beq.w	800c468 <_svfiprintf_r+0x1c8>
 800c324:	2300      	movs	r3, #0
 800c326:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c32a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c32e:	f10a 0a01 	add.w	sl, sl, #1
 800c332:	9304      	str	r3, [sp, #16]
 800c334:	9307      	str	r3, [sp, #28]
 800c336:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c33a:	931a      	str	r3, [sp, #104]	; 0x68
 800c33c:	4654      	mov	r4, sl
 800c33e:	2205      	movs	r2, #5
 800c340:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c344:	4851      	ldr	r0, [pc, #324]	; (800c48c <_svfiprintf_r+0x1ec>)
 800c346:	f7f3 ff4b 	bl	80001e0 <memchr>
 800c34a:	9a04      	ldr	r2, [sp, #16]
 800c34c:	b9d8      	cbnz	r0, 800c386 <_svfiprintf_r+0xe6>
 800c34e:	06d0      	lsls	r0, r2, #27
 800c350:	bf44      	itt	mi
 800c352:	2320      	movmi	r3, #32
 800c354:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c358:	0711      	lsls	r1, r2, #28
 800c35a:	bf44      	itt	mi
 800c35c:	232b      	movmi	r3, #43	; 0x2b
 800c35e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c362:	f89a 3000 	ldrb.w	r3, [sl]
 800c366:	2b2a      	cmp	r3, #42	; 0x2a
 800c368:	d015      	beq.n	800c396 <_svfiprintf_r+0xf6>
 800c36a:	9a07      	ldr	r2, [sp, #28]
 800c36c:	4654      	mov	r4, sl
 800c36e:	2000      	movs	r0, #0
 800c370:	f04f 0c0a 	mov.w	ip, #10
 800c374:	4621      	mov	r1, r4
 800c376:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c37a:	3b30      	subs	r3, #48	; 0x30
 800c37c:	2b09      	cmp	r3, #9
 800c37e:	d94e      	bls.n	800c41e <_svfiprintf_r+0x17e>
 800c380:	b1b0      	cbz	r0, 800c3b0 <_svfiprintf_r+0x110>
 800c382:	9207      	str	r2, [sp, #28]
 800c384:	e014      	b.n	800c3b0 <_svfiprintf_r+0x110>
 800c386:	eba0 0308 	sub.w	r3, r0, r8
 800c38a:	fa09 f303 	lsl.w	r3, r9, r3
 800c38e:	4313      	orrs	r3, r2
 800c390:	9304      	str	r3, [sp, #16]
 800c392:	46a2      	mov	sl, r4
 800c394:	e7d2      	b.n	800c33c <_svfiprintf_r+0x9c>
 800c396:	9b03      	ldr	r3, [sp, #12]
 800c398:	1d19      	adds	r1, r3, #4
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	9103      	str	r1, [sp, #12]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	bfbb      	ittet	lt
 800c3a2:	425b      	neglt	r3, r3
 800c3a4:	f042 0202 	orrlt.w	r2, r2, #2
 800c3a8:	9307      	strge	r3, [sp, #28]
 800c3aa:	9307      	strlt	r3, [sp, #28]
 800c3ac:	bfb8      	it	lt
 800c3ae:	9204      	strlt	r2, [sp, #16]
 800c3b0:	7823      	ldrb	r3, [r4, #0]
 800c3b2:	2b2e      	cmp	r3, #46	; 0x2e
 800c3b4:	d10c      	bne.n	800c3d0 <_svfiprintf_r+0x130>
 800c3b6:	7863      	ldrb	r3, [r4, #1]
 800c3b8:	2b2a      	cmp	r3, #42	; 0x2a
 800c3ba:	d135      	bne.n	800c428 <_svfiprintf_r+0x188>
 800c3bc:	9b03      	ldr	r3, [sp, #12]
 800c3be:	1d1a      	adds	r2, r3, #4
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	9203      	str	r2, [sp, #12]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	bfb8      	it	lt
 800c3c8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c3cc:	3402      	adds	r4, #2
 800c3ce:	9305      	str	r3, [sp, #20]
 800c3d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c49c <_svfiprintf_r+0x1fc>
 800c3d4:	7821      	ldrb	r1, [r4, #0]
 800c3d6:	2203      	movs	r2, #3
 800c3d8:	4650      	mov	r0, sl
 800c3da:	f7f3 ff01 	bl	80001e0 <memchr>
 800c3de:	b140      	cbz	r0, 800c3f2 <_svfiprintf_r+0x152>
 800c3e0:	2340      	movs	r3, #64	; 0x40
 800c3e2:	eba0 000a 	sub.w	r0, r0, sl
 800c3e6:	fa03 f000 	lsl.w	r0, r3, r0
 800c3ea:	9b04      	ldr	r3, [sp, #16]
 800c3ec:	4303      	orrs	r3, r0
 800c3ee:	3401      	adds	r4, #1
 800c3f0:	9304      	str	r3, [sp, #16]
 800c3f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3f6:	4826      	ldr	r0, [pc, #152]	; (800c490 <_svfiprintf_r+0x1f0>)
 800c3f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c3fc:	2206      	movs	r2, #6
 800c3fe:	f7f3 feef 	bl	80001e0 <memchr>
 800c402:	2800      	cmp	r0, #0
 800c404:	d038      	beq.n	800c478 <_svfiprintf_r+0x1d8>
 800c406:	4b23      	ldr	r3, [pc, #140]	; (800c494 <_svfiprintf_r+0x1f4>)
 800c408:	bb1b      	cbnz	r3, 800c452 <_svfiprintf_r+0x1b2>
 800c40a:	9b03      	ldr	r3, [sp, #12]
 800c40c:	3307      	adds	r3, #7
 800c40e:	f023 0307 	bic.w	r3, r3, #7
 800c412:	3308      	adds	r3, #8
 800c414:	9303      	str	r3, [sp, #12]
 800c416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c418:	4433      	add	r3, r6
 800c41a:	9309      	str	r3, [sp, #36]	; 0x24
 800c41c:	e767      	b.n	800c2ee <_svfiprintf_r+0x4e>
 800c41e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c422:	460c      	mov	r4, r1
 800c424:	2001      	movs	r0, #1
 800c426:	e7a5      	b.n	800c374 <_svfiprintf_r+0xd4>
 800c428:	2300      	movs	r3, #0
 800c42a:	3401      	adds	r4, #1
 800c42c:	9305      	str	r3, [sp, #20]
 800c42e:	4619      	mov	r1, r3
 800c430:	f04f 0c0a 	mov.w	ip, #10
 800c434:	4620      	mov	r0, r4
 800c436:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c43a:	3a30      	subs	r2, #48	; 0x30
 800c43c:	2a09      	cmp	r2, #9
 800c43e:	d903      	bls.n	800c448 <_svfiprintf_r+0x1a8>
 800c440:	2b00      	cmp	r3, #0
 800c442:	d0c5      	beq.n	800c3d0 <_svfiprintf_r+0x130>
 800c444:	9105      	str	r1, [sp, #20]
 800c446:	e7c3      	b.n	800c3d0 <_svfiprintf_r+0x130>
 800c448:	fb0c 2101 	mla	r1, ip, r1, r2
 800c44c:	4604      	mov	r4, r0
 800c44e:	2301      	movs	r3, #1
 800c450:	e7f0      	b.n	800c434 <_svfiprintf_r+0x194>
 800c452:	ab03      	add	r3, sp, #12
 800c454:	9300      	str	r3, [sp, #0]
 800c456:	462a      	mov	r2, r5
 800c458:	4b0f      	ldr	r3, [pc, #60]	; (800c498 <_svfiprintf_r+0x1f8>)
 800c45a:	a904      	add	r1, sp, #16
 800c45c:	4638      	mov	r0, r7
 800c45e:	f3af 8000 	nop.w
 800c462:	1c42      	adds	r2, r0, #1
 800c464:	4606      	mov	r6, r0
 800c466:	d1d6      	bne.n	800c416 <_svfiprintf_r+0x176>
 800c468:	89ab      	ldrh	r3, [r5, #12]
 800c46a:	065b      	lsls	r3, r3, #25
 800c46c:	f53f af2c 	bmi.w	800c2c8 <_svfiprintf_r+0x28>
 800c470:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c472:	b01d      	add	sp, #116	; 0x74
 800c474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c478:	ab03      	add	r3, sp, #12
 800c47a:	9300      	str	r3, [sp, #0]
 800c47c:	462a      	mov	r2, r5
 800c47e:	4b06      	ldr	r3, [pc, #24]	; (800c498 <_svfiprintf_r+0x1f8>)
 800c480:	a904      	add	r1, sp, #16
 800c482:	4638      	mov	r0, r7
 800c484:	f000 f87a 	bl	800c57c <_printf_i>
 800c488:	e7eb      	b.n	800c462 <_svfiprintf_r+0x1c2>
 800c48a:	bf00      	nop
 800c48c:	0800cbd0 	.word	0x0800cbd0
 800c490:	0800cbda 	.word	0x0800cbda
 800c494:	00000000 	.word	0x00000000
 800c498:	0800c1e9 	.word	0x0800c1e9
 800c49c:	0800cbd6 	.word	0x0800cbd6

0800c4a0 <_printf_common>:
 800c4a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4a4:	4616      	mov	r6, r2
 800c4a6:	4699      	mov	r9, r3
 800c4a8:	688a      	ldr	r2, [r1, #8]
 800c4aa:	690b      	ldr	r3, [r1, #16]
 800c4ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c4b0:	4293      	cmp	r3, r2
 800c4b2:	bfb8      	it	lt
 800c4b4:	4613      	movlt	r3, r2
 800c4b6:	6033      	str	r3, [r6, #0]
 800c4b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c4bc:	4607      	mov	r7, r0
 800c4be:	460c      	mov	r4, r1
 800c4c0:	b10a      	cbz	r2, 800c4c6 <_printf_common+0x26>
 800c4c2:	3301      	adds	r3, #1
 800c4c4:	6033      	str	r3, [r6, #0]
 800c4c6:	6823      	ldr	r3, [r4, #0]
 800c4c8:	0699      	lsls	r1, r3, #26
 800c4ca:	bf42      	ittt	mi
 800c4cc:	6833      	ldrmi	r3, [r6, #0]
 800c4ce:	3302      	addmi	r3, #2
 800c4d0:	6033      	strmi	r3, [r6, #0]
 800c4d2:	6825      	ldr	r5, [r4, #0]
 800c4d4:	f015 0506 	ands.w	r5, r5, #6
 800c4d8:	d106      	bne.n	800c4e8 <_printf_common+0x48>
 800c4da:	f104 0a19 	add.w	sl, r4, #25
 800c4de:	68e3      	ldr	r3, [r4, #12]
 800c4e0:	6832      	ldr	r2, [r6, #0]
 800c4e2:	1a9b      	subs	r3, r3, r2
 800c4e4:	42ab      	cmp	r3, r5
 800c4e6:	dc26      	bgt.n	800c536 <_printf_common+0x96>
 800c4e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c4ec:	1e13      	subs	r3, r2, #0
 800c4ee:	6822      	ldr	r2, [r4, #0]
 800c4f0:	bf18      	it	ne
 800c4f2:	2301      	movne	r3, #1
 800c4f4:	0692      	lsls	r2, r2, #26
 800c4f6:	d42b      	bmi.n	800c550 <_printf_common+0xb0>
 800c4f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c4fc:	4649      	mov	r1, r9
 800c4fe:	4638      	mov	r0, r7
 800c500:	47c0      	blx	r8
 800c502:	3001      	adds	r0, #1
 800c504:	d01e      	beq.n	800c544 <_printf_common+0xa4>
 800c506:	6823      	ldr	r3, [r4, #0]
 800c508:	68e5      	ldr	r5, [r4, #12]
 800c50a:	6832      	ldr	r2, [r6, #0]
 800c50c:	f003 0306 	and.w	r3, r3, #6
 800c510:	2b04      	cmp	r3, #4
 800c512:	bf08      	it	eq
 800c514:	1aad      	subeq	r5, r5, r2
 800c516:	68a3      	ldr	r3, [r4, #8]
 800c518:	6922      	ldr	r2, [r4, #16]
 800c51a:	bf0c      	ite	eq
 800c51c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c520:	2500      	movne	r5, #0
 800c522:	4293      	cmp	r3, r2
 800c524:	bfc4      	itt	gt
 800c526:	1a9b      	subgt	r3, r3, r2
 800c528:	18ed      	addgt	r5, r5, r3
 800c52a:	2600      	movs	r6, #0
 800c52c:	341a      	adds	r4, #26
 800c52e:	42b5      	cmp	r5, r6
 800c530:	d11a      	bne.n	800c568 <_printf_common+0xc8>
 800c532:	2000      	movs	r0, #0
 800c534:	e008      	b.n	800c548 <_printf_common+0xa8>
 800c536:	2301      	movs	r3, #1
 800c538:	4652      	mov	r2, sl
 800c53a:	4649      	mov	r1, r9
 800c53c:	4638      	mov	r0, r7
 800c53e:	47c0      	blx	r8
 800c540:	3001      	adds	r0, #1
 800c542:	d103      	bne.n	800c54c <_printf_common+0xac>
 800c544:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c54c:	3501      	adds	r5, #1
 800c54e:	e7c6      	b.n	800c4de <_printf_common+0x3e>
 800c550:	18e1      	adds	r1, r4, r3
 800c552:	1c5a      	adds	r2, r3, #1
 800c554:	2030      	movs	r0, #48	; 0x30
 800c556:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c55a:	4422      	add	r2, r4
 800c55c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c560:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c564:	3302      	adds	r3, #2
 800c566:	e7c7      	b.n	800c4f8 <_printf_common+0x58>
 800c568:	2301      	movs	r3, #1
 800c56a:	4622      	mov	r2, r4
 800c56c:	4649      	mov	r1, r9
 800c56e:	4638      	mov	r0, r7
 800c570:	47c0      	blx	r8
 800c572:	3001      	adds	r0, #1
 800c574:	d0e6      	beq.n	800c544 <_printf_common+0xa4>
 800c576:	3601      	adds	r6, #1
 800c578:	e7d9      	b.n	800c52e <_printf_common+0x8e>
	...

0800c57c <_printf_i>:
 800c57c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c580:	7e0f      	ldrb	r7, [r1, #24]
 800c582:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c584:	2f78      	cmp	r7, #120	; 0x78
 800c586:	4691      	mov	r9, r2
 800c588:	4680      	mov	r8, r0
 800c58a:	460c      	mov	r4, r1
 800c58c:	469a      	mov	sl, r3
 800c58e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c592:	d807      	bhi.n	800c5a4 <_printf_i+0x28>
 800c594:	2f62      	cmp	r7, #98	; 0x62
 800c596:	d80a      	bhi.n	800c5ae <_printf_i+0x32>
 800c598:	2f00      	cmp	r7, #0
 800c59a:	f000 80d8 	beq.w	800c74e <_printf_i+0x1d2>
 800c59e:	2f58      	cmp	r7, #88	; 0x58
 800c5a0:	f000 80a3 	beq.w	800c6ea <_printf_i+0x16e>
 800c5a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c5a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c5ac:	e03a      	b.n	800c624 <_printf_i+0xa8>
 800c5ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c5b2:	2b15      	cmp	r3, #21
 800c5b4:	d8f6      	bhi.n	800c5a4 <_printf_i+0x28>
 800c5b6:	a101      	add	r1, pc, #4	; (adr r1, 800c5bc <_printf_i+0x40>)
 800c5b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c5bc:	0800c615 	.word	0x0800c615
 800c5c0:	0800c629 	.word	0x0800c629
 800c5c4:	0800c5a5 	.word	0x0800c5a5
 800c5c8:	0800c5a5 	.word	0x0800c5a5
 800c5cc:	0800c5a5 	.word	0x0800c5a5
 800c5d0:	0800c5a5 	.word	0x0800c5a5
 800c5d4:	0800c629 	.word	0x0800c629
 800c5d8:	0800c5a5 	.word	0x0800c5a5
 800c5dc:	0800c5a5 	.word	0x0800c5a5
 800c5e0:	0800c5a5 	.word	0x0800c5a5
 800c5e4:	0800c5a5 	.word	0x0800c5a5
 800c5e8:	0800c735 	.word	0x0800c735
 800c5ec:	0800c659 	.word	0x0800c659
 800c5f0:	0800c717 	.word	0x0800c717
 800c5f4:	0800c5a5 	.word	0x0800c5a5
 800c5f8:	0800c5a5 	.word	0x0800c5a5
 800c5fc:	0800c757 	.word	0x0800c757
 800c600:	0800c5a5 	.word	0x0800c5a5
 800c604:	0800c659 	.word	0x0800c659
 800c608:	0800c5a5 	.word	0x0800c5a5
 800c60c:	0800c5a5 	.word	0x0800c5a5
 800c610:	0800c71f 	.word	0x0800c71f
 800c614:	682b      	ldr	r3, [r5, #0]
 800c616:	1d1a      	adds	r2, r3, #4
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	602a      	str	r2, [r5, #0]
 800c61c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c620:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c624:	2301      	movs	r3, #1
 800c626:	e0a3      	b.n	800c770 <_printf_i+0x1f4>
 800c628:	6820      	ldr	r0, [r4, #0]
 800c62a:	6829      	ldr	r1, [r5, #0]
 800c62c:	0606      	lsls	r6, r0, #24
 800c62e:	f101 0304 	add.w	r3, r1, #4
 800c632:	d50a      	bpl.n	800c64a <_printf_i+0xce>
 800c634:	680e      	ldr	r6, [r1, #0]
 800c636:	602b      	str	r3, [r5, #0]
 800c638:	2e00      	cmp	r6, #0
 800c63a:	da03      	bge.n	800c644 <_printf_i+0xc8>
 800c63c:	232d      	movs	r3, #45	; 0x2d
 800c63e:	4276      	negs	r6, r6
 800c640:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c644:	485e      	ldr	r0, [pc, #376]	; (800c7c0 <_printf_i+0x244>)
 800c646:	230a      	movs	r3, #10
 800c648:	e019      	b.n	800c67e <_printf_i+0x102>
 800c64a:	680e      	ldr	r6, [r1, #0]
 800c64c:	602b      	str	r3, [r5, #0]
 800c64e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c652:	bf18      	it	ne
 800c654:	b236      	sxthne	r6, r6
 800c656:	e7ef      	b.n	800c638 <_printf_i+0xbc>
 800c658:	682b      	ldr	r3, [r5, #0]
 800c65a:	6820      	ldr	r0, [r4, #0]
 800c65c:	1d19      	adds	r1, r3, #4
 800c65e:	6029      	str	r1, [r5, #0]
 800c660:	0601      	lsls	r1, r0, #24
 800c662:	d501      	bpl.n	800c668 <_printf_i+0xec>
 800c664:	681e      	ldr	r6, [r3, #0]
 800c666:	e002      	b.n	800c66e <_printf_i+0xf2>
 800c668:	0646      	lsls	r6, r0, #25
 800c66a:	d5fb      	bpl.n	800c664 <_printf_i+0xe8>
 800c66c:	881e      	ldrh	r6, [r3, #0]
 800c66e:	4854      	ldr	r0, [pc, #336]	; (800c7c0 <_printf_i+0x244>)
 800c670:	2f6f      	cmp	r7, #111	; 0x6f
 800c672:	bf0c      	ite	eq
 800c674:	2308      	moveq	r3, #8
 800c676:	230a      	movne	r3, #10
 800c678:	2100      	movs	r1, #0
 800c67a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c67e:	6865      	ldr	r5, [r4, #4]
 800c680:	60a5      	str	r5, [r4, #8]
 800c682:	2d00      	cmp	r5, #0
 800c684:	bfa2      	ittt	ge
 800c686:	6821      	ldrge	r1, [r4, #0]
 800c688:	f021 0104 	bicge.w	r1, r1, #4
 800c68c:	6021      	strge	r1, [r4, #0]
 800c68e:	b90e      	cbnz	r6, 800c694 <_printf_i+0x118>
 800c690:	2d00      	cmp	r5, #0
 800c692:	d04d      	beq.n	800c730 <_printf_i+0x1b4>
 800c694:	4615      	mov	r5, r2
 800c696:	fbb6 f1f3 	udiv	r1, r6, r3
 800c69a:	fb03 6711 	mls	r7, r3, r1, r6
 800c69e:	5dc7      	ldrb	r7, [r0, r7]
 800c6a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c6a4:	4637      	mov	r7, r6
 800c6a6:	42bb      	cmp	r3, r7
 800c6a8:	460e      	mov	r6, r1
 800c6aa:	d9f4      	bls.n	800c696 <_printf_i+0x11a>
 800c6ac:	2b08      	cmp	r3, #8
 800c6ae:	d10b      	bne.n	800c6c8 <_printf_i+0x14c>
 800c6b0:	6823      	ldr	r3, [r4, #0]
 800c6b2:	07de      	lsls	r6, r3, #31
 800c6b4:	d508      	bpl.n	800c6c8 <_printf_i+0x14c>
 800c6b6:	6923      	ldr	r3, [r4, #16]
 800c6b8:	6861      	ldr	r1, [r4, #4]
 800c6ba:	4299      	cmp	r1, r3
 800c6bc:	bfde      	ittt	le
 800c6be:	2330      	movle	r3, #48	; 0x30
 800c6c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c6c4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c6c8:	1b52      	subs	r2, r2, r5
 800c6ca:	6122      	str	r2, [r4, #16]
 800c6cc:	f8cd a000 	str.w	sl, [sp]
 800c6d0:	464b      	mov	r3, r9
 800c6d2:	aa03      	add	r2, sp, #12
 800c6d4:	4621      	mov	r1, r4
 800c6d6:	4640      	mov	r0, r8
 800c6d8:	f7ff fee2 	bl	800c4a0 <_printf_common>
 800c6dc:	3001      	adds	r0, #1
 800c6de:	d14c      	bne.n	800c77a <_printf_i+0x1fe>
 800c6e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c6e4:	b004      	add	sp, #16
 800c6e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6ea:	4835      	ldr	r0, [pc, #212]	; (800c7c0 <_printf_i+0x244>)
 800c6ec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c6f0:	6829      	ldr	r1, [r5, #0]
 800c6f2:	6823      	ldr	r3, [r4, #0]
 800c6f4:	f851 6b04 	ldr.w	r6, [r1], #4
 800c6f8:	6029      	str	r1, [r5, #0]
 800c6fa:	061d      	lsls	r5, r3, #24
 800c6fc:	d514      	bpl.n	800c728 <_printf_i+0x1ac>
 800c6fe:	07df      	lsls	r7, r3, #31
 800c700:	bf44      	itt	mi
 800c702:	f043 0320 	orrmi.w	r3, r3, #32
 800c706:	6023      	strmi	r3, [r4, #0]
 800c708:	b91e      	cbnz	r6, 800c712 <_printf_i+0x196>
 800c70a:	6823      	ldr	r3, [r4, #0]
 800c70c:	f023 0320 	bic.w	r3, r3, #32
 800c710:	6023      	str	r3, [r4, #0]
 800c712:	2310      	movs	r3, #16
 800c714:	e7b0      	b.n	800c678 <_printf_i+0xfc>
 800c716:	6823      	ldr	r3, [r4, #0]
 800c718:	f043 0320 	orr.w	r3, r3, #32
 800c71c:	6023      	str	r3, [r4, #0]
 800c71e:	2378      	movs	r3, #120	; 0x78
 800c720:	4828      	ldr	r0, [pc, #160]	; (800c7c4 <_printf_i+0x248>)
 800c722:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c726:	e7e3      	b.n	800c6f0 <_printf_i+0x174>
 800c728:	0659      	lsls	r1, r3, #25
 800c72a:	bf48      	it	mi
 800c72c:	b2b6      	uxthmi	r6, r6
 800c72e:	e7e6      	b.n	800c6fe <_printf_i+0x182>
 800c730:	4615      	mov	r5, r2
 800c732:	e7bb      	b.n	800c6ac <_printf_i+0x130>
 800c734:	682b      	ldr	r3, [r5, #0]
 800c736:	6826      	ldr	r6, [r4, #0]
 800c738:	6961      	ldr	r1, [r4, #20]
 800c73a:	1d18      	adds	r0, r3, #4
 800c73c:	6028      	str	r0, [r5, #0]
 800c73e:	0635      	lsls	r5, r6, #24
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	d501      	bpl.n	800c748 <_printf_i+0x1cc>
 800c744:	6019      	str	r1, [r3, #0]
 800c746:	e002      	b.n	800c74e <_printf_i+0x1d2>
 800c748:	0670      	lsls	r0, r6, #25
 800c74a:	d5fb      	bpl.n	800c744 <_printf_i+0x1c8>
 800c74c:	8019      	strh	r1, [r3, #0]
 800c74e:	2300      	movs	r3, #0
 800c750:	6123      	str	r3, [r4, #16]
 800c752:	4615      	mov	r5, r2
 800c754:	e7ba      	b.n	800c6cc <_printf_i+0x150>
 800c756:	682b      	ldr	r3, [r5, #0]
 800c758:	1d1a      	adds	r2, r3, #4
 800c75a:	602a      	str	r2, [r5, #0]
 800c75c:	681d      	ldr	r5, [r3, #0]
 800c75e:	6862      	ldr	r2, [r4, #4]
 800c760:	2100      	movs	r1, #0
 800c762:	4628      	mov	r0, r5
 800c764:	f7f3 fd3c 	bl	80001e0 <memchr>
 800c768:	b108      	cbz	r0, 800c76e <_printf_i+0x1f2>
 800c76a:	1b40      	subs	r0, r0, r5
 800c76c:	6060      	str	r0, [r4, #4]
 800c76e:	6863      	ldr	r3, [r4, #4]
 800c770:	6123      	str	r3, [r4, #16]
 800c772:	2300      	movs	r3, #0
 800c774:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c778:	e7a8      	b.n	800c6cc <_printf_i+0x150>
 800c77a:	6923      	ldr	r3, [r4, #16]
 800c77c:	462a      	mov	r2, r5
 800c77e:	4649      	mov	r1, r9
 800c780:	4640      	mov	r0, r8
 800c782:	47d0      	blx	sl
 800c784:	3001      	adds	r0, #1
 800c786:	d0ab      	beq.n	800c6e0 <_printf_i+0x164>
 800c788:	6823      	ldr	r3, [r4, #0]
 800c78a:	079b      	lsls	r3, r3, #30
 800c78c:	d413      	bmi.n	800c7b6 <_printf_i+0x23a>
 800c78e:	68e0      	ldr	r0, [r4, #12]
 800c790:	9b03      	ldr	r3, [sp, #12]
 800c792:	4298      	cmp	r0, r3
 800c794:	bfb8      	it	lt
 800c796:	4618      	movlt	r0, r3
 800c798:	e7a4      	b.n	800c6e4 <_printf_i+0x168>
 800c79a:	2301      	movs	r3, #1
 800c79c:	4632      	mov	r2, r6
 800c79e:	4649      	mov	r1, r9
 800c7a0:	4640      	mov	r0, r8
 800c7a2:	47d0      	blx	sl
 800c7a4:	3001      	adds	r0, #1
 800c7a6:	d09b      	beq.n	800c6e0 <_printf_i+0x164>
 800c7a8:	3501      	adds	r5, #1
 800c7aa:	68e3      	ldr	r3, [r4, #12]
 800c7ac:	9903      	ldr	r1, [sp, #12]
 800c7ae:	1a5b      	subs	r3, r3, r1
 800c7b0:	42ab      	cmp	r3, r5
 800c7b2:	dcf2      	bgt.n	800c79a <_printf_i+0x21e>
 800c7b4:	e7eb      	b.n	800c78e <_printf_i+0x212>
 800c7b6:	2500      	movs	r5, #0
 800c7b8:	f104 0619 	add.w	r6, r4, #25
 800c7bc:	e7f5      	b.n	800c7aa <_printf_i+0x22e>
 800c7be:	bf00      	nop
 800c7c0:	0800cbe1 	.word	0x0800cbe1
 800c7c4:	0800cbf2 	.word	0x0800cbf2

0800c7c8 <memmove>:
 800c7c8:	4288      	cmp	r0, r1
 800c7ca:	b510      	push	{r4, lr}
 800c7cc:	eb01 0402 	add.w	r4, r1, r2
 800c7d0:	d902      	bls.n	800c7d8 <memmove+0x10>
 800c7d2:	4284      	cmp	r4, r0
 800c7d4:	4623      	mov	r3, r4
 800c7d6:	d807      	bhi.n	800c7e8 <memmove+0x20>
 800c7d8:	1e43      	subs	r3, r0, #1
 800c7da:	42a1      	cmp	r1, r4
 800c7dc:	d008      	beq.n	800c7f0 <memmove+0x28>
 800c7de:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c7e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c7e6:	e7f8      	b.n	800c7da <memmove+0x12>
 800c7e8:	4402      	add	r2, r0
 800c7ea:	4601      	mov	r1, r0
 800c7ec:	428a      	cmp	r2, r1
 800c7ee:	d100      	bne.n	800c7f2 <memmove+0x2a>
 800c7f0:	bd10      	pop	{r4, pc}
 800c7f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c7f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c7fa:	e7f7      	b.n	800c7ec <memmove+0x24>

0800c7fc <_realloc_r>:
 800c7fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c800:	4680      	mov	r8, r0
 800c802:	4614      	mov	r4, r2
 800c804:	460e      	mov	r6, r1
 800c806:	b921      	cbnz	r1, 800c812 <_realloc_r+0x16>
 800c808:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c80c:	4611      	mov	r1, r2
 800c80e:	f7ff bb55 	b.w	800bebc <_malloc_r>
 800c812:	b92a      	cbnz	r2, 800c820 <_realloc_r+0x24>
 800c814:	f7ff fc9c 	bl	800c150 <_free_r>
 800c818:	4625      	mov	r5, r4
 800c81a:	4628      	mov	r0, r5
 800c81c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c820:	f000 f81b 	bl	800c85a <_malloc_usable_size_r>
 800c824:	4284      	cmp	r4, r0
 800c826:	4607      	mov	r7, r0
 800c828:	d802      	bhi.n	800c830 <_realloc_r+0x34>
 800c82a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c82e:	d812      	bhi.n	800c856 <_realloc_r+0x5a>
 800c830:	4621      	mov	r1, r4
 800c832:	4640      	mov	r0, r8
 800c834:	f7ff fb42 	bl	800bebc <_malloc_r>
 800c838:	4605      	mov	r5, r0
 800c83a:	2800      	cmp	r0, #0
 800c83c:	d0ed      	beq.n	800c81a <_realloc_r+0x1e>
 800c83e:	42bc      	cmp	r4, r7
 800c840:	4622      	mov	r2, r4
 800c842:	4631      	mov	r1, r6
 800c844:	bf28      	it	cs
 800c846:	463a      	movcs	r2, r7
 800c848:	f7ff fb02 	bl	800be50 <memcpy>
 800c84c:	4631      	mov	r1, r6
 800c84e:	4640      	mov	r0, r8
 800c850:	f7ff fc7e 	bl	800c150 <_free_r>
 800c854:	e7e1      	b.n	800c81a <_realloc_r+0x1e>
 800c856:	4635      	mov	r5, r6
 800c858:	e7df      	b.n	800c81a <_realloc_r+0x1e>

0800c85a <_malloc_usable_size_r>:
 800c85a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c85e:	1f18      	subs	r0, r3, #4
 800c860:	2b00      	cmp	r3, #0
 800c862:	bfbc      	itt	lt
 800c864:	580b      	ldrlt	r3, [r1, r0]
 800c866:	18c0      	addlt	r0, r0, r3
 800c868:	4770      	bx	lr
	...

0800c86c <_init>:
 800c86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c86e:	bf00      	nop
 800c870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c872:	bc08      	pop	{r3}
 800c874:	469e      	mov	lr, r3
 800c876:	4770      	bx	lr

0800c878 <_fini>:
 800c878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c87a:	bf00      	nop
 800c87c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c87e:	bc08      	pop	{r3}
 800c880:	469e      	mov	lr, r3
 800c882:	4770      	bx	lr
